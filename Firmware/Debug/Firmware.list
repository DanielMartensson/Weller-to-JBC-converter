
Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4c8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  0800d588  0800d588  0000e588  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da38  0800da38  0000f1dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800da38  0800da38  0000f1dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800da38  0800da38  0000f1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da38  0800da38  0000ea38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800da3c  0800da3c  0000ea3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800da40  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000594  200001e0  0800dc1c  0000f1e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000774  0800dc1c  0000f774  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000f1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028474  00000000  00000000  0000f204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006326  00000000  00000000  00037678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00010bb5  00000000  00000000  0003d99e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b8  00000000  00000000  0004e558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001b14  00000000  00000000  0004fc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aa08  00000000  00000000  00051724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003ef7b  00000000  00000000  0006c12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00079fae  00000000  00000000  000ab0a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00125055  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f24  00000000  00000000  00125098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  00129fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800d570 	.word	0x0800d570

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800d570 	.word	0x0800d570

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__gnu_thumb1_case_uhi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5a09      	ldrh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	@ 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	@ 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	@ 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__aeabi_llsr>:
 8000440:	40d0      	lsrs	r0, r2
 8000442:	000b      	movs	r3, r1
 8000444:	40d1      	lsrs	r1, r2
 8000446:	469c      	mov	ip, r3
 8000448:	3a20      	subs	r2, #32
 800044a:	40d3      	lsrs	r3, r2
 800044c:	4318      	orrs	r0, r3
 800044e:	4252      	negs	r2, r2
 8000450:	4663      	mov	r3, ip
 8000452:	4093      	lsls	r3, r2
 8000454:	4318      	orrs	r0, r3
 8000456:	4770      	bx	lr

08000458 <__aeabi_cdrcmple>:
 8000458:	4684      	mov	ip, r0
 800045a:	0010      	movs	r0, r2
 800045c:	4662      	mov	r2, ip
 800045e:	468c      	mov	ip, r1
 8000460:	0019      	movs	r1, r3
 8000462:	4663      	mov	r3, ip
 8000464:	e000      	b.n	8000468 <__aeabi_cdcmpeq>
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_cdcmpeq>:
 8000468:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800046a:	f001 fed1 	bl	8002210 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	d401      	bmi.n	8000476 <__aeabi_cdcmpeq+0xe>
 8000472:	2100      	movs	r1, #0
 8000474:	42c8      	cmn	r0, r1
 8000476:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000478 <__aeabi_dcmpeq>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 fe11 	bl	80020a0 <__eqdf2>
 800047e:	4240      	negs	r0, r0
 8000480:	3001      	adds	r0, #1
 8000482:	bd10      	pop	{r4, pc}

08000484 <__aeabi_dcmplt>:
 8000484:	b510      	push	{r4, lr}
 8000486:	f001 fec3 	bl	8002210 <__ledf2>
 800048a:	2800      	cmp	r0, #0
 800048c:	db01      	blt.n	8000492 <__aeabi_dcmplt+0xe>
 800048e:	2000      	movs	r0, #0
 8000490:	bd10      	pop	{r4, pc}
 8000492:	2001      	movs	r0, #1
 8000494:	bd10      	pop	{r4, pc}
 8000496:	46c0      	nop			@ (mov r8, r8)

08000498 <__aeabi_dcmple>:
 8000498:	b510      	push	{r4, lr}
 800049a:	f001 feb9 	bl	8002210 <__ledf2>
 800049e:	2800      	cmp	r0, #0
 80004a0:	dd01      	ble.n	80004a6 <__aeabi_dcmple+0xe>
 80004a2:	2000      	movs	r0, #0
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	2001      	movs	r0, #1
 80004a8:	bd10      	pop	{r4, pc}
 80004aa:	46c0      	nop			@ (mov r8, r8)

080004ac <__aeabi_dcmpgt>:
 80004ac:	b510      	push	{r4, lr}
 80004ae:	f001 fe3b 	bl	8002128 <__gedf2>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	dc01      	bgt.n	80004ba <__aeabi_dcmpgt+0xe>
 80004b6:	2000      	movs	r0, #0
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	2001      	movs	r0, #1
 80004bc:	bd10      	pop	{r4, pc}
 80004be:	46c0      	nop			@ (mov r8, r8)

080004c0 <__aeabi_dcmpge>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f001 fe31 	bl	8002128 <__gedf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	da01      	bge.n	80004ce <__aeabi_dcmpge+0xe>
 80004ca:	2000      	movs	r0, #0
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	2001      	movs	r0, #1
 80004d0:	bd10      	pop	{r4, pc}
 80004d2:	46c0      	nop			@ (mov r8, r8)

080004d4 <__aeabi_cfrcmple>:
 80004d4:	4684      	mov	ip, r0
 80004d6:	0008      	movs	r0, r1
 80004d8:	4661      	mov	r1, ip
 80004da:	e7ff      	b.n	80004dc <__aeabi_cfcmpeq>

080004dc <__aeabi_cfcmpeq>:
 80004dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004de:	f000 fb6d 	bl	8000bbc <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	d401      	bmi.n	80004ea <__aeabi_cfcmpeq+0xe>
 80004e6:	2100      	movs	r1, #0
 80004e8:	42c8      	cmn	r0, r1
 80004ea:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004ec <__aeabi_fcmpeq>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 faed 	bl	8000acc <__eqsf2>
 80004f2:	4240      	negs	r0, r0
 80004f4:	3001      	adds	r0, #1
 80004f6:	bd10      	pop	{r4, pc}

080004f8 <__aeabi_fcmplt>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f000 fb5f 	bl	8000bbc <__lesf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	db01      	blt.n	8000506 <__aeabi_fcmplt+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_fcmple>:
 800050c:	b510      	push	{r4, lr}
 800050e:	f000 fb55 	bl	8000bbc <__lesf2>
 8000512:	2800      	cmp	r0, #0
 8000514:	dd01      	ble.n	800051a <__aeabi_fcmple+0xe>
 8000516:	2000      	movs	r0, #0
 8000518:	bd10      	pop	{r4, pc}
 800051a:	2001      	movs	r0, #1
 800051c:	bd10      	pop	{r4, pc}
 800051e:	46c0      	nop			@ (mov r8, r8)

08000520 <__aeabi_fcmpgt>:
 8000520:	b510      	push	{r4, lr}
 8000522:	f000 fafb 	bl	8000b1c <__gesf2>
 8000526:	2800      	cmp	r0, #0
 8000528:	dc01      	bgt.n	800052e <__aeabi_fcmpgt+0xe>
 800052a:	2000      	movs	r0, #0
 800052c:	bd10      	pop	{r4, pc}
 800052e:	2001      	movs	r0, #1
 8000530:	bd10      	pop	{r4, pc}
 8000532:	46c0      	nop			@ (mov r8, r8)

08000534 <__aeabi_fcmpge>:
 8000534:	b510      	push	{r4, lr}
 8000536:	f000 faf1 	bl	8000b1c <__gesf2>
 800053a:	2800      	cmp	r0, #0
 800053c:	da01      	bge.n	8000542 <__aeabi_fcmpge+0xe>
 800053e:	2000      	movs	r0, #0
 8000540:	bd10      	pop	{r4, pc}
 8000542:	2001      	movs	r0, #1
 8000544:	bd10      	pop	{r4, pc}
 8000546:	46c0      	nop			@ (mov r8, r8)

08000548 <__aeabi_f2uiz>:
 8000548:	219e      	movs	r1, #158	@ 0x9e
 800054a:	b510      	push	{r4, lr}
 800054c:	05c9      	lsls	r1, r1, #23
 800054e:	1c04      	adds	r4, r0, #0
 8000550:	f7ff fff0 	bl	8000534 <__aeabi_fcmpge>
 8000554:	2800      	cmp	r0, #0
 8000556:	d103      	bne.n	8000560 <__aeabi_f2uiz+0x18>
 8000558:	1c20      	adds	r0, r4, #0
 800055a:	f000 fe75 	bl	8001248 <__aeabi_f2iz>
 800055e:	bd10      	pop	{r4, pc}
 8000560:	219e      	movs	r1, #158	@ 0x9e
 8000562:	1c20      	adds	r0, r4, #0
 8000564:	05c9      	lsls	r1, r1, #23
 8000566:	f000 fcb5 	bl	8000ed4 <__aeabi_fsub>
 800056a:	f000 fe6d 	bl	8001248 <__aeabi_f2iz>
 800056e:	2380      	movs	r3, #128	@ 0x80
 8000570:	061b      	lsls	r3, r3, #24
 8000572:	469c      	mov	ip, r3
 8000574:	4460      	add	r0, ip
 8000576:	e7f2      	b.n	800055e <__aeabi_f2uiz+0x16>

08000578 <__aeabi_fadd>:
 8000578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800057a:	46ce      	mov	lr, r9
 800057c:	4647      	mov	r7, r8
 800057e:	0243      	lsls	r3, r0, #9
 8000580:	0a5a      	lsrs	r2, r3, #9
 8000582:	024e      	lsls	r6, r1, #9
 8000584:	0045      	lsls	r5, r0, #1
 8000586:	0fc4      	lsrs	r4, r0, #31
 8000588:	0048      	lsls	r0, r1, #1
 800058a:	4691      	mov	r9, r2
 800058c:	0e2d      	lsrs	r5, r5, #24
 800058e:	0a72      	lsrs	r2, r6, #9
 8000590:	0e00      	lsrs	r0, r0, #24
 8000592:	4694      	mov	ip, r2
 8000594:	b580      	push	{r7, lr}
 8000596:	099b      	lsrs	r3, r3, #6
 8000598:	0fc9      	lsrs	r1, r1, #31
 800059a:	09b6      	lsrs	r6, r6, #6
 800059c:	1a2a      	subs	r2, r5, r0
 800059e:	428c      	cmp	r4, r1
 80005a0:	d021      	beq.n	80005e6 <__aeabi_fadd+0x6e>
 80005a2:	2a00      	cmp	r2, #0
 80005a4:	dd0d      	ble.n	80005c2 <__aeabi_fadd+0x4a>
 80005a6:	2800      	cmp	r0, #0
 80005a8:	d12d      	bne.n	8000606 <__aeabi_fadd+0x8e>
 80005aa:	2e00      	cmp	r6, #0
 80005ac:	d100      	bne.n	80005b0 <__aeabi_fadd+0x38>
 80005ae:	e08d      	b.n	80006cc <__aeabi_fadd+0x154>
 80005b0:	1e51      	subs	r1, r2, #1
 80005b2:	2a01      	cmp	r2, #1
 80005b4:	d100      	bne.n	80005b8 <__aeabi_fadd+0x40>
 80005b6:	e11d      	b.n	80007f4 <__aeabi_fadd+0x27c>
 80005b8:	2aff      	cmp	r2, #255	@ 0xff
 80005ba:	d100      	bne.n	80005be <__aeabi_fadd+0x46>
 80005bc:	e0ab      	b.n	8000716 <__aeabi_fadd+0x19e>
 80005be:	000a      	movs	r2, r1
 80005c0:	e027      	b.n	8000612 <__aeabi_fadd+0x9a>
 80005c2:	2a00      	cmp	r2, #0
 80005c4:	d04d      	beq.n	8000662 <__aeabi_fadd+0xea>
 80005c6:	1b42      	subs	r2, r0, r5
 80005c8:	2d00      	cmp	r5, #0
 80005ca:	d000      	beq.n	80005ce <__aeabi_fadd+0x56>
 80005cc:	e0cc      	b.n	8000768 <__aeabi_fadd+0x1f0>
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d100      	bne.n	80005d4 <__aeabi_fadd+0x5c>
 80005d2:	e079      	b.n	80006c8 <__aeabi_fadd+0x150>
 80005d4:	1e54      	subs	r4, r2, #1
 80005d6:	2a01      	cmp	r2, #1
 80005d8:	d100      	bne.n	80005dc <__aeabi_fadd+0x64>
 80005da:	e128      	b.n	800082e <__aeabi_fadd+0x2b6>
 80005dc:	2aff      	cmp	r2, #255	@ 0xff
 80005de:	d100      	bne.n	80005e2 <__aeabi_fadd+0x6a>
 80005e0:	e097      	b.n	8000712 <__aeabi_fadd+0x19a>
 80005e2:	0022      	movs	r2, r4
 80005e4:	e0c5      	b.n	8000772 <__aeabi_fadd+0x1fa>
 80005e6:	2a00      	cmp	r2, #0
 80005e8:	dc00      	bgt.n	80005ec <__aeabi_fadd+0x74>
 80005ea:	e096      	b.n	800071a <__aeabi_fadd+0x1a2>
 80005ec:	2800      	cmp	r0, #0
 80005ee:	d04f      	beq.n	8000690 <__aeabi_fadd+0x118>
 80005f0:	2dff      	cmp	r5, #255	@ 0xff
 80005f2:	d100      	bne.n	80005f6 <__aeabi_fadd+0x7e>
 80005f4:	e08f      	b.n	8000716 <__aeabi_fadd+0x19e>
 80005f6:	2180      	movs	r1, #128	@ 0x80
 80005f8:	04c9      	lsls	r1, r1, #19
 80005fa:	430e      	orrs	r6, r1
 80005fc:	2a1b      	cmp	r2, #27
 80005fe:	dd51      	ble.n	80006a4 <__aeabi_fadd+0x12c>
 8000600:	002a      	movs	r2, r5
 8000602:	3301      	adds	r3, #1
 8000604:	e018      	b.n	8000638 <__aeabi_fadd+0xc0>
 8000606:	2dff      	cmp	r5, #255	@ 0xff
 8000608:	d100      	bne.n	800060c <__aeabi_fadd+0x94>
 800060a:	e084      	b.n	8000716 <__aeabi_fadd+0x19e>
 800060c:	2180      	movs	r1, #128	@ 0x80
 800060e:	04c9      	lsls	r1, r1, #19
 8000610:	430e      	orrs	r6, r1
 8000612:	2101      	movs	r1, #1
 8000614:	2a1b      	cmp	r2, #27
 8000616:	dc08      	bgt.n	800062a <__aeabi_fadd+0xb2>
 8000618:	0031      	movs	r1, r6
 800061a:	2020      	movs	r0, #32
 800061c:	40d1      	lsrs	r1, r2
 800061e:	1a82      	subs	r2, r0, r2
 8000620:	4096      	lsls	r6, r2
 8000622:	0032      	movs	r2, r6
 8000624:	1e50      	subs	r0, r2, #1
 8000626:	4182      	sbcs	r2, r0
 8000628:	4311      	orrs	r1, r2
 800062a:	1a5b      	subs	r3, r3, r1
 800062c:	015a      	lsls	r2, r3, #5
 800062e:	d459      	bmi.n	80006e4 <__aeabi_fadd+0x16c>
 8000630:	2107      	movs	r1, #7
 8000632:	002a      	movs	r2, r5
 8000634:	4019      	ands	r1, r3
 8000636:	d049      	beq.n	80006cc <__aeabi_fadd+0x154>
 8000638:	210f      	movs	r1, #15
 800063a:	4019      	ands	r1, r3
 800063c:	2904      	cmp	r1, #4
 800063e:	d000      	beq.n	8000642 <__aeabi_fadd+0xca>
 8000640:	3304      	adds	r3, #4
 8000642:	0159      	lsls	r1, r3, #5
 8000644:	d542      	bpl.n	80006cc <__aeabi_fadd+0x154>
 8000646:	1c50      	adds	r0, r2, #1
 8000648:	2afe      	cmp	r2, #254	@ 0xfe
 800064a:	d03a      	beq.n	80006c2 <__aeabi_fadd+0x14a>
 800064c:	019b      	lsls	r3, r3, #6
 800064e:	b2c0      	uxtb	r0, r0
 8000650:	0a5b      	lsrs	r3, r3, #9
 8000652:	05c0      	lsls	r0, r0, #23
 8000654:	4318      	orrs	r0, r3
 8000656:	07e4      	lsls	r4, r4, #31
 8000658:	4320      	orrs	r0, r4
 800065a:	bcc0      	pop	{r6, r7}
 800065c:	46b9      	mov	r9, r7
 800065e:	46b0      	mov	r8, r6
 8000660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000662:	20fe      	movs	r0, #254	@ 0xfe
 8000664:	4680      	mov	r8, r0
 8000666:	1c6f      	adds	r7, r5, #1
 8000668:	0038      	movs	r0, r7
 800066a:	4647      	mov	r7, r8
 800066c:	4207      	tst	r7, r0
 800066e:	d000      	beq.n	8000672 <__aeabi_fadd+0xfa>
 8000670:	e08e      	b.n	8000790 <__aeabi_fadd+0x218>
 8000672:	2d00      	cmp	r5, #0
 8000674:	d000      	beq.n	8000678 <__aeabi_fadd+0x100>
 8000676:	e0b4      	b.n	80007e2 <__aeabi_fadd+0x26a>
 8000678:	2b00      	cmp	r3, #0
 800067a:	d100      	bne.n	800067e <__aeabi_fadd+0x106>
 800067c:	e0db      	b.n	8000836 <__aeabi_fadd+0x2be>
 800067e:	2e00      	cmp	r6, #0
 8000680:	d06c      	beq.n	800075c <__aeabi_fadd+0x1e4>
 8000682:	1b98      	subs	r0, r3, r6
 8000684:	0145      	lsls	r5, r0, #5
 8000686:	d400      	bmi.n	800068a <__aeabi_fadd+0x112>
 8000688:	e0f7      	b.n	800087a <__aeabi_fadd+0x302>
 800068a:	000c      	movs	r4, r1
 800068c:	1af3      	subs	r3, r6, r3
 800068e:	e03d      	b.n	800070c <__aeabi_fadd+0x194>
 8000690:	2e00      	cmp	r6, #0
 8000692:	d01b      	beq.n	80006cc <__aeabi_fadd+0x154>
 8000694:	1e51      	subs	r1, r2, #1
 8000696:	2a01      	cmp	r2, #1
 8000698:	d100      	bne.n	800069c <__aeabi_fadd+0x124>
 800069a:	e082      	b.n	80007a2 <__aeabi_fadd+0x22a>
 800069c:	2aff      	cmp	r2, #255	@ 0xff
 800069e:	d03a      	beq.n	8000716 <__aeabi_fadd+0x19e>
 80006a0:	000a      	movs	r2, r1
 80006a2:	e7ab      	b.n	80005fc <__aeabi_fadd+0x84>
 80006a4:	0031      	movs	r1, r6
 80006a6:	2020      	movs	r0, #32
 80006a8:	40d1      	lsrs	r1, r2
 80006aa:	1a82      	subs	r2, r0, r2
 80006ac:	4096      	lsls	r6, r2
 80006ae:	0032      	movs	r2, r6
 80006b0:	1e50      	subs	r0, r2, #1
 80006b2:	4182      	sbcs	r2, r0
 80006b4:	430a      	orrs	r2, r1
 80006b6:	189b      	adds	r3, r3, r2
 80006b8:	015a      	lsls	r2, r3, #5
 80006ba:	d5b9      	bpl.n	8000630 <__aeabi_fadd+0xb8>
 80006bc:	1c6a      	adds	r2, r5, #1
 80006be:	2dfe      	cmp	r5, #254	@ 0xfe
 80006c0:	d175      	bne.n	80007ae <__aeabi_fadd+0x236>
 80006c2:	20ff      	movs	r0, #255	@ 0xff
 80006c4:	2300      	movs	r3, #0
 80006c6:	e7c4      	b.n	8000652 <__aeabi_fadd+0xda>
 80006c8:	000c      	movs	r4, r1
 80006ca:	0033      	movs	r3, r6
 80006cc:	08db      	lsrs	r3, r3, #3
 80006ce:	2aff      	cmp	r2, #255	@ 0xff
 80006d0:	d146      	bne.n	8000760 <__aeabi_fadd+0x1e8>
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d0f5      	beq.n	80006c2 <__aeabi_fadd+0x14a>
 80006d6:	2280      	movs	r2, #128	@ 0x80
 80006d8:	03d2      	lsls	r2, r2, #15
 80006da:	4313      	orrs	r3, r2
 80006dc:	025b      	lsls	r3, r3, #9
 80006de:	20ff      	movs	r0, #255	@ 0xff
 80006e0:	0a5b      	lsrs	r3, r3, #9
 80006e2:	e7b6      	b.n	8000652 <__aeabi_fadd+0xda>
 80006e4:	019f      	lsls	r7, r3, #6
 80006e6:	09bf      	lsrs	r7, r7, #6
 80006e8:	0038      	movs	r0, r7
 80006ea:	f002 fd17 	bl	800311c <__clzsi2>
 80006ee:	3805      	subs	r0, #5
 80006f0:	4087      	lsls	r7, r0
 80006f2:	4285      	cmp	r5, r0
 80006f4:	dc24      	bgt.n	8000740 <__aeabi_fadd+0x1c8>
 80006f6:	003b      	movs	r3, r7
 80006f8:	2120      	movs	r1, #32
 80006fa:	1b42      	subs	r2, r0, r5
 80006fc:	3201      	adds	r2, #1
 80006fe:	40d3      	lsrs	r3, r2
 8000700:	1a8a      	subs	r2, r1, r2
 8000702:	4097      	lsls	r7, r2
 8000704:	1e7a      	subs	r2, r7, #1
 8000706:	4197      	sbcs	r7, r2
 8000708:	2200      	movs	r2, #0
 800070a:	433b      	orrs	r3, r7
 800070c:	0759      	lsls	r1, r3, #29
 800070e:	d193      	bne.n	8000638 <__aeabi_fadd+0xc0>
 8000710:	e797      	b.n	8000642 <__aeabi_fadd+0xca>
 8000712:	000c      	movs	r4, r1
 8000714:	0033      	movs	r3, r6
 8000716:	08db      	lsrs	r3, r3, #3
 8000718:	e7db      	b.n	80006d2 <__aeabi_fadd+0x15a>
 800071a:	2a00      	cmp	r2, #0
 800071c:	d014      	beq.n	8000748 <__aeabi_fadd+0x1d0>
 800071e:	1b42      	subs	r2, r0, r5
 8000720:	2d00      	cmp	r5, #0
 8000722:	d14b      	bne.n	80007bc <__aeabi_fadd+0x244>
 8000724:	2b00      	cmp	r3, #0
 8000726:	d0d0      	beq.n	80006ca <__aeabi_fadd+0x152>
 8000728:	1e51      	subs	r1, r2, #1
 800072a:	2a01      	cmp	r2, #1
 800072c:	d100      	bne.n	8000730 <__aeabi_fadd+0x1b8>
 800072e:	e09e      	b.n	800086e <__aeabi_fadd+0x2f6>
 8000730:	2aff      	cmp	r2, #255	@ 0xff
 8000732:	d0ef      	beq.n	8000714 <__aeabi_fadd+0x19c>
 8000734:	000a      	movs	r2, r1
 8000736:	2a1b      	cmp	r2, #27
 8000738:	dd5f      	ble.n	80007fa <__aeabi_fadd+0x282>
 800073a:	0002      	movs	r2, r0
 800073c:	1c73      	adds	r3, r6, #1
 800073e:	e77b      	b.n	8000638 <__aeabi_fadd+0xc0>
 8000740:	4b50      	ldr	r3, [pc, #320]	@ (8000884 <__aeabi_fadd+0x30c>)
 8000742:	1a2a      	subs	r2, r5, r0
 8000744:	403b      	ands	r3, r7
 8000746:	e7e1      	b.n	800070c <__aeabi_fadd+0x194>
 8000748:	21fe      	movs	r1, #254	@ 0xfe
 800074a:	1c6a      	adds	r2, r5, #1
 800074c:	4211      	tst	r1, r2
 800074e:	d13b      	bne.n	80007c8 <__aeabi_fadd+0x250>
 8000750:	2d00      	cmp	r5, #0
 8000752:	d15d      	bne.n	8000810 <__aeabi_fadd+0x298>
 8000754:	2b00      	cmp	r3, #0
 8000756:	d07f      	beq.n	8000858 <__aeabi_fadd+0x2e0>
 8000758:	2e00      	cmp	r6, #0
 800075a:	d17f      	bne.n	800085c <__aeabi_fadd+0x2e4>
 800075c:	2200      	movs	r2, #0
 800075e:	08db      	lsrs	r3, r3, #3
 8000760:	025b      	lsls	r3, r3, #9
 8000762:	0a5b      	lsrs	r3, r3, #9
 8000764:	b2d0      	uxtb	r0, r2
 8000766:	e774      	b.n	8000652 <__aeabi_fadd+0xda>
 8000768:	28ff      	cmp	r0, #255	@ 0xff
 800076a:	d0d2      	beq.n	8000712 <__aeabi_fadd+0x19a>
 800076c:	2480      	movs	r4, #128	@ 0x80
 800076e:	04e4      	lsls	r4, r4, #19
 8000770:	4323      	orrs	r3, r4
 8000772:	2401      	movs	r4, #1
 8000774:	2a1b      	cmp	r2, #27
 8000776:	dc07      	bgt.n	8000788 <__aeabi_fadd+0x210>
 8000778:	001c      	movs	r4, r3
 800077a:	2520      	movs	r5, #32
 800077c:	40d4      	lsrs	r4, r2
 800077e:	1aaa      	subs	r2, r5, r2
 8000780:	4093      	lsls	r3, r2
 8000782:	1e5a      	subs	r2, r3, #1
 8000784:	4193      	sbcs	r3, r2
 8000786:	431c      	orrs	r4, r3
 8000788:	1b33      	subs	r3, r6, r4
 800078a:	0005      	movs	r5, r0
 800078c:	000c      	movs	r4, r1
 800078e:	e74d      	b.n	800062c <__aeabi_fadd+0xb4>
 8000790:	1b9f      	subs	r7, r3, r6
 8000792:	017a      	lsls	r2, r7, #5
 8000794:	d422      	bmi.n	80007dc <__aeabi_fadd+0x264>
 8000796:	2f00      	cmp	r7, #0
 8000798:	d1a6      	bne.n	80006e8 <__aeabi_fadd+0x170>
 800079a:	2400      	movs	r4, #0
 800079c:	2000      	movs	r0, #0
 800079e:	2300      	movs	r3, #0
 80007a0:	e757      	b.n	8000652 <__aeabi_fadd+0xda>
 80007a2:	199b      	adds	r3, r3, r6
 80007a4:	2501      	movs	r5, #1
 80007a6:	3201      	adds	r2, #1
 80007a8:	0159      	lsls	r1, r3, #5
 80007aa:	d400      	bmi.n	80007ae <__aeabi_fadd+0x236>
 80007ac:	e740      	b.n	8000630 <__aeabi_fadd+0xb8>
 80007ae:	2101      	movs	r1, #1
 80007b0:	4835      	ldr	r0, [pc, #212]	@ (8000888 <__aeabi_fadd+0x310>)
 80007b2:	4019      	ands	r1, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	4003      	ands	r3, r0
 80007b8:	430b      	orrs	r3, r1
 80007ba:	e7a7      	b.n	800070c <__aeabi_fadd+0x194>
 80007bc:	28ff      	cmp	r0, #255	@ 0xff
 80007be:	d0a9      	beq.n	8000714 <__aeabi_fadd+0x19c>
 80007c0:	2180      	movs	r1, #128	@ 0x80
 80007c2:	04c9      	lsls	r1, r1, #19
 80007c4:	430b      	orrs	r3, r1
 80007c6:	e7b6      	b.n	8000736 <__aeabi_fadd+0x1be>
 80007c8:	2aff      	cmp	r2, #255	@ 0xff
 80007ca:	d100      	bne.n	80007ce <__aeabi_fadd+0x256>
 80007cc:	e779      	b.n	80006c2 <__aeabi_fadd+0x14a>
 80007ce:	199b      	adds	r3, r3, r6
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	0759      	lsls	r1, r3, #29
 80007d4:	d000      	beq.n	80007d8 <__aeabi_fadd+0x260>
 80007d6:	e72f      	b.n	8000638 <__aeabi_fadd+0xc0>
 80007d8:	08db      	lsrs	r3, r3, #3
 80007da:	e7c1      	b.n	8000760 <__aeabi_fadd+0x1e8>
 80007dc:	000c      	movs	r4, r1
 80007de:	1af7      	subs	r7, r6, r3
 80007e0:	e782      	b.n	80006e8 <__aeabi_fadd+0x170>
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d12c      	bne.n	8000840 <__aeabi_fadd+0x2c8>
 80007e6:	2e00      	cmp	r6, #0
 80007e8:	d193      	bne.n	8000712 <__aeabi_fadd+0x19a>
 80007ea:	2380      	movs	r3, #128	@ 0x80
 80007ec:	2400      	movs	r4, #0
 80007ee:	20ff      	movs	r0, #255	@ 0xff
 80007f0:	03db      	lsls	r3, r3, #15
 80007f2:	e72e      	b.n	8000652 <__aeabi_fadd+0xda>
 80007f4:	2501      	movs	r5, #1
 80007f6:	1b9b      	subs	r3, r3, r6
 80007f8:	e718      	b.n	800062c <__aeabi_fadd+0xb4>
 80007fa:	0019      	movs	r1, r3
 80007fc:	2520      	movs	r5, #32
 80007fe:	40d1      	lsrs	r1, r2
 8000800:	1aaa      	subs	r2, r5, r2
 8000802:	4093      	lsls	r3, r2
 8000804:	1e5a      	subs	r2, r3, #1
 8000806:	4193      	sbcs	r3, r2
 8000808:	430b      	orrs	r3, r1
 800080a:	0005      	movs	r5, r0
 800080c:	199b      	adds	r3, r3, r6
 800080e:	e753      	b.n	80006b8 <__aeabi_fadd+0x140>
 8000810:	2b00      	cmp	r3, #0
 8000812:	d100      	bne.n	8000816 <__aeabi_fadd+0x29e>
 8000814:	e77e      	b.n	8000714 <__aeabi_fadd+0x19c>
 8000816:	2e00      	cmp	r6, #0
 8000818:	d100      	bne.n	800081c <__aeabi_fadd+0x2a4>
 800081a:	e77c      	b.n	8000716 <__aeabi_fadd+0x19e>
 800081c:	2280      	movs	r2, #128	@ 0x80
 800081e:	03d2      	lsls	r2, r2, #15
 8000820:	4591      	cmp	r9, r2
 8000822:	d302      	bcc.n	800082a <__aeabi_fadd+0x2b2>
 8000824:	4594      	cmp	ip, r2
 8000826:	d200      	bcs.n	800082a <__aeabi_fadd+0x2b2>
 8000828:	0033      	movs	r3, r6
 800082a:	08db      	lsrs	r3, r3, #3
 800082c:	e753      	b.n	80006d6 <__aeabi_fadd+0x15e>
 800082e:	000c      	movs	r4, r1
 8000830:	1af3      	subs	r3, r6, r3
 8000832:	3501      	adds	r5, #1
 8000834:	e6fa      	b.n	800062c <__aeabi_fadd+0xb4>
 8000836:	2e00      	cmp	r6, #0
 8000838:	d0af      	beq.n	800079a <__aeabi_fadd+0x222>
 800083a:	000c      	movs	r4, r1
 800083c:	0033      	movs	r3, r6
 800083e:	e78d      	b.n	800075c <__aeabi_fadd+0x1e4>
 8000840:	2e00      	cmp	r6, #0
 8000842:	d100      	bne.n	8000846 <__aeabi_fadd+0x2ce>
 8000844:	e767      	b.n	8000716 <__aeabi_fadd+0x19e>
 8000846:	2280      	movs	r2, #128	@ 0x80
 8000848:	03d2      	lsls	r2, r2, #15
 800084a:	4591      	cmp	r9, r2
 800084c:	d3ed      	bcc.n	800082a <__aeabi_fadd+0x2b2>
 800084e:	4594      	cmp	ip, r2
 8000850:	d2eb      	bcs.n	800082a <__aeabi_fadd+0x2b2>
 8000852:	000c      	movs	r4, r1
 8000854:	0033      	movs	r3, r6
 8000856:	e7e8      	b.n	800082a <__aeabi_fadd+0x2b2>
 8000858:	0033      	movs	r3, r6
 800085a:	e77f      	b.n	800075c <__aeabi_fadd+0x1e4>
 800085c:	199b      	adds	r3, r3, r6
 800085e:	2200      	movs	r2, #0
 8000860:	0159      	lsls	r1, r3, #5
 8000862:	d5b9      	bpl.n	80007d8 <__aeabi_fadd+0x260>
 8000864:	4a07      	ldr	r2, [pc, #28]	@ (8000884 <__aeabi_fadd+0x30c>)
 8000866:	4013      	ands	r3, r2
 8000868:	08db      	lsrs	r3, r3, #3
 800086a:	2201      	movs	r2, #1
 800086c:	e778      	b.n	8000760 <__aeabi_fadd+0x1e8>
 800086e:	199b      	adds	r3, r3, r6
 8000870:	3201      	adds	r2, #1
 8000872:	3501      	adds	r5, #1
 8000874:	0159      	lsls	r1, r3, #5
 8000876:	d49a      	bmi.n	80007ae <__aeabi_fadd+0x236>
 8000878:	e6da      	b.n	8000630 <__aeabi_fadd+0xb8>
 800087a:	1e03      	subs	r3, r0, #0
 800087c:	d08d      	beq.n	800079a <__aeabi_fadd+0x222>
 800087e:	08db      	lsrs	r3, r3, #3
 8000880:	e76e      	b.n	8000760 <__aeabi_fadd+0x1e8>
 8000882:	46c0      	nop			@ (mov r8, r8)
 8000884:	fbffffff 	.word	0xfbffffff
 8000888:	7dffffff 	.word	0x7dffffff

0800088c <__aeabi_fdiv>:
 800088c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800088e:	464f      	mov	r7, r9
 8000890:	4646      	mov	r6, r8
 8000892:	46d6      	mov	lr, sl
 8000894:	0244      	lsls	r4, r0, #9
 8000896:	b5c0      	push	{r6, r7, lr}
 8000898:	0047      	lsls	r7, r0, #1
 800089a:	1c0e      	adds	r6, r1, #0
 800089c:	0a64      	lsrs	r4, r4, #9
 800089e:	0e3f      	lsrs	r7, r7, #24
 80008a0:	0fc5      	lsrs	r5, r0, #31
 80008a2:	2f00      	cmp	r7, #0
 80008a4:	d03c      	beq.n	8000920 <__aeabi_fdiv+0x94>
 80008a6:	2fff      	cmp	r7, #255	@ 0xff
 80008a8:	d042      	beq.n	8000930 <__aeabi_fdiv+0xa4>
 80008aa:	2300      	movs	r3, #0
 80008ac:	2280      	movs	r2, #128	@ 0x80
 80008ae:	4699      	mov	r9, r3
 80008b0:	469a      	mov	sl, r3
 80008b2:	00e4      	lsls	r4, r4, #3
 80008b4:	04d2      	lsls	r2, r2, #19
 80008b6:	4314      	orrs	r4, r2
 80008b8:	3f7f      	subs	r7, #127	@ 0x7f
 80008ba:	0273      	lsls	r3, r6, #9
 80008bc:	0a5b      	lsrs	r3, r3, #9
 80008be:	4698      	mov	r8, r3
 80008c0:	0073      	lsls	r3, r6, #1
 80008c2:	0e1b      	lsrs	r3, r3, #24
 80008c4:	0ff6      	lsrs	r6, r6, #31
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d01b      	beq.n	8000902 <__aeabi_fdiv+0x76>
 80008ca:	2bff      	cmp	r3, #255	@ 0xff
 80008cc:	d013      	beq.n	80008f6 <__aeabi_fdiv+0x6a>
 80008ce:	4642      	mov	r2, r8
 80008d0:	2180      	movs	r1, #128	@ 0x80
 80008d2:	00d2      	lsls	r2, r2, #3
 80008d4:	04c9      	lsls	r1, r1, #19
 80008d6:	4311      	orrs	r1, r2
 80008d8:	4688      	mov	r8, r1
 80008da:	2000      	movs	r0, #0
 80008dc:	3b7f      	subs	r3, #127	@ 0x7f
 80008de:	0029      	movs	r1, r5
 80008e0:	1aff      	subs	r7, r7, r3
 80008e2:	464b      	mov	r3, r9
 80008e4:	4071      	eors	r1, r6
 80008e6:	b2c9      	uxtb	r1, r1
 80008e8:	2b0f      	cmp	r3, #15
 80008ea:	d900      	bls.n	80008ee <__aeabi_fdiv+0x62>
 80008ec:	e0b5      	b.n	8000a5a <__aeabi_fdiv+0x1ce>
 80008ee:	4a74      	ldr	r2, [pc, #464]	@ (8000ac0 <__aeabi_fdiv+0x234>)
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	58d3      	ldr	r3, [r2, r3]
 80008f4:	469f      	mov	pc, r3
 80008f6:	4643      	mov	r3, r8
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d13f      	bne.n	800097c <__aeabi_fdiv+0xf0>
 80008fc:	3fff      	subs	r7, #255	@ 0xff
 80008fe:	3302      	adds	r3, #2
 8000900:	e003      	b.n	800090a <__aeabi_fdiv+0x7e>
 8000902:	4643      	mov	r3, r8
 8000904:	2b00      	cmp	r3, #0
 8000906:	d12d      	bne.n	8000964 <__aeabi_fdiv+0xd8>
 8000908:	2301      	movs	r3, #1
 800090a:	0029      	movs	r1, r5
 800090c:	464a      	mov	r2, r9
 800090e:	4071      	eors	r1, r6
 8000910:	b2c9      	uxtb	r1, r1
 8000912:	431a      	orrs	r2, r3
 8000914:	2a0e      	cmp	r2, #14
 8000916:	d838      	bhi.n	800098a <__aeabi_fdiv+0xfe>
 8000918:	486a      	ldr	r0, [pc, #424]	@ (8000ac4 <__aeabi_fdiv+0x238>)
 800091a:	0092      	lsls	r2, r2, #2
 800091c:	5882      	ldr	r2, [r0, r2]
 800091e:	4697      	mov	pc, r2
 8000920:	2c00      	cmp	r4, #0
 8000922:	d113      	bne.n	800094c <__aeabi_fdiv+0xc0>
 8000924:	2304      	movs	r3, #4
 8000926:	4699      	mov	r9, r3
 8000928:	3b03      	subs	r3, #3
 800092a:	2700      	movs	r7, #0
 800092c:	469a      	mov	sl, r3
 800092e:	e7c4      	b.n	80008ba <__aeabi_fdiv+0x2e>
 8000930:	2c00      	cmp	r4, #0
 8000932:	d105      	bne.n	8000940 <__aeabi_fdiv+0xb4>
 8000934:	2308      	movs	r3, #8
 8000936:	4699      	mov	r9, r3
 8000938:	3b06      	subs	r3, #6
 800093a:	27ff      	movs	r7, #255	@ 0xff
 800093c:	469a      	mov	sl, r3
 800093e:	e7bc      	b.n	80008ba <__aeabi_fdiv+0x2e>
 8000940:	230c      	movs	r3, #12
 8000942:	4699      	mov	r9, r3
 8000944:	3b09      	subs	r3, #9
 8000946:	27ff      	movs	r7, #255	@ 0xff
 8000948:	469a      	mov	sl, r3
 800094a:	e7b6      	b.n	80008ba <__aeabi_fdiv+0x2e>
 800094c:	0020      	movs	r0, r4
 800094e:	f002 fbe5 	bl	800311c <__clzsi2>
 8000952:	2776      	movs	r7, #118	@ 0x76
 8000954:	1f43      	subs	r3, r0, #5
 8000956:	409c      	lsls	r4, r3
 8000958:	2300      	movs	r3, #0
 800095a:	427f      	negs	r7, r7
 800095c:	4699      	mov	r9, r3
 800095e:	469a      	mov	sl, r3
 8000960:	1a3f      	subs	r7, r7, r0
 8000962:	e7aa      	b.n	80008ba <__aeabi_fdiv+0x2e>
 8000964:	4640      	mov	r0, r8
 8000966:	f002 fbd9 	bl	800311c <__clzsi2>
 800096a:	4642      	mov	r2, r8
 800096c:	1f43      	subs	r3, r0, #5
 800096e:	409a      	lsls	r2, r3
 8000970:	2376      	movs	r3, #118	@ 0x76
 8000972:	425b      	negs	r3, r3
 8000974:	1a1b      	subs	r3, r3, r0
 8000976:	4690      	mov	r8, r2
 8000978:	2000      	movs	r0, #0
 800097a:	e7b0      	b.n	80008de <__aeabi_fdiv+0x52>
 800097c:	2303      	movs	r3, #3
 800097e:	464a      	mov	r2, r9
 8000980:	431a      	orrs	r2, r3
 8000982:	4691      	mov	r9, r2
 8000984:	2003      	movs	r0, #3
 8000986:	33fc      	adds	r3, #252	@ 0xfc
 8000988:	e7a9      	b.n	80008de <__aeabi_fdiv+0x52>
 800098a:	000d      	movs	r5, r1
 800098c:	20ff      	movs	r0, #255	@ 0xff
 800098e:	2200      	movs	r2, #0
 8000990:	05c0      	lsls	r0, r0, #23
 8000992:	07ed      	lsls	r5, r5, #31
 8000994:	4310      	orrs	r0, r2
 8000996:	4328      	orrs	r0, r5
 8000998:	bce0      	pop	{r5, r6, r7}
 800099a:	46ba      	mov	sl, r7
 800099c:	46b1      	mov	r9, r6
 800099e:	46a8      	mov	r8, r5
 80009a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009a2:	000d      	movs	r5, r1
 80009a4:	2000      	movs	r0, #0
 80009a6:	2200      	movs	r2, #0
 80009a8:	e7f2      	b.n	8000990 <__aeabi_fdiv+0x104>
 80009aa:	4653      	mov	r3, sl
 80009ac:	2b02      	cmp	r3, #2
 80009ae:	d0ed      	beq.n	800098c <__aeabi_fdiv+0x100>
 80009b0:	2b03      	cmp	r3, #3
 80009b2:	d033      	beq.n	8000a1c <__aeabi_fdiv+0x190>
 80009b4:	46a0      	mov	r8, r4
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d105      	bne.n	80009c6 <__aeabi_fdiv+0x13a>
 80009ba:	2000      	movs	r0, #0
 80009bc:	2200      	movs	r2, #0
 80009be:	e7e7      	b.n	8000990 <__aeabi_fdiv+0x104>
 80009c0:	0035      	movs	r5, r6
 80009c2:	2803      	cmp	r0, #3
 80009c4:	d07a      	beq.n	8000abc <__aeabi_fdiv+0x230>
 80009c6:	003b      	movs	r3, r7
 80009c8:	337f      	adds	r3, #127	@ 0x7f
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	dd2d      	ble.n	8000a2a <__aeabi_fdiv+0x19e>
 80009ce:	4642      	mov	r2, r8
 80009d0:	0752      	lsls	r2, r2, #29
 80009d2:	d007      	beq.n	80009e4 <__aeabi_fdiv+0x158>
 80009d4:	220f      	movs	r2, #15
 80009d6:	4641      	mov	r1, r8
 80009d8:	400a      	ands	r2, r1
 80009da:	2a04      	cmp	r2, #4
 80009dc:	d002      	beq.n	80009e4 <__aeabi_fdiv+0x158>
 80009de:	2204      	movs	r2, #4
 80009e0:	4694      	mov	ip, r2
 80009e2:	44e0      	add	r8, ip
 80009e4:	4642      	mov	r2, r8
 80009e6:	0112      	lsls	r2, r2, #4
 80009e8:	d505      	bpl.n	80009f6 <__aeabi_fdiv+0x16a>
 80009ea:	4642      	mov	r2, r8
 80009ec:	4b36      	ldr	r3, [pc, #216]	@ (8000ac8 <__aeabi_fdiv+0x23c>)
 80009ee:	401a      	ands	r2, r3
 80009f0:	003b      	movs	r3, r7
 80009f2:	4690      	mov	r8, r2
 80009f4:	3380      	adds	r3, #128	@ 0x80
 80009f6:	2bfe      	cmp	r3, #254	@ 0xfe
 80009f8:	dcc8      	bgt.n	800098c <__aeabi_fdiv+0x100>
 80009fa:	4642      	mov	r2, r8
 80009fc:	0192      	lsls	r2, r2, #6
 80009fe:	0a52      	lsrs	r2, r2, #9
 8000a00:	b2d8      	uxtb	r0, r3
 8000a02:	e7c5      	b.n	8000990 <__aeabi_fdiv+0x104>
 8000a04:	2280      	movs	r2, #128	@ 0x80
 8000a06:	2500      	movs	r5, #0
 8000a08:	20ff      	movs	r0, #255	@ 0xff
 8000a0a:	03d2      	lsls	r2, r2, #15
 8000a0c:	e7c0      	b.n	8000990 <__aeabi_fdiv+0x104>
 8000a0e:	2280      	movs	r2, #128	@ 0x80
 8000a10:	03d2      	lsls	r2, r2, #15
 8000a12:	4214      	tst	r4, r2
 8000a14:	d002      	beq.n	8000a1c <__aeabi_fdiv+0x190>
 8000a16:	4643      	mov	r3, r8
 8000a18:	4213      	tst	r3, r2
 8000a1a:	d049      	beq.n	8000ab0 <__aeabi_fdiv+0x224>
 8000a1c:	2280      	movs	r2, #128	@ 0x80
 8000a1e:	03d2      	lsls	r2, r2, #15
 8000a20:	4322      	orrs	r2, r4
 8000a22:	0252      	lsls	r2, r2, #9
 8000a24:	20ff      	movs	r0, #255	@ 0xff
 8000a26:	0a52      	lsrs	r2, r2, #9
 8000a28:	e7b2      	b.n	8000990 <__aeabi_fdiv+0x104>
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	2b1b      	cmp	r3, #27
 8000a30:	dcc3      	bgt.n	80009ba <__aeabi_fdiv+0x12e>
 8000a32:	4642      	mov	r2, r8
 8000a34:	40da      	lsrs	r2, r3
 8000a36:	4643      	mov	r3, r8
 8000a38:	379e      	adds	r7, #158	@ 0x9e
 8000a3a:	40bb      	lsls	r3, r7
 8000a3c:	1e59      	subs	r1, r3, #1
 8000a3e:	418b      	sbcs	r3, r1
 8000a40:	431a      	orrs	r2, r3
 8000a42:	0753      	lsls	r3, r2, #29
 8000a44:	d004      	beq.n	8000a50 <__aeabi_fdiv+0x1c4>
 8000a46:	230f      	movs	r3, #15
 8000a48:	4013      	ands	r3, r2
 8000a4a:	2b04      	cmp	r3, #4
 8000a4c:	d000      	beq.n	8000a50 <__aeabi_fdiv+0x1c4>
 8000a4e:	3204      	adds	r2, #4
 8000a50:	0153      	lsls	r3, r2, #5
 8000a52:	d529      	bpl.n	8000aa8 <__aeabi_fdiv+0x21c>
 8000a54:	2001      	movs	r0, #1
 8000a56:	2200      	movs	r2, #0
 8000a58:	e79a      	b.n	8000990 <__aeabi_fdiv+0x104>
 8000a5a:	4642      	mov	r2, r8
 8000a5c:	0163      	lsls	r3, r4, #5
 8000a5e:	0155      	lsls	r5, r2, #5
 8000a60:	42ab      	cmp	r3, r5
 8000a62:	d215      	bcs.n	8000a90 <__aeabi_fdiv+0x204>
 8000a64:	201b      	movs	r0, #27
 8000a66:	2200      	movs	r2, #0
 8000a68:	3f01      	subs	r7, #1
 8000a6a:	2601      	movs	r6, #1
 8000a6c:	001c      	movs	r4, r3
 8000a6e:	0052      	lsls	r2, r2, #1
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	2c00      	cmp	r4, #0
 8000a74:	db01      	blt.n	8000a7a <__aeabi_fdiv+0x1ee>
 8000a76:	429d      	cmp	r5, r3
 8000a78:	d801      	bhi.n	8000a7e <__aeabi_fdiv+0x1f2>
 8000a7a:	1b5b      	subs	r3, r3, r5
 8000a7c:	4332      	orrs	r2, r6
 8000a7e:	3801      	subs	r0, #1
 8000a80:	2800      	cmp	r0, #0
 8000a82:	d1f3      	bne.n	8000a6c <__aeabi_fdiv+0x1e0>
 8000a84:	1e58      	subs	r0, r3, #1
 8000a86:	4183      	sbcs	r3, r0
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	4698      	mov	r8, r3
 8000a8c:	000d      	movs	r5, r1
 8000a8e:	e79a      	b.n	80009c6 <__aeabi_fdiv+0x13a>
 8000a90:	201a      	movs	r0, #26
 8000a92:	2201      	movs	r2, #1
 8000a94:	1b5b      	subs	r3, r3, r5
 8000a96:	e7e8      	b.n	8000a6a <__aeabi_fdiv+0x1de>
 8000a98:	3b02      	subs	r3, #2
 8000a9a:	425a      	negs	r2, r3
 8000a9c:	4153      	adcs	r3, r2
 8000a9e:	425b      	negs	r3, r3
 8000aa0:	0035      	movs	r5, r6
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	b2d8      	uxtb	r0, r3
 8000aa6:	e773      	b.n	8000990 <__aeabi_fdiv+0x104>
 8000aa8:	0192      	lsls	r2, r2, #6
 8000aaa:	2000      	movs	r0, #0
 8000aac:	0a52      	lsrs	r2, r2, #9
 8000aae:	e76f      	b.n	8000990 <__aeabi_fdiv+0x104>
 8000ab0:	431a      	orrs	r2, r3
 8000ab2:	0252      	lsls	r2, r2, #9
 8000ab4:	0035      	movs	r5, r6
 8000ab6:	20ff      	movs	r0, #255	@ 0xff
 8000ab8:	0a52      	lsrs	r2, r2, #9
 8000aba:	e769      	b.n	8000990 <__aeabi_fdiv+0x104>
 8000abc:	4644      	mov	r4, r8
 8000abe:	e7ad      	b.n	8000a1c <__aeabi_fdiv+0x190>
 8000ac0:	0800d588 	.word	0x0800d588
 8000ac4:	0800d5c8 	.word	0x0800d5c8
 8000ac8:	f7ffffff 	.word	0xf7ffffff

08000acc <__eqsf2>:
 8000acc:	b570      	push	{r4, r5, r6, lr}
 8000ace:	0042      	lsls	r2, r0, #1
 8000ad0:	024e      	lsls	r6, r1, #9
 8000ad2:	004c      	lsls	r4, r1, #1
 8000ad4:	0245      	lsls	r5, r0, #9
 8000ad6:	0a6d      	lsrs	r5, r5, #9
 8000ad8:	0e12      	lsrs	r2, r2, #24
 8000ada:	0fc3      	lsrs	r3, r0, #31
 8000adc:	0a76      	lsrs	r6, r6, #9
 8000ade:	0e24      	lsrs	r4, r4, #24
 8000ae0:	0fc9      	lsrs	r1, r1, #31
 8000ae2:	2aff      	cmp	r2, #255	@ 0xff
 8000ae4:	d010      	beq.n	8000b08 <__eqsf2+0x3c>
 8000ae6:	2cff      	cmp	r4, #255	@ 0xff
 8000ae8:	d00c      	beq.n	8000b04 <__eqsf2+0x38>
 8000aea:	2001      	movs	r0, #1
 8000aec:	42a2      	cmp	r2, r4
 8000aee:	d10a      	bne.n	8000b06 <__eqsf2+0x3a>
 8000af0:	42b5      	cmp	r5, r6
 8000af2:	d108      	bne.n	8000b06 <__eqsf2+0x3a>
 8000af4:	428b      	cmp	r3, r1
 8000af6:	d00f      	beq.n	8000b18 <__eqsf2+0x4c>
 8000af8:	2a00      	cmp	r2, #0
 8000afa:	d104      	bne.n	8000b06 <__eqsf2+0x3a>
 8000afc:	0028      	movs	r0, r5
 8000afe:	1e43      	subs	r3, r0, #1
 8000b00:	4198      	sbcs	r0, r3
 8000b02:	e000      	b.n	8000b06 <__eqsf2+0x3a>
 8000b04:	2001      	movs	r0, #1
 8000b06:	bd70      	pop	{r4, r5, r6, pc}
 8000b08:	2001      	movs	r0, #1
 8000b0a:	2cff      	cmp	r4, #255	@ 0xff
 8000b0c:	d1fb      	bne.n	8000b06 <__eqsf2+0x3a>
 8000b0e:	4335      	orrs	r5, r6
 8000b10:	d1f9      	bne.n	8000b06 <__eqsf2+0x3a>
 8000b12:	404b      	eors	r3, r1
 8000b14:	0018      	movs	r0, r3
 8000b16:	e7f6      	b.n	8000b06 <__eqsf2+0x3a>
 8000b18:	2000      	movs	r0, #0
 8000b1a:	e7f4      	b.n	8000b06 <__eqsf2+0x3a>

08000b1c <__gesf2>:
 8000b1c:	b530      	push	{r4, r5, lr}
 8000b1e:	0042      	lsls	r2, r0, #1
 8000b20:	0244      	lsls	r4, r0, #9
 8000b22:	024d      	lsls	r5, r1, #9
 8000b24:	0fc3      	lsrs	r3, r0, #31
 8000b26:	0048      	lsls	r0, r1, #1
 8000b28:	0a64      	lsrs	r4, r4, #9
 8000b2a:	0e12      	lsrs	r2, r2, #24
 8000b2c:	0a6d      	lsrs	r5, r5, #9
 8000b2e:	0e00      	lsrs	r0, r0, #24
 8000b30:	0fc9      	lsrs	r1, r1, #31
 8000b32:	2aff      	cmp	r2, #255	@ 0xff
 8000b34:	d019      	beq.n	8000b6a <__gesf2+0x4e>
 8000b36:	28ff      	cmp	r0, #255	@ 0xff
 8000b38:	d00b      	beq.n	8000b52 <__gesf2+0x36>
 8000b3a:	2a00      	cmp	r2, #0
 8000b3c:	d11e      	bne.n	8000b7c <__gesf2+0x60>
 8000b3e:	2800      	cmp	r0, #0
 8000b40:	d10b      	bne.n	8000b5a <__gesf2+0x3e>
 8000b42:	2d00      	cmp	r5, #0
 8000b44:	d027      	beq.n	8000b96 <__gesf2+0x7a>
 8000b46:	2c00      	cmp	r4, #0
 8000b48:	d134      	bne.n	8000bb4 <__gesf2+0x98>
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	d02f      	beq.n	8000bae <__gesf2+0x92>
 8000b4e:	0008      	movs	r0, r1
 8000b50:	bd30      	pop	{r4, r5, pc}
 8000b52:	2d00      	cmp	r5, #0
 8000b54:	d128      	bne.n	8000ba8 <__gesf2+0x8c>
 8000b56:	2a00      	cmp	r2, #0
 8000b58:	d101      	bne.n	8000b5e <__gesf2+0x42>
 8000b5a:	2c00      	cmp	r4, #0
 8000b5c:	d0f5      	beq.n	8000b4a <__gesf2+0x2e>
 8000b5e:	428b      	cmp	r3, r1
 8000b60:	d107      	bne.n	8000b72 <__gesf2+0x56>
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d023      	beq.n	8000bae <__gesf2+0x92>
 8000b66:	0018      	movs	r0, r3
 8000b68:	e7f2      	b.n	8000b50 <__gesf2+0x34>
 8000b6a:	2c00      	cmp	r4, #0
 8000b6c:	d11c      	bne.n	8000ba8 <__gesf2+0x8c>
 8000b6e:	28ff      	cmp	r0, #255	@ 0xff
 8000b70:	d014      	beq.n	8000b9c <__gesf2+0x80>
 8000b72:	1e58      	subs	r0, r3, #1
 8000b74:	2302      	movs	r3, #2
 8000b76:	4018      	ands	r0, r3
 8000b78:	3801      	subs	r0, #1
 8000b7a:	e7e9      	b.n	8000b50 <__gesf2+0x34>
 8000b7c:	2800      	cmp	r0, #0
 8000b7e:	d0f8      	beq.n	8000b72 <__gesf2+0x56>
 8000b80:	428b      	cmp	r3, r1
 8000b82:	d1f6      	bne.n	8000b72 <__gesf2+0x56>
 8000b84:	4282      	cmp	r2, r0
 8000b86:	dcf4      	bgt.n	8000b72 <__gesf2+0x56>
 8000b88:	dbeb      	blt.n	8000b62 <__gesf2+0x46>
 8000b8a:	42ac      	cmp	r4, r5
 8000b8c:	d8f1      	bhi.n	8000b72 <__gesf2+0x56>
 8000b8e:	2000      	movs	r0, #0
 8000b90:	42ac      	cmp	r4, r5
 8000b92:	d2dd      	bcs.n	8000b50 <__gesf2+0x34>
 8000b94:	e7e5      	b.n	8000b62 <__gesf2+0x46>
 8000b96:	2c00      	cmp	r4, #0
 8000b98:	d0da      	beq.n	8000b50 <__gesf2+0x34>
 8000b9a:	e7ea      	b.n	8000b72 <__gesf2+0x56>
 8000b9c:	2d00      	cmp	r5, #0
 8000b9e:	d103      	bne.n	8000ba8 <__gesf2+0x8c>
 8000ba0:	428b      	cmp	r3, r1
 8000ba2:	d1e6      	bne.n	8000b72 <__gesf2+0x56>
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	e7d3      	b.n	8000b50 <__gesf2+0x34>
 8000ba8:	2002      	movs	r0, #2
 8000baa:	4240      	negs	r0, r0
 8000bac:	e7d0      	b.n	8000b50 <__gesf2+0x34>
 8000bae:	2001      	movs	r0, #1
 8000bb0:	4240      	negs	r0, r0
 8000bb2:	e7cd      	b.n	8000b50 <__gesf2+0x34>
 8000bb4:	428b      	cmp	r3, r1
 8000bb6:	d0e8      	beq.n	8000b8a <__gesf2+0x6e>
 8000bb8:	e7db      	b.n	8000b72 <__gesf2+0x56>
 8000bba:	46c0      	nop			@ (mov r8, r8)

08000bbc <__lesf2>:
 8000bbc:	b530      	push	{r4, r5, lr}
 8000bbe:	0042      	lsls	r2, r0, #1
 8000bc0:	0244      	lsls	r4, r0, #9
 8000bc2:	024d      	lsls	r5, r1, #9
 8000bc4:	0fc3      	lsrs	r3, r0, #31
 8000bc6:	0048      	lsls	r0, r1, #1
 8000bc8:	0a64      	lsrs	r4, r4, #9
 8000bca:	0e12      	lsrs	r2, r2, #24
 8000bcc:	0a6d      	lsrs	r5, r5, #9
 8000bce:	0e00      	lsrs	r0, r0, #24
 8000bd0:	0fc9      	lsrs	r1, r1, #31
 8000bd2:	2aff      	cmp	r2, #255	@ 0xff
 8000bd4:	d01a      	beq.n	8000c0c <__lesf2+0x50>
 8000bd6:	28ff      	cmp	r0, #255	@ 0xff
 8000bd8:	d00e      	beq.n	8000bf8 <__lesf2+0x3c>
 8000bda:	2a00      	cmp	r2, #0
 8000bdc:	d11e      	bne.n	8000c1c <__lesf2+0x60>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	d10e      	bne.n	8000c00 <__lesf2+0x44>
 8000be2:	2d00      	cmp	r5, #0
 8000be4:	d02a      	beq.n	8000c3c <__lesf2+0x80>
 8000be6:	2c00      	cmp	r4, #0
 8000be8:	d00c      	beq.n	8000c04 <__lesf2+0x48>
 8000bea:	428b      	cmp	r3, r1
 8000bec:	d01d      	beq.n	8000c2a <__lesf2+0x6e>
 8000bee:	1e58      	subs	r0, r3, #1
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	4018      	ands	r0, r3
 8000bf4:	3801      	subs	r0, #1
 8000bf6:	e010      	b.n	8000c1a <__lesf2+0x5e>
 8000bf8:	2d00      	cmp	r5, #0
 8000bfa:	d10d      	bne.n	8000c18 <__lesf2+0x5c>
 8000bfc:	2a00      	cmp	r2, #0
 8000bfe:	d120      	bne.n	8000c42 <__lesf2+0x86>
 8000c00:	2c00      	cmp	r4, #0
 8000c02:	d11e      	bne.n	8000c42 <__lesf2+0x86>
 8000c04:	2900      	cmp	r1, #0
 8000c06:	d023      	beq.n	8000c50 <__lesf2+0x94>
 8000c08:	0008      	movs	r0, r1
 8000c0a:	e006      	b.n	8000c1a <__lesf2+0x5e>
 8000c0c:	2c00      	cmp	r4, #0
 8000c0e:	d103      	bne.n	8000c18 <__lesf2+0x5c>
 8000c10:	28ff      	cmp	r0, #255	@ 0xff
 8000c12:	d1ec      	bne.n	8000bee <__lesf2+0x32>
 8000c14:	2d00      	cmp	r5, #0
 8000c16:	d017      	beq.n	8000c48 <__lesf2+0x8c>
 8000c18:	2002      	movs	r0, #2
 8000c1a:	bd30      	pop	{r4, r5, pc}
 8000c1c:	2800      	cmp	r0, #0
 8000c1e:	d0e6      	beq.n	8000bee <__lesf2+0x32>
 8000c20:	428b      	cmp	r3, r1
 8000c22:	d1e4      	bne.n	8000bee <__lesf2+0x32>
 8000c24:	4282      	cmp	r2, r0
 8000c26:	dce2      	bgt.n	8000bee <__lesf2+0x32>
 8000c28:	db04      	blt.n	8000c34 <__lesf2+0x78>
 8000c2a:	42ac      	cmp	r4, r5
 8000c2c:	d8df      	bhi.n	8000bee <__lesf2+0x32>
 8000c2e:	2000      	movs	r0, #0
 8000c30:	42ac      	cmp	r4, r5
 8000c32:	d2f2      	bcs.n	8000c1a <__lesf2+0x5e>
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d00b      	beq.n	8000c50 <__lesf2+0x94>
 8000c38:	0018      	movs	r0, r3
 8000c3a:	e7ee      	b.n	8000c1a <__lesf2+0x5e>
 8000c3c:	2c00      	cmp	r4, #0
 8000c3e:	d0ec      	beq.n	8000c1a <__lesf2+0x5e>
 8000c40:	e7d5      	b.n	8000bee <__lesf2+0x32>
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d1d3      	bne.n	8000bee <__lesf2+0x32>
 8000c46:	e7f5      	b.n	8000c34 <__lesf2+0x78>
 8000c48:	2000      	movs	r0, #0
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d0e5      	beq.n	8000c1a <__lesf2+0x5e>
 8000c4e:	e7ce      	b.n	8000bee <__lesf2+0x32>
 8000c50:	2001      	movs	r0, #1
 8000c52:	4240      	negs	r0, r0
 8000c54:	e7e1      	b.n	8000c1a <__lesf2+0x5e>
 8000c56:	46c0      	nop			@ (mov r8, r8)

08000c58 <__aeabi_fmul>:
 8000c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c5a:	464f      	mov	r7, r9
 8000c5c:	4646      	mov	r6, r8
 8000c5e:	46d6      	mov	lr, sl
 8000c60:	0243      	lsls	r3, r0, #9
 8000c62:	0a5b      	lsrs	r3, r3, #9
 8000c64:	0045      	lsls	r5, r0, #1
 8000c66:	b5c0      	push	{r6, r7, lr}
 8000c68:	4699      	mov	r9, r3
 8000c6a:	1c0f      	adds	r7, r1, #0
 8000c6c:	0e2d      	lsrs	r5, r5, #24
 8000c6e:	0fc6      	lsrs	r6, r0, #31
 8000c70:	2d00      	cmp	r5, #0
 8000c72:	d100      	bne.n	8000c76 <__aeabi_fmul+0x1e>
 8000c74:	e088      	b.n	8000d88 <__aeabi_fmul+0x130>
 8000c76:	2dff      	cmp	r5, #255	@ 0xff
 8000c78:	d100      	bne.n	8000c7c <__aeabi_fmul+0x24>
 8000c7a:	e08d      	b.n	8000d98 <__aeabi_fmul+0x140>
 8000c7c:	2280      	movs	r2, #128	@ 0x80
 8000c7e:	00db      	lsls	r3, r3, #3
 8000c80:	04d2      	lsls	r2, r2, #19
 8000c82:	431a      	orrs	r2, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	4691      	mov	r9, r2
 8000c88:	4698      	mov	r8, r3
 8000c8a:	469a      	mov	sl, r3
 8000c8c:	3d7f      	subs	r5, #127	@ 0x7f
 8000c8e:	027c      	lsls	r4, r7, #9
 8000c90:	007b      	lsls	r3, r7, #1
 8000c92:	0a64      	lsrs	r4, r4, #9
 8000c94:	0e1b      	lsrs	r3, r3, #24
 8000c96:	0fff      	lsrs	r7, r7, #31
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d068      	beq.n	8000d6e <__aeabi_fmul+0x116>
 8000c9c:	2bff      	cmp	r3, #255	@ 0xff
 8000c9e:	d021      	beq.n	8000ce4 <__aeabi_fmul+0x8c>
 8000ca0:	2280      	movs	r2, #128	@ 0x80
 8000ca2:	00e4      	lsls	r4, r4, #3
 8000ca4:	04d2      	lsls	r2, r2, #19
 8000ca6:	4314      	orrs	r4, r2
 8000ca8:	4642      	mov	r2, r8
 8000caa:	3b7f      	subs	r3, #127	@ 0x7f
 8000cac:	195b      	adds	r3, r3, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	1c5d      	adds	r5, r3, #1
 8000cb2:	2a0a      	cmp	r2, #10
 8000cb4:	dc2e      	bgt.n	8000d14 <__aeabi_fmul+0xbc>
 8000cb6:	407e      	eors	r6, r7
 8000cb8:	4642      	mov	r2, r8
 8000cba:	2a02      	cmp	r2, #2
 8000cbc:	dc23      	bgt.n	8000d06 <__aeabi_fmul+0xae>
 8000cbe:	3a01      	subs	r2, #1
 8000cc0:	2a01      	cmp	r2, #1
 8000cc2:	d900      	bls.n	8000cc6 <__aeabi_fmul+0x6e>
 8000cc4:	e0bd      	b.n	8000e42 <__aeabi_fmul+0x1ea>
 8000cc6:	2902      	cmp	r1, #2
 8000cc8:	d06e      	beq.n	8000da8 <__aeabi_fmul+0x150>
 8000cca:	2901      	cmp	r1, #1
 8000ccc:	d12c      	bne.n	8000d28 <__aeabi_fmul+0xd0>
 8000cce:	2000      	movs	r0, #0
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	05c0      	lsls	r0, r0, #23
 8000cd4:	07f6      	lsls	r6, r6, #31
 8000cd6:	4310      	orrs	r0, r2
 8000cd8:	4330      	orrs	r0, r6
 8000cda:	bce0      	pop	{r5, r6, r7}
 8000cdc:	46ba      	mov	sl, r7
 8000cde:	46b1      	mov	r9, r6
 8000ce0:	46a8      	mov	r8, r5
 8000ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ce4:	002b      	movs	r3, r5
 8000ce6:	33ff      	adds	r3, #255	@ 0xff
 8000ce8:	2c00      	cmp	r4, #0
 8000cea:	d065      	beq.n	8000db8 <__aeabi_fmul+0x160>
 8000cec:	2203      	movs	r2, #3
 8000cee:	4641      	mov	r1, r8
 8000cf0:	4311      	orrs	r1, r2
 8000cf2:	0032      	movs	r2, r6
 8000cf4:	3501      	adds	r5, #1
 8000cf6:	4688      	mov	r8, r1
 8000cf8:	407a      	eors	r2, r7
 8000cfa:	35ff      	adds	r5, #255	@ 0xff
 8000cfc:	290a      	cmp	r1, #10
 8000cfe:	dd00      	ble.n	8000d02 <__aeabi_fmul+0xaa>
 8000d00:	e0d8      	b.n	8000eb4 <__aeabi_fmul+0x25c>
 8000d02:	0016      	movs	r6, r2
 8000d04:	2103      	movs	r1, #3
 8000d06:	4640      	mov	r0, r8
 8000d08:	2201      	movs	r2, #1
 8000d0a:	4082      	lsls	r2, r0
 8000d0c:	20a6      	movs	r0, #166	@ 0xa6
 8000d0e:	00c0      	lsls	r0, r0, #3
 8000d10:	4202      	tst	r2, r0
 8000d12:	d020      	beq.n	8000d56 <__aeabi_fmul+0xfe>
 8000d14:	4653      	mov	r3, sl
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d046      	beq.n	8000da8 <__aeabi_fmul+0x150>
 8000d1a:	2b03      	cmp	r3, #3
 8000d1c:	d100      	bne.n	8000d20 <__aeabi_fmul+0xc8>
 8000d1e:	e0bb      	b.n	8000e98 <__aeabi_fmul+0x240>
 8000d20:	4651      	mov	r1, sl
 8000d22:	464c      	mov	r4, r9
 8000d24:	2901      	cmp	r1, #1
 8000d26:	d0d2      	beq.n	8000cce <__aeabi_fmul+0x76>
 8000d28:	002b      	movs	r3, r5
 8000d2a:	337f      	adds	r3, #127	@ 0x7f
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	dd70      	ble.n	8000e12 <__aeabi_fmul+0x1ba>
 8000d30:	0762      	lsls	r2, r4, #29
 8000d32:	d004      	beq.n	8000d3e <__aeabi_fmul+0xe6>
 8000d34:	220f      	movs	r2, #15
 8000d36:	4022      	ands	r2, r4
 8000d38:	2a04      	cmp	r2, #4
 8000d3a:	d000      	beq.n	8000d3e <__aeabi_fmul+0xe6>
 8000d3c:	3404      	adds	r4, #4
 8000d3e:	0122      	lsls	r2, r4, #4
 8000d40:	d503      	bpl.n	8000d4a <__aeabi_fmul+0xf2>
 8000d42:	4b63      	ldr	r3, [pc, #396]	@ (8000ed0 <__aeabi_fmul+0x278>)
 8000d44:	401c      	ands	r4, r3
 8000d46:	002b      	movs	r3, r5
 8000d48:	3380      	adds	r3, #128	@ 0x80
 8000d4a:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d4c:	dc2c      	bgt.n	8000da8 <__aeabi_fmul+0x150>
 8000d4e:	01a2      	lsls	r2, r4, #6
 8000d50:	0a52      	lsrs	r2, r2, #9
 8000d52:	b2d8      	uxtb	r0, r3
 8000d54:	e7bd      	b.n	8000cd2 <__aeabi_fmul+0x7a>
 8000d56:	2090      	movs	r0, #144	@ 0x90
 8000d58:	0080      	lsls	r0, r0, #2
 8000d5a:	4202      	tst	r2, r0
 8000d5c:	d127      	bne.n	8000dae <__aeabi_fmul+0x156>
 8000d5e:	38b9      	subs	r0, #185	@ 0xb9
 8000d60:	38ff      	subs	r0, #255	@ 0xff
 8000d62:	4210      	tst	r0, r2
 8000d64:	d06d      	beq.n	8000e42 <__aeabi_fmul+0x1ea>
 8000d66:	003e      	movs	r6, r7
 8000d68:	46a1      	mov	r9, r4
 8000d6a:	468a      	mov	sl, r1
 8000d6c:	e7d2      	b.n	8000d14 <__aeabi_fmul+0xbc>
 8000d6e:	2c00      	cmp	r4, #0
 8000d70:	d141      	bne.n	8000df6 <__aeabi_fmul+0x19e>
 8000d72:	2301      	movs	r3, #1
 8000d74:	4642      	mov	r2, r8
 8000d76:	431a      	orrs	r2, r3
 8000d78:	4690      	mov	r8, r2
 8000d7a:	002b      	movs	r3, r5
 8000d7c:	4642      	mov	r2, r8
 8000d7e:	2101      	movs	r1, #1
 8000d80:	1c5d      	adds	r5, r3, #1
 8000d82:	2a0a      	cmp	r2, #10
 8000d84:	dd97      	ble.n	8000cb6 <__aeabi_fmul+0x5e>
 8000d86:	e7c5      	b.n	8000d14 <__aeabi_fmul+0xbc>
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d126      	bne.n	8000dda <__aeabi_fmul+0x182>
 8000d8c:	2304      	movs	r3, #4
 8000d8e:	4698      	mov	r8, r3
 8000d90:	3b03      	subs	r3, #3
 8000d92:	2500      	movs	r5, #0
 8000d94:	469a      	mov	sl, r3
 8000d96:	e77a      	b.n	8000c8e <__aeabi_fmul+0x36>
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d118      	bne.n	8000dce <__aeabi_fmul+0x176>
 8000d9c:	2308      	movs	r3, #8
 8000d9e:	4698      	mov	r8, r3
 8000da0:	3b06      	subs	r3, #6
 8000da2:	25ff      	movs	r5, #255	@ 0xff
 8000da4:	469a      	mov	sl, r3
 8000da6:	e772      	b.n	8000c8e <__aeabi_fmul+0x36>
 8000da8:	20ff      	movs	r0, #255	@ 0xff
 8000daa:	2200      	movs	r2, #0
 8000dac:	e791      	b.n	8000cd2 <__aeabi_fmul+0x7a>
 8000dae:	2280      	movs	r2, #128	@ 0x80
 8000db0:	2600      	movs	r6, #0
 8000db2:	20ff      	movs	r0, #255	@ 0xff
 8000db4:	03d2      	lsls	r2, r2, #15
 8000db6:	e78c      	b.n	8000cd2 <__aeabi_fmul+0x7a>
 8000db8:	4641      	mov	r1, r8
 8000dba:	2202      	movs	r2, #2
 8000dbc:	3501      	adds	r5, #1
 8000dbe:	4311      	orrs	r1, r2
 8000dc0:	4688      	mov	r8, r1
 8000dc2:	35ff      	adds	r5, #255	@ 0xff
 8000dc4:	290a      	cmp	r1, #10
 8000dc6:	dca5      	bgt.n	8000d14 <__aeabi_fmul+0xbc>
 8000dc8:	2102      	movs	r1, #2
 8000dca:	407e      	eors	r6, r7
 8000dcc:	e774      	b.n	8000cb8 <__aeabi_fmul+0x60>
 8000dce:	230c      	movs	r3, #12
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	3b09      	subs	r3, #9
 8000dd4:	25ff      	movs	r5, #255	@ 0xff
 8000dd6:	469a      	mov	sl, r3
 8000dd8:	e759      	b.n	8000c8e <__aeabi_fmul+0x36>
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f002 f99e 	bl	800311c <__clzsi2>
 8000de0:	464a      	mov	r2, r9
 8000de2:	1f43      	subs	r3, r0, #5
 8000de4:	2576      	movs	r5, #118	@ 0x76
 8000de6:	409a      	lsls	r2, r3
 8000de8:	2300      	movs	r3, #0
 8000dea:	426d      	negs	r5, r5
 8000dec:	4691      	mov	r9, r2
 8000dee:	4698      	mov	r8, r3
 8000df0:	469a      	mov	sl, r3
 8000df2:	1a2d      	subs	r5, r5, r0
 8000df4:	e74b      	b.n	8000c8e <__aeabi_fmul+0x36>
 8000df6:	0020      	movs	r0, r4
 8000df8:	f002 f990 	bl	800311c <__clzsi2>
 8000dfc:	4642      	mov	r2, r8
 8000dfe:	1f43      	subs	r3, r0, #5
 8000e00:	409c      	lsls	r4, r3
 8000e02:	1a2b      	subs	r3, r5, r0
 8000e04:	3b76      	subs	r3, #118	@ 0x76
 8000e06:	2100      	movs	r1, #0
 8000e08:	1c5d      	adds	r5, r3, #1
 8000e0a:	2a0a      	cmp	r2, #10
 8000e0c:	dc00      	bgt.n	8000e10 <__aeabi_fmul+0x1b8>
 8000e0e:	e752      	b.n	8000cb6 <__aeabi_fmul+0x5e>
 8000e10:	e780      	b.n	8000d14 <__aeabi_fmul+0xbc>
 8000e12:	2201      	movs	r2, #1
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	2b1b      	cmp	r3, #27
 8000e18:	dd00      	ble.n	8000e1c <__aeabi_fmul+0x1c4>
 8000e1a:	e758      	b.n	8000cce <__aeabi_fmul+0x76>
 8000e1c:	359e      	adds	r5, #158	@ 0x9e
 8000e1e:	0022      	movs	r2, r4
 8000e20:	40ac      	lsls	r4, r5
 8000e22:	40da      	lsrs	r2, r3
 8000e24:	1e63      	subs	r3, r4, #1
 8000e26:	419c      	sbcs	r4, r3
 8000e28:	4322      	orrs	r2, r4
 8000e2a:	0753      	lsls	r3, r2, #29
 8000e2c:	d004      	beq.n	8000e38 <__aeabi_fmul+0x1e0>
 8000e2e:	230f      	movs	r3, #15
 8000e30:	4013      	ands	r3, r2
 8000e32:	2b04      	cmp	r3, #4
 8000e34:	d000      	beq.n	8000e38 <__aeabi_fmul+0x1e0>
 8000e36:	3204      	adds	r2, #4
 8000e38:	0153      	lsls	r3, r2, #5
 8000e3a:	d537      	bpl.n	8000eac <__aeabi_fmul+0x254>
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	2200      	movs	r2, #0
 8000e40:	e747      	b.n	8000cd2 <__aeabi_fmul+0x7a>
 8000e42:	0c21      	lsrs	r1, r4, #16
 8000e44:	464a      	mov	r2, r9
 8000e46:	0424      	lsls	r4, r4, #16
 8000e48:	0c24      	lsrs	r4, r4, #16
 8000e4a:	0027      	movs	r7, r4
 8000e4c:	0c10      	lsrs	r0, r2, #16
 8000e4e:	0412      	lsls	r2, r2, #16
 8000e50:	0c12      	lsrs	r2, r2, #16
 8000e52:	4344      	muls	r4, r0
 8000e54:	4357      	muls	r7, r2
 8000e56:	4348      	muls	r0, r1
 8000e58:	4351      	muls	r1, r2
 8000e5a:	0c3a      	lsrs	r2, r7, #16
 8000e5c:	1909      	adds	r1, r1, r4
 8000e5e:	1852      	adds	r2, r2, r1
 8000e60:	4294      	cmp	r4, r2
 8000e62:	d903      	bls.n	8000e6c <__aeabi_fmul+0x214>
 8000e64:	2180      	movs	r1, #128	@ 0x80
 8000e66:	0249      	lsls	r1, r1, #9
 8000e68:	468c      	mov	ip, r1
 8000e6a:	4460      	add	r0, ip
 8000e6c:	043f      	lsls	r7, r7, #16
 8000e6e:	0411      	lsls	r1, r2, #16
 8000e70:	0c3f      	lsrs	r7, r7, #16
 8000e72:	19c9      	adds	r1, r1, r7
 8000e74:	018c      	lsls	r4, r1, #6
 8000e76:	1e67      	subs	r7, r4, #1
 8000e78:	41bc      	sbcs	r4, r7
 8000e7a:	0c12      	lsrs	r2, r2, #16
 8000e7c:	0e89      	lsrs	r1, r1, #26
 8000e7e:	1812      	adds	r2, r2, r0
 8000e80:	430c      	orrs	r4, r1
 8000e82:	0192      	lsls	r2, r2, #6
 8000e84:	4314      	orrs	r4, r2
 8000e86:	0112      	lsls	r2, r2, #4
 8000e88:	d50e      	bpl.n	8000ea8 <__aeabi_fmul+0x250>
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	0862      	lsrs	r2, r4, #1
 8000e8e:	401c      	ands	r4, r3
 8000e90:	4314      	orrs	r4, r2
 8000e92:	e749      	b.n	8000d28 <__aeabi_fmul+0xd0>
 8000e94:	003e      	movs	r6, r7
 8000e96:	46a1      	mov	r9, r4
 8000e98:	2280      	movs	r2, #128	@ 0x80
 8000e9a:	464b      	mov	r3, r9
 8000e9c:	03d2      	lsls	r2, r2, #15
 8000e9e:	431a      	orrs	r2, r3
 8000ea0:	0252      	lsls	r2, r2, #9
 8000ea2:	20ff      	movs	r0, #255	@ 0xff
 8000ea4:	0a52      	lsrs	r2, r2, #9
 8000ea6:	e714      	b.n	8000cd2 <__aeabi_fmul+0x7a>
 8000ea8:	001d      	movs	r5, r3
 8000eaa:	e73d      	b.n	8000d28 <__aeabi_fmul+0xd0>
 8000eac:	0192      	lsls	r2, r2, #6
 8000eae:	2000      	movs	r0, #0
 8000eb0:	0a52      	lsrs	r2, r2, #9
 8000eb2:	e70e      	b.n	8000cd2 <__aeabi_fmul+0x7a>
 8000eb4:	290f      	cmp	r1, #15
 8000eb6:	d1ed      	bne.n	8000e94 <__aeabi_fmul+0x23c>
 8000eb8:	2280      	movs	r2, #128	@ 0x80
 8000eba:	464b      	mov	r3, r9
 8000ebc:	03d2      	lsls	r2, r2, #15
 8000ebe:	4213      	tst	r3, r2
 8000ec0:	d0ea      	beq.n	8000e98 <__aeabi_fmul+0x240>
 8000ec2:	4214      	tst	r4, r2
 8000ec4:	d1e8      	bne.n	8000e98 <__aeabi_fmul+0x240>
 8000ec6:	003e      	movs	r6, r7
 8000ec8:	20ff      	movs	r0, #255	@ 0xff
 8000eca:	4322      	orrs	r2, r4
 8000ecc:	e701      	b.n	8000cd2 <__aeabi_fmul+0x7a>
 8000ece:	46c0      	nop			@ (mov r8, r8)
 8000ed0:	f7ffffff 	.word	0xf7ffffff

08000ed4 <__aeabi_fsub>:
 8000ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ed6:	4647      	mov	r7, r8
 8000ed8:	46ce      	mov	lr, r9
 8000eda:	024e      	lsls	r6, r1, #9
 8000edc:	0243      	lsls	r3, r0, #9
 8000ede:	0045      	lsls	r5, r0, #1
 8000ee0:	0a72      	lsrs	r2, r6, #9
 8000ee2:	0fc4      	lsrs	r4, r0, #31
 8000ee4:	0048      	lsls	r0, r1, #1
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	4694      	mov	ip, r2
 8000eea:	0a5f      	lsrs	r7, r3, #9
 8000eec:	0e2d      	lsrs	r5, r5, #24
 8000eee:	099b      	lsrs	r3, r3, #6
 8000ef0:	0e00      	lsrs	r0, r0, #24
 8000ef2:	0fc9      	lsrs	r1, r1, #31
 8000ef4:	09b6      	lsrs	r6, r6, #6
 8000ef6:	28ff      	cmp	r0, #255	@ 0xff
 8000ef8:	d024      	beq.n	8000f44 <__aeabi_fsub+0x70>
 8000efa:	2201      	movs	r2, #1
 8000efc:	4051      	eors	r1, r2
 8000efe:	1a2a      	subs	r2, r5, r0
 8000f00:	428c      	cmp	r4, r1
 8000f02:	d00f      	beq.n	8000f24 <__aeabi_fsub+0x50>
 8000f04:	2a00      	cmp	r2, #0
 8000f06:	dc00      	bgt.n	8000f0a <__aeabi_fsub+0x36>
 8000f08:	e16a      	b.n	80011e0 <__aeabi_fsub+0x30c>
 8000f0a:	2800      	cmp	r0, #0
 8000f0c:	d135      	bne.n	8000f7a <__aeabi_fsub+0xa6>
 8000f0e:	2e00      	cmp	r6, #0
 8000f10:	d100      	bne.n	8000f14 <__aeabi_fsub+0x40>
 8000f12:	e0a2      	b.n	800105a <__aeabi_fsub+0x186>
 8000f14:	1e51      	subs	r1, r2, #1
 8000f16:	2a01      	cmp	r2, #1
 8000f18:	d100      	bne.n	8000f1c <__aeabi_fsub+0x48>
 8000f1a:	e124      	b.n	8001166 <__aeabi_fsub+0x292>
 8000f1c:	2aff      	cmp	r2, #255	@ 0xff
 8000f1e:	d021      	beq.n	8000f64 <__aeabi_fsub+0x90>
 8000f20:	000a      	movs	r2, r1
 8000f22:	e02f      	b.n	8000f84 <__aeabi_fsub+0xb0>
 8000f24:	2a00      	cmp	r2, #0
 8000f26:	dc00      	bgt.n	8000f2a <__aeabi_fsub+0x56>
 8000f28:	e167      	b.n	80011fa <__aeabi_fsub+0x326>
 8000f2a:	2800      	cmp	r0, #0
 8000f2c:	d05e      	beq.n	8000fec <__aeabi_fsub+0x118>
 8000f2e:	2dff      	cmp	r5, #255	@ 0xff
 8000f30:	d018      	beq.n	8000f64 <__aeabi_fsub+0x90>
 8000f32:	2180      	movs	r1, #128	@ 0x80
 8000f34:	04c9      	lsls	r1, r1, #19
 8000f36:	430e      	orrs	r6, r1
 8000f38:	2a1b      	cmp	r2, #27
 8000f3a:	dc00      	bgt.n	8000f3e <__aeabi_fsub+0x6a>
 8000f3c:	e076      	b.n	800102c <__aeabi_fsub+0x158>
 8000f3e:	002a      	movs	r2, r5
 8000f40:	3301      	adds	r3, #1
 8000f42:	e032      	b.n	8000faa <__aeabi_fsub+0xd6>
 8000f44:	002a      	movs	r2, r5
 8000f46:	3aff      	subs	r2, #255	@ 0xff
 8000f48:	4691      	mov	r9, r2
 8000f4a:	2e00      	cmp	r6, #0
 8000f4c:	d042      	beq.n	8000fd4 <__aeabi_fsub+0x100>
 8000f4e:	428c      	cmp	r4, r1
 8000f50:	d055      	beq.n	8000ffe <__aeabi_fsub+0x12a>
 8000f52:	464a      	mov	r2, r9
 8000f54:	2a00      	cmp	r2, #0
 8000f56:	d100      	bne.n	8000f5a <__aeabi_fsub+0x86>
 8000f58:	e09c      	b.n	8001094 <__aeabi_fsub+0x1c0>
 8000f5a:	2d00      	cmp	r5, #0
 8000f5c:	d100      	bne.n	8000f60 <__aeabi_fsub+0x8c>
 8000f5e:	e077      	b.n	8001050 <__aeabi_fsub+0x17c>
 8000f60:	000c      	movs	r4, r1
 8000f62:	0033      	movs	r3, r6
 8000f64:	08db      	lsrs	r3, r3, #3
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d100      	bne.n	8000f6c <__aeabi_fsub+0x98>
 8000f6a:	e06e      	b.n	800104a <__aeabi_fsub+0x176>
 8000f6c:	2280      	movs	r2, #128	@ 0x80
 8000f6e:	03d2      	lsls	r2, r2, #15
 8000f70:	4313      	orrs	r3, r2
 8000f72:	025b      	lsls	r3, r3, #9
 8000f74:	20ff      	movs	r0, #255	@ 0xff
 8000f76:	0a5b      	lsrs	r3, r3, #9
 8000f78:	e024      	b.n	8000fc4 <__aeabi_fsub+0xf0>
 8000f7a:	2dff      	cmp	r5, #255	@ 0xff
 8000f7c:	d0f2      	beq.n	8000f64 <__aeabi_fsub+0x90>
 8000f7e:	2180      	movs	r1, #128	@ 0x80
 8000f80:	04c9      	lsls	r1, r1, #19
 8000f82:	430e      	orrs	r6, r1
 8000f84:	2101      	movs	r1, #1
 8000f86:	2a1b      	cmp	r2, #27
 8000f88:	dc08      	bgt.n	8000f9c <__aeabi_fsub+0xc8>
 8000f8a:	0031      	movs	r1, r6
 8000f8c:	2020      	movs	r0, #32
 8000f8e:	40d1      	lsrs	r1, r2
 8000f90:	1a82      	subs	r2, r0, r2
 8000f92:	4096      	lsls	r6, r2
 8000f94:	0032      	movs	r2, r6
 8000f96:	1e50      	subs	r0, r2, #1
 8000f98:	4182      	sbcs	r2, r0
 8000f9a:	4311      	orrs	r1, r2
 8000f9c:	1a5b      	subs	r3, r3, r1
 8000f9e:	015a      	lsls	r2, r3, #5
 8000fa0:	d460      	bmi.n	8001064 <__aeabi_fsub+0x190>
 8000fa2:	2107      	movs	r1, #7
 8000fa4:	002a      	movs	r2, r5
 8000fa6:	4019      	ands	r1, r3
 8000fa8:	d057      	beq.n	800105a <__aeabi_fsub+0x186>
 8000faa:	210f      	movs	r1, #15
 8000fac:	4019      	ands	r1, r3
 8000fae:	2904      	cmp	r1, #4
 8000fb0:	d000      	beq.n	8000fb4 <__aeabi_fsub+0xe0>
 8000fb2:	3304      	adds	r3, #4
 8000fb4:	0159      	lsls	r1, r3, #5
 8000fb6:	d550      	bpl.n	800105a <__aeabi_fsub+0x186>
 8000fb8:	1c50      	adds	r0, r2, #1
 8000fba:	2afe      	cmp	r2, #254	@ 0xfe
 8000fbc:	d045      	beq.n	800104a <__aeabi_fsub+0x176>
 8000fbe:	019b      	lsls	r3, r3, #6
 8000fc0:	b2c0      	uxtb	r0, r0
 8000fc2:	0a5b      	lsrs	r3, r3, #9
 8000fc4:	05c0      	lsls	r0, r0, #23
 8000fc6:	4318      	orrs	r0, r3
 8000fc8:	07e4      	lsls	r4, r4, #31
 8000fca:	4320      	orrs	r0, r4
 8000fcc:	bcc0      	pop	{r6, r7}
 8000fce:	46b9      	mov	r9, r7
 8000fd0:	46b0      	mov	r8, r6
 8000fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	4051      	eors	r1, r2
 8000fd8:	428c      	cmp	r4, r1
 8000fda:	d1ba      	bne.n	8000f52 <__aeabi_fsub+0x7e>
 8000fdc:	464a      	mov	r2, r9
 8000fde:	2a00      	cmp	r2, #0
 8000fe0:	d010      	beq.n	8001004 <__aeabi_fsub+0x130>
 8000fe2:	2d00      	cmp	r5, #0
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_fsub+0x114>
 8000fe6:	e098      	b.n	800111a <__aeabi_fsub+0x246>
 8000fe8:	2300      	movs	r3, #0
 8000fea:	e7bb      	b.n	8000f64 <__aeabi_fsub+0x90>
 8000fec:	2e00      	cmp	r6, #0
 8000fee:	d034      	beq.n	800105a <__aeabi_fsub+0x186>
 8000ff0:	1e51      	subs	r1, r2, #1
 8000ff2:	2a01      	cmp	r2, #1
 8000ff4:	d06e      	beq.n	80010d4 <__aeabi_fsub+0x200>
 8000ff6:	2aff      	cmp	r2, #255	@ 0xff
 8000ff8:	d0b4      	beq.n	8000f64 <__aeabi_fsub+0x90>
 8000ffa:	000a      	movs	r2, r1
 8000ffc:	e79c      	b.n	8000f38 <__aeabi_fsub+0x64>
 8000ffe:	2a00      	cmp	r2, #0
 8001000:	d000      	beq.n	8001004 <__aeabi_fsub+0x130>
 8001002:	e088      	b.n	8001116 <__aeabi_fsub+0x242>
 8001004:	20fe      	movs	r0, #254	@ 0xfe
 8001006:	1c6a      	adds	r2, r5, #1
 8001008:	4210      	tst	r0, r2
 800100a:	d000      	beq.n	800100e <__aeabi_fsub+0x13a>
 800100c:	e092      	b.n	8001134 <__aeabi_fsub+0x260>
 800100e:	2d00      	cmp	r5, #0
 8001010:	d000      	beq.n	8001014 <__aeabi_fsub+0x140>
 8001012:	e0a4      	b.n	800115e <__aeabi_fsub+0x28a>
 8001014:	2b00      	cmp	r3, #0
 8001016:	d100      	bne.n	800101a <__aeabi_fsub+0x146>
 8001018:	e0cb      	b.n	80011b2 <__aeabi_fsub+0x2de>
 800101a:	2e00      	cmp	r6, #0
 800101c:	d000      	beq.n	8001020 <__aeabi_fsub+0x14c>
 800101e:	e0ca      	b.n	80011b6 <__aeabi_fsub+0x2e2>
 8001020:	2200      	movs	r2, #0
 8001022:	08db      	lsrs	r3, r3, #3
 8001024:	025b      	lsls	r3, r3, #9
 8001026:	0a5b      	lsrs	r3, r3, #9
 8001028:	b2d0      	uxtb	r0, r2
 800102a:	e7cb      	b.n	8000fc4 <__aeabi_fsub+0xf0>
 800102c:	0031      	movs	r1, r6
 800102e:	2020      	movs	r0, #32
 8001030:	40d1      	lsrs	r1, r2
 8001032:	1a82      	subs	r2, r0, r2
 8001034:	4096      	lsls	r6, r2
 8001036:	0032      	movs	r2, r6
 8001038:	1e50      	subs	r0, r2, #1
 800103a:	4182      	sbcs	r2, r0
 800103c:	430a      	orrs	r2, r1
 800103e:	189b      	adds	r3, r3, r2
 8001040:	015a      	lsls	r2, r3, #5
 8001042:	d5ae      	bpl.n	8000fa2 <__aeabi_fsub+0xce>
 8001044:	1c6a      	adds	r2, r5, #1
 8001046:	2dfe      	cmp	r5, #254	@ 0xfe
 8001048:	d14a      	bne.n	80010e0 <__aeabi_fsub+0x20c>
 800104a:	20ff      	movs	r0, #255	@ 0xff
 800104c:	2300      	movs	r3, #0
 800104e:	e7b9      	b.n	8000fc4 <__aeabi_fsub+0xf0>
 8001050:	22ff      	movs	r2, #255	@ 0xff
 8001052:	2b00      	cmp	r3, #0
 8001054:	d14b      	bne.n	80010ee <__aeabi_fsub+0x21a>
 8001056:	000c      	movs	r4, r1
 8001058:	0033      	movs	r3, r6
 800105a:	08db      	lsrs	r3, r3, #3
 800105c:	2aff      	cmp	r2, #255	@ 0xff
 800105e:	d100      	bne.n	8001062 <__aeabi_fsub+0x18e>
 8001060:	e781      	b.n	8000f66 <__aeabi_fsub+0x92>
 8001062:	e7df      	b.n	8001024 <__aeabi_fsub+0x150>
 8001064:	019f      	lsls	r7, r3, #6
 8001066:	09bf      	lsrs	r7, r7, #6
 8001068:	0038      	movs	r0, r7
 800106a:	f002 f857 	bl	800311c <__clzsi2>
 800106e:	3805      	subs	r0, #5
 8001070:	4087      	lsls	r7, r0
 8001072:	4285      	cmp	r5, r0
 8001074:	dc21      	bgt.n	80010ba <__aeabi_fsub+0x1e6>
 8001076:	003b      	movs	r3, r7
 8001078:	2120      	movs	r1, #32
 800107a:	1b42      	subs	r2, r0, r5
 800107c:	3201      	adds	r2, #1
 800107e:	40d3      	lsrs	r3, r2
 8001080:	1a8a      	subs	r2, r1, r2
 8001082:	4097      	lsls	r7, r2
 8001084:	1e7a      	subs	r2, r7, #1
 8001086:	4197      	sbcs	r7, r2
 8001088:	2200      	movs	r2, #0
 800108a:	433b      	orrs	r3, r7
 800108c:	0759      	lsls	r1, r3, #29
 800108e:	d000      	beq.n	8001092 <__aeabi_fsub+0x1be>
 8001090:	e78b      	b.n	8000faa <__aeabi_fsub+0xd6>
 8001092:	e78f      	b.n	8000fb4 <__aeabi_fsub+0xe0>
 8001094:	20fe      	movs	r0, #254	@ 0xfe
 8001096:	1c6a      	adds	r2, r5, #1
 8001098:	4210      	tst	r0, r2
 800109a:	d112      	bne.n	80010c2 <__aeabi_fsub+0x1ee>
 800109c:	2d00      	cmp	r5, #0
 800109e:	d152      	bne.n	8001146 <__aeabi_fsub+0x272>
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d07c      	beq.n	800119e <__aeabi_fsub+0x2ca>
 80010a4:	2e00      	cmp	r6, #0
 80010a6:	d0bb      	beq.n	8001020 <__aeabi_fsub+0x14c>
 80010a8:	1b9a      	subs	r2, r3, r6
 80010aa:	0150      	lsls	r0, r2, #5
 80010ac:	d400      	bmi.n	80010b0 <__aeabi_fsub+0x1dc>
 80010ae:	e08b      	b.n	80011c8 <__aeabi_fsub+0x2f4>
 80010b0:	2401      	movs	r4, #1
 80010b2:	2200      	movs	r2, #0
 80010b4:	1af3      	subs	r3, r6, r3
 80010b6:	400c      	ands	r4, r1
 80010b8:	e7e8      	b.n	800108c <__aeabi_fsub+0x1b8>
 80010ba:	4b56      	ldr	r3, [pc, #344]	@ (8001214 <__aeabi_fsub+0x340>)
 80010bc:	1a2a      	subs	r2, r5, r0
 80010be:	403b      	ands	r3, r7
 80010c0:	e7e4      	b.n	800108c <__aeabi_fsub+0x1b8>
 80010c2:	1b9f      	subs	r7, r3, r6
 80010c4:	017a      	lsls	r2, r7, #5
 80010c6:	d446      	bmi.n	8001156 <__aeabi_fsub+0x282>
 80010c8:	2f00      	cmp	r7, #0
 80010ca:	d1cd      	bne.n	8001068 <__aeabi_fsub+0x194>
 80010cc:	2400      	movs	r4, #0
 80010ce:	2000      	movs	r0, #0
 80010d0:	2300      	movs	r3, #0
 80010d2:	e777      	b.n	8000fc4 <__aeabi_fsub+0xf0>
 80010d4:	199b      	adds	r3, r3, r6
 80010d6:	2501      	movs	r5, #1
 80010d8:	3201      	adds	r2, #1
 80010da:	0159      	lsls	r1, r3, #5
 80010dc:	d400      	bmi.n	80010e0 <__aeabi_fsub+0x20c>
 80010de:	e760      	b.n	8000fa2 <__aeabi_fsub+0xce>
 80010e0:	2101      	movs	r1, #1
 80010e2:	484d      	ldr	r0, [pc, #308]	@ (8001218 <__aeabi_fsub+0x344>)
 80010e4:	4019      	ands	r1, r3
 80010e6:	085b      	lsrs	r3, r3, #1
 80010e8:	4003      	ands	r3, r0
 80010ea:	430b      	orrs	r3, r1
 80010ec:	e7ce      	b.n	800108c <__aeabi_fsub+0x1b8>
 80010ee:	1e57      	subs	r7, r2, #1
 80010f0:	2a01      	cmp	r2, #1
 80010f2:	d05a      	beq.n	80011aa <__aeabi_fsub+0x2d6>
 80010f4:	000c      	movs	r4, r1
 80010f6:	2aff      	cmp	r2, #255	@ 0xff
 80010f8:	d033      	beq.n	8001162 <__aeabi_fsub+0x28e>
 80010fa:	2201      	movs	r2, #1
 80010fc:	2f1b      	cmp	r7, #27
 80010fe:	dc07      	bgt.n	8001110 <__aeabi_fsub+0x23c>
 8001100:	2120      	movs	r1, #32
 8001102:	1bc9      	subs	r1, r1, r7
 8001104:	001a      	movs	r2, r3
 8001106:	408b      	lsls	r3, r1
 8001108:	40fa      	lsrs	r2, r7
 800110a:	1e59      	subs	r1, r3, #1
 800110c:	418b      	sbcs	r3, r1
 800110e:	431a      	orrs	r2, r3
 8001110:	0005      	movs	r5, r0
 8001112:	1ab3      	subs	r3, r6, r2
 8001114:	e743      	b.n	8000f9e <__aeabi_fsub+0xca>
 8001116:	2d00      	cmp	r5, #0
 8001118:	d123      	bne.n	8001162 <__aeabi_fsub+0x28e>
 800111a:	22ff      	movs	r2, #255	@ 0xff
 800111c:	2b00      	cmp	r3, #0
 800111e:	d09b      	beq.n	8001058 <__aeabi_fsub+0x184>
 8001120:	1e51      	subs	r1, r2, #1
 8001122:	2a01      	cmp	r2, #1
 8001124:	d0d6      	beq.n	80010d4 <__aeabi_fsub+0x200>
 8001126:	2aff      	cmp	r2, #255	@ 0xff
 8001128:	d01b      	beq.n	8001162 <__aeabi_fsub+0x28e>
 800112a:	291b      	cmp	r1, #27
 800112c:	dd2c      	ble.n	8001188 <__aeabi_fsub+0x2b4>
 800112e:	0002      	movs	r2, r0
 8001130:	1c73      	adds	r3, r6, #1
 8001132:	e73a      	b.n	8000faa <__aeabi_fsub+0xd6>
 8001134:	2aff      	cmp	r2, #255	@ 0xff
 8001136:	d088      	beq.n	800104a <__aeabi_fsub+0x176>
 8001138:	199b      	adds	r3, r3, r6
 800113a:	085b      	lsrs	r3, r3, #1
 800113c:	0759      	lsls	r1, r3, #29
 800113e:	d000      	beq.n	8001142 <__aeabi_fsub+0x26e>
 8001140:	e733      	b.n	8000faa <__aeabi_fsub+0xd6>
 8001142:	08db      	lsrs	r3, r3, #3
 8001144:	e76e      	b.n	8001024 <__aeabi_fsub+0x150>
 8001146:	2b00      	cmp	r3, #0
 8001148:	d110      	bne.n	800116c <__aeabi_fsub+0x298>
 800114a:	2e00      	cmp	r6, #0
 800114c:	d043      	beq.n	80011d6 <__aeabi_fsub+0x302>
 800114e:	2401      	movs	r4, #1
 8001150:	0033      	movs	r3, r6
 8001152:	400c      	ands	r4, r1
 8001154:	e706      	b.n	8000f64 <__aeabi_fsub+0x90>
 8001156:	2401      	movs	r4, #1
 8001158:	1af7      	subs	r7, r6, r3
 800115a:	400c      	ands	r4, r1
 800115c:	e784      	b.n	8001068 <__aeabi_fsub+0x194>
 800115e:	2b00      	cmp	r3, #0
 8001160:	d104      	bne.n	800116c <__aeabi_fsub+0x298>
 8001162:	0033      	movs	r3, r6
 8001164:	e6fe      	b.n	8000f64 <__aeabi_fsub+0x90>
 8001166:	2501      	movs	r5, #1
 8001168:	1b9b      	subs	r3, r3, r6
 800116a:	e718      	b.n	8000f9e <__aeabi_fsub+0xca>
 800116c:	2e00      	cmp	r6, #0
 800116e:	d100      	bne.n	8001172 <__aeabi_fsub+0x29e>
 8001170:	e6f8      	b.n	8000f64 <__aeabi_fsub+0x90>
 8001172:	2280      	movs	r2, #128	@ 0x80
 8001174:	03d2      	lsls	r2, r2, #15
 8001176:	4297      	cmp	r7, r2
 8001178:	d304      	bcc.n	8001184 <__aeabi_fsub+0x2b0>
 800117a:	4594      	cmp	ip, r2
 800117c:	d202      	bcs.n	8001184 <__aeabi_fsub+0x2b0>
 800117e:	2401      	movs	r4, #1
 8001180:	0033      	movs	r3, r6
 8001182:	400c      	ands	r4, r1
 8001184:	08db      	lsrs	r3, r3, #3
 8001186:	e6f1      	b.n	8000f6c <__aeabi_fsub+0x98>
 8001188:	001a      	movs	r2, r3
 800118a:	2520      	movs	r5, #32
 800118c:	40ca      	lsrs	r2, r1
 800118e:	1a69      	subs	r1, r5, r1
 8001190:	408b      	lsls	r3, r1
 8001192:	1e59      	subs	r1, r3, #1
 8001194:	418b      	sbcs	r3, r1
 8001196:	4313      	orrs	r3, r2
 8001198:	0005      	movs	r5, r0
 800119a:	199b      	adds	r3, r3, r6
 800119c:	e750      	b.n	8001040 <__aeabi_fsub+0x16c>
 800119e:	2e00      	cmp	r6, #0
 80011a0:	d094      	beq.n	80010cc <__aeabi_fsub+0x1f8>
 80011a2:	2401      	movs	r4, #1
 80011a4:	0033      	movs	r3, r6
 80011a6:	400c      	ands	r4, r1
 80011a8:	e73a      	b.n	8001020 <__aeabi_fsub+0x14c>
 80011aa:	000c      	movs	r4, r1
 80011ac:	2501      	movs	r5, #1
 80011ae:	1af3      	subs	r3, r6, r3
 80011b0:	e6f5      	b.n	8000f9e <__aeabi_fsub+0xca>
 80011b2:	0033      	movs	r3, r6
 80011b4:	e734      	b.n	8001020 <__aeabi_fsub+0x14c>
 80011b6:	199b      	adds	r3, r3, r6
 80011b8:	2200      	movs	r2, #0
 80011ba:	0159      	lsls	r1, r3, #5
 80011bc:	d5c1      	bpl.n	8001142 <__aeabi_fsub+0x26e>
 80011be:	4a15      	ldr	r2, [pc, #84]	@ (8001214 <__aeabi_fsub+0x340>)
 80011c0:	4013      	ands	r3, r2
 80011c2:	08db      	lsrs	r3, r3, #3
 80011c4:	2201      	movs	r2, #1
 80011c6:	e72d      	b.n	8001024 <__aeabi_fsub+0x150>
 80011c8:	2a00      	cmp	r2, #0
 80011ca:	d100      	bne.n	80011ce <__aeabi_fsub+0x2fa>
 80011cc:	e77e      	b.n	80010cc <__aeabi_fsub+0x1f8>
 80011ce:	0013      	movs	r3, r2
 80011d0:	2200      	movs	r2, #0
 80011d2:	08db      	lsrs	r3, r3, #3
 80011d4:	e726      	b.n	8001024 <__aeabi_fsub+0x150>
 80011d6:	2380      	movs	r3, #128	@ 0x80
 80011d8:	2400      	movs	r4, #0
 80011da:	20ff      	movs	r0, #255	@ 0xff
 80011dc:	03db      	lsls	r3, r3, #15
 80011de:	e6f1      	b.n	8000fc4 <__aeabi_fsub+0xf0>
 80011e0:	2a00      	cmp	r2, #0
 80011e2:	d100      	bne.n	80011e6 <__aeabi_fsub+0x312>
 80011e4:	e756      	b.n	8001094 <__aeabi_fsub+0x1c0>
 80011e6:	1b47      	subs	r7, r0, r5
 80011e8:	003a      	movs	r2, r7
 80011ea:	2d00      	cmp	r5, #0
 80011ec:	d100      	bne.n	80011f0 <__aeabi_fsub+0x31c>
 80011ee:	e730      	b.n	8001052 <__aeabi_fsub+0x17e>
 80011f0:	2280      	movs	r2, #128	@ 0x80
 80011f2:	04d2      	lsls	r2, r2, #19
 80011f4:	000c      	movs	r4, r1
 80011f6:	4313      	orrs	r3, r2
 80011f8:	e77f      	b.n	80010fa <__aeabi_fsub+0x226>
 80011fa:	2a00      	cmp	r2, #0
 80011fc:	d100      	bne.n	8001200 <__aeabi_fsub+0x32c>
 80011fe:	e701      	b.n	8001004 <__aeabi_fsub+0x130>
 8001200:	1b41      	subs	r1, r0, r5
 8001202:	2d00      	cmp	r5, #0
 8001204:	d101      	bne.n	800120a <__aeabi_fsub+0x336>
 8001206:	000a      	movs	r2, r1
 8001208:	e788      	b.n	800111c <__aeabi_fsub+0x248>
 800120a:	2280      	movs	r2, #128	@ 0x80
 800120c:	04d2      	lsls	r2, r2, #19
 800120e:	4313      	orrs	r3, r2
 8001210:	e78b      	b.n	800112a <__aeabi_fsub+0x256>
 8001212:	46c0      	nop			@ (mov r8, r8)
 8001214:	fbffffff 	.word	0xfbffffff
 8001218:	7dffffff 	.word	0x7dffffff

0800121c <__aeabi_fcmpun>:
 800121c:	0243      	lsls	r3, r0, #9
 800121e:	024a      	lsls	r2, r1, #9
 8001220:	0040      	lsls	r0, r0, #1
 8001222:	0049      	lsls	r1, r1, #1
 8001224:	0a5b      	lsrs	r3, r3, #9
 8001226:	0a52      	lsrs	r2, r2, #9
 8001228:	0e09      	lsrs	r1, r1, #24
 800122a:	0e00      	lsrs	r0, r0, #24
 800122c:	28ff      	cmp	r0, #255	@ 0xff
 800122e:	d006      	beq.n	800123e <__aeabi_fcmpun+0x22>
 8001230:	2000      	movs	r0, #0
 8001232:	29ff      	cmp	r1, #255	@ 0xff
 8001234:	d102      	bne.n	800123c <__aeabi_fcmpun+0x20>
 8001236:	1e53      	subs	r3, r2, #1
 8001238:	419a      	sbcs	r2, r3
 800123a:	0010      	movs	r0, r2
 800123c:	4770      	bx	lr
 800123e:	38fe      	subs	r0, #254	@ 0xfe
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1fb      	bne.n	800123c <__aeabi_fcmpun+0x20>
 8001244:	e7f4      	b.n	8001230 <__aeabi_fcmpun+0x14>
 8001246:	46c0      	nop			@ (mov r8, r8)

08001248 <__aeabi_f2iz>:
 8001248:	0241      	lsls	r1, r0, #9
 800124a:	0042      	lsls	r2, r0, #1
 800124c:	0fc3      	lsrs	r3, r0, #31
 800124e:	0a49      	lsrs	r1, r1, #9
 8001250:	2000      	movs	r0, #0
 8001252:	0e12      	lsrs	r2, r2, #24
 8001254:	2a7e      	cmp	r2, #126	@ 0x7e
 8001256:	dd03      	ble.n	8001260 <__aeabi_f2iz+0x18>
 8001258:	2a9d      	cmp	r2, #157	@ 0x9d
 800125a:	dd02      	ble.n	8001262 <__aeabi_f2iz+0x1a>
 800125c:	4a09      	ldr	r2, [pc, #36]	@ (8001284 <__aeabi_f2iz+0x3c>)
 800125e:	1898      	adds	r0, r3, r2
 8001260:	4770      	bx	lr
 8001262:	2080      	movs	r0, #128	@ 0x80
 8001264:	0400      	lsls	r0, r0, #16
 8001266:	4301      	orrs	r1, r0
 8001268:	2a95      	cmp	r2, #149	@ 0x95
 800126a:	dc07      	bgt.n	800127c <__aeabi_f2iz+0x34>
 800126c:	2096      	movs	r0, #150	@ 0x96
 800126e:	1a82      	subs	r2, r0, r2
 8001270:	40d1      	lsrs	r1, r2
 8001272:	4248      	negs	r0, r1
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1f3      	bne.n	8001260 <__aeabi_f2iz+0x18>
 8001278:	0008      	movs	r0, r1
 800127a:	e7f1      	b.n	8001260 <__aeabi_f2iz+0x18>
 800127c:	3a96      	subs	r2, #150	@ 0x96
 800127e:	4091      	lsls	r1, r2
 8001280:	e7f7      	b.n	8001272 <__aeabi_f2iz+0x2a>
 8001282:	46c0      	nop			@ (mov r8, r8)
 8001284:	7fffffff 	.word	0x7fffffff

08001288 <__aeabi_i2f>:
 8001288:	b570      	push	{r4, r5, r6, lr}
 800128a:	2800      	cmp	r0, #0
 800128c:	d013      	beq.n	80012b6 <__aeabi_i2f+0x2e>
 800128e:	17c3      	asrs	r3, r0, #31
 8001290:	18c5      	adds	r5, r0, r3
 8001292:	405d      	eors	r5, r3
 8001294:	0fc4      	lsrs	r4, r0, #31
 8001296:	0028      	movs	r0, r5
 8001298:	f001 ff40 	bl	800311c <__clzsi2>
 800129c:	239e      	movs	r3, #158	@ 0x9e
 800129e:	0001      	movs	r1, r0
 80012a0:	1a1b      	subs	r3, r3, r0
 80012a2:	2b96      	cmp	r3, #150	@ 0x96
 80012a4:	dc0f      	bgt.n	80012c6 <__aeabi_i2f+0x3e>
 80012a6:	2808      	cmp	r0, #8
 80012a8:	d034      	beq.n	8001314 <__aeabi_i2f+0x8c>
 80012aa:	3908      	subs	r1, #8
 80012ac:	408d      	lsls	r5, r1
 80012ae:	026d      	lsls	r5, r5, #9
 80012b0:	0a6d      	lsrs	r5, r5, #9
 80012b2:	b2d8      	uxtb	r0, r3
 80012b4:	e002      	b.n	80012bc <__aeabi_i2f+0x34>
 80012b6:	2400      	movs	r4, #0
 80012b8:	2000      	movs	r0, #0
 80012ba:	2500      	movs	r5, #0
 80012bc:	05c0      	lsls	r0, r0, #23
 80012be:	4328      	orrs	r0, r5
 80012c0:	07e4      	lsls	r4, r4, #31
 80012c2:	4320      	orrs	r0, r4
 80012c4:	bd70      	pop	{r4, r5, r6, pc}
 80012c6:	2b99      	cmp	r3, #153	@ 0x99
 80012c8:	dc16      	bgt.n	80012f8 <__aeabi_i2f+0x70>
 80012ca:	1f42      	subs	r2, r0, #5
 80012cc:	2805      	cmp	r0, #5
 80012ce:	d000      	beq.n	80012d2 <__aeabi_i2f+0x4a>
 80012d0:	4095      	lsls	r5, r2
 80012d2:	002a      	movs	r2, r5
 80012d4:	4811      	ldr	r0, [pc, #68]	@ (800131c <__aeabi_i2f+0x94>)
 80012d6:	4002      	ands	r2, r0
 80012d8:	076e      	lsls	r6, r5, #29
 80012da:	d009      	beq.n	80012f0 <__aeabi_i2f+0x68>
 80012dc:	260f      	movs	r6, #15
 80012de:	4035      	ands	r5, r6
 80012e0:	2d04      	cmp	r5, #4
 80012e2:	d005      	beq.n	80012f0 <__aeabi_i2f+0x68>
 80012e4:	3204      	adds	r2, #4
 80012e6:	0155      	lsls	r5, r2, #5
 80012e8:	d502      	bpl.n	80012f0 <__aeabi_i2f+0x68>
 80012ea:	239f      	movs	r3, #159	@ 0x9f
 80012ec:	4002      	ands	r2, r0
 80012ee:	1a5b      	subs	r3, r3, r1
 80012f0:	0192      	lsls	r2, r2, #6
 80012f2:	0a55      	lsrs	r5, r2, #9
 80012f4:	b2d8      	uxtb	r0, r3
 80012f6:	e7e1      	b.n	80012bc <__aeabi_i2f+0x34>
 80012f8:	2205      	movs	r2, #5
 80012fa:	1a12      	subs	r2, r2, r0
 80012fc:	0028      	movs	r0, r5
 80012fe:	40d0      	lsrs	r0, r2
 8001300:	0002      	movs	r2, r0
 8001302:	0008      	movs	r0, r1
 8001304:	301b      	adds	r0, #27
 8001306:	4085      	lsls	r5, r0
 8001308:	0028      	movs	r0, r5
 800130a:	1e45      	subs	r5, r0, #1
 800130c:	41a8      	sbcs	r0, r5
 800130e:	4302      	orrs	r2, r0
 8001310:	0015      	movs	r5, r2
 8001312:	e7de      	b.n	80012d2 <__aeabi_i2f+0x4a>
 8001314:	026d      	lsls	r5, r5, #9
 8001316:	2096      	movs	r0, #150	@ 0x96
 8001318:	0a6d      	lsrs	r5, r5, #9
 800131a:	e7cf      	b.n	80012bc <__aeabi_i2f+0x34>
 800131c:	fbffffff 	.word	0xfbffffff

08001320 <__aeabi_ui2f>:
 8001320:	b570      	push	{r4, r5, r6, lr}
 8001322:	1e04      	subs	r4, r0, #0
 8001324:	d00e      	beq.n	8001344 <__aeabi_ui2f+0x24>
 8001326:	f001 fef9 	bl	800311c <__clzsi2>
 800132a:	239e      	movs	r3, #158	@ 0x9e
 800132c:	0001      	movs	r1, r0
 800132e:	1a1b      	subs	r3, r3, r0
 8001330:	2b96      	cmp	r3, #150	@ 0x96
 8001332:	dc0c      	bgt.n	800134e <__aeabi_ui2f+0x2e>
 8001334:	2808      	cmp	r0, #8
 8001336:	d02f      	beq.n	8001398 <__aeabi_ui2f+0x78>
 8001338:	3908      	subs	r1, #8
 800133a:	408c      	lsls	r4, r1
 800133c:	0264      	lsls	r4, r4, #9
 800133e:	0a64      	lsrs	r4, r4, #9
 8001340:	b2d8      	uxtb	r0, r3
 8001342:	e001      	b.n	8001348 <__aeabi_ui2f+0x28>
 8001344:	2000      	movs	r0, #0
 8001346:	2400      	movs	r4, #0
 8001348:	05c0      	lsls	r0, r0, #23
 800134a:	4320      	orrs	r0, r4
 800134c:	bd70      	pop	{r4, r5, r6, pc}
 800134e:	2b99      	cmp	r3, #153	@ 0x99
 8001350:	dc16      	bgt.n	8001380 <__aeabi_ui2f+0x60>
 8001352:	1f42      	subs	r2, r0, #5
 8001354:	2805      	cmp	r0, #5
 8001356:	d000      	beq.n	800135a <__aeabi_ui2f+0x3a>
 8001358:	4094      	lsls	r4, r2
 800135a:	0022      	movs	r2, r4
 800135c:	4810      	ldr	r0, [pc, #64]	@ (80013a0 <__aeabi_ui2f+0x80>)
 800135e:	4002      	ands	r2, r0
 8001360:	0765      	lsls	r5, r4, #29
 8001362:	d009      	beq.n	8001378 <__aeabi_ui2f+0x58>
 8001364:	250f      	movs	r5, #15
 8001366:	402c      	ands	r4, r5
 8001368:	2c04      	cmp	r4, #4
 800136a:	d005      	beq.n	8001378 <__aeabi_ui2f+0x58>
 800136c:	3204      	adds	r2, #4
 800136e:	0154      	lsls	r4, r2, #5
 8001370:	d502      	bpl.n	8001378 <__aeabi_ui2f+0x58>
 8001372:	239f      	movs	r3, #159	@ 0x9f
 8001374:	4002      	ands	r2, r0
 8001376:	1a5b      	subs	r3, r3, r1
 8001378:	0192      	lsls	r2, r2, #6
 800137a:	0a54      	lsrs	r4, r2, #9
 800137c:	b2d8      	uxtb	r0, r3
 800137e:	e7e3      	b.n	8001348 <__aeabi_ui2f+0x28>
 8001380:	0002      	movs	r2, r0
 8001382:	0020      	movs	r0, r4
 8001384:	321b      	adds	r2, #27
 8001386:	4090      	lsls	r0, r2
 8001388:	0002      	movs	r2, r0
 800138a:	1e50      	subs	r0, r2, #1
 800138c:	4182      	sbcs	r2, r0
 800138e:	2005      	movs	r0, #5
 8001390:	1a40      	subs	r0, r0, r1
 8001392:	40c4      	lsrs	r4, r0
 8001394:	4314      	orrs	r4, r2
 8001396:	e7e0      	b.n	800135a <__aeabi_ui2f+0x3a>
 8001398:	0264      	lsls	r4, r4, #9
 800139a:	2096      	movs	r0, #150	@ 0x96
 800139c:	0a64      	lsrs	r4, r4, #9
 800139e:	e7d3      	b.n	8001348 <__aeabi_ui2f+0x28>
 80013a0:	fbffffff 	.word	0xfbffffff

080013a4 <__aeabi_dadd>:
 80013a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a6:	4657      	mov	r7, sl
 80013a8:	464e      	mov	r6, r9
 80013aa:	4645      	mov	r5, r8
 80013ac:	46de      	mov	lr, fp
 80013ae:	b5e0      	push	{r5, r6, r7, lr}
 80013b0:	b083      	sub	sp, #12
 80013b2:	9000      	str	r0, [sp, #0]
 80013b4:	9101      	str	r1, [sp, #4]
 80013b6:	030c      	lsls	r4, r1, #12
 80013b8:	004f      	lsls	r7, r1, #1
 80013ba:	0fce      	lsrs	r6, r1, #31
 80013bc:	0a61      	lsrs	r1, r4, #9
 80013be:	9c00      	ldr	r4, [sp, #0]
 80013c0:	031d      	lsls	r5, r3, #12
 80013c2:	0f64      	lsrs	r4, r4, #29
 80013c4:	430c      	orrs	r4, r1
 80013c6:	9900      	ldr	r1, [sp, #0]
 80013c8:	9200      	str	r2, [sp, #0]
 80013ca:	9301      	str	r3, [sp, #4]
 80013cc:	00c8      	lsls	r0, r1, #3
 80013ce:	0059      	lsls	r1, r3, #1
 80013d0:	0d4b      	lsrs	r3, r1, #21
 80013d2:	4699      	mov	r9, r3
 80013d4:	9a00      	ldr	r2, [sp, #0]
 80013d6:	9b01      	ldr	r3, [sp, #4]
 80013d8:	0a6d      	lsrs	r5, r5, #9
 80013da:	0fd9      	lsrs	r1, r3, #31
 80013dc:	0f53      	lsrs	r3, r2, #29
 80013de:	432b      	orrs	r3, r5
 80013e0:	469a      	mov	sl, r3
 80013e2:	9b00      	ldr	r3, [sp, #0]
 80013e4:	0d7f      	lsrs	r7, r7, #21
 80013e6:	00da      	lsls	r2, r3, #3
 80013e8:	4694      	mov	ip, r2
 80013ea:	464a      	mov	r2, r9
 80013ec:	46b0      	mov	r8, r6
 80013ee:	1aba      	subs	r2, r7, r2
 80013f0:	428e      	cmp	r6, r1
 80013f2:	d100      	bne.n	80013f6 <__aeabi_dadd+0x52>
 80013f4:	e0b0      	b.n	8001558 <__aeabi_dadd+0x1b4>
 80013f6:	2a00      	cmp	r2, #0
 80013f8:	dc00      	bgt.n	80013fc <__aeabi_dadd+0x58>
 80013fa:	e078      	b.n	80014ee <__aeabi_dadd+0x14a>
 80013fc:	4649      	mov	r1, r9
 80013fe:	2900      	cmp	r1, #0
 8001400:	d100      	bne.n	8001404 <__aeabi_dadd+0x60>
 8001402:	e0e9      	b.n	80015d8 <__aeabi_dadd+0x234>
 8001404:	49c9      	ldr	r1, [pc, #804]	@ (800172c <__aeabi_dadd+0x388>)
 8001406:	428f      	cmp	r7, r1
 8001408:	d100      	bne.n	800140c <__aeabi_dadd+0x68>
 800140a:	e195      	b.n	8001738 <__aeabi_dadd+0x394>
 800140c:	2501      	movs	r5, #1
 800140e:	2a38      	cmp	r2, #56	@ 0x38
 8001410:	dc16      	bgt.n	8001440 <__aeabi_dadd+0x9c>
 8001412:	2180      	movs	r1, #128	@ 0x80
 8001414:	4653      	mov	r3, sl
 8001416:	0409      	lsls	r1, r1, #16
 8001418:	430b      	orrs	r3, r1
 800141a:	469a      	mov	sl, r3
 800141c:	2a1f      	cmp	r2, #31
 800141e:	dd00      	ble.n	8001422 <__aeabi_dadd+0x7e>
 8001420:	e1e7      	b.n	80017f2 <__aeabi_dadd+0x44e>
 8001422:	2120      	movs	r1, #32
 8001424:	4655      	mov	r5, sl
 8001426:	1a8b      	subs	r3, r1, r2
 8001428:	4661      	mov	r1, ip
 800142a:	409d      	lsls	r5, r3
 800142c:	40d1      	lsrs	r1, r2
 800142e:	430d      	orrs	r5, r1
 8001430:	4661      	mov	r1, ip
 8001432:	4099      	lsls	r1, r3
 8001434:	1e4b      	subs	r3, r1, #1
 8001436:	4199      	sbcs	r1, r3
 8001438:	4653      	mov	r3, sl
 800143a:	40d3      	lsrs	r3, r2
 800143c:	430d      	orrs	r5, r1
 800143e:	1ae4      	subs	r4, r4, r3
 8001440:	1b45      	subs	r5, r0, r5
 8001442:	42a8      	cmp	r0, r5
 8001444:	4180      	sbcs	r0, r0
 8001446:	4240      	negs	r0, r0
 8001448:	1a24      	subs	r4, r4, r0
 800144a:	0223      	lsls	r3, r4, #8
 800144c:	d400      	bmi.n	8001450 <__aeabi_dadd+0xac>
 800144e:	e10f      	b.n	8001670 <__aeabi_dadd+0x2cc>
 8001450:	0264      	lsls	r4, r4, #9
 8001452:	0a64      	lsrs	r4, r4, #9
 8001454:	2c00      	cmp	r4, #0
 8001456:	d100      	bne.n	800145a <__aeabi_dadd+0xb6>
 8001458:	e139      	b.n	80016ce <__aeabi_dadd+0x32a>
 800145a:	0020      	movs	r0, r4
 800145c:	f001 fe5e 	bl	800311c <__clzsi2>
 8001460:	0003      	movs	r3, r0
 8001462:	3b08      	subs	r3, #8
 8001464:	2120      	movs	r1, #32
 8001466:	0028      	movs	r0, r5
 8001468:	1aca      	subs	r2, r1, r3
 800146a:	40d0      	lsrs	r0, r2
 800146c:	409c      	lsls	r4, r3
 800146e:	0002      	movs	r2, r0
 8001470:	409d      	lsls	r5, r3
 8001472:	4322      	orrs	r2, r4
 8001474:	429f      	cmp	r7, r3
 8001476:	dd00      	ble.n	800147a <__aeabi_dadd+0xd6>
 8001478:	e173      	b.n	8001762 <__aeabi_dadd+0x3be>
 800147a:	1bd8      	subs	r0, r3, r7
 800147c:	3001      	adds	r0, #1
 800147e:	1a09      	subs	r1, r1, r0
 8001480:	002c      	movs	r4, r5
 8001482:	408d      	lsls	r5, r1
 8001484:	40c4      	lsrs	r4, r0
 8001486:	1e6b      	subs	r3, r5, #1
 8001488:	419d      	sbcs	r5, r3
 800148a:	0013      	movs	r3, r2
 800148c:	40c2      	lsrs	r2, r0
 800148e:	408b      	lsls	r3, r1
 8001490:	4325      	orrs	r5, r4
 8001492:	2700      	movs	r7, #0
 8001494:	0014      	movs	r4, r2
 8001496:	431d      	orrs	r5, r3
 8001498:	076b      	lsls	r3, r5, #29
 800149a:	d009      	beq.n	80014b0 <__aeabi_dadd+0x10c>
 800149c:	230f      	movs	r3, #15
 800149e:	402b      	ands	r3, r5
 80014a0:	2b04      	cmp	r3, #4
 80014a2:	d005      	beq.n	80014b0 <__aeabi_dadd+0x10c>
 80014a4:	1d2b      	adds	r3, r5, #4
 80014a6:	42ab      	cmp	r3, r5
 80014a8:	41ad      	sbcs	r5, r5
 80014aa:	426d      	negs	r5, r5
 80014ac:	1964      	adds	r4, r4, r5
 80014ae:	001d      	movs	r5, r3
 80014b0:	0223      	lsls	r3, r4, #8
 80014b2:	d400      	bmi.n	80014b6 <__aeabi_dadd+0x112>
 80014b4:	e12d      	b.n	8001712 <__aeabi_dadd+0x36e>
 80014b6:	4a9d      	ldr	r2, [pc, #628]	@ (800172c <__aeabi_dadd+0x388>)
 80014b8:	3701      	adds	r7, #1
 80014ba:	4297      	cmp	r7, r2
 80014bc:	d100      	bne.n	80014c0 <__aeabi_dadd+0x11c>
 80014be:	e0d3      	b.n	8001668 <__aeabi_dadd+0x2c4>
 80014c0:	4646      	mov	r6, r8
 80014c2:	499b      	ldr	r1, [pc, #620]	@ (8001730 <__aeabi_dadd+0x38c>)
 80014c4:	08ed      	lsrs	r5, r5, #3
 80014c6:	4021      	ands	r1, r4
 80014c8:	074a      	lsls	r2, r1, #29
 80014ca:	432a      	orrs	r2, r5
 80014cc:	057c      	lsls	r4, r7, #21
 80014ce:	024d      	lsls	r5, r1, #9
 80014d0:	0b2d      	lsrs	r5, r5, #12
 80014d2:	0d64      	lsrs	r4, r4, #21
 80014d4:	0524      	lsls	r4, r4, #20
 80014d6:	432c      	orrs	r4, r5
 80014d8:	07f6      	lsls	r6, r6, #31
 80014da:	4334      	orrs	r4, r6
 80014dc:	0010      	movs	r0, r2
 80014de:	0021      	movs	r1, r4
 80014e0:	b003      	add	sp, #12
 80014e2:	bcf0      	pop	{r4, r5, r6, r7}
 80014e4:	46bb      	mov	fp, r7
 80014e6:	46b2      	mov	sl, r6
 80014e8:	46a9      	mov	r9, r5
 80014ea:	46a0      	mov	r8, r4
 80014ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ee:	2a00      	cmp	r2, #0
 80014f0:	d100      	bne.n	80014f4 <__aeabi_dadd+0x150>
 80014f2:	e084      	b.n	80015fe <__aeabi_dadd+0x25a>
 80014f4:	464a      	mov	r2, r9
 80014f6:	1bd2      	subs	r2, r2, r7
 80014f8:	2f00      	cmp	r7, #0
 80014fa:	d000      	beq.n	80014fe <__aeabi_dadd+0x15a>
 80014fc:	e16d      	b.n	80017da <__aeabi_dadd+0x436>
 80014fe:	0025      	movs	r5, r4
 8001500:	4305      	orrs	r5, r0
 8001502:	d100      	bne.n	8001506 <__aeabi_dadd+0x162>
 8001504:	e127      	b.n	8001756 <__aeabi_dadd+0x3b2>
 8001506:	1e56      	subs	r6, r2, #1
 8001508:	2a01      	cmp	r2, #1
 800150a:	d100      	bne.n	800150e <__aeabi_dadd+0x16a>
 800150c:	e23b      	b.n	8001986 <__aeabi_dadd+0x5e2>
 800150e:	4d87      	ldr	r5, [pc, #540]	@ (800172c <__aeabi_dadd+0x388>)
 8001510:	42aa      	cmp	r2, r5
 8001512:	d100      	bne.n	8001516 <__aeabi_dadd+0x172>
 8001514:	e26a      	b.n	80019ec <__aeabi_dadd+0x648>
 8001516:	2501      	movs	r5, #1
 8001518:	2e38      	cmp	r6, #56	@ 0x38
 800151a:	dc12      	bgt.n	8001542 <__aeabi_dadd+0x19e>
 800151c:	0032      	movs	r2, r6
 800151e:	2a1f      	cmp	r2, #31
 8001520:	dd00      	ble.n	8001524 <__aeabi_dadd+0x180>
 8001522:	e1f8      	b.n	8001916 <__aeabi_dadd+0x572>
 8001524:	2620      	movs	r6, #32
 8001526:	0025      	movs	r5, r4
 8001528:	1ab6      	subs	r6, r6, r2
 800152a:	0007      	movs	r7, r0
 800152c:	4653      	mov	r3, sl
 800152e:	40b0      	lsls	r0, r6
 8001530:	40d4      	lsrs	r4, r2
 8001532:	40b5      	lsls	r5, r6
 8001534:	40d7      	lsrs	r7, r2
 8001536:	1e46      	subs	r6, r0, #1
 8001538:	41b0      	sbcs	r0, r6
 800153a:	1b1b      	subs	r3, r3, r4
 800153c:	469a      	mov	sl, r3
 800153e:	433d      	orrs	r5, r7
 8001540:	4305      	orrs	r5, r0
 8001542:	4662      	mov	r2, ip
 8001544:	1b55      	subs	r5, r2, r5
 8001546:	45ac      	cmp	ip, r5
 8001548:	4192      	sbcs	r2, r2
 800154a:	4653      	mov	r3, sl
 800154c:	4252      	negs	r2, r2
 800154e:	000e      	movs	r6, r1
 8001550:	464f      	mov	r7, r9
 8001552:	4688      	mov	r8, r1
 8001554:	1a9c      	subs	r4, r3, r2
 8001556:	e778      	b.n	800144a <__aeabi_dadd+0xa6>
 8001558:	2a00      	cmp	r2, #0
 800155a:	dc00      	bgt.n	800155e <__aeabi_dadd+0x1ba>
 800155c:	e08e      	b.n	800167c <__aeabi_dadd+0x2d8>
 800155e:	4649      	mov	r1, r9
 8001560:	2900      	cmp	r1, #0
 8001562:	d175      	bne.n	8001650 <__aeabi_dadd+0x2ac>
 8001564:	4661      	mov	r1, ip
 8001566:	4653      	mov	r3, sl
 8001568:	4319      	orrs	r1, r3
 800156a:	d100      	bne.n	800156e <__aeabi_dadd+0x1ca>
 800156c:	e0f6      	b.n	800175c <__aeabi_dadd+0x3b8>
 800156e:	1e51      	subs	r1, r2, #1
 8001570:	2a01      	cmp	r2, #1
 8001572:	d100      	bne.n	8001576 <__aeabi_dadd+0x1d2>
 8001574:	e191      	b.n	800189a <__aeabi_dadd+0x4f6>
 8001576:	4d6d      	ldr	r5, [pc, #436]	@ (800172c <__aeabi_dadd+0x388>)
 8001578:	42aa      	cmp	r2, r5
 800157a:	d100      	bne.n	800157e <__aeabi_dadd+0x1da>
 800157c:	e0dc      	b.n	8001738 <__aeabi_dadd+0x394>
 800157e:	2501      	movs	r5, #1
 8001580:	2938      	cmp	r1, #56	@ 0x38
 8001582:	dc14      	bgt.n	80015ae <__aeabi_dadd+0x20a>
 8001584:	000a      	movs	r2, r1
 8001586:	2a1f      	cmp	r2, #31
 8001588:	dd00      	ble.n	800158c <__aeabi_dadd+0x1e8>
 800158a:	e1a2      	b.n	80018d2 <__aeabi_dadd+0x52e>
 800158c:	2120      	movs	r1, #32
 800158e:	4653      	mov	r3, sl
 8001590:	1a89      	subs	r1, r1, r2
 8001592:	408b      	lsls	r3, r1
 8001594:	001d      	movs	r5, r3
 8001596:	4663      	mov	r3, ip
 8001598:	40d3      	lsrs	r3, r2
 800159a:	431d      	orrs	r5, r3
 800159c:	4663      	mov	r3, ip
 800159e:	408b      	lsls	r3, r1
 80015a0:	0019      	movs	r1, r3
 80015a2:	1e4b      	subs	r3, r1, #1
 80015a4:	4199      	sbcs	r1, r3
 80015a6:	4653      	mov	r3, sl
 80015a8:	40d3      	lsrs	r3, r2
 80015aa:	430d      	orrs	r5, r1
 80015ac:	18e4      	adds	r4, r4, r3
 80015ae:	182d      	adds	r5, r5, r0
 80015b0:	4285      	cmp	r5, r0
 80015b2:	4180      	sbcs	r0, r0
 80015b4:	4240      	negs	r0, r0
 80015b6:	1824      	adds	r4, r4, r0
 80015b8:	0223      	lsls	r3, r4, #8
 80015ba:	d559      	bpl.n	8001670 <__aeabi_dadd+0x2cc>
 80015bc:	4b5b      	ldr	r3, [pc, #364]	@ (800172c <__aeabi_dadd+0x388>)
 80015be:	3701      	adds	r7, #1
 80015c0:	429f      	cmp	r7, r3
 80015c2:	d051      	beq.n	8001668 <__aeabi_dadd+0x2c4>
 80015c4:	2101      	movs	r1, #1
 80015c6:	4b5a      	ldr	r3, [pc, #360]	@ (8001730 <__aeabi_dadd+0x38c>)
 80015c8:	086a      	lsrs	r2, r5, #1
 80015ca:	401c      	ands	r4, r3
 80015cc:	4029      	ands	r1, r5
 80015ce:	430a      	orrs	r2, r1
 80015d0:	07e5      	lsls	r5, r4, #31
 80015d2:	4315      	orrs	r5, r2
 80015d4:	0864      	lsrs	r4, r4, #1
 80015d6:	e75f      	b.n	8001498 <__aeabi_dadd+0xf4>
 80015d8:	4661      	mov	r1, ip
 80015da:	4653      	mov	r3, sl
 80015dc:	4319      	orrs	r1, r3
 80015de:	d100      	bne.n	80015e2 <__aeabi_dadd+0x23e>
 80015e0:	e0bc      	b.n	800175c <__aeabi_dadd+0x3b8>
 80015e2:	1e51      	subs	r1, r2, #1
 80015e4:	2a01      	cmp	r2, #1
 80015e6:	d100      	bne.n	80015ea <__aeabi_dadd+0x246>
 80015e8:	e164      	b.n	80018b4 <__aeabi_dadd+0x510>
 80015ea:	4d50      	ldr	r5, [pc, #320]	@ (800172c <__aeabi_dadd+0x388>)
 80015ec:	42aa      	cmp	r2, r5
 80015ee:	d100      	bne.n	80015f2 <__aeabi_dadd+0x24e>
 80015f0:	e16a      	b.n	80018c8 <__aeabi_dadd+0x524>
 80015f2:	2501      	movs	r5, #1
 80015f4:	2938      	cmp	r1, #56	@ 0x38
 80015f6:	dd00      	ble.n	80015fa <__aeabi_dadd+0x256>
 80015f8:	e722      	b.n	8001440 <__aeabi_dadd+0x9c>
 80015fa:	000a      	movs	r2, r1
 80015fc:	e70e      	b.n	800141c <__aeabi_dadd+0x78>
 80015fe:	4a4d      	ldr	r2, [pc, #308]	@ (8001734 <__aeabi_dadd+0x390>)
 8001600:	1c7d      	adds	r5, r7, #1
 8001602:	4215      	tst	r5, r2
 8001604:	d000      	beq.n	8001608 <__aeabi_dadd+0x264>
 8001606:	e0d0      	b.n	80017aa <__aeabi_dadd+0x406>
 8001608:	0025      	movs	r5, r4
 800160a:	4662      	mov	r2, ip
 800160c:	4653      	mov	r3, sl
 800160e:	4305      	orrs	r5, r0
 8001610:	431a      	orrs	r2, r3
 8001612:	2f00      	cmp	r7, #0
 8001614:	d000      	beq.n	8001618 <__aeabi_dadd+0x274>
 8001616:	e137      	b.n	8001888 <__aeabi_dadd+0x4e4>
 8001618:	2d00      	cmp	r5, #0
 800161a:	d100      	bne.n	800161e <__aeabi_dadd+0x27a>
 800161c:	e1a8      	b.n	8001970 <__aeabi_dadd+0x5cc>
 800161e:	2a00      	cmp	r2, #0
 8001620:	d100      	bne.n	8001624 <__aeabi_dadd+0x280>
 8001622:	e16a      	b.n	80018fa <__aeabi_dadd+0x556>
 8001624:	4663      	mov	r3, ip
 8001626:	1ac5      	subs	r5, r0, r3
 8001628:	4653      	mov	r3, sl
 800162a:	1ae2      	subs	r2, r4, r3
 800162c:	42a8      	cmp	r0, r5
 800162e:	419b      	sbcs	r3, r3
 8001630:	425b      	negs	r3, r3
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	021a      	lsls	r2, r3, #8
 8001636:	d400      	bmi.n	800163a <__aeabi_dadd+0x296>
 8001638:	e203      	b.n	8001a42 <__aeabi_dadd+0x69e>
 800163a:	4663      	mov	r3, ip
 800163c:	1a1d      	subs	r5, r3, r0
 800163e:	45ac      	cmp	ip, r5
 8001640:	4192      	sbcs	r2, r2
 8001642:	4653      	mov	r3, sl
 8001644:	4252      	negs	r2, r2
 8001646:	1b1c      	subs	r4, r3, r4
 8001648:	000e      	movs	r6, r1
 800164a:	4688      	mov	r8, r1
 800164c:	1aa4      	subs	r4, r4, r2
 800164e:	e723      	b.n	8001498 <__aeabi_dadd+0xf4>
 8001650:	4936      	ldr	r1, [pc, #216]	@ (800172c <__aeabi_dadd+0x388>)
 8001652:	428f      	cmp	r7, r1
 8001654:	d070      	beq.n	8001738 <__aeabi_dadd+0x394>
 8001656:	2501      	movs	r5, #1
 8001658:	2a38      	cmp	r2, #56	@ 0x38
 800165a:	dca8      	bgt.n	80015ae <__aeabi_dadd+0x20a>
 800165c:	2180      	movs	r1, #128	@ 0x80
 800165e:	4653      	mov	r3, sl
 8001660:	0409      	lsls	r1, r1, #16
 8001662:	430b      	orrs	r3, r1
 8001664:	469a      	mov	sl, r3
 8001666:	e78e      	b.n	8001586 <__aeabi_dadd+0x1e2>
 8001668:	003c      	movs	r4, r7
 800166a:	2500      	movs	r5, #0
 800166c:	2200      	movs	r2, #0
 800166e:	e731      	b.n	80014d4 <__aeabi_dadd+0x130>
 8001670:	2307      	movs	r3, #7
 8001672:	402b      	ands	r3, r5
 8001674:	2b00      	cmp	r3, #0
 8001676:	d000      	beq.n	800167a <__aeabi_dadd+0x2d6>
 8001678:	e710      	b.n	800149c <__aeabi_dadd+0xf8>
 800167a:	e093      	b.n	80017a4 <__aeabi_dadd+0x400>
 800167c:	2a00      	cmp	r2, #0
 800167e:	d074      	beq.n	800176a <__aeabi_dadd+0x3c6>
 8001680:	464a      	mov	r2, r9
 8001682:	1bd2      	subs	r2, r2, r7
 8001684:	2f00      	cmp	r7, #0
 8001686:	d100      	bne.n	800168a <__aeabi_dadd+0x2e6>
 8001688:	e0c7      	b.n	800181a <__aeabi_dadd+0x476>
 800168a:	4928      	ldr	r1, [pc, #160]	@ (800172c <__aeabi_dadd+0x388>)
 800168c:	4589      	cmp	r9, r1
 800168e:	d100      	bne.n	8001692 <__aeabi_dadd+0x2ee>
 8001690:	e185      	b.n	800199e <__aeabi_dadd+0x5fa>
 8001692:	2501      	movs	r5, #1
 8001694:	2a38      	cmp	r2, #56	@ 0x38
 8001696:	dc12      	bgt.n	80016be <__aeabi_dadd+0x31a>
 8001698:	2180      	movs	r1, #128	@ 0x80
 800169a:	0409      	lsls	r1, r1, #16
 800169c:	430c      	orrs	r4, r1
 800169e:	2a1f      	cmp	r2, #31
 80016a0:	dd00      	ble.n	80016a4 <__aeabi_dadd+0x300>
 80016a2:	e1ab      	b.n	80019fc <__aeabi_dadd+0x658>
 80016a4:	2120      	movs	r1, #32
 80016a6:	0025      	movs	r5, r4
 80016a8:	1a89      	subs	r1, r1, r2
 80016aa:	0007      	movs	r7, r0
 80016ac:	4088      	lsls	r0, r1
 80016ae:	408d      	lsls	r5, r1
 80016b0:	40d7      	lsrs	r7, r2
 80016b2:	1e41      	subs	r1, r0, #1
 80016b4:	4188      	sbcs	r0, r1
 80016b6:	40d4      	lsrs	r4, r2
 80016b8:	433d      	orrs	r5, r7
 80016ba:	4305      	orrs	r5, r0
 80016bc:	44a2      	add	sl, r4
 80016be:	4465      	add	r5, ip
 80016c0:	4565      	cmp	r5, ip
 80016c2:	4192      	sbcs	r2, r2
 80016c4:	4252      	negs	r2, r2
 80016c6:	4452      	add	r2, sl
 80016c8:	0014      	movs	r4, r2
 80016ca:	464f      	mov	r7, r9
 80016cc:	e774      	b.n	80015b8 <__aeabi_dadd+0x214>
 80016ce:	0028      	movs	r0, r5
 80016d0:	f001 fd24 	bl	800311c <__clzsi2>
 80016d4:	0003      	movs	r3, r0
 80016d6:	3318      	adds	r3, #24
 80016d8:	2b1f      	cmp	r3, #31
 80016da:	dc00      	bgt.n	80016de <__aeabi_dadd+0x33a>
 80016dc:	e6c2      	b.n	8001464 <__aeabi_dadd+0xc0>
 80016de:	002a      	movs	r2, r5
 80016e0:	3808      	subs	r0, #8
 80016e2:	4082      	lsls	r2, r0
 80016e4:	429f      	cmp	r7, r3
 80016e6:	dd00      	ble.n	80016ea <__aeabi_dadd+0x346>
 80016e8:	e0a9      	b.n	800183e <__aeabi_dadd+0x49a>
 80016ea:	1bdb      	subs	r3, r3, r7
 80016ec:	1c58      	adds	r0, r3, #1
 80016ee:	281f      	cmp	r0, #31
 80016f0:	dc00      	bgt.n	80016f4 <__aeabi_dadd+0x350>
 80016f2:	e1ac      	b.n	8001a4e <__aeabi_dadd+0x6aa>
 80016f4:	0015      	movs	r5, r2
 80016f6:	3b1f      	subs	r3, #31
 80016f8:	40dd      	lsrs	r5, r3
 80016fa:	2820      	cmp	r0, #32
 80016fc:	d005      	beq.n	800170a <__aeabi_dadd+0x366>
 80016fe:	2340      	movs	r3, #64	@ 0x40
 8001700:	1a1b      	subs	r3, r3, r0
 8001702:	409a      	lsls	r2, r3
 8001704:	1e53      	subs	r3, r2, #1
 8001706:	419a      	sbcs	r2, r3
 8001708:	4315      	orrs	r5, r2
 800170a:	2307      	movs	r3, #7
 800170c:	2700      	movs	r7, #0
 800170e:	402b      	ands	r3, r5
 8001710:	e7b0      	b.n	8001674 <__aeabi_dadd+0x2d0>
 8001712:	08ed      	lsrs	r5, r5, #3
 8001714:	4b05      	ldr	r3, [pc, #20]	@ (800172c <__aeabi_dadd+0x388>)
 8001716:	0762      	lsls	r2, r4, #29
 8001718:	432a      	orrs	r2, r5
 800171a:	08e4      	lsrs	r4, r4, #3
 800171c:	429f      	cmp	r7, r3
 800171e:	d00f      	beq.n	8001740 <__aeabi_dadd+0x39c>
 8001720:	0324      	lsls	r4, r4, #12
 8001722:	0b25      	lsrs	r5, r4, #12
 8001724:	057c      	lsls	r4, r7, #21
 8001726:	0d64      	lsrs	r4, r4, #21
 8001728:	e6d4      	b.n	80014d4 <__aeabi_dadd+0x130>
 800172a:	46c0      	nop			@ (mov r8, r8)
 800172c:	000007ff 	.word	0x000007ff
 8001730:	ff7fffff 	.word	0xff7fffff
 8001734:	000007fe 	.word	0x000007fe
 8001738:	08c0      	lsrs	r0, r0, #3
 800173a:	0762      	lsls	r2, r4, #29
 800173c:	4302      	orrs	r2, r0
 800173e:	08e4      	lsrs	r4, r4, #3
 8001740:	0013      	movs	r3, r2
 8001742:	4323      	orrs	r3, r4
 8001744:	d100      	bne.n	8001748 <__aeabi_dadd+0x3a4>
 8001746:	e186      	b.n	8001a56 <__aeabi_dadd+0x6b2>
 8001748:	2580      	movs	r5, #128	@ 0x80
 800174a:	032d      	lsls	r5, r5, #12
 800174c:	4325      	orrs	r5, r4
 800174e:	032d      	lsls	r5, r5, #12
 8001750:	4cc3      	ldr	r4, [pc, #780]	@ (8001a60 <__aeabi_dadd+0x6bc>)
 8001752:	0b2d      	lsrs	r5, r5, #12
 8001754:	e6be      	b.n	80014d4 <__aeabi_dadd+0x130>
 8001756:	4660      	mov	r0, ip
 8001758:	4654      	mov	r4, sl
 800175a:	000e      	movs	r6, r1
 800175c:	0017      	movs	r7, r2
 800175e:	08c5      	lsrs	r5, r0, #3
 8001760:	e7d8      	b.n	8001714 <__aeabi_dadd+0x370>
 8001762:	4cc0      	ldr	r4, [pc, #768]	@ (8001a64 <__aeabi_dadd+0x6c0>)
 8001764:	1aff      	subs	r7, r7, r3
 8001766:	4014      	ands	r4, r2
 8001768:	e696      	b.n	8001498 <__aeabi_dadd+0xf4>
 800176a:	4abf      	ldr	r2, [pc, #764]	@ (8001a68 <__aeabi_dadd+0x6c4>)
 800176c:	1c79      	adds	r1, r7, #1
 800176e:	4211      	tst	r1, r2
 8001770:	d16b      	bne.n	800184a <__aeabi_dadd+0x4a6>
 8001772:	0022      	movs	r2, r4
 8001774:	4302      	orrs	r2, r0
 8001776:	2f00      	cmp	r7, #0
 8001778:	d000      	beq.n	800177c <__aeabi_dadd+0x3d8>
 800177a:	e0db      	b.n	8001934 <__aeabi_dadd+0x590>
 800177c:	2a00      	cmp	r2, #0
 800177e:	d100      	bne.n	8001782 <__aeabi_dadd+0x3de>
 8001780:	e12d      	b.n	80019de <__aeabi_dadd+0x63a>
 8001782:	4662      	mov	r2, ip
 8001784:	4653      	mov	r3, sl
 8001786:	431a      	orrs	r2, r3
 8001788:	d100      	bne.n	800178c <__aeabi_dadd+0x3e8>
 800178a:	e0b6      	b.n	80018fa <__aeabi_dadd+0x556>
 800178c:	4663      	mov	r3, ip
 800178e:	18c5      	adds	r5, r0, r3
 8001790:	4285      	cmp	r5, r0
 8001792:	4180      	sbcs	r0, r0
 8001794:	4454      	add	r4, sl
 8001796:	4240      	negs	r0, r0
 8001798:	1824      	adds	r4, r4, r0
 800179a:	0223      	lsls	r3, r4, #8
 800179c:	d502      	bpl.n	80017a4 <__aeabi_dadd+0x400>
 800179e:	000f      	movs	r7, r1
 80017a0:	4bb0      	ldr	r3, [pc, #704]	@ (8001a64 <__aeabi_dadd+0x6c0>)
 80017a2:	401c      	ands	r4, r3
 80017a4:	003a      	movs	r2, r7
 80017a6:	0028      	movs	r0, r5
 80017a8:	e7d8      	b.n	800175c <__aeabi_dadd+0x3b8>
 80017aa:	4662      	mov	r2, ip
 80017ac:	1a85      	subs	r5, r0, r2
 80017ae:	42a8      	cmp	r0, r5
 80017b0:	4192      	sbcs	r2, r2
 80017b2:	4653      	mov	r3, sl
 80017b4:	4252      	negs	r2, r2
 80017b6:	4691      	mov	r9, r2
 80017b8:	1ae3      	subs	r3, r4, r3
 80017ba:	001a      	movs	r2, r3
 80017bc:	464b      	mov	r3, r9
 80017be:	1ad2      	subs	r2, r2, r3
 80017c0:	0013      	movs	r3, r2
 80017c2:	4691      	mov	r9, r2
 80017c4:	021a      	lsls	r2, r3, #8
 80017c6:	d454      	bmi.n	8001872 <__aeabi_dadd+0x4ce>
 80017c8:	464a      	mov	r2, r9
 80017ca:	464c      	mov	r4, r9
 80017cc:	432a      	orrs	r2, r5
 80017ce:	d000      	beq.n	80017d2 <__aeabi_dadd+0x42e>
 80017d0:	e640      	b.n	8001454 <__aeabi_dadd+0xb0>
 80017d2:	2600      	movs	r6, #0
 80017d4:	2400      	movs	r4, #0
 80017d6:	2500      	movs	r5, #0
 80017d8:	e67c      	b.n	80014d4 <__aeabi_dadd+0x130>
 80017da:	4da1      	ldr	r5, [pc, #644]	@ (8001a60 <__aeabi_dadd+0x6bc>)
 80017dc:	45a9      	cmp	r9, r5
 80017de:	d100      	bne.n	80017e2 <__aeabi_dadd+0x43e>
 80017e0:	e090      	b.n	8001904 <__aeabi_dadd+0x560>
 80017e2:	2501      	movs	r5, #1
 80017e4:	2a38      	cmp	r2, #56	@ 0x38
 80017e6:	dd00      	ble.n	80017ea <__aeabi_dadd+0x446>
 80017e8:	e6ab      	b.n	8001542 <__aeabi_dadd+0x19e>
 80017ea:	2580      	movs	r5, #128	@ 0x80
 80017ec:	042d      	lsls	r5, r5, #16
 80017ee:	432c      	orrs	r4, r5
 80017f0:	e695      	b.n	800151e <__aeabi_dadd+0x17a>
 80017f2:	0011      	movs	r1, r2
 80017f4:	4655      	mov	r5, sl
 80017f6:	3920      	subs	r1, #32
 80017f8:	40cd      	lsrs	r5, r1
 80017fa:	46a9      	mov	r9, r5
 80017fc:	2a20      	cmp	r2, #32
 80017fe:	d006      	beq.n	800180e <__aeabi_dadd+0x46a>
 8001800:	2140      	movs	r1, #64	@ 0x40
 8001802:	4653      	mov	r3, sl
 8001804:	1a8a      	subs	r2, r1, r2
 8001806:	4093      	lsls	r3, r2
 8001808:	4662      	mov	r2, ip
 800180a:	431a      	orrs	r2, r3
 800180c:	4694      	mov	ip, r2
 800180e:	4665      	mov	r5, ip
 8001810:	1e6b      	subs	r3, r5, #1
 8001812:	419d      	sbcs	r5, r3
 8001814:	464b      	mov	r3, r9
 8001816:	431d      	orrs	r5, r3
 8001818:	e612      	b.n	8001440 <__aeabi_dadd+0x9c>
 800181a:	0021      	movs	r1, r4
 800181c:	4301      	orrs	r1, r0
 800181e:	d100      	bne.n	8001822 <__aeabi_dadd+0x47e>
 8001820:	e0c4      	b.n	80019ac <__aeabi_dadd+0x608>
 8001822:	1e51      	subs	r1, r2, #1
 8001824:	2a01      	cmp	r2, #1
 8001826:	d100      	bne.n	800182a <__aeabi_dadd+0x486>
 8001828:	e0fb      	b.n	8001a22 <__aeabi_dadd+0x67e>
 800182a:	4d8d      	ldr	r5, [pc, #564]	@ (8001a60 <__aeabi_dadd+0x6bc>)
 800182c:	42aa      	cmp	r2, r5
 800182e:	d100      	bne.n	8001832 <__aeabi_dadd+0x48e>
 8001830:	e0b5      	b.n	800199e <__aeabi_dadd+0x5fa>
 8001832:	2501      	movs	r5, #1
 8001834:	2938      	cmp	r1, #56	@ 0x38
 8001836:	dd00      	ble.n	800183a <__aeabi_dadd+0x496>
 8001838:	e741      	b.n	80016be <__aeabi_dadd+0x31a>
 800183a:	000a      	movs	r2, r1
 800183c:	e72f      	b.n	800169e <__aeabi_dadd+0x2fa>
 800183e:	4c89      	ldr	r4, [pc, #548]	@ (8001a64 <__aeabi_dadd+0x6c0>)
 8001840:	1aff      	subs	r7, r7, r3
 8001842:	4014      	ands	r4, r2
 8001844:	0762      	lsls	r2, r4, #29
 8001846:	08e4      	lsrs	r4, r4, #3
 8001848:	e76a      	b.n	8001720 <__aeabi_dadd+0x37c>
 800184a:	4a85      	ldr	r2, [pc, #532]	@ (8001a60 <__aeabi_dadd+0x6bc>)
 800184c:	4291      	cmp	r1, r2
 800184e:	d100      	bne.n	8001852 <__aeabi_dadd+0x4ae>
 8001850:	e0e3      	b.n	8001a1a <__aeabi_dadd+0x676>
 8001852:	4663      	mov	r3, ip
 8001854:	18c2      	adds	r2, r0, r3
 8001856:	4282      	cmp	r2, r0
 8001858:	4180      	sbcs	r0, r0
 800185a:	0023      	movs	r3, r4
 800185c:	4240      	negs	r0, r0
 800185e:	4453      	add	r3, sl
 8001860:	181b      	adds	r3, r3, r0
 8001862:	07dd      	lsls	r5, r3, #31
 8001864:	085c      	lsrs	r4, r3, #1
 8001866:	2307      	movs	r3, #7
 8001868:	0852      	lsrs	r2, r2, #1
 800186a:	4315      	orrs	r5, r2
 800186c:	000f      	movs	r7, r1
 800186e:	402b      	ands	r3, r5
 8001870:	e700      	b.n	8001674 <__aeabi_dadd+0x2d0>
 8001872:	4663      	mov	r3, ip
 8001874:	1a1d      	subs	r5, r3, r0
 8001876:	45ac      	cmp	ip, r5
 8001878:	4192      	sbcs	r2, r2
 800187a:	4653      	mov	r3, sl
 800187c:	4252      	negs	r2, r2
 800187e:	1b1c      	subs	r4, r3, r4
 8001880:	000e      	movs	r6, r1
 8001882:	4688      	mov	r8, r1
 8001884:	1aa4      	subs	r4, r4, r2
 8001886:	e5e5      	b.n	8001454 <__aeabi_dadd+0xb0>
 8001888:	2d00      	cmp	r5, #0
 800188a:	d000      	beq.n	800188e <__aeabi_dadd+0x4ea>
 800188c:	e091      	b.n	80019b2 <__aeabi_dadd+0x60e>
 800188e:	2a00      	cmp	r2, #0
 8001890:	d138      	bne.n	8001904 <__aeabi_dadd+0x560>
 8001892:	2480      	movs	r4, #128	@ 0x80
 8001894:	2600      	movs	r6, #0
 8001896:	0324      	lsls	r4, r4, #12
 8001898:	e756      	b.n	8001748 <__aeabi_dadd+0x3a4>
 800189a:	4663      	mov	r3, ip
 800189c:	18c5      	adds	r5, r0, r3
 800189e:	4285      	cmp	r5, r0
 80018a0:	4180      	sbcs	r0, r0
 80018a2:	4454      	add	r4, sl
 80018a4:	4240      	negs	r0, r0
 80018a6:	1824      	adds	r4, r4, r0
 80018a8:	2701      	movs	r7, #1
 80018aa:	0223      	lsls	r3, r4, #8
 80018ac:	d400      	bmi.n	80018b0 <__aeabi_dadd+0x50c>
 80018ae:	e6df      	b.n	8001670 <__aeabi_dadd+0x2cc>
 80018b0:	2702      	movs	r7, #2
 80018b2:	e687      	b.n	80015c4 <__aeabi_dadd+0x220>
 80018b4:	4663      	mov	r3, ip
 80018b6:	1ac5      	subs	r5, r0, r3
 80018b8:	42a8      	cmp	r0, r5
 80018ba:	4180      	sbcs	r0, r0
 80018bc:	4653      	mov	r3, sl
 80018be:	4240      	negs	r0, r0
 80018c0:	1ae4      	subs	r4, r4, r3
 80018c2:	2701      	movs	r7, #1
 80018c4:	1a24      	subs	r4, r4, r0
 80018c6:	e5c0      	b.n	800144a <__aeabi_dadd+0xa6>
 80018c8:	0762      	lsls	r2, r4, #29
 80018ca:	08c0      	lsrs	r0, r0, #3
 80018cc:	4302      	orrs	r2, r0
 80018ce:	08e4      	lsrs	r4, r4, #3
 80018d0:	e736      	b.n	8001740 <__aeabi_dadd+0x39c>
 80018d2:	0011      	movs	r1, r2
 80018d4:	4653      	mov	r3, sl
 80018d6:	3920      	subs	r1, #32
 80018d8:	40cb      	lsrs	r3, r1
 80018da:	4699      	mov	r9, r3
 80018dc:	2a20      	cmp	r2, #32
 80018de:	d006      	beq.n	80018ee <__aeabi_dadd+0x54a>
 80018e0:	2140      	movs	r1, #64	@ 0x40
 80018e2:	4653      	mov	r3, sl
 80018e4:	1a8a      	subs	r2, r1, r2
 80018e6:	4093      	lsls	r3, r2
 80018e8:	4662      	mov	r2, ip
 80018ea:	431a      	orrs	r2, r3
 80018ec:	4694      	mov	ip, r2
 80018ee:	4665      	mov	r5, ip
 80018f0:	1e6b      	subs	r3, r5, #1
 80018f2:	419d      	sbcs	r5, r3
 80018f4:	464b      	mov	r3, r9
 80018f6:	431d      	orrs	r5, r3
 80018f8:	e659      	b.n	80015ae <__aeabi_dadd+0x20a>
 80018fa:	0762      	lsls	r2, r4, #29
 80018fc:	08c0      	lsrs	r0, r0, #3
 80018fe:	4302      	orrs	r2, r0
 8001900:	08e4      	lsrs	r4, r4, #3
 8001902:	e70d      	b.n	8001720 <__aeabi_dadd+0x37c>
 8001904:	4653      	mov	r3, sl
 8001906:	075a      	lsls	r2, r3, #29
 8001908:	4663      	mov	r3, ip
 800190a:	08d8      	lsrs	r0, r3, #3
 800190c:	4653      	mov	r3, sl
 800190e:	000e      	movs	r6, r1
 8001910:	4302      	orrs	r2, r0
 8001912:	08dc      	lsrs	r4, r3, #3
 8001914:	e714      	b.n	8001740 <__aeabi_dadd+0x39c>
 8001916:	0015      	movs	r5, r2
 8001918:	0026      	movs	r6, r4
 800191a:	3d20      	subs	r5, #32
 800191c:	40ee      	lsrs	r6, r5
 800191e:	2a20      	cmp	r2, #32
 8001920:	d003      	beq.n	800192a <__aeabi_dadd+0x586>
 8001922:	2540      	movs	r5, #64	@ 0x40
 8001924:	1aaa      	subs	r2, r5, r2
 8001926:	4094      	lsls	r4, r2
 8001928:	4320      	orrs	r0, r4
 800192a:	1e42      	subs	r2, r0, #1
 800192c:	4190      	sbcs	r0, r2
 800192e:	0005      	movs	r5, r0
 8001930:	4335      	orrs	r5, r6
 8001932:	e606      	b.n	8001542 <__aeabi_dadd+0x19e>
 8001934:	2a00      	cmp	r2, #0
 8001936:	d07c      	beq.n	8001a32 <__aeabi_dadd+0x68e>
 8001938:	4662      	mov	r2, ip
 800193a:	4653      	mov	r3, sl
 800193c:	08c0      	lsrs	r0, r0, #3
 800193e:	431a      	orrs	r2, r3
 8001940:	d100      	bne.n	8001944 <__aeabi_dadd+0x5a0>
 8001942:	e6fa      	b.n	800173a <__aeabi_dadd+0x396>
 8001944:	0762      	lsls	r2, r4, #29
 8001946:	4310      	orrs	r0, r2
 8001948:	2280      	movs	r2, #128	@ 0x80
 800194a:	08e4      	lsrs	r4, r4, #3
 800194c:	0312      	lsls	r2, r2, #12
 800194e:	4214      	tst	r4, r2
 8001950:	d008      	beq.n	8001964 <__aeabi_dadd+0x5c0>
 8001952:	08d9      	lsrs	r1, r3, #3
 8001954:	4211      	tst	r1, r2
 8001956:	d105      	bne.n	8001964 <__aeabi_dadd+0x5c0>
 8001958:	4663      	mov	r3, ip
 800195a:	08d8      	lsrs	r0, r3, #3
 800195c:	4653      	mov	r3, sl
 800195e:	000c      	movs	r4, r1
 8001960:	075b      	lsls	r3, r3, #29
 8001962:	4318      	orrs	r0, r3
 8001964:	0f42      	lsrs	r2, r0, #29
 8001966:	00c0      	lsls	r0, r0, #3
 8001968:	08c0      	lsrs	r0, r0, #3
 800196a:	0752      	lsls	r2, r2, #29
 800196c:	4302      	orrs	r2, r0
 800196e:	e6e7      	b.n	8001740 <__aeabi_dadd+0x39c>
 8001970:	2a00      	cmp	r2, #0
 8001972:	d100      	bne.n	8001976 <__aeabi_dadd+0x5d2>
 8001974:	e72d      	b.n	80017d2 <__aeabi_dadd+0x42e>
 8001976:	4663      	mov	r3, ip
 8001978:	08d8      	lsrs	r0, r3, #3
 800197a:	4653      	mov	r3, sl
 800197c:	075a      	lsls	r2, r3, #29
 800197e:	000e      	movs	r6, r1
 8001980:	4302      	orrs	r2, r0
 8001982:	08dc      	lsrs	r4, r3, #3
 8001984:	e6cc      	b.n	8001720 <__aeabi_dadd+0x37c>
 8001986:	4663      	mov	r3, ip
 8001988:	1a1d      	subs	r5, r3, r0
 800198a:	45ac      	cmp	ip, r5
 800198c:	4192      	sbcs	r2, r2
 800198e:	4653      	mov	r3, sl
 8001990:	4252      	negs	r2, r2
 8001992:	1b1c      	subs	r4, r3, r4
 8001994:	000e      	movs	r6, r1
 8001996:	4688      	mov	r8, r1
 8001998:	1aa4      	subs	r4, r4, r2
 800199a:	3701      	adds	r7, #1
 800199c:	e555      	b.n	800144a <__aeabi_dadd+0xa6>
 800199e:	4663      	mov	r3, ip
 80019a0:	08d9      	lsrs	r1, r3, #3
 80019a2:	4653      	mov	r3, sl
 80019a4:	075a      	lsls	r2, r3, #29
 80019a6:	430a      	orrs	r2, r1
 80019a8:	08dc      	lsrs	r4, r3, #3
 80019aa:	e6c9      	b.n	8001740 <__aeabi_dadd+0x39c>
 80019ac:	4660      	mov	r0, ip
 80019ae:	4654      	mov	r4, sl
 80019b0:	e6d4      	b.n	800175c <__aeabi_dadd+0x3b8>
 80019b2:	08c0      	lsrs	r0, r0, #3
 80019b4:	2a00      	cmp	r2, #0
 80019b6:	d100      	bne.n	80019ba <__aeabi_dadd+0x616>
 80019b8:	e6bf      	b.n	800173a <__aeabi_dadd+0x396>
 80019ba:	0762      	lsls	r2, r4, #29
 80019bc:	4310      	orrs	r0, r2
 80019be:	2280      	movs	r2, #128	@ 0x80
 80019c0:	08e4      	lsrs	r4, r4, #3
 80019c2:	0312      	lsls	r2, r2, #12
 80019c4:	4214      	tst	r4, r2
 80019c6:	d0cd      	beq.n	8001964 <__aeabi_dadd+0x5c0>
 80019c8:	08dd      	lsrs	r5, r3, #3
 80019ca:	4215      	tst	r5, r2
 80019cc:	d1ca      	bne.n	8001964 <__aeabi_dadd+0x5c0>
 80019ce:	4663      	mov	r3, ip
 80019d0:	08d8      	lsrs	r0, r3, #3
 80019d2:	4653      	mov	r3, sl
 80019d4:	075b      	lsls	r3, r3, #29
 80019d6:	000e      	movs	r6, r1
 80019d8:	002c      	movs	r4, r5
 80019da:	4318      	orrs	r0, r3
 80019dc:	e7c2      	b.n	8001964 <__aeabi_dadd+0x5c0>
 80019de:	4663      	mov	r3, ip
 80019e0:	08d9      	lsrs	r1, r3, #3
 80019e2:	4653      	mov	r3, sl
 80019e4:	075a      	lsls	r2, r3, #29
 80019e6:	430a      	orrs	r2, r1
 80019e8:	08dc      	lsrs	r4, r3, #3
 80019ea:	e699      	b.n	8001720 <__aeabi_dadd+0x37c>
 80019ec:	4663      	mov	r3, ip
 80019ee:	08d8      	lsrs	r0, r3, #3
 80019f0:	4653      	mov	r3, sl
 80019f2:	075a      	lsls	r2, r3, #29
 80019f4:	000e      	movs	r6, r1
 80019f6:	4302      	orrs	r2, r0
 80019f8:	08dc      	lsrs	r4, r3, #3
 80019fa:	e6a1      	b.n	8001740 <__aeabi_dadd+0x39c>
 80019fc:	0011      	movs	r1, r2
 80019fe:	0027      	movs	r7, r4
 8001a00:	3920      	subs	r1, #32
 8001a02:	40cf      	lsrs	r7, r1
 8001a04:	2a20      	cmp	r2, #32
 8001a06:	d003      	beq.n	8001a10 <__aeabi_dadd+0x66c>
 8001a08:	2140      	movs	r1, #64	@ 0x40
 8001a0a:	1a8a      	subs	r2, r1, r2
 8001a0c:	4094      	lsls	r4, r2
 8001a0e:	4320      	orrs	r0, r4
 8001a10:	1e42      	subs	r2, r0, #1
 8001a12:	4190      	sbcs	r0, r2
 8001a14:	0005      	movs	r5, r0
 8001a16:	433d      	orrs	r5, r7
 8001a18:	e651      	b.n	80016be <__aeabi_dadd+0x31a>
 8001a1a:	000c      	movs	r4, r1
 8001a1c:	2500      	movs	r5, #0
 8001a1e:	2200      	movs	r2, #0
 8001a20:	e558      	b.n	80014d4 <__aeabi_dadd+0x130>
 8001a22:	4460      	add	r0, ip
 8001a24:	4560      	cmp	r0, ip
 8001a26:	4192      	sbcs	r2, r2
 8001a28:	4454      	add	r4, sl
 8001a2a:	4252      	negs	r2, r2
 8001a2c:	0005      	movs	r5, r0
 8001a2e:	18a4      	adds	r4, r4, r2
 8001a30:	e73a      	b.n	80018a8 <__aeabi_dadd+0x504>
 8001a32:	4653      	mov	r3, sl
 8001a34:	075a      	lsls	r2, r3, #29
 8001a36:	4663      	mov	r3, ip
 8001a38:	08d9      	lsrs	r1, r3, #3
 8001a3a:	4653      	mov	r3, sl
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	08dc      	lsrs	r4, r3, #3
 8001a40:	e67e      	b.n	8001740 <__aeabi_dadd+0x39c>
 8001a42:	001a      	movs	r2, r3
 8001a44:	001c      	movs	r4, r3
 8001a46:	432a      	orrs	r2, r5
 8001a48:	d000      	beq.n	8001a4c <__aeabi_dadd+0x6a8>
 8001a4a:	e6ab      	b.n	80017a4 <__aeabi_dadd+0x400>
 8001a4c:	e6c1      	b.n	80017d2 <__aeabi_dadd+0x42e>
 8001a4e:	2120      	movs	r1, #32
 8001a50:	2500      	movs	r5, #0
 8001a52:	1a09      	subs	r1, r1, r0
 8001a54:	e519      	b.n	800148a <__aeabi_dadd+0xe6>
 8001a56:	2200      	movs	r2, #0
 8001a58:	2500      	movs	r5, #0
 8001a5a:	4c01      	ldr	r4, [pc, #4]	@ (8001a60 <__aeabi_dadd+0x6bc>)
 8001a5c:	e53a      	b.n	80014d4 <__aeabi_dadd+0x130>
 8001a5e:	46c0      	nop			@ (mov r8, r8)
 8001a60:	000007ff 	.word	0x000007ff
 8001a64:	ff7fffff 	.word	0xff7fffff
 8001a68:	000007fe 	.word	0x000007fe

08001a6c <__aeabi_ddiv>:
 8001a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a6e:	46de      	mov	lr, fp
 8001a70:	4645      	mov	r5, r8
 8001a72:	4657      	mov	r7, sl
 8001a74:	464e      	mov	r6, r9
 8001a76:	b5e0      	push	{r5, r6, r7, lr}
 8001a78:	b087      	sub	sp, #28
 8001a7a:	9200      	str	r2, [sp, #0]
 8001a7c:	9301      	str	r3, [sp, #4]
 8001a7e:	030b      	lsls	r3, r1, #12
 8001a80:	0b1b      	lsrs	r3, r3, #12
 8001a82:	469b      	mov	fp, r3
 8001a84:	0fca      	lsrs	r2, r1, #31
 8001a86:	004b      	lsls	r3, r1, #1
 8001a88:	0004      	movs	r4, r0
 8001a8a:	4680      	mov	r8, r0
 8001a8c:	0d5b      	lsrs	r3, r3, #21
 8001a8e:	9202      	str	r2, [sp, #8]
 8001a90:	d100      	bne.n	8001a94 <__aeabi_ddiv+0x28>
 8001a92:	e16a      	b.n	8001d6a <__aeabi_ddiv+0x2fe>
 8001a94:	4ad4      	ldr	r2, [pc, #848]	@ (8001de8 <__aeabi_ddiv+0x37c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d100      	bne.n	8001a9c <__aeabi_ddiv+0x30>
 8001a9a:	e18c      	b.n	8001db6 <__aeabi_ddiv+0x34a>
 8001a9c:	4659      	mov	r1, fp
 8001a9e:	0f42      	lsrs	r2, r0, #29
 8001aa0:	00c9      	lsls	r1, r1, #3
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	2180      	movs	r1, #128	@ 0x80
 8001aa6:	0409      	lsls	r1, r1, #16
 8001aa8:	4311      	orrs	r1, r2
 8001aaa:	00c2      	lsls	r2, r0, #3
 8001aac:	4690      	mov	r8, r2
 8001aae:	4acf      	ldr	r2, [pc, #828]	@ (8001dec <__aeabi_ddiv+0x380>)
 8001ab0:	4689      	mov	r9, r1
 8001ab2:	4692      	mov	sl, r2
 8001ab4:	449a      	add	sl, r3
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	2400      	movs	r4, #0
 8001aba:	9303      	str	r3, [sp, #12]
 8001abc:	9e00      	ldr	r6, [sp, #0]
 8001abe:	9f01      	ldr	r7, [sp, #4]
 8001ac0:	033b      	lsls	r3, r7, #12
 8001ac2:	0b1b      	lsrs	r3, r3, #12
 8001ac4:	469b      	mov	fp, r3
 8001ac6:	007b      	lsls	r3, r7, #1
 8001ac8:	0030      	movs	r0, r6
 8001aca:	0d5b      	lsrs	r3, r3, #21
 8001acc:	0ffd      	lsrs	r5, r7, #31
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_ddiv+0x68>
 8001ad2:	e128      	b.n	8001d26 <__aeabi_ddiv+0x2ba>
 8001ad4:	4ac4      	ldr	r2, [pc, #784]	@ (8001de8 <__aeabi_ddiv+0x37c>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d100      	bne.n	8001adc <__aeabi_ddiv+0x70>
 8001ada:	e177      	b.n	8001dcc <__aeabi_ddiv+0x360>
 8001adc:	4659      	mov	r1, fp
 8001ade:	0f72      	lsrs	r2, r6, #29
 8001ae0:	00c9      	lsls	r1, r1, #3
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	2180      	movs	r1, #128	@ 0x80
 8001ae6:	0409      	lsls	r1, r1, #16
 8001ae8:	4311      	orrs	r1, r2
 8001aea:	468b      	mov	fp, r1
 8001aec:	49bf      	ldr	r1, [pc, #764]	@ (8001dec <__aeabi_ddiv+0x380>)
 8001aee:	00f2      	lsls	r2, r6, #3
 8001af0:	468c      	mov	ip, r1
 8001af2:	4651      	mov	r1, sl
 8001af4:	4463      	add	r3, ip
 8001af6:	1acb      	subs	r3, r1, r3
 8001af8:	469a      	mov	sl, r3
 8001afa:	2300      	movs	r3, #0
 8001afc:	9e02      	ldr	r6, [sp, #8]
 8001afe:	406e      	eors	r6, r5
 8001b00:	2c0f      	cmp	r4, #15
 8001b02:	d827      	bhi.n	8001b54 <__aeabi_ddiv+0xe8>
 8001b04:	49ba      	ldr	r1, [pc, #744]	@ (8001df0 <__aeabi_ddiv+0x384>)
 8001b06:	00a4      	lsls	r4, r4, #2
 8001b08:	5909      	ldr	r1, [r1, r4]
 8001b0a:	468f      	mov	pc, r1
 8001b0c:	46cb      	mov	fp, r9
 8001b0e:	4642      	mov	r2, r8
 8001b10:	9e02      	ldr	r6, [sp, #8]
 8001b12:	9b03      	ldr	r3, [sp, #12]
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d016      	beq.n	8001b46 <__aeabi_ddiv+0xda>
 8001b18:	2b03      	cmp	r3, #3
 8001b1a:	d100      	bne.n	8001b1e <__aeabi_ddiv+0xb2>
 8001b1c:	e2a6      	b.n	800206c <__aeabi_ddiv+0x600>
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d000      	beq.n	8001b24 <__aeabi_ddiv+0xb8>
 8001b22:	e0df      	b.n	8001ce4 <__aeabi_ddiv+0x278>
 8001b24:	2200      	movs	r2, #0
 8001b26:	2300      	movs	r3, #0
 8001b28:	2400      	movs	r4, #0
 8001b2a:	4690      	mov	r8, r2
 8001b2c:	051b      	lsls	r3, r3, #20
 8001b2e:	4323      	orrs	r3, r4
 8001b30:	07f6      	lsls	r6, r6, #31
 8001b32:	4333      	orrs	r3, r6
 8001b34:	4640      	mov	r0, r8
 8001b36:	0019      	movs	r1, r3
 8001b38:	b007      	add	sp, #28
 8001b3a:	bcf0      	pop	{r4, r5, r6, r7}
 8001b3c:	46bb      	mov	fp, r7
 8001b3e:	46b2      	mov	sl, r6
 8001b40:	46a9      	mov	r9, r5
 8001b42:	46a0      	mov	r8, r4
 8001b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b46:	2200      	movs	r2, #0
 8001b48:	2400      	movs	r4, #0
 8001b4a:	4690      	mov	r8, r2
 8001b4c:	4ba6      	ldr	r3, [pc, #664]	@ (8001de8 <__aeabi_ddiv+0x37c>)
 8001b4e:	e7ed      	b.n	8001b2c <__aeabi_ddiv+0xc0>
 8001b50:	002e      	movs	r6, r5
 8001b52:	e7df      	b.n	8001b14 <__aeabi_ddiv+0xa8>
 8001b54:	45cb      	cmp	fp, r9
 8001b56:	d200      	bcs.n	8001b5a <__aeabi_ddiv+0xee>
 8001b58:	e1d4      	b.n	8001f04 <__aeabi_ddiv+0x498>
 8001b5a:	d100      	bne.n	8001b5e <__aeabi_ddiv+0xf2>
 8001b5c:	e1cf      	b.n	8001efe <__aeabi_ddiv+0x492>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	425b      	negs	r3, r3
 8001b62:	469c      	mov	ip, r3
 8001b64:	4644      	mov	r4, r8
 8001b66:	4648      	mov	r0, r9
 8001b68:	2700      	movs	r7, #0
 8001b6a:	44e2      	add	sl, ip
 8001b6c:	465b      	mov	r3, fp
 8001b6e:	0e15      	lsrs	r5, r2, #24
 8001b70:	021b      	lsls	r3, r3, #8
 8001b72:	431d      	orrs	r5, r3
 8001b74:	0c19      	lsrs	r1, r3, #16
 8001b76:	042b      	lsls	r3, r5, #16
 8001b78:	0212      	lsls	r2, r2, #8
 8001b7a:	9500      	str	r5, [sp, #0]
 8001b7c:	0c1d      	lsrs	r5, r3, #16
 8001b7e:	4691      	mov	r9, r2
 8001b80:	9102      	str	r1, [sp, #8]
 8001b82:	9503      	str	r5, [sp, #12]
 8001b84:	f7fe fb6c 	bl	8000260 <__aeabi_uidivmod>
 8001b88:	0002      	movs	r2, r0
 8001b8a:	436a      	muls	r2, r5
 8001b8c:	040b      	lsls	r3, r1, #16
 8001b8e:	0c21      	lsrs	r1, r4, #16
 8001b90:	4680      	mov	r8, r0
 8001b92:	4319      	orrs	r1, r3
 8001b94:	428a      	cmp	r2, r1
 8001b96:	d909      	bls.n	8001bac <__aeabi_ddiv+0x140>
 8001b98:	9d00      	ldr	r5, [sp, #0]
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	46ac      	mov	ip, r5
 8001b9e:	425b      	negs	r3, r3
 8001ba0:	4461      	add	r1, ip
 8001ba2:	469c      	mov	ip, r3
 8001ba4:	44e0      	add	r8, ip
 8001ba6:	428d      	cmp	r5, r1
 8001ba8:	d800      	bhi.n	8001bac <__aeabi_ddiv+0x140>
 8001baa:	e1fb      	b.n	8001fa4 <__aeabi_ddiv+0x538>
 8001bac:	1a88      	subs	r0, r1, r2
 8001bae:	9902      	ldr	r1, [sp, #8]
 8001bb0:	f7fe fb56 	bl	8000260 <__aeabi_uidivmod>
 8001bb4:	9a03      	ldr	r2, [sp, #12]
 8001bb6:	0424      	lsls	r4, r4, #16
 8001bb8:	4342      	muls	r2, r0
 8001bba:	0409      	lsls	r1, r1, #16
 8001bbc:	0c24      	lsrs	r4, r4, #16
 8001bbe:	0003      	movs	r3, r0
 8001bc0:	430c      	orrs	r4, r1
 8001bc2:	42a2      	cmp	r2, r4
 8001bc4:	d906      	bls.n	8001bd4 <__aeabi_ddiv+0x168>
 8001bc6:	9900      	ldr	r1, [sp, #0]
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	468c      	mov	ip, r1
 8001bcc:	4464      	add	r4, ip
 8001bce:	42a1      	cmp	r1, r4
 8001bd0:	d800      	bhi.n	8001bd4 <__aeabi_ddiv+0x168>
 8001bd2:	e1e1      	b.n	8001f98 <__aeabi_ddiv+0x52c>
 8001bd4:	1aa0      	subs	r0, r4, r2
 8001bd6:	4642      	mov	r2, r8
 8001bd8:	0412      	lsls	r2, r2, #16
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	4693      	mov	fp, r2
 8001bde:	464b      	mov	r3, r9
 8001be0:	4659      	mov	r1, fp
 8001be2:	0c1b      	lsrs	r3, r3, #16
 8001be4:	001d      	movs	r5, r3
 8001be6:	9304      	str	r3, [sp, #16]
 8001be8:	040b      	lsls	r3, r1, #16
 8001bea:	4649      	mov	r1, r9
 8001bec:	0409      	lsls	r1, r1, #16
 8001bee:	0c09      	lsrs	r1, r1, #16
 8001bf0:	000c      	movs	r4, r1
 8001bf2:	0c1b      	lsrs	r3, r3, #16
 8001bf4:	435c      	muls	r4, r3
 8001bf6:	0c12      	lsrs	r2, r2, #16
 8001bf8:	436b      	muls	r3, r5
 8001bfa:	4688      	mov	r8, r1
 8001bfc:	4351      	muls	r1, r2
 8001bfe:	436a      	muls	r2, r5
 8001c00:	0c25      	lsrs	r5, r4, #16
 8001c02:	46ac      	mov	ip, r5
 8001c04:	185b      	adds	r3, r3, r1
 8001c06:	4463      	add	r3, ip
 8001c08:	4299      	cmp	r1, r3
 8001c0a:	d903      	bls.n	8001c14 <__aeabi_ddiv+0x1a8>
 8001c0c:	2180      	movs	r1, #128	@ 0x80
 8001c0e:	0249      	lsls	r1, r1, #9
 8001c10:	468c      	mov	ip, r1
 8001c12:	4462      	add	r2, ip
 8001c14:	0c19      	lsrs	r1, r3, #16
 8001c16:	0424      	lsls	r4, r4, #16
 8001c18:	041b      	lsls	r3, r3, #16
 8001c1a:	0c24      	lsrs	r4, r4, #16
 8001c1c:	188a      	adds	r2, r1, r2
 8001c1e:	191c      	adds	r4, r3, r4
 8001c20:	4290      	cmp	r0, r2
 8001c22:	d302      	bcc.n	8001c2a <__aeabi_ddiv+0x1be>
 8001c24:	d116      	bne.n	8001c54 <__aeabi_ddiv+0x1e8>
 8001c26:	42a7      	cmp	r7, r4
 8001c28:	d214      	bcs.n	8001c54 <__aeabi_ddiv+0x1e8>
 8001c2a:	465b      	mov	r3, fp
 8001c2c:	9d00      	ldr	r5, [sp, #0]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	444f      	add	r7, r9
 8001c32:	9305      	str	r3, [sp, #20]
 8001c34:	454f      	cmp	r7, r9
 8001c36:	419b      	sbcs	r3, r3
 8001c38:	46ac      	mov	ip, r5
 8001c3a:	425b      	negs	r3, r3
 8001c3c:	4463      	add	r3, ip
 8001c3e:	18c0      	adds	r0, r0, r3
 8001c40:	4285      	cmp	r5, r0
 8001c42:	d300      	bcc.n	8001c46 <__aeabi_ddiv+0x1da>
 8001c44:	e1a1      	b.n	8001f8a <__aeabi_ddiv+0x51e>
 8001c46:	4282      	cmp	r2, r0
 8001c48:	d900      	bls.n	8001c4c <__aeabi_ddiv+0x1e0>
 8001c4a:	e1f6      	b.n	800203a <__aeabi_ddiv+0x5ce>
 8001c4c:	d100      	bne.n	8001c50 <__aeabi_ddiv+0x1e4>
 8001c4e:	e1f1      	b.n	8002034 <__aeabi_ddiv+0x5c8>
 8001c50:	9b05      	ldr	r3, [sp, #20]
 8001c52:	469b      	mov	fp, r3
 8001c54:	1b3c      	subs	r4, r7, r4
 8001c56:	42a7      	cmp	r7, r4
 8001c58:	41bf      	sbcs	r7, r7
 8001c5a:	9d00      	ldr	r5, [sp, #0]
 8001c5c:	1a80      	subs	r0, r0, r2
 8001c5e:	427f      	negs	r7, r7
 8001c60:	1bc0      	subs	r0, r0, r7
 8001c62:	4285      	cmp	r5, r0
 8001c64:	d100      	bne.n	8001c68 <__aeabi_ddiv+0x1fc>
 8001c66:	e1d0      	b.n	800200a <__aeabi_ddiv+0x59e>
 8001c68:	9902      	ldr	r1, [sp, #8]
 8001c6a:	f7fe faf9 	bl	8000260 <__aeabi_uidivmod>
 8001c6e:	9a03      	ldr	r2, [sp, #12]
 8001c70:	040b      	lsls	r3, r1, #16
 8001c72:	4342      	muls	r2, r0
 8001c74:	0c21      	lsrs	r1, r4, #16
 8001c76:	0007      	movs	r7, r0
 8001c78:	4319      	orrs	r1, r3
 8001c7a:	428a      	cmp	r2, r1
 8001c7c:	d900      	bls.n	8001c80 <__aeabi_ddiv+0x214>
 8001c7e:	e178      	b.n	8001f72 <__aeabi_ddiv+0x506>
 8001c80:	1a88      	subs	r0, r1, r2
 8001c82:	9902      	ldr	r1, [sp, #8]
 8001c84:	f7fe faec 	bl	8000260 <__aeabi_uidivmod>
 8001c88:	9a03      	ldr	r2, [sp, #12]
 8001c8a:	0424      	lsls	r4, r4, #16
 8001c8c:	4342      	muls	r2, r0
 8001c8e:	0409      	lsls	r1, r1, #16
 8001c90:	0c24      	lsrs	r4, r4, #16
 8001c92:	0003      	movs	r3, r0
 8001c94:	430c      	orrs	r4, r1
 8001c96:	42a2      	cmp	r2, r4
 8001c98:	d900      	bls.n	8001c9c <__aeabi_ddiv+0x230>
 8001c9a:	e15d      	b.n	8001f58 <__aeabi_ddiv+0x4ec>
 8001c9c:	4641      	mov	r1, r8
 8001c9e:	1aa4      	subs	r4, r4, r2
 8001ca0:	043a      	lsls	r2, r7, #16
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	9d04      	ldr	r5, [sp, #16]
 8001ca6:	0413      	lsls	r3, r2, #16
 8001ca8:	0c1b      	lsrs	r3, r3, #16
 8001caa:	4359      	muls	r1, r3
 8001cac:	4647      	mov	r7, r8
 8001cae:	436b      	muls	r3, r5
 8001cb0:	469c      	mov	ip, r3
 8001cb2:	0c10      	lsrs	r0, r2, #16
 8001cb4:	4347      	muls	r7, r0
 8001cb6:	0c0b      	lsrs	r3, r1, #16
 8001cb8:	44bc      	add	ip, r7
 8001cba:	4463      	add	r3, ip
 8001cbc:	4368      	muls	r0, r5
 8001cbe:	429f      	cmp	r7, r3
 8001cc0:	d903      	bls.n	8001cca <__aeabi_ddiv+0x25e>
 8001cc2:	2580      	movs	r5, #128	@ 0x80
 8001cc4:	026d      	lsls	r5, r5, #9
 8001cc6:	46ac      	mov	ip, r5
 8001cc8:	4460      	add	r0, ip
 8001cca:	0c1f      	lsrs	r7, r3, #16
 8001ccc:	0409      	lsls	r1, r1, #16
 8001cce:	041b      	lsls	r3, r3, #16
 8001cd0:	0c09      	lsrs	r1, r1, #16
 8001cd2:	183f      	adds	r7, r7, r0
 8001cd4:	185b      	adds	r3, r3, r1
 8001cd6:	42bc      	cmp	r4, r7
 8001cd8:	d200      	bcs.n	8001cdc <__aeabi_ddiv+0x270>
 8001cda:	e102      	b.n	8001ee2 <__aeabi_ddiv+0x476>
 8001cdc:	d100      	bne.n	8001ce0 <__aeabi_ddiv+0x274>
 8001cde:	e0fd      	b.n	8001edc <__aeabi_ddiv+0x470>
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	4b43      	ldr	r3, [pc, #268]	@ (8001df4 <__aeabi_ddiv+0x388>)
 8001ce6:	4453      	add	r3, sl
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	dc00      	bgt.n	8001cee <__aeabi_ddiv+0x282>
 8001cec:	e0ae      	b.n	8001e4c <__aeabi_ddiv+0x3e0>
 8001cee:	0751      	lsls	r1, r2, #29
 8001cf0:	d000      	beq.n	8001cf4 <__aeabi_ddiv+0x288>
 8001cf2:	e198      	b.n	8002026 <__aeabi_ddiv+0x5ba>
 8001cf4:	4659      	mov	r1, fp
 8001cf6:	01c9      	lsls	r1, r1, #7
 8001cf8:	d506      	bpl.n	8001d08 <__aeabi_ddiv+0x29c>
 8001cfa:	4659      	mov	r1, fp
 8001cfc:	4b3e      	ldr	r3, [pc, #248]	@ (8001df8 <__aeabi_ddiv+0x38c>)
 8001cfe:	4019      	ands	r1, r3
 8001d00:	2380      	movs	r3, #128	@ 0x80
 8001d02:	468b      	mov	fp, r1
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4453      	add	r3, sl
 8001d08:	493c      	ldr	r1, [pc, #240]	@ (8001dfc <__aeabi_ddiv+0x390>)
 8001d0a:	428b      	cmp	r3, r1
 8001d0c:	dd00      	ble.n	8001d10 <__aeabi_ddiv+0x2a4>
 8001d0e:	e71a      	b.n	8001b46 <__aeabi_ddiv+0xda>
 8001d10:	4659      	mov	r1, fp
 8001d12:	08d2      	lsrs	r2, r2, #3
 8001d14:	0749      	lsls	r1, r1, #29
 8001d16:	4311      	orrs	r1, r2
 8001d18:	465a      	mov	r2, fp
 8001d1a:	055b      	lsls	r3, r3, #21
 8001d1c:	0254      	lsls	r4, r2, #9
 8001d1e:	4688      	mov	r8, r1
 8001d20:	0b24      	lsrs	r4, r4, #12
 8001d22:	0d5b      	lsrs	r3, r3, #21
 8001d24:	e702      	b.n	8001b2c <__aeabi_ddiv+0xc0>
 8001d26:	465a      	mov	r2, fp
 8001d28:	9b00      	ldr	r3, [sp, #0]
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	d100      	bne.n	8001d30 <__aeabi_ddiv+0x2c4>
 8001d2e:	e07e      	b.n	8001e2e <__aeabi_ddiv+0x3c2>
 8001d30:	465b      	mov	r3, fp
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d100      	bne.n	8001d38 <__aeabi_ddiv+0x2cc>
 8001d36:	e100      	b.n	8001f3a <__aeabi_ddiv+0x4ce>
 8001d38:	4658      	mov	r0, fp
 8001d3a:	f001 f9ef 	bl	800311c <__clzsi2>
 8001d3e:	0002      	movs	r2, r0
 8001d40:	0003      	movs	r3, r0
 8001d42:	3a0b      	subs	r2, #11
 8001d44:	271d      	movs	r7, #29
 8001d46:	9e00      	ldr	r6, [sp, #0]
 8001d48:	1aba      	subs	r2, r7, r2
 8001d4a:	0019      	movs	r1, r3
 8001d4c:	4658      	mov	r0, fp
 8001d4e:	40d6      	lsrs	r6, r2
 8001d50:	3908      	subs	r1, #8
 8001d52:	4088      	lsls	r0, r1
 8001d54:	0032      	movs	r2, r6
 8001d56:	4302      	orrs	r2, r0
 8001d58:	4693      	mov	fp, r2
 8001d5a:	9a00      	ldr	r2, [sp, #0]
 8001d5c:	408a      	lsls	r2, r1
 8001d5e:	4928      	ldr	r1, [pc, #160]	@ (8001e00 <__aeabi_ddiv+0x394>)
 8001d60:	4453      	add	r3, sl
 8001d62:	468a      	mov	sl, r1
 8001d64:	449a      	add	sl, r3
 8001d66:	2300      	movs	r3, #0
 8001d68:	e6c8      	b.n	8001afc <__aeabi_ddiv+0x90>
 8001d6a:	465b      	mov	r3, fp
 8001d6c:	4303      	orrs	r3, r0
 8001d6e:	4699      	mov	r9, r3
 8001d70:	d056      	beq.n	8001e20 <__aeabi_ddiv+0x3b4>
 8001d72:	465b      	mov	r3, fp
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d100      	bne.n	8001d7a <__aeabi_ddiv+0x30e>
 8001d78:	e0cd      	b.n	8001f16 <__aeabi_ddiv+0x4aa>
 8001d7a:	4658      	mov	r0, fp
 8001d7c:	f001 f9ce 	bl	800311c <__clzsi2>
 8001d80:	230b      	movs	r3, #11
 8001d82:	425b      	negs	r3, r3
 8001d84:	469c      	mov	ip, r3
 8001d86:	0002      	movs	r2, r0
 8001d88:	4484      	add	ip, r0
 8001d8a:	4666      	mov	r6, ip
 8001d8c:	231d      	movs	r3, #29
 8001d8e:	1b9b      	subs	r3, r3, r6
 8001d90:	0026      	movs	r6, r4
 8001d92:	0011      	movs	r1, r2
 8001d94:	4658      	mov	r0, fp
 8001d96:	40de      	lsrs	r6, r3
 8001d98:	3908      	subs	r1, #8
 8001d9a:	4088      	lsls	r0, r1
 8001d9c:	0033      	movs	r3, r6
 8001d9e:	4303      	orrs	r3, r0
 8001da0:	4699      	mov	r9, r3
 8001da2:	0023      	movs	r3, r4
 8001da4:	408b      	lsls	r3, r1
 8001da6:	4698      	mov	r8, r3
 8001da8:	4b16      	ldr	r3, [pc, #88]	@ (8001e04 <__aeabi_ddiv+0x398>)
 8001daa:	2400      	movs	r4, #0
 8001dac:	1a9b      	subs	r3, r3, r2
 8001dae:	469a      	mov	sl, r3
 8001db0:	2300      	movs	r3, #0
 8001db2:	9303      	str	r3, [sp, #12]
 8001db4:	e682      	b.n	8001abc <__aeabi_ddiv+0x50>
 8001db6:	465a      	mov	r2, fp
 8001db8:	4302      	orrs	r2, r0
 8001dba:	4691      	mov	r9, r2
 8001dbc:	d12a      	bne.n	8001e14 <__aeabi_ddiv+0x3a8>
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	469a      	mov	sl, r3
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	4690      	mov	r8, r2
 8001dc6:	2408      	movs	r4, #8
 8001dc8:	9303      	str	r3, [sp, #12]
 8001dca:	e677      	b.n	8001abc <__aeabi_ddiv+0x50>
 8001dcc:	465a      	mov	r2, fp
 8001dce:	9b00      	ldr	r3, [sp, #0]
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001e08 <__aeabi_ddiv+0x39c>)
 8001dd4:	469c      	mov	ip, r3
 8001dd6:	44e2      	add	sl, ip
 8001dd8:	2a00      	cmp	r2, #0
 8001dda:	d117      	bne.n	8001e0c <__aeabi_ddiv+0x3a0>
 8001ddc:	2302      	movs	r3, #2
 8001dde:	431c      	orrs	r4, r3
 8001de0:	2300      	movs	r3, #0
 8001de2:	469b      	mov	fp, r3
 8001de4:	3302      	adds	r3, #2
 8001de6:	e689      	b.n	8001afc <__aeabi_ddiv+0x90>
 8001de8:	000007ff 	.word	0x000007ff
 8001dec:	fffffc01 	.word	0xfffffc01
 8001df0:	0800d604 	.word	0x0800d604
 8001df4:	000003ff 	.word	0x000003ff
 8001df8:	feffffff 	.word	0xfeffffff
 8001dfc:	000007fe 	.word	0x000007fe
 8001e00:	000003f3 	.word	0x000003f3
 8001e04:	fffffc0d 	.word	0xfffffc0d
 8001e08:	fffff801 	.word	0xfffff801
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	0032      	movs	r2, r6
 8001e10:	431c      	orrs	r4, r3
 8001e12:	e673      	b.n	8001afc <__aeabi_ddiv+0x90>
 8001e14:	469a      	mov	sl, r3
 8001e16:	2303      	movs	r3, #3
 8001e18:	46d9      	mov	r9, fp
 8001e1a:	240c      	movs	r4, #12
 8001e1c:	9303      	str	r3, [sp, #12]
 8001e1e:	e64d      	b.n	8001abc <__aeabi_ddiv+0x50>
 8001e20:	2300      	movs	r3, #0
 8001e22:	4698      	mov	r8, r3
 8001e24:	469a      	mov	sl, r3
 8001e26:	3301      	adds	r3, #1
 8001e28:	2404      	movs	r4, #4
 8001e2a:	9303      	str	r3, [sp, #12]
 8001e2c:	e646      	b.n	8001abc <__aeabi_ddiv+0x50>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	431c      	orrs	r4, r3
 8001e32:	2300      	movs	r3, #0
 8001e34:	469b      	mov	fp, r3
 8001e36:	3301      	adds	r3, #1
 8001e38:	e660      	b.n	8001afc <__aeabi_ddiv+0x90>
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	2480      	movs	r4, #128	@ 0x80
 8001e3e:	4698      	mov	r8, r3
 8001e40:	2600      	movs	r6, #0
 8001e42:	4b92      	ldr	r3, [pc, #584]	@ (800208c <__aeabi_ddiv+0x620>)
 8001e44:	0324      	lsls	r4, r4, #12
 8001e46:	e671      	b.n	8001b2c <__aeabi_ddiv+0xc0>
 8001e48:	2201      	movs	r2, #1
 8001e4a:	4252      	negs	r2, r2
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	1ac9      	subs	r1, r1, r3
 8001e50:	2938      	cmp	r1, #56	@ 0x38
 8001e52:	dd00      	ble.n	8001e56 <__aeabi_ddiv+0x3ea>
 8001e54:	e666      	b.n	8001b24 <__aeabi_ddiv+0xb8>
 8001e56:	291f      	cmp	r1, #31
 8001e58:	dc00      	bgt.n	8001e5c <__aeabi_ddiv+0x3f0>
 8001e5a:	e0ab      	b.n	8001fb4 <__aeabi_ddiv+0x548>
 8001e5c:	201f      	movs	r0, #31
 8001e5e:	4240      	negs	r0, r0
 8001e60:	1ac3      	subs	r3, r0, r3
 8001e62:	4658      	mov	r0, fp
 8001e64:	40d8      	lsrs	r0, r3
 8001e66:	0003      	movs	r3, r0
 8001e68:	2920      	cmp	r1, #32
 8001e6a:	d004      	beq.n	8001e76 <__aeabi_ddiv+0x40a>
 8001e6c:	4658      	mov	r0, fp
 8001e6e:	4988      	ldr	r1, [pc, #544]	@ (8002090 <__aeabi_ddiv+0x624>)
 8001e70:	4451      	add	r1, sl
 8001e72:	4088      	lsls	r0, r1
 8001e74:	4302      	orrs	r2, r0
 8001e76:	1e51      	subs	r1, r2, #1
 8001e78:	418a      	sbcs	r2, r1
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	2307      	movs	r3, #7
 8001e7e:	0019      	movs	r1, r3
 8001e80:	2400      	movs	r4, #0
 8001e82:	4011      	ands	r1, r2
 8001e84:	4213      	tst	r3, r2
 8001e86:	d00c      	beq.n	8001ea2 <__aeabi_ddiv+0x436>
 8001e88:	230f      	movs	r3, #15
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	2b04      	cmp	r3, #4
 8001e8e:	d100      	bne.n	8001e92 <__aeabi_ddiv+0x426>
 8001e90:	e0f9      	b.n	8002086 <__aeabi_ddiv+0x61a>
 8001e92:	1d11      	adds	r1, r2, #4
 8001e94:	4291      	cmp	r1, r2
 8001e96:	419b      	sbcs	r3, r3
 8001e98:	000a      	movs	r2, r1
 8001e9a:	425b      	negs	r3, r3
 8001e9c:	0759      	lsls	r1, r3, #29
 8001e9e:	025b      	lsls	r3, r3, #9
 8001ea0:	0b1c      	lsrs	r4, r3, #12
 8001ea2:	08d2      	lsrs	r2, r2, #3
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	4690      	mov	r8, r2
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	e63f      	b.n	8001b2c <__aeabi_ddiv+0xc0>
 8001eac:	2480      	movs	r4, #128	@ 0x80
 8001eae:	464b      	mov	r3, r9
 8001eb0:	0324      	lsls	r4, r4, #12
 8001eb2:	4223      	tst	r3, r4
 8001eb4:	d009      	beq.n	8001eca <__aeabi_ddiv+0x45e>
 8001eb6:	465b      	mov	r3, fp
 8001eb8:	4223      	tst	r3, r4
 8001eba:	d106      	bne.n	8001eca <__aeabi_ddiv+0x45e>
 8001ebc:	431c      	orrs	r4, r3
 8001ebe:	0324      	lsls	r4, r4, #12
 8001ec0:	002e      	movs	r6, r5
 8001ec2:	4690      	mov	r8, r2
 8001ec4:	4b71      	ldr	r3, [pc, #452]	@ (800208c <__aeabi_ddiv+0x620>)
 8001ec6:	0b24      	lsrs	r4, r4, #12
 8001ec8:	e630      	b.n	8001b2c <__aeabi_ddiv+0xc0>
 8001eca:	2480      	movs	r4, #128	@ 0x80
 8001ecc:	464b      	mov	r3, r9
 8001ece:	0324      	lsls	r4, r4, #12
 8001ed0:	431c      	orrs	r4, r3
 8001ed2:	0324      	lsls	r4, r4, #12
 8001ed4:	9e02      	ldr	r6, [sp, #8]
 8001ed6:	4b6d      	ldr	r3, [pc, #436]	@ (800208c <__aeabi_ddiv+0x620>)
 8001ed8:	0b24      	lsrs	r4, r4, #12
 8001eda:	e627      	b.n	8001b2c <__aeabi_ddiv+0xc0>
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d100      	bne.n	8001ee2 <__aeabi_ddiv+0x476>
 8001ee0:	e700      	b.n	8001ce4 <__aeabi_ddiv+0x278>
 8001ee2:	9800      	ldr	r0, [sp, #0]
 8001ee4:	1e51      	subs	r1, r2, #1
 8001ee6:	4684      	mov	ip, r0
 8001ee8:	4464      	add	r4, ip
 8001eea:	4284      	cmp	r4, r0
 8001eec:	d200      	bcs.n	8001ef0 <__aeabi_ddiv+0x484>
 8001eee:	e084      	b.n	8001ffa <__aeabi_ddiv+0x58e>
 8001ef0:	42bc      	cmp	r4, r7
 8001ef2:	d200      	bcs.n	8001ef6 <__aeabi_ddiv+0x48a>
 8001ef4:	e0ae      	b.n	8002054 <__aeabi_ddiv+0x5e8>
 8001ef6:	d100      	bne.n	8001efa <__aeabi_ddiv+0x48e>
 8001ef8:	e0c1      	b.n	800207e <__aeabi_ddiv+0x612>
 8001efa:	000a      	movs	r2, r1
 8001efc:	e6f0      	b.n	8001ce0 <__aeabi_ddiv+0x274>
 8001efe:	4542      	cmp	r2, r8
 8001f00:	d900      	bls.n	8001f04 <__aeabi_ddiv+0x498>
 8001f02:	e62c      	b.n	8001b5e <__aeabi_ddiv+0xf2>
 8001f04:	464b      	mov	r3, r9
 8001f06:	07dc      	lsls	r4, r3, #31
 8001f08:	0858      	lsrs	r0, r3, #1
 8001f0a:	4643      	mov	r3, r8
 8001f0c:	085b      	lsrs	r3, r3, #1
 8001f0e:	431c      	orrs	r4, r3
 8001f10:	4643      	mov	r3, r8
 8001f12:	07df      	lsls	r7, r3, #31
 8001f14:	e62a      	b.n	8001b6c <__aeabi_ddiv+0x100>
 8001f16:	f001 f901 	bl	800311c <__clzsi2>
 8001f1a:	2315      	movs	r3, #21
 8001f1c:	469c      	mov	ip, r3
 8001f1e:	4484      	add	ip, r0
 8001f20:	0002      	movs	r2, r0
 8001f22:	4663      	mov	r3, ip
 8001f24:	3220      	adds	r2, #32
 8001f26:	2b1c      	cmp	r3, #28
 8001f28:	dc00      	bgt.n	8001f2c <__aeabi_ddiv+0x4c0>
 8001f2a:	e72e      	b.n	8001d8a <__aeabi_ddiv+0x31e>
 8001f2c:	0023      	movs	r3, r4
 8001f2e:	3808      	subs	r0, #8
 8001f30:	4083      	lsls	r3, r0
 8001f32:	4699      	mov	r9, r3
 8001f34:	2300      	movs	r3, #0
 8001f36:	4698      	mov	r8, r3
 8001f38:	e736      	b.n	8001da8 <__aeabi_ddiv+0x33c>
 8001f3a:	f001 f8ef 	bl	800311c <__clzsi2>
 8001f3e:	0002      	movs	r2, r0
 8001f40:	0003      	movs	r3, r0
 8001f42:	3215      	adds	r2, #21
 8001f44:	3320      	adds	r3, #32
 8001f46:	2a1c      	cmp	r2, #28
 8001f48:	dc00      	bgt.n	8001f4c <__aeabi_ddiv+0x4e0>
 8001f4a:	e6fb      	b.n	8001d44 <__aeabi_ddiv+0x2d8>
 8001f4c:	9900      	ldr	r1, [sp, #0]
 8001f4e:	3808      	subs	r0, #8
 8001f50:	4081      	lsls	r1, r0
 8001f52:	2200      	movs	r2, #0
 8001f54:	468b      	mov	fp, r1
 8001f56:	e702      	b.n	8001d5e <__aeabi_ddiv+0x2f2>
 8001f58:	9900      	ldr	r1, [sp, #0]
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	468c      	mov	ip, r1
 8001f5e:	4464      	add	r4, ip
 8001f60:	42a1      	cmp	r1, r4
 8001f62:	d900      	bls.n	8001f66 <__aeabi_ddiv+0x4fa>
 8001f64:	e69a      	b.n	8001c9c <__aeabi_ddiv+0x230>
 8001f66:	42a2      	cmp	r2, r4
 8001f68:	d800      	bhi.n	8001f6c <__aeabi_ddiv+0x500>
 8001f6a:	e697      	b.n	8001c9c <__aeabi_ddiv+0x230>
 8001f6c:	1e83      	subs	r3, r0, #2
 8001f6e:	4464      	add	r4, ip
 8001f70:	e694      	b.n	8001c9c <__aeabi_ddiv+0x230>
 8001f72:	46ac      	mov	ip, r5
 8001f74:	4461      	add	r1, ip
 8001f76:	3f01      	subs	r7, #1
 8001f78:	428d      	cmp	r5, r1
 8001f7a:	d900      	bls.n	8001f7e <__aeabi_ddiv+0x512>
 8001f7c:	e680      	b.n	8001c80 <__aeabi_ddiv+0x214>
 8001f7e:	428a      	cmp	r2, r1
 8001f80:	d800      	bhi.n	8001f84 <__aeabi_ddiv+0x518>
 8001f82:	e67d      	b.n	8001c80 <__aeabi_ddiv+0x214>
 8001f84:	1e87      	subs	r7, r0, #2
 8001f86:	4461      	add	r1, ip
 8001f88:	e67a      	b.n	8001c80 <__aeabi_ddiv+0x214>
 8001f8a:	4285      	cmp	r5, r0
 8001f8c:	d000      	beq.n	8001f90 <__aeabi_ddiv+0x524>
 8001f8e:	e65f      	b.n	8001c50 <__aeabi_ddiv+0x1e4>
 8001f90:	45b9      	cmp	r9, r7
 8001f92:	d900      	bls.n	8001f96 <__aeabi_ddiv+0x52a>
 8001f94:	e65c      	b.n	8001c50 <__aeabi_ddiv+0x1e4>
 8001f96:	e656      	b.n	8001c46 <__aeabi_ddiv+0x1da>
 8001f98:	42a2      	cmp	r2, r4
 8001f9a:	d800      	bhi.n	8001f9e <__aeabi_ddiv+0x532>
 8001f9c:	e61a      	b.n	8001bd4 <__aeabi_ddiv+0x168>
 8001f9e:	1e83      	subs	r3, r0, #2
 8001fa0:	4464      	add	r4, ip
 8001fa2:	e617      	b.n	8001bd4 <__aeabi_ddiv+0x168>
 8001fa4:	428a      	cmp	r2, r1
 8001fa6:	d800      	bhi.n	8001faa <__aeabi_ddiv+0x53e>
 8001fa8:	e600      	b.n	8001bac <__aeabi_ddiv+0x140>
 8001faa:	46ac      	mov	ip, r5
 8001fac:	1e83      	subs	r3, r0, #2
 8001fae:	4698      	mov	r8, r3
 8001fb0:	4461      	add	r1, ip
 8001fb2:	e5fb      	b.n	8001bac <__aeabi_ddiv+0x140>
 8001fb4:	4837      	ldr	r0, [pc, #220]	@ (8002094 <__aeabi_ddiv+0x628>)
 8001fb6:	0014      	movs	r4, r2
 8001fb8:	4450      	add	r0, sl
 8001fba:	4082      	lsls	r2, r0
 8001fbc:	465b      	mov	r3, fp
 8001fbe:	0017      	movs	r7, r2
 8001fc0:	4083      	lsls	r3, r0
 8001fc2:	40cc      	lsrs	r4, r1
 8001fc4:	1e7a      	subs	r2, r7, #1
 8001fc6:	4197      	sbcs	r7, r2
 8001fc8:	4323      	orrs	r3, r4
 8001fca:	433b      	orrs	r3, r7
 8001fcc:	001a      	movs	r2, r3
 8001fce:	465b      	mov	r3, fp
 8001fd0:	40cb      	lsrs	r3, r1
 8001fd2:	0751      	lsls	r1, r2, #29
 8001fd4:	d009      	beq.n	8001fea <__aeabi_ddiv+0x57e>
 8001fd6:	210f      	movs	r1, #15
 8001fd8:	4011      	ands	r1, r2
 8001fda:	2904      	cmp	r1, #4
 8001fdc:	d005      	beq.n	8001fea <__aeabi_ddiv+0x57e>
 8001fde:	1d11      	adds	r1, r2, #4
 8001fe0:	4291      	cmp	r1, r2
 8001fe2:	4192      	sbcs	r2, r2
 8001fe4:	4252      	negs	r2, r2
 8001fe6:	189b      	adds	r3, r3, r2
 8001fe8:	000a      	movs	r2, r1
 8001fea:	0219      	lsls	r1, r3, #8
 8001fec:	d400      	bmi.n	8001ff0 <__aeabi_ddiv+0x584>
 8001fee:	e755      	b.n	8001e9c <__aeabi_ddiv+0x430>
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	2400      	movs	r4, #0
 8001ff6:	4690      	mov	r8, r2
 8001ff8:	e598      	b.n	8001b2c <__aeabi_ddiv+0xc0>
 8001ffa:	000a      	movs	r2, r1
 8001ffc:	42bc      	cmp	r4, r7
 8001ffe:	d000      	beq.n	8002002 <__aeabi_ddiv+0x596>
 8002000:	e66e      	b.n	8001ce0 <__aeabi_ddiv+0x274>
 8002002:	454b      	cmp	r3, r9
 8002004:	d000      	beq.n	8002008 <__aeabi_ddiv+0x59c>
 8002006:	e66b      	b.n	8001ce0 <__aeabi_ddiv+0x274>
 8002008:	e66c      	b.n	8001ce4 <__aeabi_ddiv+0x278>
 800200a:	4b23      	ldr	r3, [pc, #140]	@ (8002098 <__aeabi_ddiv+0x62c>)
 800200c:	4a23      	ldr	r2, [pc, #140]	@ (800209c <__aeabi_ddiv+0x630>)
 800200e:	4453      	add	r3, sl
 8002010:	4592      	cmp	sl, r2
 8002012:	da00      	bge.n	8002016 <__aeabi_ddiv+0x5aa>
 8002014:	e718      	b.n	8001e48 <__aeabi_ddiv+0x3dc>
 8002016:	2101      	movs	r1, #1
 8002018:	4249      	negs	r1, r1
 800201a:	1d0a      	adds	r2, r1, #4
 800201c:	428a      	cmp	r2, r1
 800201e:	4189      	sbcs	r1, r1
 8002020:	4249      	negs	r1, r1
 8002022:	448b      	add	fp, r1
 8002024:	e666      	b.n	8001cf4 <__aeabi_ddiv+0x288>
 8002026:	210f      	movs	r1, #15
 8002028:	4011      	ands	r1, r2
 800202a:	2904      	cmp	r1, #4
 800202c:	d100      	bne.n	8002030 <__aeabi_ddiv+0x5c4>
 800202e:	e661      	b.n	8001cf4 <__aeabi_ddiv+0x288>
 8002030:	0011      	movs	r1, r2
 8002032:	e7f2      	b.n	800201a <__aeabi_ddiv+0x5ae>
 8002034:	42bc      	cmp	r4, r7
 8002036:	d800      	bhi.n	800203a <__aeabi_ddiv+0x5ce>
 8002038:	e60a      	b.n	8001c50 <__aeabi_ddiv+0x1e4>
 800203a:	2302      	movs	r3, #2
 800203c:	425b      	negs	r3, r3
 800203e:	469c      	mov	ip, r3
 8002040:	9900      	ldr	r1, [sp, #0]
 8002042:	444f      	add	r7, r9
 8002044:	454f      	cmp	r7, r9
 8002046:	419b      	sbcs	r3, r3
 8002048:	44e3      	add	fp, ip
 800204a:	468c      	mov	ip, r1
 800204c:	425b      	negs	r3, r3
 800204e:	4463      	add	r3, ip
 8002050:	18c0      	adds	r0, r0, r3
 8002052:	e5ff      	b.n	8001c54 <__aeabi_ddiv+0x1e8>
 8002054:	4649      	mov	r1, r9
 8002056:	9d00      	ldr	r5, [sp, #0]
 8002058:	0048      	lsls	r0, r1, #1
 800205a:	4548      	cmp	r0, r9
 800205c:	4189      	sbcs	r1, r1
 800205e:	46ac      	mov	ip, r5
 8002060:	4249      	negs	r1, r1
 8002062:	4461      	add	r1, ip
 8002064:	4681      	mov	r9, r0
 8002066:	3a02      	subs	r2, #2
 8002068:	1864      	adds	r4, r4, r1
 800206a:	e7c7      	b.n	8001ffc <__aeabi_ddiv+0x590>
 800206c:	2480      	movs	r4, #128	@ 0x80
 800206e:	465b      	mov	r3, fp
 8002070:	0324      	lsls	r4, r4, #12
 8002072:	431c      	orrs	r4, r3
 8002074:	0324      	lsls	r4, r4, #12
 8002076:	4690      	mov	r8, r2
 8002078:	4b04      	ldr	r3, [pc, #16]	@ (800208c <__aeabi_ddiv+0x620>)
 800207a:	0b24      	lsrs	r4, r4, #12
 800207c:	e556      	b.n	8001b2c <__aeabi_ddiv+0xc0>
 800207e:	4599      	cmp	r9, r3
 8002080:	d3e8      	bcc.n	8002054 <__aeabi_ddiv+0x5e8>
 8002082:	000a      	movs	r2, r1
 8002084:	e7bd      	b.n	8002002 <__aeabi_ddiv+0x596>
 8002086:	2300      	movs	r3, #0
 8002088:	e708      	b.n	8001e9c <__aeabi_ddiv+0x430>
 800208a:	46c0      	nop			@ (mov r8, r8)
 800208c:	000007ff 	.word	0x000007ff
 8002090:	0000043e 	.word	0x0000043e
 8002094:	0000041e 	.word	0x0000041e
 8002098:	000003ff 	.word	0x000003ff
 800209c:	fffffc02 	.word	0xfffffc02

080020a0 <__eqdf2>:
 80020a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020a2:	4657      	mov	r7, sl
 80020a4:	46de      	mov	lr, fp
 80020a6:	464e      	mov	r6, r9
 80020a8:	4645      	mov	r5, r8
 80020aa:	b5e0      	push	{r5, r6, r7, lr}
 80020ac:	000d      	movs	r5, r1
 80020ae:	0004      	movs	r4, r0
 80020b0:	0fe8      	lsrs	r0, r5, #31
 80020b2:	4683      	mov	fp, r0
 80020b4:	0309      	lsls	r1, r1, #12
 80020b6:	0fd8      	lsrs	r0, r3, #31
 80020b8:	0b09      	lsrs	r1, r1, #12
 80020ba:	4682      	mov	sl, r0
 80020bc:	4819      	ldr	r0, [pc, #100]	@ (8002124 <__eqdf2+0x84>)
 80020be:	468c      	mov	ip, r1
 80020c0:	031f      	lsls	r7, r3, #12
 80020c2:	0069      	lsls	r1, r5, #1
 80020c4:	005e      	lsls	r6, r3, #1
 80020c6:	0d49      	lsrs	r1, r1, #21
 80020c8:	0b3f      	lsrs	r7, r7, #12
 80020ca:	0d76      	lsrs	r6, r6, #21
 80020cc:	4281      	cmp	r1, r0
 80020ce:	d018      	beq.n	8002102 <__eqdf2+0x62>
 80020d0:	4286      	cmp	r6, r0
 80020d2:	d00f      	beq.n	80020f4 <__eqdf2+0x54>
 80020d4:	2001      	movs	r0, #1
 80020d6:	42b1      	cmp	r1, r6
 80020d8:	d10d      	bne.n	80020f6 <__eqdf2+0x56>
 80020da:	45bc      	cmp	ip, r7
 80020dc:	d10b      	bne.n	80020f6 <__eqdf2+0x56>
 80020de:	4294      	cmp	r4, r2
 80020e0:	d109      	bne.n	80020f6 <__eqdf2+0x56>
 80020e2:	45d3      	cmp	fp, sl
 80020e4:	d01c      	beq.n	8002120 <__eqdf2+0x80>
 80020e6:	2900      	cmp	r1, #0
 80020e8:	d105      	bne.n	80020f6 <__eqdf2+0x56>
 80020ea:	4660      	mov	r0, ip
 80020ec:	4320      	orrs	r0, r4
 80020ee:	1e43      	subs	r3, r0, #1
 80020f0:	4198      	sbcs	r0, r3
 80020f2:	e000      	b.n	80020f6 <__eqdf2+0x56>
 80020f4:	2001      	movs	r0, #1
 80020f6:	bcf0      	pop	{r4, r5, r6, r7}
 80020f8:	46bb      	mov	fp, r7
 80020fa:	46b2      	mov	sl, r6
 80020fc:	46a9      	mov	r9, r5
 80020fe:	46a0      	mov	r8, r4
 8002100:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002102:	2001      	movs	r0, #1
 8002104:	428e      	cmp	r6, r1
 8002106:	d1f6      	bne.n	80020f6 <__eqdf2+0x56>
 8002108:	4661      	mov	r1, ip
 800210a:	4339      	orrs	r1, r7
 800210c:	000f      	movs	r7, r1
 800210e:	4317      	orrs	r7, r2
 8002110:	4327      	orrs	r7, r4
 8002112:	d1f0      	bne.n	80020f6 <__eqdf2+0x56>
 8002114:	465b      	mov	r3, fp
 8002116:	4652      	mov	r2, sl
 8002118:	1a98      	subs	r0, r3, r2
 800211a:	1e43      	subs	r3, r0, #1
 800211c:	4198      	sbcs	r0, r3
 800211e:	e7ea      	b.n	80020f6 <__eqdf2+0x56>
 8002120:	2000      	movs	r0, #0
 8002122:	e7e8      	b.n	80020f6 <__eqdf2+0x56>
 8002124:	000007ff 	.word	0x000007ff

08002128 <__gedf2>:
 8002128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800212a:	4657      	mov	r7, sl
 800212c:	464e      	mov	r6, r9
 800212e:	4645      	mov	r5, r8
 8002130:	46de      	mov	lr, fp
 8002132:	b5e0      	push	{r5, r6, r7, lr}
 8002134:	000d      	movs	r5, r1
 8002136:	030f      	lsls	r7, r1, #12
 8002138:	0b39      	lsrs	r1, r7, #12
 800213a:	b083      	sub	sp, #12
 800213c:	0004      	movs	r4, r0
 800213e:	4680      	mov	r8, r0
 8002140:	9101      	str	r1, [sp, #4]
 8002142:	0058      	lsls	r0, r3, #1
 8002144:	0fe9      	lsrs	r1, r5, #31
 8002146:	4f31      	ldr	r7, [pc, #196]	@ (800220c <__gedf2+0xe4>)
 8002148:	0d40      	lsrs	r0, r0, #21
 800214a:	468c      	mov	ip, r1
 800214c:	006e      	lsls	r6, r5, #1
 800214e:	0319      	lsls	r1, r3, #12
 8002150:	4682      	mov	sl, r0
 8002152:	4691      	mov	r9, r2
 8002154:	0d76      	lsrs	r6, r6, #21
 8002156:	0b09      	lsrs	r1, r1, #12
 8002158:	0fd8      	lsrs	r0, r3, #31
 800215a:	42be      	cmp	r6, r7
 800215c:	d01f      	beq.n	800219e <__gedf2+0x76>
 800215e:	45ba      	cmp	sl, r7
 8002160:	d00f      	beq.n	8002182 <__gedf2+0x5a>
 8002162:	2e00      	cmp	r6, #0
 8002164:	d12f      	bne.n	80021c6 <__gedf2+0x9e>
 8002166:	4655      	mov	r5, sl
 8002168:	9e01      	ldr	r6, [sp, #4]
 800216a:	4334      	orrs	r4, r6
 800216c:	2d00      	cmp	r5, #0
 800216e:	d127      	bne.n	80021c0 <__gedf2+0x98>
 8002170:	430a      	orrs	r2, r1
 8002172:	d03a      	beq.n	80021ea <__gedf2+0xc2>
 8002174:	2c00      	cmp	r4, #0
 8002176:	d145      	bne.n	8002204 <__gedf2+0xdc>
 8002178:	2800      	cmp	r0, #0
 800217a:	d11a      	bne.n	80021b2 <__gedf2+0x8a>
 800217c:	2001      	movs	r0, #1
 800217e:	4240      	negs	r0, r0
 8002180:	e017      	b.n	80021b2 <__gedf2+0x8a>
 8002182:	4311      	orrs	r1, r2
 8002184:	d13b      	bne.n	80021fe <__gedf2+0xd6>
 8002186:	2e00      	cmp	r6, #0
 8002188:	d102      	bne.n	8002190 <__gedf2+0x68>
 800218a:	9f01      	ldr	r7, [sp, #4]
 800218c:	4327      	orrs	r7, r4
 800218e:	d0f3      	beq.n	8002178 <__gedf2+0x50>
 8002190:	4584      	cmp	ip, r0
 8002192:	d109      	bne.n	80021a8 <__gedf2+0x80>
 8002194:	4663      	mov	r3, ip
 8002196:	2b00      	cmp	r3, #0
 8002198:	d0f0      	beq.n	800217c <__gedf2+0x54>
 800219a:	4660      	mov	r0, ip
 800219c:	e009      	b.n	80021b2 <__gedf2+0x8a>
 800219e:	9f01      	ldr	r7, [sp, #4]
 80021a0:	4327      	orrs	r7, r4
 80021a2:	d12c      	bne.n	80021fe <__gedf2+0xd6>
 80021a4:	45b2      	cmp	sl, r6
 80021a6:	d024      	beq.n	80021f2 <__gedf2+0xca>
 80021a8:	4663      	mov	r3, ip
 80021aa:	2002      	movs	r0, #2
 80021ac:	3b01      	subs	r3, #1
 80021ae:	4018      	ands	r0, r3
 80021b0:	3801      	subs	r0, #1
 80021b2:	b003      	add	sp, #12
 80021b4:	bcf0      	pop	{r4, r5, r6, r7}
 80021b6:	46bb      	mov	fp, r7
 80021b8:	46b2      	mov	sl, r6
 80021ba:	46a9      	mov	r9, r5
 80021bc:	46a0      	mov	r8, r4
 80021be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021c0:	2c00      	cmp	r4, #0
 80021c2:	d0d9      	beq.n	8002178 <__gedf2+0x50>
 80021c4:	e7e4      	b.n	8002190 <__gedf2+0x68>
 80021c6:	4654      	mov	r4, sl
 80021c8:	2c00      	cmp	r4, #0
 80021ca:	d0ed      	beq.n	80021a8 <__gedf2+0x80>
 80021cc:	4584      	cmp	ip, r0
 80021ce:	d1eb      	bne.n	80021a8 <__gedf2+0x80>
 80021d0:	4556      	cmp	r6, sl
 80021d2:	dce9      	bgt.n	80021a8 <__gedf2+0x80>
 80021d4:	dbde      	blt.n	8002194 <__gedf2+0x6c>
 80021d6:	9b01      	ldr	r3, [sp, #4]
 80021d8:	428b      	cmp	r3, r1
 80021da:	d8e5      	bhi.n	80021a8 <__gedf2+0x80>
 80021dc:	d1da      	bne.n	8002194 <__gedf2+0x6c>
 80021de:	45c8      	cmp	r8, r9
 80021e0:	d8e2      	bhi.n	80021a8 <__gedf2+0x80>
 80021e2:	2000      	movs	r0, #0
 80021e4:	45c8      	cmp	r8, r9
 80021e6:	d2e4      	bcs.n	80021b2 <__gedf2+0x8a>
 80021e8:	e7d4      	b.n	8002194 <__gedf2+0x6c>
 80021ea:	2000      	movs	r0, #0
 80021ec:	2c00      	cmp	r4, #0
 80021ee:	d0e0      	beq.n	80021b2 <__gedf2+0x8a>
 80021f0:	e7da      	b.n	80021a8 <__gedf2+0x80>
 80021f2:	4311      	orrs	r1, r2
 80021f4:	d103      	bne.n	80021fe <__gedf2+0xd6>
 80021f6:	4584      	cmp	ip, r0
 80021f8:	d1d6      	bne.n	80021a8 <__gedf2+0x80>
 80021fa:	2000      	movs	r0, #0
 80021fc:	e7d9      	b.n	80021b2 <__gedf2+0x8a>
 80021fe:	2002      	movs	r0, #2
 8002200:	4240      	negs	r0, r0
 8002202:	e7d6      	b.n	80021b2 <__gedf2+0x8a>
 8002204:	4584      	cmp	ip, r0
 8002206:	d0e6      	beq.n	80021d6 <__gedf2+0xae>
 8002208:	e7ce      	b.n	80021a8 <__gedf2+0x80>
 800220a:	46c0      	nop			@ (mov r8, r8)
 800220c:	000007ff 	.word	0x000007ff

08002210 <__ledf2>:
 8002210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002212:	4657      	mov	r7, sl
 8002214:	464e      	mov	r6, r9
 8002216:	4645      	mov	r5, r8
 8002218:	46de      	mov	lr, fp
 800221a:	b5e0      	push	{r5, r6, r7, lr}
 800221c:	000d      	movs	r5, r1
 800221e:	030f      	lsls	r7, r1, #12
 8002220:	0004      	movs	r4, r0
 8002222:	4680      	mov	r8, r0
 8002224:	0fe8      	lsrs	r0, r5, #31
 8002226:	0b39      	lsrs	r1, r7, #12
 8002228:	4684      	mov	ip, r0
 800222a:	b083      	sub	sp, #12
 800222c:	0058      	lsls	r0, r3, #1
 800222e:	4f30      	ldr	r7, [pc, #192]	@ (80022f0 <__ledf2+0xe0>)
 8002230:	0d40      	lsrs	r0, r0, #21
 8002232:	9101      	str	r1, [sp, #4]
 8002234:	031e      	lsls	r6, r3, #12
 8002236:	0069      	lsls	r1, r5, #1
 8002238:	4682      	mov	sl, r0
 800223a:	4691      	mov	r9, r2
 800223c:	0d49      	lsrs	r1, r1, #21
 800223e:	0b36      	lsrs	r6, r6, #12
 8002240:	0fd8      	lsrs	r0, r3, #31
 8002242:	42b9      	cmp	r1, r7
 8002244:	d020      	beq.n	8002288 <__ledf2+0x78>
 8002246:	45ba      	cmp	sl, r7
 8002248:	d00f      	beq.n	800226a <__ledf2+0x5a>
 800224a:	2900      	cmp	r1, #0
 800224c:	d12b      	bne.n	80022a6 <__ledf2+0x96>
 800224e:	9901      	ldr	r1, [sp, #4]
 8002250:	430c      	orrs	r4, r1
 8002252:	4651      	mov	r1, sl
 8002254:	2900      	cmp	r1, #0
 8002256:	d137      	bne.n	80022c8 <__ledf2+0xb8>
 8002258:	4332      	orrs	r2, r6
 800225a:	d038      	beq.n	80022ce <__ledf2+0xbe>
 800225c:	2c00      	cmp	r4, #0
 800225e:	d144      	bne.n	80022ea <__ledf2+0xda>
 8002260:	2800      	cmp	r0, #0
 8002262:	d119      	bne.n	8002298 <__ledf2+0x88>
 8002264:	2001      	movs	r0, #1
 8002266:	4240      	negs	r0, r0
 8002268:	e016      	b.n	8002298 <__ledf2+0x88>
 800226a:	4316      	orrs	r6, r2
 800226c:	d113      	bne.n	8002296 <__ledf2+0x86>
 800226e:	2900      	cmp	r1, #0
 8002270:	d102      	bne.n	8002278 <__ledf2+0x68>
 8002272:	9f01      	ldr	r7, [sp, #4]
 8002274:	4327      	orrs	r7, r4
 8002276:	d0f3      	beq.n	8002260 <__ledf2+0x50>
 8002278:	4584      	cmp	ip, r0
 800227a:	d020      	beq.n	80022be <__ledf2+0xae>
 800227c:	4663      	mov	r3, ip
 800227e:	2002      	movs	r0, #2
 8002280:	3b01      	subs	r3, #1
 8002282:	4018      	ands	r0, r3
 8002284:	3801      	subs	r0, #1
 8002286:	e007      	b.n	8002298 <__ledf2+0x88>
 8002288:	9f01      	ldr	r7, [sp, #4]
 800228a:	4327      	orrs	r7, r4
 800228c:	d103      	bne.n	8002296 <__ledf2+0x86>
 800228e:	458a      	cmp	sl, r1
 8002290:	d1f4      	bne.n	800227c <__ledf2+0x6c>
 8002292:	4316      	orrs	r6, r2
 8002294:	d01f      	beq.n	80022d6 <__ledf2+0xc6>
 8002296:	2002      	movs	r0, #2
 8002298:	b003      	add	sp, #12
 800229a:	bcf0      	pop	{r4, r5, r6, r7}
 800229c:	46bb      	mov	fp, r7
 800229e:	46b2      	mov	sl, r6
 80022a0:	46a9      	mov	r9, r5
 80022a2:	46a0      	mov	r8, r4
 80022a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022a6:	4654      	mov	r4, sl
 80022a8:	2c00      	cmp	r4, #0
 80022aa:	d0e7      	beq.n	800227c <__ledf2+0x6c>
 80022ac:	4584      	cmp	ip, r0
 80022ae:	d1e5      	bne.n	800227c <__ledf2+0x6c>
 80022b0:	4551      	cmp	r1, sl
 80022b2:	dce3      	bgt.n	800227c <__ledf2+0x6c>
 80022b4:	db03      	blt.n	80022be <__ledf2+0xae>
 80022b6:	9b01      	ldr	r3, [sp, #4]
 80022b8:	42b3      	cmp	r3, r6
 80022ba:	d8df      	bhi.n	800227c <__ledf2+0x6c>
 80022bc:	d00f      	beq.n	80022de <__ledf2+0xce>
 80022be:	4663      	mov	r3, ip
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0cf      	beq.n	8002264 <__ledf2+0x54>
 80022c4:	4660      	mov	r0, ip
 80022c6:	e7e7      	b.n	8002298 <__ledf2+0x88>
 80022c8:	2c00      	cmp	r4, #0
 80022ca:	d0c9      	beq.n	8002260 <__ledf2+0x50>
 80022cc:	e7d4      	b.n	8002278 <__ledf2+0x68>
 80022ce:	2000      	movs	r0, #0
 80022d0:	2c00      	cmp	r4, #0
 80022d2:	d0e1      	beq.n	8002298 <__ledf2+0x88>
 80022d4:	e7d2      	b.n	800227c <__ledf2+0x6c>
 80022d6:	4584      	cmp	ip, r0
 80022d8:	d1d0      	bne.n	800227c <__ledf2+0x6c>
 80022da:	2000      	movs	r0, #0
 80022dc:	e7dc      	b.n	8002298 <__ledf2+0x88>
 80022de:	45c8      	cmp	r8, r9
 80022e0:	d8cc      	bhi.n	800227c <__ledf2+0x6c>
 80022e2:	2000      	movs	r0, #0
 80022e4:	45c8      	cmp	r8, r9
 80022e6:	d2d7      	bcs.n	8002298 <__ledf2+0x88>
 80022e8:	e7e9      	b.n	80022be <__ledf2+0xae>
 80022ea:	4584      	cmp	ip, r0
 80022ec:	d0e3      	beq.n	80022b6 <__ledf2+0xa6>
 80022ee:	e7c5      	b.n	800227c <__ledf2+0x6c>
 80022f0:	000007ff 	.word	0x000007ff

080022f4 <__aeabi_dmul>:
 80022f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022f6:	4657      	mov	r7, sl
 80022f8:	46de      	mov	lr, fp
 80022fa:	464e      	mov	r6, r9
 80022fc:	4645      	mov	r5, r8
 80022fe:	b5e0      	push	{r5, r6, r7, lr}
 8002300:	001f      	movs	r7, r3
 8002302:	030b      	lsls	r3, r1, #12
 8002304:	0b1b      	lsrs	r3, r3, #12
 8002306:	0016      	movs	r6, r2
 8002308:	469a      	mov	sl, r3
 800230a:	0fca      	lsrs	r2, r1, #31
 800230c:	004b      	lsls	r3, r1, #1
 800230e:	0004      	movs	r4, r0
 8002310:	4693      	mov	fp, r2
 8002312:	b087      	sub	sp, #28
 8002314:	0d5b      	lsrs	r3, r3, #21
 8002316:	d100      	bne.n	800231a <__aeabi_dmul+0x26>
 8002318:	e0d5      	b.n	80024c6 <__aeabi_dmul+0x1d2>
 800231a:	4abb      	ldr	r2, [pc, #748]	@ (8002608 <__aeabi_dmul+0x314>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d100      	bne.n	8002322 <__aeabi_dmul+0x2e>
 8002320:	e0f8      	b.n	8002514 <__aeabi_dmul+0x220>
 8002322:	4651      	mov	r1, sl
 8002324:	0f42      	lsrs	r2, r0, #29
 8002326:	00c9      	lsls	r1, r1, #3
 8002328:	430a      	orrs	r2, r1
 800232a:	2180      	movs	r1, #128	@ 0x80
 800232c:	0409      	lsls	r1, r1, #16
 800232e:	4311      	orrs	r1, r2
 8002330:	00c2      	lsls	r2, r0, #3
 8002332:	4691      	mov	r9, r2
 8002334:	4ab5      	ldr	r2, [pc, #724]	@ (800260c <__aeabi_dmul+0x318>)
 8002336:	468a      	mov	sl, r1
 8002338:	189d      	adds	r5, r3, r2
 800233a:	2300      	movs	r3, #0
 800233c:	4698      	mov	r8, r3
 800233e:	9302      	str	r3, [sp, #8]
 8002340:	033c      	lsls	r4, r7, #12
 8002342:	007b      	lsls	r3, r7, #1
 8002344:	0ffa      	lsrs	r2, r7, #31
 8002346:	0030      	movs	r0, r6
 8002348:	0b24      	lsrs	r4, r4, #12
 800234a:	0d5b      	lsrs	r3, r3, #21
 800234c:	9200      	str	r2, [sp, #0]
 800234e:	d100      	bne.n	8002352 <__aeabi_dmul+0x5e>
 8002350:	e096      	b.n	8002480 <__aeabi_dmul+0x18c>
 8002352:	4aad      	ldr	r2, [pc, #692]	@ (8002608 <__aeabi_dmul+0x314>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d031      	beq.n	80023bc <__aeabi_dmul+0xc8>
 8002358:	0f72      	lsrs	r2, r6, #29
 800235a:	00e4      	lsls	r4, r4, #3
 800235c:	4322      	orrs	r2, r4
 800235e:	2480      	movs	r4, #128	@ 0x80
 8002360:	0424      	lsls	r4, r4, #16
 8002362:	4314      	orrs	r4, r2
 8002364:	4aa9      	ldr	r2, [pc, #676]	@ (800260c <__aeabi_dmul+0x318>)
 8002366:	00f0      	lsls	r0, r6, #3
 8002368:	4694      	mov	ip, r2
 800236a:	4463      	add	r3, ip
 800236c:	195b      	adds	r3, r3, r5
 800236e:	1c5a      	adds	r2, r3, #1
 8002370:	9201      	str	r2, [sp, #4]
 8002372:	4642      	mov	r2, r8
 8002374:	2600      	movs	r6, #0
 8002376:	2a0a      	cmp	r2, #10
 8002378:	dc42      	bgt.n	8002400 <__aeabi_dmul+0x10c>
 800237a:	465a      	mov	r2, fp
 800237c:	9900      	ldr	r1, [sp, #0]
 800237e:	404a      	eors	r2, r1
 8002380:	4693      	mov	fp, r2
 8002382:	4642      	mov	r2, r8
 8002384:	2a02      	cmp	r2, #2
 8002386:	dc32      	bgt.n	80023ee <__aeabi_dmul+0xfa>
 8002388:	3a01      	subs	r2, #1
 800238a:	2a01      	cmp	r2, #1
 800238c:	d900      	bls.n	8002390 <__aeabi_dmul+0x9c>
 800238e:	e149      	b.n	8002624 <__aeabi_dmul+0x330>
 8002390:	2e02      	cmp	r6, #2
 8002392:	d100      	bne.n	8002396 <__aeabi_dmul+0xa2>
 8002394:	e0ca      	b.n	800252c <__aeabi_dmul+0x238>
 8002396:	2e01      	cmp	r6, #1
 8002398:	d13d      	bne.n	8002416 <__aeabi_dmul+0x122>
 800239a:	2300      	movs	r3, #0
 800239c:	2400      	movs	r4, #0
 800239e:	2200      	movs	r2, #0
 80023a0:	0010      	movs	r0, r2
 80023a2:	465a      	mov	r2, fp
 80023a4:	051b      	lsls	r3, r3, #20
 80023a6:	4323      	orrs	r3, r4
 80023a8:	07d2      	lsls	r2, r2, #31
 80023aa:	4313      	orrs	r3, r2
 80023ac:	0019      	movs	r1, r3
 80023ae:	b007      	add	sp, #28
 80023b0:	bcf0      	pop	{r4, r5, r6, r7}
 80023b2:	46bb      	mov	fp, r7
 80023b4:	46b2      	mov	sl, r6
 80023b6:	46a9      	mov	r9, r5
 80023b8:	46a0      	mov	r8, r4
 80023ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023bc:	4b92      	ldr	r3, [pc, #584]	@ (8002608 <__aeabi_dmul+0x314>)
 80023be:	4326      	orrs	r6, r4
 80023c0:	18eb      	adds	r3, r5, r3
 80023c2:	2e00      	cmp	r6, #0
 80023c4:	d100      	bne.n	80023c8 <__aeabi_dmul+0xd4>
 80023c6:	e0bb      	b.n	8002540 <__aeabi_dmul+0x24c>
 80023c8:	2203      	movs	r2, #3
 80023ca:	4641      	mov	r1, r8
 80023cc:	4311      	orrs	r1, r2
 80023ce:	465a      	mov	r2, fp
 80023d0:	4688      	mov	r8, r1
 80023d2:	9900      	ldr	r1, [sp, #0]
 80023d4:	404a      	eors	r2, r1
 80023d6:	2180      	movs	r1, #128	@ 0x80
 80023d8:	0109      	lsls	r1, r1, #4
 80023da:	468c      	mov	ip, r1
 80023dc:	0029      	movs	r1, r5
 80023de:	4461      	add	r1, ip
 80023e0:	9101      	str	r1, [sp, #4]
 80023e2:	4641      	mov	r1, r8
 80023e4:	290a      	cmp	r1, #10
 80023e6:	dd00      	ble.n	80023ea <__aeabi_dmul+0xf6>
 80023e8:	e233      	b.n	8002852 <__aeabi_dmul+0x55e>
 80023ea:	4693      	mov	fp, r2
 80023ec:	2603      	movs	r6, #3
 80023ee:	4642      	mov	r2, r8
 80023f0:	2701      	movs	r7, #1
 80023f2:	4097      	lsls	r7, r2
 80023f4:	21a6      	movs	r1, #166	@ 0xa6
 80023f6:	003a      	movs	r2, r7
 80023f8:	00c9      	lsls	r1, r1, #3
 80023fa:	400a      	ands	r2, r1
 80023fc:	420f      	tst	r7, r1
 80023fe:	d031      	beq.n	8002464 <__aeabi_dmul+0x170>
 8002400:	9e02      	ldr	r6, [sp, #8]
 8002402:	2e02      	cmp	r6, #2
 8002404:	d100      	bne.n	8002408 <__aeabi_dmul+0x114>
 8002406:	e235      	b.n	8002874 <__aeabi_dmul+0x580>
 8002408:	2e03      	cmp	r6, #3
 800240a:	d100      	bne.n	800240e <__aeabi_dmul+0x11a>
 800240c:	e1d2      	b.n	80027b4 <__aeabi_dmul+0x4c0>
 800240e:	4654      	mov	r4, sl
 8002410:	4648      	mov	r0, r9
 8002412:	2e01      	cmp	r6, #1
 8002414:	d0c1      	beq.n	800239a <__aeabi_dmul+0xa6>
 8002416:	9a01      	ldr	r2, [sp, #4]
 8002418:	4b7d      	ldr	r3, [pc, #500]	@ (8002610 <__aeabi_dmul+0x31c>)
 800241a:	4694      	mov	ip, r2
 800241c:	4463      	add	r3, ip
 800241e:	2b00      	cmp	r3, #0
 8002420:	dc00      	bgt.n	8002424 <__aeabi_dmul+0x130>
 8002422:	e0c0      	b.n	80025a6 <__aeabi_dmul+0x2b2>
 8002424:	0742      	lsls	r2, r0, #29
 8002426:	d009      	beq.n	800243c <__aeabi_dmul+0x148>
 8002428:	220f      	movs	r2, #15
 800242a:	4002      	ands	r2, r0
 800242c:	2a04      	cmp	r2, #4
 800242e:	d005      	beq.n	800243c <__aeabi_dmul+0x148>
 8002430:	1d02      	adds	r2, r0, #4
 8002432:	4282      	cmp	r2, r0
 8002434:	4180      	sbcs	r0, r0
 8002436:	4240      	negs	r0, r0
 8002438:	1824      	adds	r4, r4, r0
 800243a:	0010      	movs	r0, r2
 800243c:	01e2      	lsls	r2, r4, #7
 800243e:	d506      	bpl.n	800244e <__aeabi_dmul+0x15a>
 8002440:	4b74      	ldr	r3, [pc, #464]	@ (8002614 <__aeabi_dmul+0x320>)
 8002442:	9a01      	ldr	r2, [sp, #4]
 8002444:	401c      	ands	r4, r3
 8002446:	2380      	movs	r3, #128	@ 0x80
 8002448:	4694      	mov	ip, r2
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	4463      	add	r3, ip
 800244e:	4a72      	ldr	r2, [pc, #456]	@ (8002618 <__aeabi_dmul+0x324>)
 8002450:	4293      	cmp	r3, r2
 8002452:	dc6b      	bgt.n	800252c <__aeabi_dmul+0x238>
 8002454:	0762      	lsls	r2, r4, #29
 8002456:	08c0      	lsrs	r0, r0, #3
 8002458:	0264      	lsls	r4, r4, #9
 800245a:	055b      	lsls	r3, r3, #21
 800245c:	4302      	orrs	r2, r0
 800245e:	0b24      	lsrs	r4, r4, #12
 8002460:	0d5b      	lsrs	r3, r3, #21
 8002462:	e79d      	b.n	80023a0 <__aeabi_dmul+0xac>
 8002464:	2190      	movs	r1, #144	@ 0x90
 8002466:	0089      	lsls	r1, r1, #2
 8002468:	420f      	tst	r7, r1
 800246a:	d163      	bne.n	8002534 <__aeabi_dmul+0x240>
 800246c:	2288      	movs	r2, #136	@ 0x88
 800246e:	423a      	tst	r2, r7
 8002470:	d100      	bne.n	8002474 <__aeabi_dmul+0x180>
 8002472:	e0d7      	b.n	8002624 <__aeabi_dmul+0x330>
 8002474:	9b00      	ldr	r3, [sp, #0]
 8002476:	46a2      	mov	sl, r4
 8002478:	469b      	mov	fp, r3
 800247a:	4681      	mov	r9, r0
 800247c:	9602      	str	r6, [sp, #8]
 800247e:	e7bf      	b.n	8002400 <__aeabi_dmul+0x10c>
 8002480:	0023      	movs	r3, r4
 8002482:	4333      	orrs	r3, r6
 8002484:	d100      	bne.n	8002488 <__aeabi_dmul+0x194>
 8002486:	e07f      	b.n	8002588 <__aeabi_dmul+0x294>
 8002488:	2c00      	cmp	r4, #0
 800248a:	d100      	bne.n	800248e <__aeabi_dmul+0x19a>
 800248c:	e1ad      	b.n	80027ea <__aeabi_dmul+0x4f6>
 800248e:	0020      	movs	r0, r4
 8002490:	f000 fe44 	bl	800311c <__clzsi2>
 8002494:	0002      	movs	r2, r0
 8002496:	0003      	movs	r3, r0
 8002498:	3a0b      	subs	r2, #11
 800249a:	201d      	movs	r0, #29
 800249c:	0019      	movs	r1, r3
 800249e:	1a82      	subs	r2, r0, r2
 80024a0:	0030      	movs	r0, r6
 80024a2:	3908      	subs	r1, #8
 80024a4:	40d0      	lsrs	r0, r2
 80024a6:	408c      	lsls	r4, r1
 80024a8:	4304      	orrs	r4, r0
 80024aa:	0030      	movs	r0, r6
 80024ac:	4088      	lsls	r0, r1
 80024ae:	4a5b      	ldr	r2, [pc, #364]	@ (800261c <__aeabi_dmul+0x328>)
 80024b0:	1aeb      	subs	r3, r5, r3
 80024b2:	4694      	mov	ip, r2
 80024b4:	4463      	add	r3, ip
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	9201      	str	r2, [sp, #4]
 80024ba:	4642      	mov	r2, r8
 80024bc:	2600      	movs	r6, #0
 80024be:	2a0a      	cmp	r2, #10
 80024c0:	dc00      	bgt.n	80024c4 <__aeabi_dmul+0x1d0>
 80024c2:	e75a      	b.n	800237a <__aeabi_dmul+0x86>
 80024c4:	e79c      	b.n	8002400 <__aeabi_dmul+0x10c>
 80024c6:	4653      	mov	r3, sl
 80024c8:	4303      	orrs	r3, r0
 80024ca:	4699      	mov	r9, r3
 80024cc:	d054      	beq.n	8002578 <__aeabi_dmul+0x284>
 80024ce:	4653      	mov	r3, sl
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d100      	bne.n	80024d6 <__aeabi_dmul+0x1e2>
 80024d4:	e177      	b.n	80027c6 <__aeabi_dmul+0x4d2>
 80024d6:	4650      	mov	r0, sl
 80024d8:	f000 fe20 	bl	800311c <__clzsi2>
 80024dc:	230b      	movs	r3, #11
 80024de:	425b      	negs	r3, r3
 80024e0:	469c      	mov	ip, r3
 80024e2:	0002      	movs	r2, r0
 80024e4:	4484      	add	ip, r0
 80024e6:	0011      	movs	r1, r2
 80024e8:	4650      	mov	r0, sl
 80024ea:	3908      	subs	r1, #8
 80024ec:	4088      	lsls	r0, r1
 80024ee:	231d      	movs	r3, #29
 80024f0:	4680      	mov	r8, r0
 80024f2:	4660      	mov	r0, ip
 80024f4:	1a1b      	subs	r3, r3, r0
 80024f6:	0020      	movs	r0, r4
 80024f8:	40d8      	lsrs	r0, r3
 80024fa:	0003      	movs	r3, r0
 80024fc:	4640      	mov	r0, r8
 80024fe:	4303      	orrs	r3, r0
 8002500:	469a      	mov	sl, r3
 8002502:	0023      	movs	r3, r4
 8002504:	408b      	lsls	r3, r1
 8002506:	4699      	mov	r9, r3
 8002508:	2300      	movs	r3, #0
 800250a:	4d44      	ldr	r5, [pc, #272]	@ (800261c <__aeabi_dmul+0x328>)
 800250c:	4698      	mov	r8, r3
 800250e:	1aad      	subs	r5, r5, r2
 8002510:	9302      	str	r3, [sp, #8]
 8002512:	e715      	b.n	8002340 <__aeabi_dmul+0x4c>
 8002514:	4652      	mov	r2, sl
 8002516:	4302      	orrs	r2, r0
 8002518:	4691      	mov	r9, r2
 800251a:	d126      	bne.n	800256a <__aeabi_dmul+0x276>
 800251c:	2200      	movs	r2, #0
 800251e:	001d      	movs	r5, r3
 8002520:	2302      	movs	r3, #2
 8002522:	4692      	mov	sl, r2
 8002524:	3208      	adds	r2, #8
 8002526:	4690      	mov	r8, r2
 8002528:	9302      	str	r3, [sp, #8]
 800252a:	e709      	b.n	8002340 <__aeabi_dmul+0x4c>
 800252c:	2400      	movs	r4, #0
 800252e:	2200      	movs	r2, #0
 8002530:	4b35      	ldr	r3, [pc, #212]	@ (8002608 <__aeabi_dmul+0x314>)
 8002532:	e735      	b.n	80023a0 <__aeabi_dmul+0xac>
 8002534:	2300      	movs	r3, #0
 8002536:	2480      	movs	r4, #128	@ 0x80
 8002538:	469b      	mov	fp, r3
 800253a:	0324      	lsls	r4, r4, #12
 800253c:	4b32      	ldr	r3, [pc, #200]	@ (8002608 <__aeabi_dmul+0x314>)
 800253e:	e72f      	b.n	80023a0 <__aeabi_dmul+0xac>
 8002540:	2202      	movs	r2, #2
 8002542:	4641      	mov	r1, r8
 8002544:	4311      	orrs	r1, r2
 8002546:	2280      	movs	r2, #128	@ 0x80
 8002548:	0112      	lsls	r2, r2, #4
 800254a:	4694      	mov	ip, r2
 800254c:	002a      	movs	r2, r5
 800254e:	4462      	add	r2, ip
 8002550:	4688      	mov	r8, r1
 8002552:	9201      	str	r2, [sp, #4]
 8002554:	290a      	cmp	r1, #10
 8002556:	dd00      	ble.n	800255a <__aeabi_dmul+0x266>
 8002558:	e752      	b.n	8002400 <__aeabi_dmul+0x10c>
 800255a:	465a      	mov	r2, fp
 800255c:	2000      	movs	r0, #0
 800255e:	9900      	ldr	r1, [sp, #0]
 8002560:	0004      	movs	r4, r0
 8002562:	404a      	eors	r2, r1
 8002564:	4693      	mov	fp, r2
 8002566:	2602      	movs	r6, #2
 8002568:	e70b      	b.n	8002382 <__aeabi_dmul+0x8e>
 800256a:	220c      	movs	r2, #12
 800256c:	001d      	movs	r5, r3
 800256e:	2303      	movs	r3, #3
 8002570:	4681      	mov	r9, r0
 8002572:	4690      	mov	r8, r2
 8002574:	9302      	str	r3, [sp, #8]
 8002576:	e6e3      	b.n	8002340 <__aeabi_dmul+0x4c>
 8002578:	2300      	movs	r3, #0
 800257a:	469a      	mov	sl, r3
 800257c:	3304      	adds	r3, #4
 800257e:	4698      	mov	r8, r3
 8002580:	3b03      	subs	r3, #3
 8002582:	2500      	movs	r5, #0
 8002584:	9302      	str	r3, [sp, #8]
 8002586:	e6db      	b.n	8002340 <__aeabi_dmul+0x4c>
 8002588:	4642      	mov	r2, r8
 800258a:	3301      	adds	r3, #1
 800258c:	431a      	orrs	r2, r3
 800258e:	002b      	movs	r3, r5
 8002590:	4690      	mov	r8, r2
 8002592:	1c5a      	adds	r2, r3, #1
 8002594:	9201      	str	r2, [sp, #4]
 8002596:	4642      	mov	r2, r8
 8002598:	2400      	movs	r4, #0
 800259a:	2000      	movs	r0, #0
 800259c:	2601      	movs	r6, #1
 800259e:	2a0a      	cmp	r2, #10
 80025a0:	dc00      	bgt.n	80025a4 <__aeabi_dmul+0x2b0>
 80025a2:	e6ea      	b.n	800237a <__aeabi_dmul+0x86>
 80025a4:	e72c      	b.n	8002400 <__aeabi_dmul+0x10c>
 80025a6:	2201      	movs	r2, #1
 80025a8:	1ad2      	subs	r2, r2, r3
 80025aa:	2a38      	cmp	r2, #56	@ 0x38
 80025ac:	dd00      	ble.n	80025b0 <__aeabi_dmul+0x2bc>
 80025ae:	e6f4      	b.n	800239a <__aeabi_dmul+0xa6>
 80025b0:	2a1f      	cmp	r2, #31
 80025b2:	dc00      	bgt.n	80025b6 <__aeabi_dmul+0x2c2>
 80025b4:	e12a      	b.n	800280c <__aeabi_dmul+0x518>
 80025b6:	211f      	movs	r1, #31
 80025b8:	4249      	negs	r1, r1
 80025ba:	1acb      	subs	r3, r1, r3
 80025bc:	0021      	movs	r1, r4
 80025be:	40d9      	lsrs	r1, r3
 80025c0:	000b      	movs	r3, r1
 80025c2:	2a20      	cmp	r2, #32
 80025c4:	d005      	beq.n	80025d2 <__aeabi_dmul+0x2de>
 80025c6:	4a16      	ldr	r2, [pc, #88]	@ (8002620 <__aeabi_dmul+0x32c>)
 80025c8:	9d01      	ldr	r5, [sp, #4]
 80025ca:	4694      	mov	ip, r2
 80025cc:	4465      	add	r5, ip
 80025ce:	40ac      	lsls	r4, r5
 80025d0:	4320      	orrs	r0, r4
 80025d2:	1e42      	subs	r2, r0, #1
 80025d4:	4190      	sbcs	r0, r2
 80025d6:	4318      	orrs	r0, r3
 80025d8:	2307      	movs	r3, #7
 80025da:	0019      	movs	r1, r3
 80025dc:	2400      	movs	r4, #0
 80025de:	4001      	ands	r1, r0
 80025e0:	4203      	tst	r3, r0
 80025e2:	d00c      	beq.n	80025fe <__aeabi_dmul+0x30a>
 80025e4:	230f      	movs	r3, #15
 80025e6:	4003      	ands	r3, r0
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d100      	bne.n	80025ee <__aeabi_dmul+0x2fa>
 80025ec:	e140      	b.n	8002870 <__aeabi_dmul+0x57c>
 80025ee:	1d03      	adds	r3, r0, #4
 80025f0:	4283      	cmp	r3, r0
 80025f2:	41a4      	sbcs	r4, r4
 80025f4:	0018      	movs	r0, r3
 80025f6:	4264      	negs	r4, r4
 80025f8:	0761      	lsls	r1, r4, #29
 80025fa:	0264      	lsls	r4, r4, #9
 80025fc:	0b24      	lsrs	r4, r4, #12
 80025fe:	08c2      	lsrs	r2, r0, #3
 8002600:	2300      	movs	r3, #0
 8002602:	430a      	orrs	r2, r1
 8002604:	e6cc      	b.n	80023a0 <__aeabi_dmul+0xac>
 8002606:	46c0      	nop			@ (mov r8, r8)
 8002608:	000007ff 	.word	0x000007ff
 800260c:	fffffc01 	.word	0xfffffc01
 8002610:	000003ff 	.word	0x000003ff
 8002614:	feffffff 	.word	0xfeffffff
 8002618:	000007fe 	.word	0x000007fe
 800261c:	fffffc0d 	.word	0xfffffc0d
 8002620:	0000043e 	.word	0x0000043e
 8002624:	4649      	mov	r1, r9
 8002626:	464a      	mov	r2, r9
 8002628:	0409      	lsls	r1, r1, #16
 800262a:	0c09      	lsrs	r1, r1, #16
 800262c:	000d      	movs	r5, r1
 800262e:	0c16      	lsrs	r6, r2, #16
 8002630:	0c02      	lsrs	r2, r0, #16
 8002632:	0400      	lsls	r0, r0, #16
 8002634:	0c00      	lsrs	r0, r0, #16
 8002636:	4345      	muls	r5, r0
 8002638:	46ac      	mov	ip, r5
 800263a:	0005      	movs	r5, r0
 800263c:	4375      	muls	r5, r6
 800263e:	46a8      	mov	r8, r5
 8002640:	0015      	movs	r5, r2
 8002642:	000f      	movs	r7, r1
 8002644:	4375      	muls	r5, r6
 8002646:	9200      	str	r2, [sp, #0]
 8002648:	9502      	str	r5, [sp, #8]
 800264a:	002a      	movs	r2, r5
 800264c:	9d00      	ldr	r5, [sp, #0]
 800264e:	436f      	muls	r7, r5
 8002650:	4665      	mov	r5, ip
 8002652:	0c2d      	lsrs	r5, r5, #16
 8002654:	46a9      	mov	r9, r5
 8002656:	4447      	add	r7, r8
 8002658:	444f      	add	r7, r9
 800265a:	45b8      	cmp	r8, r7
 800265c:	d905      	bls.n	800266a <__aeabi_dmul+0x376>
 800265e:	0015      	movs	r5, r2
 8002660:	2280      	movs	r2, #128	@ 0x80
 8002662:	0252      	lsls	r2, r2, #9
 8002664:	4690      	mov	r8, r2
 8002666:	4445      	add	r5, r8
 8002668:	9502      	str	r5, [sp, #8]
 800266a:	0c3d      	lsrs	r5, r7, #16
 800266c:	9503      	str	r5, [sp, #12]
 800266e:	4665      	mov	r5, ip
 8002670:	042d      	lsls	r5, r5, #16
 8002672:	043f      	lsls	r7, r7, #16
 8002674:	0c2d      	lsrs	r5, r5, #16
 8002676:	46ac      	mov	ip, r5
 8002678:	003d      	movs	r5, r7
 800267a:	4465      	add	r5, ip
 800267c:	9504      	str	r5, [sp, #16]
 800267e:	0c25      	lsrs	r5, r4, #16
 8002680:	0424      	lsls	r4, r4, #16
 8002682:	0c24      	lsrs	r4, r4, #16
 8002684:	46ac      	mov	ip, r5
 8002686:	0025      	movs	r5, r4
 8002688:	4375      	muls	r5, r6
 800268a:	46a8      	mov	r8, r5
 800268c:	4665      	mov	r5, ip
 800268e:	000f      	movs	r7, r1
 8002690:	4369      	muls	r1, r5
 8002692:	4441      	add	r1, r8
 8002694:	4689      	mov	r9, r1
 8002696:	4367      	muls	r7, r4
 8002698:	0c39      	lsrs	r1, r7, #16
 800269a:	4449      	add	r1, r9
 800269c:	436e      	muls	r6, r5
 800269e:	4588      	cmp	r8, r1
 80026a0:	d903      	bls.n	80026aa <__aeabi_dmul+0x3b6>
 80026a2:	2280      	movs	r2, #128	@ 0x80
 80026a4:	0252      	lsls	r2, r2, #9
 80026a6:	4690      	mov	r8, r2
 80026a8:	4446      	add	r6, r8
 80026aa:	0c0d      	lsrs	r5, r1, #16
 80026ac:	46a8      	mov	r8, r5
 80026ae:	0035      	movs	r5, r6
 80026b0:	4445      	add	r5, r8
 80026b2:	9505      	str	r5, [sp, #20]
 80026b4:	9d03      	ldr	r5, [sp, #12]
 80026b6:	043f      	lsls	r7, r7, #16
 80026b8:	46a8      	mov	r8, r5
 80026ba:	0c3f      	lsrs	r7, r7, #16
 80026bc:	0409      	lsls	r1, r1, #16
 80026be:	19c9      	adds	r1, r1, r7
 80026c0:	4488      	add	r8, r1
 80026c2:	4645      	mov	r5, r8
 80026c4:	9503      	str	r5, [sp, #12]
 80026c6:	4655      	mov	r5, sl
 80026c8:	042e      	lsls	r6, r5, #16
 80026ca:	0c36      	lsrs	r6, r6, #16
 80026cc:	0c2f      	lsrs	r7, r5, #16
 80026ce:	0035      	movs	r5, r6
 80026d0:	4345      	muls	r5, r0
 80026d2:	4378      	muls	r0, r7
 80026d4:	4681      	mov	r9, r0
 80026d6:	0038      	movs	r0, r7
 80026d8:	46a8      	mov	r8, r5
 80026da:	0c2d      	lsrs	r5, r5, #16
 80026dc:	46aa      	mov	sl, r5
 80026de:	9a00      	ldr	r2, [sp, #0]
 80026e0:	4350      	muls	r0, r2
 80026e2:	4372      	muls	r2, r6
 80026e4:	444a      	add	r2, r9
 80026e6:	4452      	add	r2, sl
 80026e8:	4591      	cmp	r9, r2
 80026ea:	d903      	bls.n	80026f4 <__aeabi_dmul+0x400>
 80026ec:	2580      	movs	r5, #128	@ 0x80
 80026ee:	026d      	lsls	r5, r5, #9
 80026f0:	46a9      	mov	r9, r5
 80026f2:	4448      	add	r0, r9
 80026f4:	0c15      	lsrs	r5, r2, #16
 80026f6:	46a9      	mov	r9, r5
 80026f8:	4645      	mov	r5, r8
 80026fa:	042d      	lsls	r5, r5, #16
 80026fc:	0c2d      	lsrs	r5, r5, #16
 80026fe:	46a8      	mov	r8, r5
 8002700:	4665      	mov	r5, ip
 8002702:	437d      	muls	r5, r7
 8002704:	0412      	lsls	r2, r2, #16
 8002706:	4448      	add	r0, r9
 8002708:	4490      	add	r8, r2
 800270a:	46a9      	mov	r9, r5
 800270c:	0032      	movs	r2, r6
 800270e:	4665      	mov	r5, ip
 8002710:	4362      	muls	r2, r4
 8002712:	436e      	muls	r6, r5
 8002714:	437c      	muls	r4, r7
 8002716:	0c17      	lsrs	r7, r2, #16
 8002718:	1936      	adds	r6, r6, r4
 800271a:	19bf      	adds	r7, r7, r6
 800271c:	42bc      	cmp	r4, r7
 800271e:	d903      	bls.n	8002728 <__aeabi_dmul+0x434>
 8002720:	2480      	movs	r4, #128	@ 0x80
 8002722:	0264      	lsls	r4, r4, #9
 8002724:	46a4      	mov	ip, r4
 8002726:	44e1      	add	r9, ip
 8002728:	9c02      	ldr	r4, [sp, #8]
 800272a:	9e03      	ldr	r6, [sp, #12]
 800272c:	46a4      	mov	ip, r4
 800272e:	9d05      	ldr	r5, [sp, #20]
 8002730:	4466      	add	r6, ip
 8002732:	428e      	cmp	r6, r1
 8002734:	4189      	sbcs	r1, r1
 8002736:	46ac      	mov	ip, r5
 8002738:	0412      	lsls	r2, r2, #16
 800273a:	043c      	lsls	r4, r7, #16
 800273c:	0c12      	lsrs	r2, r2, #16
 800273e:	18a2      	adds	r2, r4, r2
 8002740:	4462      	add	r2, ip
 8002742:	4249      	negs	r1, r1
 8002744:	1854      	adds	r4, r2, r1
 8002746:	4446      	add	r6, r8
 8002748:	46a4      	mov	ip, r4
 800274a:	4546      	cmp	r6, r8
 800274c:	41a4      	sbcs	r4, r4
 800274e:	4682      	mov	sl, r0
 8002750:	4264      	negs	r4, r4
 8002752:	46a0      	mov	r8, r4
 8002754:	42aa      	cmp	r2, r5
 8002756:	4192      	sbcs	r2, r2
 8002758:	458c      	cmp	ip, r1
 800275a:	4189      	sbcs	r1, r1
 800275c:	44e2      	add	sl, ip
 800275e:	44d0      	add	r8, sl
 8002760:	4249      	negs	r1, r1
 8002762:	4252      	negs	r2, r2
 8002764:	430a      	orrs	r2, r1
 8002766:	45a0      	cmp	r8, r4
 8002768:	41a4      	sbcs	r4, r4
 800276a:	4582      	cmp	sl, r0
 800276c:	4189      	sbcs	r1, r1
 800276e:	4264      	negs	r4, r4
 8002770:	4249      	negs	r1, r1
 8002772:	430c      	orrs	r4, r1
 8002774:	4641      	mov	r1, r8
 8002776:	0c3f      	lsrs	r7, r7, #16
 8002778:	19d2      	adds	r2, r2, r7
 800277a:	1912      	adds	r2, r2, r4
 800277c:	0dcc      	lsrs	r4, r1, #23
 800277e:	9904      	ldr	r1, [sp, #16]
 8002780:	0270      	lsls	r0, r6, #9
 8002782:	4308      	orrs	r0, r1
 8002784:	1e41      	subs	r1, r0, #1
 8002786:	4188      	sbcs	r0, r1
 8002788:	4641      	mov	r1, r8
 800278a:	444a      	add	r2, r9
 800278c:	0df6      	lsrs	r6, r6, #23
 800278e:	0252      	lsls	r2, r2, #9
 8002790:	4330      	orrs	r0, r6
 8002792:	0249      	lsls	r1, r1, #9
 8002794:	4314      	orrs	r4, r2
 8002796:	4308      	orrs	r0, r1
 8002798:	01d2      	lsls	r2, r2, #7
 800279a:	d535      	bpl.n	8002808 <__aeabi_dmul+0x514>
 800279c:	2201      	movs	r2, #1
 800279e:	0843      	lsrs	r3, r0, #1
 80027a0:	4002      	ands	r2, r0
 80027a2:	4313      	orrs	r3, r2
 80027a4:	07e0      	lsls	r0, r4, #31
 80027a6:	4318      	orrs	r0, r3
 80027a8:	0864      	lsrs	r4, r4, #1
 80027aa:	e634      	b.n	8002416 <__aeabi_dmul+0x122>
 80027ac:	9b00      	ldr	r3, [sp, #0]
 80027ae:	46a2      	mov	sl, r4
 80027b0:	469b      	mov	fp, r3
 80027b2:	4681      	mov	r9, r0
 80027b4:	2480      	movs	r4, #128	@ 0x80
 80027b6:	4653      	mov	r3, sl
 80027b8:	0324      	lsls	r4, r4, #12
 80027ba:	431c      	orrs	r4, r3
 80027bc:	0324      	lsls	r4, r4, #12
 80027be:	464a      	mov	r2, r9
 80027c0:	4b2e      	ldr	r3, [pc, #184]	@ (800287c <__aeabi_dmul+0x588>)
 80027c2:	0b24      	lsrs	r4, r4, #12
 80027c4:	e5ec      	b.n	80023a0 <__aeabi_dmul+0xac>
 80027c6:	f000 fca9 	bl	800311c <__clzsi2>
 80027ca:	2315      	movs	r3, #21
 80027cc:	469c      	mov	ip, r3
 80027ce:	4484      	add	ip, r0
 80027d0:	0002      	movs	r2, r0
 80027d2:	4663      	mov	r3, ip
 80027d4:	3220      	adds	r2, #32
 80027d6:	2b1c      	cmp	r3, #28
 80027d8:	dc00      	bgt.n	80027dc <__aeabi_dmul+0x4e8>
 80027da:	e684      	b.n	80024e6 <__aeabi_dmul+0x1f2>
 80027dc:	2300      	movs	r3, #0
 80027de:	4699      	mov	r9, r3
 80027e0:	0023      	movs	r3, r4
 80027e2:	3808      	subs	r0, #8
 80027e4:	4083      	lsls	r3, r0
 80027e6:	469a      	mov	sl, r3
 80027e8:	e68e      	b.n	8002508 <__aeabi_dmul+0x214>
 80027ea:	f000 fc97 	bl	800311c <__clzsi2>
 80027ee:	0002      	movs	r2, r0
 80027f0:	0003      	movs	r3, r0
 80027f2:	3215      	adds	r2, #21
 80027f4:	3320      	adds	r3, #32
 80027f6:	2a1c      	cmp	r2, #28
 80027f8:	dc00      	bgt.n	80027fc <__aeabi_dmul+0x508>
 80027fa:	e64e      	b.n	800249a <__aeabi_dmul+0x1a6>
 80027fc:	0002      	movs	r2, r0
 80027fe:	0034      	movs	r4, r6
 8002800:	3a08      	subs	r2, #8
 8002802:	2000      	movs	r0, #0
 8002804:	4094      	lsls	r4, r2
 8002806:	e652      	b.n	80024ae <__aeabi_dmul+0x1ba>
 8002808:	9301      	str	r3, [sp, #4]
 800280a:	e604      	b.n	8002416 <__aeabi_dmul+0x122>
 800280c:	4b1c      	ldr	r3, [pc, #112]	@ (8002880 <__aeabi_dmul+0x58c>)
 800280e:	0021      	movs	r1, r4
 8002810:	469c      	mov	ip, r3
 8002812:	0003      	movs	r3, r0
 8002814:	9d01      	ldr	r5, [sp, #4]
 8002816:	40d3      	lsrs	r3, r2
 8002818:	4465      	add	r5, ip
 800281a:	40a9      	lsls	r1, r5
 800281c:	4319      	orrs	r1, r3
 800281e:	0003      	movs	r3, r0
 8002820:	40ab      	lsls	r3, r5
 8002822:	1e58      	subs	r0, r3, #1
 8002824:	4183      	sbcs	r3, r0
 8002826:	4319      	orrs	r1, r3
 8002828:	0008      	movs	r0, r1
 800282a:	40d4      	lsrs	r4, r2
 800282c:	074b      	lsls	r3, r1, #29
 800282e:	d009      	beq.n	8002844 <__aeabi_dmul+0x550>
 8002830:	230f      	movs	r3, #15
 8002832:	400b      	ands	r3, r1
 8002834:	2b04      	cmp	r3, #4
 8002836:	d005      	beq.n	8002844 <__aeabi_dmul+0x550>
 8002838:	1d0b      	adds	r3, r1, #4
 800283a:	428b      	cmp	r3, r1
 800283c:	4180      	sbcs	r0, r0
 800283e:	4240      	negs	r0, r0
 8002840:	1824      	adds	r4, r4, r0
 8002842:	0018      	movs	r0, r3
 8002844:	0223      	lsls	r3, r4, #8
 8002846:	d400      	bmi.n	800284a <__aeabi_dmul+0x556>
 8002848:	e6d6      	b.n	80025f8 <__aeabi_dmul+0x304>
 800284a:	2301      	movs	r3, #1
 800284c:	2400      	movs	r4, #0
 800284e:	2200      	movs	r2, #0
 8002850:	e5a6      	b.n	80023a0 <__aeabi_dmul+0xac>
 8002852:	290f      	cmp	r1, #15
 8002854:	d1aa      	bne.n	80027ac <__aeabi_dmul+0x4b8>
 8002856:	2380      	movs	r3, #128	@ 0x80
 8002858:	4652      	mov	r2, sl
 800285a:	031b      	lsls	r3, r3, #12
 800285c:	421a      	tst	r2, r3
 800285e:	d0a9      	beq.n	80027b4 <__aeabi_dmul+0x4c0>
 8002860:	421c      	tst	r4, r3
 8002862:	d1a7      	bne.n	80027b4 <__aeabi_dmul+0x4c0>
 8002864:	431c      	orrs	r4, r3
 8002866:	9b00      	ldr	r3, [sp, #0]
 8002868:	0002      	movs	r2, r0
 800286a:	469b      	mov	fp, r3
 800286c:	4b03      	ldr	r3, [pc, #12]	@ (800287c <__aeabi_dmul+0x588>)
 800286e:	e597      	b.n	80023a0 <__aeabi_dmul+0xac>
 8002870:	2400      	movs	r4, #0
 8002872:	e6c1      	b.n	80025f8 <__aeabi_dmul+0x304>
 8002874:	2400      	movs	r4, #0
 8002876:	4b01      	ldr	r3, [pc, #4]	@ (800287c <__aeabi_dmul+0x588>)
 8002878:	0022      	movs	r2, r4
 800287a:	e591      	b.n	80023a0 <__aeabi_dmul+0xac>
 800287c:	000007ff 	.word	0x000007ff
 8002880:	0000041e 	.word	0x0000041e

08002884 <__aeabi_dsub>:
 8002884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002886:	464e      	mov	r6, r9
 8002888:	4645      	mov	r5, r8
 800288a:	46de      	mov	lr, fp
 800288c:	4657      	mov	r7, sl
 800288e:	b5e0      	push	{r5, r6, r7, lr}
 8002890:	b085      	sub	sp, #20
 8002892:	9000      	str	r0, [sp, #0]
 8002894:	9101      	str	r1, [sp, #4]
 8002896:	030c      	lsls	r4, r1, #12
 8002898:	004f      	lsls	r7, r1, #1
 800289a:	0fce      	lsrs	r6, r1, #31
 800289c:	0a61      	lsrs	r1, r4, #9
 800289e:	9c00      	ldr	r4, [sp, #0]
 80028a0:	46b0      	mov	r8, r6
 80028a2:	0f64      	lsrs	r4, r4, #29
 80028a4:	430c      	orrs	r4, r1
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0d7f      	lsrs	r7, r7, #21
 80028aa:	00c8      	lsls	r0, r1, #3
 80028ac:	0011      	movs	r1, r2
 80028ae:	001a      	movs	r2, r3
 80028b0:	031b      	lsls	r3, r3, #12
 80028b2:	469c      	mov	ip, r3
 80028b4:	9100      	str	r1, [sp, #0]
 80028b6:	9201      	str	r2, [sp, #4]
 80028b8:	0051      	lsls	r1, r2, #1
 80028ba:	0d4b      	lsrs	r3, r1, #21
 80028bc:	4699      	mov	r9, r3
 80028be:	9b01      	ldr	r3, [sp, #4]
 80028c0:	9d00      	ldr	r5, [sp, #0]
 80028c2:	0fd9      	lsrs	r1, r3, #31
 80028c4:	4663      	mov	r3, ip
 80028c6:	0f6a      	lsrs	r2, r5, #29
 80028c8:	0a5b      	lsrs	r3, r3, #9
 80028ca:	4313      	orrs	r3, r2
 80028cc:	00ea      	lsls	r2, r5, #3
 80028ce:	4694      	mov	ip, r2
 80028d0:	4693      	mov	fp, r2
 80028d2:	4ac1      	ldr	r2, [pc, #772]	@ (8002bd8 <__aeabi_dsub+0x354>)
 80028d4:	9003      	str	r0, [sp, #12]
 80028d6:	9302      	str	r3, [sp, #8]
 80028d8:	4591      	cmp	r9, r2
 80028da:	d100      	bne.n	80028de <__aeabi_dsub+0x5a>
 80028dc:	e0cd      	b.n	8002a7a <__aeabi_dsub+0x1f6>
 80028de:	2501      	movs	r5, #1
 80028e0:	4069      	eors	r1, r5
 80028e2:	464d      	mov	r5, r9
 80028e4:	1b7d      	subs	r5, r7, r5
 80028e6:	46aa      	mov	sl, r5
 80028e8:	428e      	cmp	r6, r1
 80028ea:	d100      	bne.n	80028ee <__aeabi_dsub+0x6a>
 80028ec:	e080      	b.n	80029f0 <__aeabi_dsub+0x16c>
 80028ee:	2d00      	cmp	r5, #0
 80028f0:	dc00      	bgt.n	80028f4 <__aeabi_dsub+0x70>
 80028f2:	e335      	b.n	8002f60 <__aeabi_dsub+0x6dc>
 80028f4:	4649      	mov	r1, r9
 80028f6:	2900      	cmp	r1, #0
 80028f8:	d100      	bne.n	80028fc <__aeabi_dsub+0x78>
 80028fa:	e0df      	b.n	8002abc <__aeabi_dsub+0x238>
 80028fc:	4297      	cmp	r7, r2
 80028fe:	d100      	bne.n	8002902 <__aeabi_dsub+0x7e>
 8002900:	e194      	b.n	8002c2c <__aeabi_dsub+0x3a8>
 8002902:	4652      	mov	r2, sl
 8002904:	2501      	movs	r5, #1
 8002906:	2a38      	cmp	r2, #56	@ 0x38
 8002908:	dc19      	bgt.n	800293e <__aeabi_dsub+0xba>
 800290a:	2280      	movs	r2, #128	@ 0x80
 800290c:	9b02      	ldr	r3, [sp, #8]
 800290e:	0412      	lsls	r2, r2, #16
 8002910:	4313      	orrs	r3, r2
 8002912:	9302      	str	r3, [sp, #8]
 8002914:	4652      	mov	r2, sl
 8002916:	2a1f      	cmp	r2, #31
 8002918:	dd00      	ble.n	800291c <__aeabi_dsub+0x98>
 800291a:	e1e3      	b.n	8002ce4 <__aeabi_dsub+0x460>
 800291c:	4653      	mov	r3, sl
 800291e:	2220      	movs	r2, #32
 8002920:	4661      	mov	r1, ip
 8002922:	9d02      	ldr	r5, [sp, #8]
 8002924:	1ad2      	subs	r2, r2, r3
 8002926:	4095      	lsls	r5, r2
 8002928:	40d9      	lsrs	r1, r3
 800292a:	430d      	orrs	r5, r1
 800292c:	4661      	mov	r1, ip
 800292e:	4091      	lsls	r1, r2
 8002930:	000a      	movs	r2, r1
 8002932:	1e51      	subs	r1, r2, #1
 8002934:	418a      	sbcs	r2, r1
 8002936:	4315      	orrs	r5, r2
 8002938:	9a02      	ldr	r2, [sp, #8]
 800293a:	40da      	lsrs	r2, r3
 800293c:	1aa4      	subs	r4, r4, r2
 800293e:	1b45      	subs	r5, r0, r5
 8002940:	42a8      	cmp	r0, r5
 8002942:	4180      	sbcs	r0, r0
 8002944:	4240      	negs	r0, r0
 8002946:	1a24      	subs	r4, r4, r0
 8002948:	0223      	lsls	r3, r4, #8
 800294a:	d400      	bmi.n	800294e <__aeabi_dsub+0xca>
 800294c:	e13d      	b.n	8002bca <__aeabi_dsub+0x346>
 800294e:	0264      	lsls	r4, r4, #9
 8002950:	0a64      	lsrs	r4, r4, #9
 8002952:	2c00      	cmp	r4, #0
 8002954:	d100      	bne.n	8002958 <__aeabi_dsub+0xd4>
 8002956:	e147      	b.n	8002be8 <__aeabi_dsub+0x364>
 8002958:	0020      	movs	r0, r4
 800295a:	f000 fbdf 	bl	800311c <__clzsi2>
 800295e:	0003      	movs	r3, r0
 8002960:	3b08      	subs	r3, #8
 8002962:	2120      	movs	r1, #32
 8002964:	0028      	movs	r0, r5
 8002966:	1aca      	subs	r2, r1, r3
 8002968:	40d0      	lsrs	r0, r2
 800296a:	409c      	lsls	r4, r3
 800296c:	0002      	movs	r2, r0
 800296e:	409d      	lsls	r5, r3
 8002970:	4322      	orrs	r2, r4
 8002972:	429f      	cmp	r7, r3
 8002974:	dd00      	ble.n	8002978 <__aeabi_dsub+0xf4>
 8002976:	e177      	b.n	8002c68 <__aeabi_dsub+0x3e4>
 8002978:	1bd8      	subs	r0, r3, r7
 800297a:	3001      	adds	r0, #1
 800297c:	1a09      	subs	r1, r1, r0
 800297e:	002c      	movs	r4, r5
 8002980:	408d      	lsls	r5, r1
 8002982:	40c4      	lsrs	r4, r0
 8002984:	1e6b      	subs	r3, r5, #1
 8002986:	419d      	sbcs	r5, r3
 8002988:	0013      	movs	r3, r2
 800298a:	40c2      	lsrs	r2, r0
 800298c:	408b      	lsls	r3, r1
 800298e:	4325      	orrs	r5, r4
 8002990:	2700      	movs	r7, #0
 8002992:	0014      	movs	r4, r2
 8002994:	431d      	orrs	r5, r3
 8002996:	076b      	lsls	r3, r5, #29
 8002998:	d009      	beq.n	80029ae <__aeabi_dsub+0x12a>
 800299a:	230f      	movs	r3, #15
 800299c:	402b      	ands	r3, r5
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d005      	beq.n	80029ae <__aeabi_dsub+0x12a>
 80029a2:	1d2b      	adds	r3, r5, #4
 80029a4:	42ab      	cmp	r3, r5
 80029a6:	41ad      	sbcs	r5, r5
 80029a8:	426d      	negs	r5, r5
 80029aa:	1964      	adds	r4, r4, r5
 80029ac:	001d      	movs	r5, r3
 80029ae:	0223      	lsls	r3, r4, #8
 80029b0:	d400      	bmi.n	80029b4 <__aeabi_dsub+0x130>
 80029b2:	e140      	b.n	8002c36 <__aeabi_dsub+0x3b2>
 80029b4:	4a88      	ldr	r2, [pc, #544]	@ (8002bd8 <__aeabi_dsub+0x354>)
 80029b6:	3701      	adds	r7, #1
 80029b8:	4297      	cmp	r7, r2
 80029ba:	d100      	bne.n	80029be <__aeabi_dsub+0x13a>
 80029bc:	e101      	b.n	8002bc2 <__aeabi_dsub+0x33e>
 80029be:	2601      	movs	r6, #1
 80029c0:	4643      	mov	r3, r8
 80029c2:	4986      	ldr	r1, [pc, #536]	@ (8002bdc <__aeabi_dsub+0x358>)
 80029c4:	08ed      	lsrs	r5, r5, #3
 80029c6:	4021      	ands	r1, r4
 80029c8:	074a      	lsls	r2, r1, #29
 80029ca:	432a      	orrs	r2, r5
 80029cc:	057c      	lsls	r4, r7, #21
 80029ce:	024d      	lsls	r5, r1, #9
 80029d0:	0b2d      	lsrs	r5, r5, #12
 80029d2:	0d64      	lsrs	r4, r4, #21
 80029d4:	401e      	ands	r6, r3
 80029d6:	0524      	lsls	r4, r4, #20
 80029d8:	432c      	orrs	r4, r5
 80029da:	07f6      	lsls	r6, r6, #31
 80029dc:	4334      	orrs	r4, r6
 80029de:	0010      	movs	r0, r2
 80029e0:	0021      	movs	r1, r4
 80029e2:	b005      	add	sp, #20
 80029e4:	bcf0      	pop	{r4, r5, r6, r7}
 80029e6:	46bb      	mov	fp, r7
 80029e8:	46b2      	mov	sl, r6
 80029ea:	46a9      	mov	r9, r5
 80029ec:	46a0      	mov	r8, r4
 80029ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029f0:	2d00      	cmp	r5, #0
 80029f2:	dc00      	bgt.n	80029f6 <__aeabi_dsub+0x172>
 80029f4:	e2d0      	b.n	8002f98 <__aeabi_dsub+0x714>
 80029f6:	4649      	mov	r1, r9
 80029f8:	2900      	cmp	r1, #0
 80029fa:	d000      	beq.n	80029fe <__aeabi_dsub+0x17a>
 80029fc:	e0d4      	b.n	8002ba8 <__aeabi_dsub+0x324>
 80029fe:	4661      	mov	r1, ip
 8002a00:	9b02      	ldr	r3, [sp, #8]
 8002a02:	4319      	orrs	r1, r3
 8002a04:	d100      	bne.n	8002a08 <__aeabi_dsub+0x184>
 8002a06:	e12b      	b.n	8002c60 <__aeabi_dsub+0x3dc>
 8002a08:	1e69      	subs	r1, r5, #1
 8002a0a:	2d01      	cmp	r5, #1
 8002a0c:	d100      	bne.n	8002a10 <__aeabi_dsub+0x18c>
 8002a0e:	e1d9      	b.n	8002dc4 <__aeabi_dsub+0x540>
 8002a10:	4295      	cmp	r5, r2
 8002a12:	d100      	bne.n	8002a16 <__aeabi_dsub+0x192>
 8002a14:	e10a      	b.n	8002c2c <__aeabi_dsub+0x3a8>
 8002a16:	2501      	movs	r5, #1
 8002a18:	2938      	cmp	r1, #56	@ 0x38
 8002a1a:	dc17      	bgt.n	8002a4c <__aeabi_dsub+0x1c8>
 8002a1c:	468a      	mov	sl, r1
 8002a1e:	4653      	mov	r3, sl
 8002a20:	2b1f      	cmp	r3, #31
 8002a22:	dd00      	ble.n	8002a26 <__aeabi_dsub+0x1a2>
 8002a24:	e1e7      	b.n	8002df6 <__aeabi_dsub+0x572>
 8002a26:	2220      	movs	r2, #32
 8002a28:	1ad2      	subs	r2, r2, r3
 8002a2a:	9b02      	ldr	r3, [sp, #8]
 8002a2c:	4661      	mov	r1, ip
 8002a2e:	4093      	lsls	r3, r2
 8002a30:	001d      	movs	r5, r3
 8002a32:	4653      	mov	r3, sl
 8002a34:	40d9      	lsrs	r1, r3
 8002a36:	4663      	mov	r3, ip
 8002a38:	4093      	lsls	r3, r2
 8002a3a:	001a      	movs	r2, r3
 8002a3c:	430d      	orrs	r5, r1
 8002a3e:	1e51      	subs	r1, r2, #1
 8002a40:	418a      	sbcs	r2, r1
 8002a42:	4653      	mov	r3, sl
 8002a44:	4315      	orrs	r5, r2
 8002a46:	9a02      	ldr	r2, [sp, #8]
 8002a48:	40da      	lsrs	r2, r3
 8002a4a:	18a4      	adds	r4, r4, r2
 8002a4c:	182d      	adds	r5, r5, r0
 8002a4e:	4285      	cmp	r5, r0
 8002a50:	4180      	sbcs	r0, r0
 8002a52:	4240      	negs	r0, r0
 8002a54:	1824      	adds	r4, r4, r0
 8002a56:	0223      	lsls	r3, r4, #8
 8002a58:	d400      	bmi.n	8002a5c <__aeabi_dsub+0x1d8>
 8002a5a:	e0b6      	b.n	8002bca <__aeabi_dsub+0x346>
 8002a5c:	4b5e      	ldr	r3, [pc, #376]	@ (8002bd8 <__aeabi_dsub+0x354>)
 8002a5e:	3701      	adds	r7, #1
 8002a60:	429f      	cmp	r7, r3
 8002a62:	d100      	bne.n	8002a66 <__aeabi_dsub+0x1e2>
 8002a64:	e0ad      	b.n	8002bc2 <__aeabi_dsub+0x33e>
 8002a66:	2101      	movs	r1, #1
 8002a68:	4b5c      	ldr	r3, [pc, #368]	@ (8002bdc <__aeabi_dsub+0x358>)
 8002a6a:	086a      	lsrs	r2, r5, #1
 8002a6c:	401c      	ands	r4, r3
 8002a6e:	4029      	ands	r1, r5
 8002a70:	430a      	orrs	r2, r1
 8002a72:	07e5      	lsls	r5, r4, #31
 8002a74:	4315      	orrs	r5, r2
 8002a76:	0864      	lsrs	r4, r4, #1
 8002a78:	e78d      	b.n	8002996 <__aeabi_dsub+0x112>
 8002a7a:	4a59      	ldr	r2, [pc, #356]	@ (8002be0 <__aeabi_dsub+0x35c>)
 8002a7c:	9b02      	ldr	r3, [sp, #8]
 8002a7e:	4692      	mov	sl, r2
 8002a80:	4662      	mov	r2, ip
 8002a82:	44ba      	add	sl, r7
 8002a84:	431a      	orrs	r2, r3
 8002a86:	d02c      	beq.n	8002ae2 <__aeabi_dsub+0x25e>
 8002a88:	428e      	cmp	r6, r1
 8002a8a:	d02e      	beq.n	8002aea <__aeabi_dsub+0x266>
 8002a8c:	4652      	mov	r2, sl
 8002a8e:	2a00      	cmp	r2, #0
 8002a90:	d060      	beq.n	8002b54 <__aeabi_dsub+0x2d0>
 8002a92:	2f00      	cmp	r7, #0
 8002a94:	d100      	bne.n	8002a98 <__aeabi_dsub+0x214>
 8002a96:	e0db      	b.n	8002c50 <__aeabi_dsub+0x3cc>
 8002a98:	4663      	mov	r3, ip
 8002a9a:	000e      	movs	r6, r1
 8002a9c:	9c02      	ldr	r4, [sp, #8]
 8002a9e:	08d8      	lsrs	r0, r3, #3
 8002aa0:	0762      	lsls	r2, r4, #29
 8002aa2:	4302      	orrs	r2, r0
 8002aa4:	08e4      	lsrs	r4, r4, #3
 8002aa6:	0013      	movs	r3, r2
 8002aa8:	4323      	orrs	r3, r4
 8002aaa:	d100      	bne.n	8002aae <__aeabi_dsub+0x22a>
 8002aac:	e254      	b.n	8002f58 <__aeabi_dsub+0x6d4>
 8002aae:	2580      	movs	r5, #128	@ 0x80
 8002ab0:	032d      	lsls	r5, r5, #12
 8002ab2:	4325      	orrs	r5, r4
 8002ab4:	032d      	lsls	r5, r5, #12
 8002ab6:	4c48      	ldr	r4, [pc, #288]	@ (8002bd8 <__aeabi_dsub+0x354>)
 8002ab8:	0b2d      	lsrs	r5, r5, #12
 8002aba:	e78c      	b.n	80029d6 <__aeabi_dsub+0x152>
 8002abc:	4661      	mov	r1, ip
 8002abe:	9b02      	ldr	r3, [sp, #8]
 8002ac0:	4319      	orrs	r1, r3
 8002ac2:	d100      	bne.n	8002ac6 <__aeabi_dsub+0x242>
 8002ac4:	e0cc      	b.n	8002c60 <__aeabi_dsub+0x3dc>
 8002ac6:	0029      	movs	r1, r5
 8002ac8:	3901      	subs	r1, #1
 8002aca:	2d01      	cmp	r5, #1
 8002acc:	d100      	bne.n	8002ad0 <__aeabi_dsub+0x24c>
 8002ace:	e188      	b.n	8002de2 <__aeabi_dsub+0x55e>
 8002ad0:	4295      	cmp	r5, r2
 8002ad2:	d100      	bne.n	8002ad6 <__aeabi_dsub+0x252>
 8002ad4:	e0aa      	b.n	8002c2c <__aeabi_dsub+0x3a8>
 8002ad6:	2501      	movs	r5, #1
 8002ad8:	2938      	cmp	r1, #56	@ 0x38
 8002ada:	dd00      	ble.n	8002ade <__aeabi_dsub+0x25a>
 8002adc:	e72f      	b.n	800293e <__aeabi_dsub+0xba>
 8002ade:	468a      	mov	sl, r1
 8002ae0:	e718      	b.n	8002914 <__aeabi_dsub+0x90>
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	4051      	eors	r1, r2
 8002ae6:	428e      	cmp	r6, r1
 8002ae8:	d1d0      	bne.n	8002a8c <__aeabi_dsub+0x208>
 8002aea:	4653      	mov	r3, sl
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d100      	bne.n	8002af2 <__aeabi_dsub+0x26e>
 8002af0:	e0be      	b.n	8002c70 <__aeabi_dsub+0x3ec>
 8002af2:	2f00      	cmp	r7, #0
 8002af4:	d000      	beq.n	8002af8 <__aeabi_dsub+0x274>
 8002af6:	e138      	b.n	8002d6a <__aeabi_dsub+0x4e6>
 8002af8:	46ca      	mov	sl, r9
 8002afa:	0022      	movs	r2, r4
 8002afc:	4302      	orrs	r2, r0
 8002afe:	d100      	bne.n	8002b02 <__aeabi_dsub+0x27e>
 8002b00:	e1e2      	b.n	8002ec8 <__aeabi_dsub+0x644>
 8002b02:	4653      	mov	r3, sl
 8002b04:	1e59      	subs	r1, r3, #1
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d100      	bne.n	8002b0c <__aeabi_dsub+0x288>
 8002b0a:	e20d      	b.n	8002f28 <__aeabi_dsub+0x6a4>
 8002b0c:	4a32      	ldr	r2, [pc, #200]	@ (8002bd8 <__aeabi_dsub+0x354>)
 8002b0e:	4592      	cmp	sl, r2
 8002b10:	d100      	bne.n	8002b14 <__aeabi_dsub+0x290>
 8002b12:	e1d2      	b.n	8002eba <__aeabi_dsub+0x636>
 8002b14:	2701      	movs	r7, #1
 8002b16:	2938      	cmp	r1, #56	@ 0x38
 8002b18:	dc13      	bgt.n	8002b42 <__aeabi_dsub+0x2be>
 8002b1a:	291f      	cmp	r1, #31
 8002b1c:	dd00      	ble.n	8002b20 <__aeabi_dsub+0x29c>
 8002b1e:	e1ee      	b.n	8002efe <__aeabi_dsub+0x67a>
 8002b20:	2220      	movs	r2, #32
 8002b22:	9b02      	ldr	r3, [sp, #8]
 8002b24:	1a52      	subs	r2, r2, r1
 8002b26:	0025      	movs	r5, r4
 8002b28:	0007      	movs	r7, r0
 8002b2a:	469a      	mov	sl, r3
 8002b2c:	40cc      	lsrs	r4, r1
 8002b2e:	4090      	lsls	r0, r2
 8002b30:	4095      	lsls	r5, r2
 8002b32:	40cf      	lsrs	r7, r1
 8002b34:	44a2      	add	sl, r4
 8002b36:	1e42      	subs	r2, r0, #1
 8002b38:	4190      	sbcs	r0, r2
 8002b3a:	4653      	mov	r3, sl
 8002b3c:	432f      	orrs	r7, r5
 8002b3e:	4307      	orrs	r7, r0
 8002b40:	9302      	str	r3, [sp, #8]
 8002b42:	003d      	movs	r5, r7
 8002b44:	4465      	add	r5, ip
 8002b46:	4565      	cmp	r5, ip
 8002b48:	4192      	sbcs	r2, r2
 8002b4a:	9b02      	ldr	r3, [sp, #8]
 8002b4c:	4252      	negs	r2, r2
 8002b4e:	464f      	mov	r7, r9
 8002b50:	18d4      	adds	r4, r2, r3
 8002b52:	e780      	b.n	8002a56 <__aeabi_dsub+0x1d2>
 8002b54:	4a23      	ldr	r2, [pc, #140]	@ (8002be4 <__aeabi_dsub+0x360>)
 8002b56:	1c7d      	adds	r5, r7, #1
 8002b58:	4215      	tst	r5, r2
 8002b5a:	d000      	beq.n	8002b5e <__aeabi_dsub+0x2da>
 8002b5c:	e0aa      	b.n	8002cb4 <__aeabi_dsub+0x430>
 8002b5e:	4662      	mov	r2, ip
 8002b60:	0025      	movs	r5, r4
 8002b62:	9b02      	ldr	r3, [sp, #8]
 8002b64:	4305      	orrs	r5, r0
 8002b66:	431a      	orrs	r2, r3
 8002b68:	2f00      	cmp	r7, #0
 8002b6a:	d000      	beq.n	8002b6e <__aeabi_dsub+0x2ea>
 8002b6c:	e0f5      	b.n	8002d5a <__aeabi_dsub+0x4d6>
 8002b6e:	2d00      	cmp	r5, #0
 8002b70:	d100      	bne.n	8002b74 <__aeabi_dsub+0x2f0>
 8002b72:	e16b      	b.n	8002e4c <__aeabi_dsub+0x5c8>
 8002b74:	2a00      	cmp	r2, #0
 8002b76:	d100      	bne.n	8002b7a <__aeabi_dsub+0x2f6>
 8002b78:	e152      	b.n	8002e20 <__aeabi_dsub+0x59c>
 8002b7a:	4663      	mov	r3, ip
 8002b7c:	1ac5      	subs	r5, r0, r3
 8002b7e:	9b02      	ldr	r3, [sp, #8]
 8002b80:	1ae2      	subs	r2, r4, r3
 8002b82:	42a8      	cmp	r0, r5
 8002b84:	419b      	sbcs	r3, r3
 8002b86:	425b      	negs	r3, r3
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	021a      	lsls	r2, r3, #8
 8002b8c:	d400      	bmi.n	8002b90 <__aeabi_dsub+0x30c>
 8002b8e:	e1d5      	b.n	8002f3c <__aeabi_dsub+0x6b8>
 8002b90:	4663      	mov	r3, ip
 8002b92:	1a1d      	subs	r5, r3, r0
 8002b94:	45ac      	cmp	ip, r5
 8002b96:	4192      	sbcs	r2, r2
 8002b98:	2601      	movs	r6, #1
 8002b9a:	9b02      	ldr	r3, [sp, #8]
 8002b9c:	4252      	negs	r2, r2
 8002b9e:	1b1c      	subs	r4, r3, r4
 8002ba0:	4688      	mov	r8, r1
 8002ba2:	1aa4      	subs	r4, r4, r2
 8002ba4:	400e      	ands	r6, r1
 8002ba6:	e6f6      	b.n	8002996 <__aeabi_dsub+0x112>
 8002ba8:	4297      	cmp	r7, r2
 8002baa:	d03f      	beq.n	8002c2c <__aeabi_dsub+0x3a8>
 8002bac:	4652      	mov	r2, sl
 8002bae:	2501      	movs	r5, #1
 8002bb0:	2a38      	cmp	r2, #56	@ 0x38
 8002bb2:	dd00      	ble.n	8002bb6 <__aeabi_dsub+0x332>
 8002bb4:	e74a      	b.n	8002a4c <__aeabi_dsub+0x1c8>
 8002bb6:	2280      	movs	r2, #128	@ 0x80
 8002bb8:	9b02      	ldr	r3, [sp, #8]
 8002bba:	0412      	lsls	r2, r2, #16
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	9302      	str	r3, [sp, #8]
 8002bc0:	e72d      	b.n	8002a1e <__aeabi_dsub+0x19a>
 8002bc2:	003c      	movs	r4, r7
 8002bc4:	2500      	movs	r5, #0
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	e705      	b.n	80029d6 <__aeabi_dsub+0x152>
 8002bca:	2307      	movs	r3, #7
 8002bcc:	402b      	ands	r3, r5
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d000      	beq.n	8002bd4 <__aeabi_dsub+0x350>
 8002bd2:	e6e2      	b.n	800299a <__aeabi_dsub+0x116>
 8002bd4:	e06b      	b.n	8002cae <__aeabi_dsub+0x42a>
 8002bd6:	46c0      	nop			@ (mov r8, r8)
 8002bd8:	000007ff 	.word	0x000007ff
 8002bdc:	ff7fffff 	.word	0xff7fffff
 8002be0:	fffff801 	.word	0xfffff801
 8002be4:	000007fe 	.word	0x000007fe
 8002be8:	0028      	movs	r0, r5
 8002bea:	f000 fa97 	bl	800311c <__clzsi2>
 8002bee:	0003      	movs	r3, r0
 8002bf0:	3318      	adds	r3, #24
 8002bf2:	2b1f      	cmp	r3, #31
 8002bf4:	dc00      	bgt.n	8002bf8 <__aeabi_dsub+0x374>
 8002bf6:	e6b4      	b.n	8002962 <__aeabi_dsub+0xde>
 8002bf8:	002a      	movs	r2, r5
 8002bfa:	3808      	subs	r0, #8
 8002bfc:	4082      	lsls	r2, r0
 8002bfe:	429f      	cmp	r7, r3
 8002c00:	dd00      	ble.n	8002c04 <__aeabi_dsub+0x380>
 8002c02:	e0b9      	b.n	8002d78 <__aeabi_dsub+0x4f4>
 8002c04:	1bdb      	subs	r3, r3, r7
 8002c06:	1c58      	adds	r0, r3, #1
 8002c08:	281f      	cmp	r0, #31
 8002c0a:	dc00      	bgt.n	8002c0e <__aeabi_dsub+0x38a>
 8002c0c:	e1a0      	b.n	8002f50 <__aeabi_dsub+0x6cc>
 8002c0e:	0015      	movs	r5, r2
 8002c10:	3b1f      	subs	r3, #31
 8002c12:	40dd      	lsrs	r5, r3
 8002c14:	2820      	cmp	r0, #32
 8002c16:	d005      	beq.n	8002c24 <__aeabi_dsub+0x3a0>
 8002c18:	2340      	movs	r3, #64	@ 0x40
 8002c1a:	1a1b      	subs	r3, r3, r0
 8002c1c:	409a      	lsls	r2, r3
 8002c1e:	1e53      	subs	r3, r2, #1
 8002c20:	419a      	sbcs	r2, r3
 8002c22:	4315      	orrs	r5, r2
 8002c24:	2307      	movs	r3, #7
 8002c26:	2700      	movs	r7, #0
 8002c28:	402b      	ands	r3, r5
 8002c2a:	e7d0      	b.n	8002bce <__aeabi_dsub+0x34a>
 8002c2c:	08c0      	lsrs	r0, r0, #3
 8002c2e:	0762      	lsls	r2, r4, #29
 8002c30:	4302      	orrs	r2, r0
 8002c32:	08e4      	lsrs	r4, r4, #3
 8002c34:	e737      	b.n	8002aa6 <__aeabi_dsub+0x222>
 8002c36:	08ea      	lsrs	r2, r5, #3
 8002c38:	0763      	lsls	r3, r4, #29
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	4bd3      	ldr	r3, [pc, #844]	@ (8002f8c <__aeabi_dsub+0x708>)
 8002c3e:	08e4      	lsrs	r4, r4, #3
 8002c40:	429f      	cmp	r7, r3
 8002c42:	d100      	bne.n	8002c46 <__aeabi_dsub+0x3c2>
 8002c44:	e72f      	b.n	8002aa6 <__aeabi_dsub+0x222>
 8002c46:	0324      	lsls	r4, r4, #12
 8002c48:	0b25      	lsrs	r5, r4, #12
 8002c4a:	057c      	lsls	r4, r7, #21
 8002c4c:	0d64      	lsrs	r4, r4, #21
 8002c4e:	e6c2      	b.n	80029d6 <__aeabi_dsub+0x152>
 8002c50:	46ca      	mov	sl, r9
 8002c52:	0022      	movs	r2, r4
 8002c54:	4302      	orrs	r2, r0
 8002c56:	d158      	bne.n	8002d0a <__aeabi_dsub+0x486>
 8002c58:	4663      	mov	r3, ip
 8002c5a:	000e      	movs	r6, r1
 8002c5c:	9c02      	ldr	r4, [sp, #8]
 8002c5e:	9303      	str	r3, [sp, #12]
 8002c60:	9b03      	ldr	r3, [sp, #12]
 8002c62:	4657      	mov	r7, sl
 8002c64:	08da      	lsrs	r2, r3, #3
 8002c66:	e7e7      	b.n	8002c38 <__aeabi_dsub+0x3b4>
 8002c68:	4cc9      	ldr	r4, [pc, #804]	@ (8002f90 <__aeabi_dsub+0x70c>)
 8002c6a:	1aff      	subs	r7, r7, r3
 8002c6c:	4014      	ands	r4, r2
 8002c6e:	e692      	b.n	8002996 <__aeabi_dsub+0x112>
 8002c70:	4dc8      	ldr	r5, [pc, #800]	@ (8002f94 <__aeabi_dsub+0x710>)
 8002c72:	1c7a      	adds	r2, r7, #1
 8002c74:	422a      	tst	r2, r5
 8002c76:	d000      	beq.n	8002c7a <__aeabi_dsub+0x3f6>
 8002c78:	e084      	b.n	8002d84 <__aeabi_dsub+0x500>
 8002c7a:	0022      	movs	r2, r4
 8002c7c:	4302      	orrs	r2, r0
 8002c7e:	2f00      	cmp	r7, #0
 8002c80:	d000      	beq.n	8002c84 <__aeabi_dsub+0x400>
 8002c82:	e0ef      	b.n	8002e64 <__aeabi_dsub+0x5e0>
 8002c84:	2a00      	cmp	r2, #0
 8002c86:	d100      	bne.n	8002c8a <__aeabi_dsub+0x406>
 8002c88:	e0e5      	b.n	8002e56 <__aeabi_dsub+0x5d2>
 8002c8a:	4662      	mov	r2, ip
 8002c8c:	9902      	ldr	r1, [sp, #8]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	d100      	bne.n	8002c94 <__aeabi_dsub+0x410>
 8002c92:	e0c5      	b.n	8002e20 <__aeabi_dsub+0x59c>
 8002c94:	4663      	mov	r3, ip
 8002c96:	18c5      	adds	r5, r0, r3
 8002c98:	468c      	mov	ip, r1
 8002c9a:	4285      	cmp	r5, r0
 8002c9c:	4180      	sbcs	r0, r0
 8002c9e:	4464      	add	r4, ip
 8002ca0:	4240      	negs	r0, r0
 8002ca2:	1824      	adds	r4, r4, r0
 8002ca4:	0223      	lsls	r3, r4, #8
 8002ca6:	d502      	bpl.n	8002cae <__aeabi_dsub+0x42a>
 8002ca8:	4bb9      	ldr	r3, [pc, #740]	@ (8002f90 <__aeabi_dsub+0x70c>)
 8002caa:	3701      	adds	r7, #1
 8002cac:	401c      	ands	r4, r3
 8002cae:	46ba      	mov	sl, r7
 8002cb0:	9503      	str	r5, [sp, #12]
 8002cb2:	e7d5      	b.n	8002c60 <__aeabi_dsub+0x3dc>
 8002cb4:	4662      	mov	r2, ip
 8002cb6:	1a85      	subs	r5, r0, r2
 8002cb8:	42a8      	cmp	r0, r5
 8002cba:	4192      	sbcs	r2, r2
 8002cbc:	4252      	negs	r2, r2
 8002cbe:	4691      	mov	r9, r2
 8002cc0:	9b02      	ldr	r3, [sp, #8]
 8002cc2:	1ae3      	subs	r3, r4, r3
 8002cc4:	001a      	movs	r2, r3
 8002cc6:	464b      	mov	r3, r9
 8002cc8:	1ad2      	subs	r2, r2, r3
 8002cca:	0013      	movs	r3, r2
 8002ccc:	4691      	mov	r9, r2
 8002cce:	021a      	lsls	r2, r3, #8
 8002cd0:	d46c      	bmi.n	8002dac <__aeabi_dsub+0x528>
 8002cd2:	464a      	mov	r2, r9
 8002cd4:	464c      	mov	r4, r9
 8002cd6:	432a      	orrs	r2, r5
 8002cd8:	d000      	beq.n	8002cdc <__aeabi_dsub+0x458>
 8002cda:	e63a      	b.n	8002952 <__aeabi_dsub+0xce>
 8002cdc:	2600      	movs	r6, #0
 8002cde:	2400      	movs	r4, #0
 8002ce0:	2500      	movs	r5, #0
 8002ce2:	e678      	b.n	80029d6 <__aeabi_dsub+0x152>
 8002ce4:	9902      	ldr	r1, [sp, #8]
 8002ce6:	4653      	mov	r3, sl
 8002ce8:	000d      	movs	r5, r1
 8002cea:	3a20      	subs	r2, #32
 8002cec:	40d5      	lsrs	r5, r2
 8002cee:	2b20      	cmp	r3, #32
 8002cf0:	d006      	beq.n	8002d00 <__aeabi_dsub+0x47c>
 8002cf2:	2240      	movs	r2, #64	@ 0x40
 8002cf4:	1ad2      	subs	r2, r2, r3
 8002cf6:	000b      	movs	r3, r1
 8002cf8:	4093      	lsls	r3, r2
 8002cfa:	4662      	mov	r2, ip
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	4693      	mov	fp, r2
 8002d00:	465b      	mov	r3, fp
 8002d02:	1e5a      	subs	r2, r3, #1
 8002d04:	4193      	sbcs	r3, r2
 8002d06:	431d      	orrs	r5, r3
 8002d08:	e619      	b.n	800293e <__aeabi_dsub+0xba>
 8002d0a:	4653      	mov	r3, sl
 8002d0c:	1e5a      	subs	r2, r3, #1
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d100      	bne.n	8002d14 <__aeabi_dsub+0x490>
 8002d12:	e0c6      	b.n	8002ea2 <__aeabi_dsub+0x61e>
 8002d14:	4e9d      	ldr	r6, [pc, #628]	@ (8002f8c <__aeabi_dsub+0x708>)
 8002d16:	45b2      	cmp	sl, r6
 8002d18:	d100      	bne.n	8002d1c <__aeabi_dsub+0x498>
 8002d1a:	e6bd      	b.n	8002a98 <__aeabi_dsub+0x214>
 8002d1c:	4688      	mov	r8, r1
 8002d1e:	000e      	movs	r6, r1
 8002d20:	2501      	movs	r5, #1
 8002d22:	2a38      	cmp	r2, #56	@ 0x38
 8002d24:	dc10      	bgt.n	8002d48 <__aeabi_dsub+0x4c4>
 8002d26:	2a1f      	cmp	r2, #31
 8002d28:	dc7f      	bgt.n	8002e2a <__aeabi_dsub+0x5a6>
 8002d2a:	2120      	movs	r1, #32
 8002d2c:	0025      	movs	r5, r4
 8002d2e:	1a89      	subs	r1, r1, r2
 8002d30:	0007      	movs	r7, r0
 8002d32:	4088      	lsls	r0, r1
 8002d34:	408d      	lsls	r5, r1
 8002d36:	40d7      	lsrs	r7, r2
 8002d38:	40d4      	lsrs	r4, r2
 8002d3a:	1e41      	subs	r1, r0, #1
 8002d3c:	4188      	sbcs	r0, r1
 8002d3e:	9b02      	ldr	r3, [sp, #8]
 8002d40:	433d      	orrs	r5, r7
 8002d42:	1b1b      	subs	r3, r3, r4
 8002d44:	4305      	orrs	r5, r0
 8002d46:	9302      	str	r3, [sp, #8]
 8002d48:	4662      	mov	r2, ip
 8002d4a:	1b55      	subs	r5, r2, r5
 8002d4c:	45ac      	cmp	ip, r5
 8002d4e:	4192      	sbcs	r2, r2
 8002d50:	9b02      	ldr	r3, [sp, #8]
 8002d52:	4252      	negs	r2, r2
 8002d54:	464f      	mov	r7, r9
 8002d56:	1a9c      	subs	r4, r3, r2
 8002d58:	e5f6      	b.n	8002948 <__aeabi_dsub+0xc4>
 8002d5a:	2d00      	cmp	r5, #0
 8002d5c:	d000      	beq.n	8002d60 <__aeabi_dsub+0x4dc>
 8002d5e:	e0b7      	b.n	8002ed0 <__aeabi_dsub+0x64c>
 8002d60:	2a00      	cmp	r2, #0
 8002d62:	d100      	bne.n	8002d66 <__aeabi_dsub+0x4e2>
 8002d64:	e0f0      	b.n	8002f48 <__aeabi_dsub+0x6c4>
 8002d66:	2601      	movs	r6, #1
 8002d68:	400e      	ands	r6, r1
 8002d6a:	4663      	mov	r3, ip
 8002d6c:	9802      	ldr	r0, [sp, #8]
 8002d6e:	08d9      	lsrs	r1, r3, #3
 8002d70:	0742      	lsls	r2, r0, #29
 8002d72:	430a      	orrs	r2, r1
 8002d74:	08c4      	lsrs	r4, r0, #3
 8002d76:	e696      	b.n	8002aa6 <__aeabi_dsub+0x222>
 8002d78:	4c85      	ldr	r4, [pc, #532]	@ (8002f90 <__aeabi_dsub+0x70c>)
 8002d7a:	1aff      	subs	r7, r7, r3
 8002d7c:	4014      	ands	r4, r2
 8002d7e:	0762      	lsls	r2, r4, #29
 8002d80:	08e4      	lsrs	r4, r4, #3
 8002d82:	e760      	b.n	8002c46 <__aeabi_dsub+0x3c2>
 8002d84:	4981      	ldr	r1, [pc, #516]	@ (8002f8c <__aeabi_dsub+0x708>)
 8002d86:	428a      	cmp	r2, r1
 8002d88:	d100      	bne.n	8002d8c <__aeabi_dsub+0x508>
 8002d8a:	e0c9      	b.n	8002f20 <__aeabi_dsub+0x69c>
 8002d8c:	4663      	mov	r3, ip
 8002d8e:	18c1      	adds	r1, r0, r3
 8002d90:	4281      	cmp	r1, r0
 8002d92:	4180      	sbcs	r0, r0
 8002d94:	9b02      	ldr	r3, [sp, #8]
 8002d96:	4240      	negs	r0, r0
 8002d98:	18e3      	adds	r3, r4, r3
 8002d9a:	181b      	adds	r3, r3, r0
 8002d9c:	07dd      	lsls	r5, r3, #31
 8002d9e:	085c      	lsrs	r4, r3, #1
 8002da0:	2307      	movs	r3, #7
 8002da2:	0849      	lsrs	r1, r1, #1
 8002da4:	430d      	orrs	r5, r1
 8002da6:	0017      	movs	r7, r2
 8002da8:	402b      	ands	r3, r5
 8002daa:	e710      	b.n	8002bce <__aeabi_dsub+0x34a>
 8002dac:	4663      	mov	r3, ip
 8002dae:	1a1d      	subs	r5, r3, r0
 8002db0:	45ac      	cmp	ip, r5
 8002db2:	4192      	sbcs	r2, r2
 8002db4:	2601      	movs	r6, #1
 8002db6:	9b02      	ldr	r3, [sp, #8]
 8002db8:	4252      	negs	r2, r2
 8002dba:	1b1c      	subs	r4, r3, r4
 8002dbc:	4688      	mov	r8, r1
 8002dbe:	1aa4      	subs	r4, r4, r2
 8002dc0:	400e      	ands	r6, r1
 8002dc2:	e5c6      	b.n	8002952 <__aeabi_dsub+0xce>
 8002dc4:	4663      	mov	r3, ip
 8002dc6:	18c5      	adds	r5, r0, r3
 8002dc8:	9b02      	ldr	r3, [sp, #8]
 8002dca:	4285      	cmp	r5, r0
 8002dcc:	4180      	sbcs	r0, r0
 8002dce:	469c      	mov	ip, r3
 8002dd0:	4240      	negs	r0, r0
 8002dd2:	4464      	add	r4, ip
 8002dd4:	1824      	adds	r4, r4, r0
 8002dd6:	2701      	movs	r7, #1
 8002dd8:	0223      	lsls	r3, r4, #8
 8002dda:	d400      	bmi.n	8002dde <__aeabi_dsub+0x55a>
 8002ddc:	e6f5      	b.n	8002bca <__aeabi_dsub+0x346>
 8002dde:	2702      	movs	r7, #2
 8002de0:	e641      	b.n	8002a66 <__aeabi_dsub+0x1e2>
 8002de2:	4663      	mov	r3, ip
 8002de4:	1ac5      	subs	r5, r0, r3
 8002de6:	42a8      	cmp	r0, r5
 8002de8:	4180      	sbcs	r0, r0
 8002dea:	9b02      	ldr	r3, [sp, #8]
 8002dec:	4240      	negs	r0, r0
 8002dee:	1ae4      	subs	r4, r4, r3
 8002df0:	2701      	movs	r7, #1
 8002df2:	1a24      	subs	r4, r4, r0
 8002df4:	e5a8      	b.n	8002948 <__aeabi_dsub+0xc4>
 8002df6:	9d02      	ldr	r5, [sp, #8]
 8002df8:	4652      	mov	r2, sl
 8002dfa:	002b      	movs	r3, r5
 8002dfc:	3a20      	subs	r2, #32
 8002dfe:	40d3      	lsrs	r3, r2
 8002e00:	0019      	movs	r1, r3
 8002e02:	4653      	mov	r3, sl
 8002e04:	2b20      	cmp	r3, #32
 8002e06:	d006      	beq.n	8002e16 <__aeabi_dsub+0x592>
 8002e08:	2240      	movs	r2, #64	@ 0x40
 8002e0a:	1ad2      	subs	r2, r2, r3
 8002e0c:	002b      	movs	r3, r5
 8002e0e:	4093      	lsls	r3, r2
 8002e10:	4662      	mov	r2, ip
 8002e12:	431a      	orrs	r2, r3
 8002e14:	4693      	mov	fp, r2
 8002e16:	465d      	mov	r5, fp
 8002e18:	1e6b      	subs	r3, r5, #1
 8002e1a:	419d      	sbcs	r5, r3
 8002e1c:	430d      	orrs	r5, r1
 8002e1e:	e615      	b.n	8002a4c <__aeabi_dsub+0x1c8>
 8002e20:	0762      	lsls	r2, r4, #29
 8002e22:	08c0      	lsrs	r0, r0, #3
 8002e24:	4302      	orrs	r2, r0
 8002e26:	08e4      	lsrs	r4, r4, #3
 8002e28:	e70d      	b.n	8002c46 <__aeabi_dsub+0x3c2>
 8002e2a:	0011      	movs	r1, r2
 8002e2c:	0027      	movs	r7, r4
 8002e2e:	3920      	subs	r1, #32
 8002e30:	40cf      	lsrs	r7, r1
 8002e32:	2a20      	cmp	r2, #32
 8002e34:	d005      	beq.n	8002e42 <__aeabi_dsub+0x5be>
 8002e36:	2140      	movs	r1, #64	@ 0x40
 8002e38:	1a8a      	subs	r2, r1, r2
 8002e3a:	4094      	lsls	r4, r2
 8002e3c:	0025      	movs	r5, r4
 8002e3e:	4305      	orrs	r5, r0
 8002e40:	9503      	str	r5, [sp, #12]
 8002e42:	9d03      	ldr	r5, [sp, #12]
 8002e44:	1e6a      	subs	r2, r5, #1
 8002e46:	4195      	sbcs	r5, r2
 8002e48:	433d      	orrs	r5, r7
 8002e4a:	e77d      	b.n	8002d48 <__aeabi_dsub+0x4c4>
 8002e4c:	2a00      	cmp	r2, #0
 8002e4e:	d100      	bne.n	8002e52 <__aeabi_dsub+0x5ce>
 8002e50:	e744      	b.n	8002cdc <__aeabi_dsub+0x458>
 8002e52:	2601      	movs	r6, #1
 8002e54:	400e      	ands	r6, r1
 8002e56:	4663      	mov	r3, ip
 8002e58:	08d9      	lsrs	r1, r3, #3
 8002e5a:	9b02      	ldr	r3, [sp, #8]
 8002e5c:	075a      	lsls	r2, r3, #29
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	08dc      	lsrs	r4, r3, #3
 8002e62:	e6f0      	b.n	8002c46 <__aeabi_dsub+0x3c2>
 8002e64:	2a00      	cmp	r2, #0
 8002e66:	d028      	beq.n	8002eba <__aeabi_dsub+0x636>
 8002e68:	4662      	mov	r2, ip
 8002e6a:	9f02      	ldr	r7, [sp, #8]
 8002e6c:	08c0      	lsrs	r0, r0, #3
 8002e6e:	433a      	orrs	r2, r7
 8002e70:	d100      	bne.n	8002e74 <__aeabi_dsub+0x5f0>
 8002e72:	e6dc      	b.n	8002c2e <__aeabi_dsub+0x3aa>
 8002e74:	0762      	lsls	r2, r4, #29
 8002e76:	4310      	orrs	r0, r2
 8002e78:	2280      	movs	r2, #128	@ 0x80
 8002e7a:	08e4      	lsrs	r4, r4, #3
 8002e7c:	0312      	lsls	r2, r2, #12
 8002e7e:	4214      	tst	r4, r2
 8002e80:	d009      	beq.n	8002e96 <__aeabi_dsub+0x612>
 8002e82:	08fd      	lsrs	r5, r7, #3
 8002e84:	4215      	tst	r5, r2
 8002e86:	d106      	bne.n	8002e96 <__aeabi_dsub+0x612>
 8002e88:	4663      	mov	r3, ip
 8002e8a:	2601      	movs	r6, #1
 8002e8c:	002c      	movs	r4, r5
 8002e8e:	08d8      	lsrs	r0, r3, #3
 8002e90:	077b      	lsls	r3, r7, #29
 8002e92:	4318      	orrs	r0, r3
 8002e94:	400e      	ands	r6, r1
 8002e96:	0f42      	lsrs	r2, r0, #29
 8002e98:	00c0      	lsls	r0, r0, #3
 8002e9a:	08c0      	lsrs	r0, r0, #3
 8002e9c:	0752      	lsls	r2, r2, #29
 8002e9e:	4302      	orrs	r2, r0
 8002ea0:	e601      	b.n	8002aa6 <__aeabi_dsub+0x222>
 8002ea2:	4663      	mov	r3, ip
 8002ea4:	1a1d      	subs	r5, r3, r0
 8002ea6:	45ac      	cmp	ip, r5
 8002ea8:	4192      	sbcs	r2, r2
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4252      	negs	r2, r2
 8002eae:	1b1c      	subs	r4, r3, r4
 8002eb0:	000e      	movs	r6, r1
 8002eb2:	4688      	mov	r8, r1
 8002eb4:	2701      	movs	r7, #1
 8002eb6:	1aa4      	subs	r4, r4, r2
 8002eb8:	e546      	b.n	8002948 <__aeabi_dsub+0xc4>
 8002eba:	4663      	mov	r3, ip
 8002ebc:	08d9      	lsrs	r1, r3, #3
 8002ebe:	9b02      	ldr	r3, [sp, #8]
 8002ec0:	075a      	lsls	r2, r3, #29
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	08dc      	lsrs	r4, r3, #3
 8002ec6:	e5ee      	b.n	8002aa6 <__aeabi_dsub+0x222>
 8002ec8:	4663      	mov	r3, ip
 8002eca:	9c02      	ldr	r4, [sp, #8]
 8002ecc:	9303      	str	r3, [sp, #12]
 8002ece:	e6c7      	b.n	8002c60 <__aeabi_dsub+0x3dc>
 8002ed0:	08c0      	lsrs	r0, r0, #3
 8002ed2:	2a00      	cmp	r2, #0
 8002ed4:	d100      	bne.n	8002ed8 <__aeabi_dsub+0x654>
 8002ed6:	e6aa      	b.n	8002c2e <__aeabi_dsub+0x3aa>
 8002ed8:	0762      	lsls	r2, r4, #29
 8002eda:	4310      	orrs	r0, r2
 8002edc:	2280      	movs	r2, #128	@ 0x80
 8002ede:	08e4      	lsrs	r4, r4, #3
 8002ee0:	0312      	lsls	r2, r2, #12
 8002ee2:	4214      	tst	r4, r2
 8002ee4:	d0d7      	beq.n	8002e96 <__aeabi_dsub+0x612>
 8002ee6:	9f02      	ldr	r7, [sp, #8]
 8002ee8:	08fd      	lsrs	r5, r7, #3
 8002eea:	4215      	tst	r5, r2
 8002eec:	d1d3      	bne.n	8002e96 <__aeabi_dsub+0x612>
 8002eee:	4663      	mov	r3, ip
 8002ef0:	2601      	movs	r6, #1
 8002ef2:	08d8      	lsrs	r0, r3, #3
 8002ef4:	077b      	lsls	r3, r7, #29
 8002ef6:	002c      	movs	r4, r5
 8002ef8:	4318      	orrs	r0, r3
 8002efa:	400e      	ands	r6, r1
 8002efc:	e7cb      	b.n	8002e96 <__aeabi_dsub+0x612>
 8002efe:	000a      	movs	r2, r1
 8002f00:	0027      	movs	r7, r4
 8002f02:	3a20      	subs	r2, #32
 8002f04:	40d7      	lsrs	r7, r2
 8002f06:	2920      	cmp	r1, #32
 8002f08:	d005      	beq.n	8002f16 <__aeabi_dsub+0x692>
 8002f0a:	2240      	movs	r2, #64	@ 0x40
 8002f0c:	1a52      	subs	r2, r2, r1
 8002f0e:	4094      	lsls	r4, r2
 8002f10:	0025      	movs	r5, r4
 8002f12:	4305      	orrs	r5, r0
 8002f14:	9503      	str	r5, [sp, #12]
 8002f16:	9d03      	ldr	r5, [sp, #12]
 8002f18:	1e6a      	subs	r2, r5, #1
 8002f1a:	4195      	sbcs	r5, r2
 8002f1c:	432f      	orrs	r7, r5
 8002f1e:	e610      	b.n	8002b42 <__aeabi_dsub+0x2be>
 8002f20:	0014      	movs	r4, r2
 8002f22:	2500      	movs	r5, #0
 8002f24:	2200      	movs	r2, #0
 8002f26:	e556      	b.n	80029d6 <__aeabi_dsub+0x152>
 8002f28:	9b02      	ldr	r3, [sp, #8]
 8002f2a:	4460      	add	r0, ip
 8002f2c:	4699      	mov	r9, r3
 8002f2e:	4560      	cmp	r0, ip
 8002f30:	4192      	sbcs	r2, r2
 8002f32:	444c      	add	r4, r9
 8002f34:	4252      	negs	r2, r2
 8002f36:	0005      	movs	r5, r0
 8002f38:	18a4      	adds	r4, r4, r2
 8002f3a:	e74c      	b.n	8002dd6 <__aeabi_dsub+0x552>
 8002f3c:	001a      	movs	r2, r3
 8002f3e:	001c      	movs	r4, r3
 8002f40:	432a      	orrs	r2, r5
 8002f42:	d000      	beq.n	8002f46 <__aeabi_dsub+0x6c2>
 8002f44:	e6b3      	b.n	8002cae <__aeabi_dsub+0x42a>
 8002f46:	e6c9      	b.n	8002cdc <__aeabi_dsub+0x458>
 8002f48:	2480      	movs	r4, #128	@ 0x80
 8002f4a:	2600      	movs	r6, #0
 8002f4c:	0324      	lsls	r4, r4, #12
 8002f4e:	e5ae      	b.n	8002aae <__aeabi_dsub+0x22a>
 8002f50:	2120      	movs	r1, #32
 8002f52:	2500      	movs	r5, #0
 8002f54:	1a09      	subs	r1, r1, r0
 8002f56:	e517      	b.n	8002988 <__aeabi_dsub+0x104>
 8002f58:	2200      	movs	r2, #0
 8002f5a:	2500      	movs	r5, #0
 8002f5c:	4c0b      	ldr	r4, [pc, #44]	@ (8002f8c <__aeabi_dsub+0x708>)
 8002f5e:	e53a      	b.n	80029d6 <__aeabi_dsub+0x152>
 8002f60:	2d00      	cmp	r5, #0
 8002f62:	d100      	bne.n	8002f66 <__aeabi_dsub+0x6e2>
 8002f64:	e5f6      	b.n	8002b54 <__aeabi_dsub+0x2d0>
 8002f66:	464b      	mov	r3, r9
 8002f68:	1bda      	subs	r2, r3, r7
 8002f6a:	4692      	mov	sl, r2
 8002f6c:	2f00      	cmp	r7, #0
 8002f6e:	d100      	bne.n	8002f72 <__aeabi_dsub+0x6ee>
 8002f70:	e66f      	b.n	8002c52 <__aeabi_dsub+0x3ce>
 8002f72:	2a38      	cmp	r2, #56	@ 0x38
 8002f74:	dc05      	bgt.n	8002f82 <__aeabi_dsub+0x6fe>
 8002f76:	2680      	movs	r6, #128	@ 0x80
 8002f78:	0436      	lsls	r6, r6, #16
 8002f7a:	4334      	orrs	r4, r6
 8002f7c:	4688      	mov	r8, r1
 8002f7e:	000e      	movs	r6, r1
 8002f80:	e6d1      	b.n	8002d26 <__aeabi_dsub+0x4a2>
 8002f82:	4688      	mov	r8, r1
 8002f84:	000e      	movs	r6, r1
 8002f86:	2501      	movs	r5, #1
 8002f88:	e6de      	b.n	8002d48 <__aeabi_dsub+0x4c4>
 8002f8a:	46c0      	nop			@ (mov r8, r8)
 8002f8c:	000007ff 	.word	0x000007ff
 8002f90:	ff7fffff 	.word	0xff7fffff
 8002f94:	000007fe 	.word	0x000007fe
 8002f98:	2d00      	cmp	r5, #0
 8002f9a:	d100      	bne.n	8002f9e <__aeabi_dsub+0x71a>
 8002f9c:	e668      	b.n	8002c70 <__aeabi_dsub+0x3ec>
 8002f9e:	464b      	mov	r3, r9
 8002fa0:	1bd9      	subs	r1, r3, r7
 8002fa2:	2f00      	cmp	r7, #0
 8002fa4:	d101      	bne.n	8002faa <__aeabi_dsub+0x726>
 8002fa6:	468a      	mov	sl, r1
 8002fa8:	e5a7      	b.n	8002afa <__aeabi_dsub+0x276>
 8002faa:	2701      	movs	r7, #1
 8002fac:	2938      	cmp	r1, #56	@ 0x38
 8002fae:	dd00      	ble.n	8002fb2 <__aeabi_dsub+0x72e>
 8002fb0:	e5c7      	b.n	8002b42 <__aeabi_dsub+0x2be>
 8002fb2:	2280      	movs	r2, #128	@ 0x80
 8002fb4:	0412      	lsls	r2, r2, #16
 8002fb6:	4314      	orrs	r4, r2
 8002fb8:	e5af      	b.n	8002b1a <__aeabi_dsub+0x296>
 8002fba:	46c0      	nop			@ (mov r8, r8)

08002fbc <__aeabi_dcmpun>:
 8002fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fbe:	46c6      	mov	lr, r8
 8002fc0:	031e      	lsls	r6, r3, #12
 8002fc2:	0b36      	lsrs	r6, r6, #12
 8002fc4:	46b0      	mov	r8, r6
 8002fc6:	4e0d      	ldr	r6, [pc, #52]	@ (8002ffc <__aeabi_dcmpun+0x40>)
 8002fc8:	030c      	lsls	r4, r1, #12
 8002fca:	004d      	lsls	r5, r1, #1
 8002fcc:	005f      	lsls	r7, r3, #1
 8002fce:	b500      	push	{lr}
 8002fd0:	0b24      	lsrs	r4, r4, #12
 8002fd2:	0d6d      	lsrs	r5, r5, #21
 8002fd4:	0d7f      	lsrs	r7, r7, #21
 8002fd6:	42b5      	cmp	r5, r6
 8002fd8:	d00b      	beq.n	8002ff2 <__aeabi_dcmpun+0x36>
 8002fda:	4908      	ldr	r1, [pc, #32]	@ (8002ffc <__aeabi_dcmpun+0x40>)
 8002fdc:	2000      	movs	r0, #0
 8002fde:	428f      	cmp	r7, r1
 8002fe0:	d104      	bne.n	8002fec <__aeabi_dcmpun+0x30>
 8002fe2:	4646      	mov	r6, r8
 8002fe4:	4316      	orrs	r6, r2
 8002fe6:	0030      	movs	r0, r6
 8002fe8:	1e43      	subs	r3, r0, #1
 8002fea:	4198      	sbcs	r0, r3
 8002fec:	bc80      	pop	{r7}
 8002fee:	46b8      	mov	r8, r7
 8002ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ff2:	4304      	orrs	r4, r0
 8002ff4:	2001      	movs	r0, #1
 8002ff6:	2c00      	cmp	r4, #0
 8002ff8:	d1f8      	bne.n	8002fec <__aeabi_dcmpun+0x30>
 8002ffa:	e7ee      	b.n	8002fda <__aeabi_dcmpun+0x1e>
 8002ffc:	000007ff 	.word	0x000007ff

08003000 <__aeabi_d2iz>:
 8003000:	000b      	movs	r3, r1
 8003002:	0002      	movs	r2, r0
 8003004:	b570      	push	{r4, r5, r6, lr}
 8003006:	4d16      	ldr	r5, [pc, #88]	@ (8003060 <__aeabi_d2iz+0x60>)
 8003008:	030c      	lsls	r4, r1, #12
 800300a:	b082      	sub	sp, #8
 800300c:	0049      	lsls	r1, r1, #1
 800300e:	2000      	movs	r0, #0
 8003010:	9200      	str	r2, [sp, #0]
 8003012:	9301      	str	r3, [sp, #4]
 8003014:	0b24      	lsrs	r4, r4, #12
 8003016:	0d49      	lsrs	r1, r1, #21
 8003018:	0fde      	lsrs	r6, r3, #31
 800301a:	42a9      	cmp	r1, r5
 800301c:	dd04      	ble.n	8003028 <__aeabi_d2iz+0x28>
 800301e:	4811      	ldr	r0, [pc, #68]	@ (8003064 <__aeabi_d2iz+0x64>)
 8003020:	4281      	cmp	r1, r0
 8003022:	dd03      	ble.n	800302c <__aeabi_d2iz+0x2c>
 8003024:	4b10      	ldr	r3, [pc, #64]	@ (8003068 <__aeabi_d2iz+0x68>)
 8003026:	18f0      	adds	r0, r6, r3
 8003028:	b002      	add	sp, #8
 800302a:	bd70      	pop	{r4, r5, r6, pc}
 800302c:	2080      	movs	r0, #128	@ 0x80
 800302e:	0340      	lsls	r0, r0, #13
 8003030:	4320      	orrs	r0, r4
 8003032:	4c0e      	ldr	r4, [pc, #56]	@ (800306c <__aeabi_d2iz+0x6c>)
 8003034:	1a64      	subs	r4, r4, r1
 8003036:	2c1f      	cmp	r4, #31
 8003038:	dd08      	ble.n	800304c <__aeabi_d2iz+0x4c>
 800303a:	4b0d      	ldr	r3, [pc, #52]	@ (8003070 <__aeabi_d2iz+0x70>)
 800303c:	1a5b      	subs	r3, r3, r1
 800303e:	40d8      	lsrs	r0, r3
 8003040:	0003      	movs	r3, r0
 8003042:	4258      	negs	r0, r3
 8003044:	2e00      	cmp	r6, #0
 8003046:	d1ef      	bne.n	8003028 <__aeabi_d2iz+0x28>
 8003048:	0018      	movs	r0, r3
 800304a:	e7ed      	b.n	8003028 <__aeabi_d2iz+0x28>
 800304c:	4b09      	ldr	r3, [pc, #36]	@ (8003074 <__aeabi_d2iz+0x74>)
 800304e:	9a00      	ldr	r2, [sp, #0]
 8003050:	469c      	mov	ip, r3
 8003052:	0003      	movs	r3, r0
 8003054:	4461      	add	r1, ip
 8003056:	408b      	lsls	r3, r1
 8003058:	40e2      	lsrs	r2, r4
 800305a:	4313      	orrs	r3, r2
 800305c:	e7f1      	b.n	8003042 <__aeabi_d2iz+0x42>
 800305e:	46c0      	nop			@ (mov r8, r8)
 8003060:	000003fe 	.word	0x000003fe
 8003064:	0000041d 	.word	0x0000041d
 8003068:	7fffffff 	.word	0x7fffffff
 800306c:	00000433 	.word	0x00000433
 8003070:	00000413 	.word	0x00000413
 8003074:	fffffbed 	.word	0xfffffbed

08003078 <__aeabi_i2d>:
 8003078:	b570      	push	{r4, r5, r6, lr}
 800307a:	2800      	cmp	r0, #0
 800307c:	d016      	beq.n	80030ac <__aeabi_i2d+0x34>
 800307e:	17c3      	asrs	r3, r0, #31
 8003080:	18c5      	adds	r5, r0, r3
 8003082:	405d      	eors	r5, r3
 8003084:	0fc4      	lsrs	r4, r0, #31
 8003086:	0028      	movs	r0, r5
 8003088:	f000 f848 	bl	800311c <__clzsi2>
 800308c:	4b10      	ldr	r3, [pc, #64]	@ (80030d0 <__aeabi_i2d+0x58>)
 800308e:	1a1b      	subs	r3, r3, r0
 8003090:	055b      	lsls	r3, r3, #21
 8003092:	0d5b      	lsrs	r3, r3, #21
 8003094:	280a      	cmp	r0, #10
 8003096:	dc14      	bgt.n	80030c2 <__aeabi_i2d+0x4a>
 8003098:	0002      	movs	r2, r0
 800309a:	002e      	movs	r6, r5
 800309c:	3215      	adds	r2, #21
 800309e:	4096      	lsls	r6, r2
 80030a0:	220b      	movs	r2, #11
 80030a2:	1a12      	subs	r2, r2, r0
 80030a4:	40d5      	lsrs	r5, r2
 80030a6:	032d      	lsls	r5, r5, #12
 80030a8:	0b2d      	lsrs	r5, r5, #12
 80030aa:	e003      	b.n	80030b4 <__aeabi_i2d+0x3c>
 80030ac:	2400      	movs	r4, #0
 80030ae:	2300      	movs	r3, #0
 80030b0:	2500      	movs	r5, #0
 80030b2:	2600      	movs	r6, #0
 80030b4:	051b      	lsls	r3, r3, #20
 80030b6:	432b      	orrs	r3, r5
 80030b8:	07e4      	lsls	r4, r4, #31
 80030ba:	4323      	orrs	r3, r4
 80030bc:	0030      	movs	r0, r6
 80030be:	0019      	movs	r1, r3
 80030c0:	bd70      	pop	{r4, r5, r6, pc}
 80030c2:	380b      	subs	r0, #11
 80030c4:	4085      	lsls	r5, r0
 80030c6:	032d      	lsls	r5, r5, #12
 80030c8:	2600      	movs	r6, #0
 80030ca:	0b2d      	lsrs	r5, r5, #12
 80030cc:	e7f2      	b.n	80030b4 <__aeabi_i2d+0x3c>
 80030ce:	46c0      	nop			@ (mov r8, r8)
 80030d0:	0000041e 	.word	0x0000041e

080030d4 <__aeabi_ui2d>:
 80030d4:	b510      	push	{r4, lr}
 80030d6:	1e04      	subs	r4, r0, #0
 80030d8:	d010      	beq.n	80030fc <__aeabi_ui2d+0x28>
 80030da:	f000 f81f 	bl	800311c <__clzsi2>
 80030de:	4b0e      	ldr	r3, [pc, #56]	@ (8003118 <__aeabi_ui2d+0x44>)
 80030e0:	1a1b      	subs	r3, r3, r0
 80030e2:	055b      	lsls	r3, r3, #21
 80030e4:	0d5b      	lsrs	r3, r3, #21
 80030e6:	280a      	cmp	r0, #10
 80030e8:	dc0f      	bgt.n	800310a <__aeabi_ui2d+0x36>
 80030ea:	220b      	movs	r2, #11
 80030ec:	0021      	movs	r1, r4
 80030ee:	1a12      	subs	r2, r2, r0
 80030f0:	40d1      	lsrs	r1, r2
 80030f2:	3015      	adds	r0, #21
 80030f4:	030a      	lsls	r2, r1, #12
 80030f6:	4084      	lsls	r4, r0
 80030f8:	0b12      	lsrs	r2, r2, #12
 80030fa:	e001      	b.n	8003100 <__aeabi_ui2d+0x2c>
 80030fc:	2300      	movs	r3, #0
 80030fe:	2200      	movs	r2, #0
 8003100:	051b      	lsls	r3, r3, #20
 8003102:	4313      	orrs	r3, r2
 8003104:	0020      	movs	r0, r4
 8003106:	0019      	movs	r1, r3
 8003108:	bd10      	pop	{r4, pc}
 800310a:	0022      	movs	r2, r4
 800310c:	380b      	subs	r0, #11
 800310e:	4082      	lsls	r2, r0
 8003110:	0312      	lsls	r2, r2, #12
 8003112:	2400      	movs	r4, #0
 8003114:	0b12      	lsrs	r2, r2, #12
 8003116:	e7f3      	b.n	8003100 <__aeabi_ui2d+0x2c>
 8003118:	0000041e 	.word	0x0000041e

0800311c <__clzsi2>:
 800311c:	211c      	movs	r1, #28
 800311e:	2301      	movs	r3, #1
 8003120:	041b      	lsls	r3, r3, #16
 8003122:	4298      	cmp	r0, r3
 8003124:	d301      	bcc.n	800312a <__clzsi2+0xe>
 8003126:	0c00      	lsrs	r0, r0, #16
 8003128:	3910      	subs	r1, #16
 800312a:	0a1b      	lsrs	r3, r3, #8
 800312c:	4298      	cmp	r0, r3
 800312e:	d301      	bcc.n	8003134 <__clzsi2+0x18>
 8003130:	0a00      	lsrs	r0, r0, #8
 8003132:	3908      	subs	r1, #8
 8003134:	091b      	lsrs	r3, r3, #4
 8003136:	4298      	cmp	r0, r3
 8003138:	d301      	bcc.n	800313e <__clzsi2+0x22>
 800313a:	0900      	lsrs	r0, r0, #4
 800313c:	3904      	subs	r1, #4
 800313e:	a202      	add	r2, pc, #8	@ (adr r2, 8003148 <__clzsi2+0x2c>)
 8003140:	5c10      	ldrb	r0, [r2, r0]
 8003142:	1840      	adds	r0, r0, r1
 8003144:	4770      	bx	lr
 8003146:	46c0      	nop			@ (mov r8, r8)
 8003148:	02020304 	.word	0x02020304
 800314c:	01010101 	.word	0x01010101
	...

08003158 <UART_read>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int32_t UART_read(const char port[], uint8_t* buf, uint16_t count, int32_t byte_timeout_ms) {
 8003158:	b570      	push	{r4, r5, r6, lr}
 800315a:	0014      	movs	r4, r2
	memcpy(buf, UART_RX_DATA + current_modbus_index, count);
 800315c:	4d05      	ldr	r5, [pc, #20]	@ (8003174 <UART_read+0x1c>)
 800315e:	4b06      	ldr	r3, [pc, #24]	@ (8003178 <UART_read+0x20>)
int32_t UART_read(const char port[], uint8_t* buf, uint16_t count, int32_t byte_timeout_ms) {
 8003160:	0008      	movs	r0, r1
	memcpy(buf, UART_RX_DATA + current_modbus_index, count);
 8003162:	7829      	ldrb	r1, [r5, #0]
 8003164:	18c9      	adds	r1, r1, r3
 8003166:	f008 fb31 	bl	800b7cc <memcpy>
	current_modbus_index += count;
 800316a:	782b      	ldrb	r3, [r5, #0]
		return count;
	}

	 This should not occur
	return 0;*/
}
 800316c:	0020      	movs	r0, r4
	current_modbus_index += count;
 800316e:	191b      	adds	r3, r3, r4
 8003170:	702b      	strb	r3, [r5, #0]
}
 8003172:	bd70      	pop	{r4, r5, r6, pc}
 8003174:	20000202 	.word	0x20000202
 8003178:	20000203 	.word	0x20000203

0800317c <UART_write>:

int32_t UART_write(const char port[], const uint8_t* buf, uint16_t count, int32_t byte_timeout_ms) {
 800317c:	b510      	push	{r4, lr}
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, buf, count, byte_timeout_ms);
 800317e:	4805      	ldr	r0, [pc, #20]	@ (8003194 <UART_write+0x18>)
int32_t UART_write(const char port[], const uint8_t* buf, uint16_t count, int32_t byte_timeout_ms) {
 8003180:	0014      	movs	r4, r2
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, buf, count, byte_timeout_ms);
 8003182:	f007 fa67 	bl	800a654 <HAL_UART_Transmit>
	const bool wrote = status == HAL_OK;
    if(wrote){
 8003186:	4243      	negs	r3, r0
 8003188:	4158      	adcs	r0, r3
 800318a:	4240      	negs	r0, r0
 800318c:	4004      	ands	r4, r0
    	return count; /* Assuming that we wrote count bytes */
    }else{
    	return 0;
    }
}
 800318e:	0020      	movs	r0, r4
 8003190:	bd10      	pop	{r4, pc}
 8003192:	46c0      	nop			@ (mov r8, r8)
 8003194:	20000324 	.word	0x20000324

08003198 <compute_mpc_model>:
	  if(Flash_Write_Data(PARAMETERS, MAX_PARAMETERS) == HAL_ERROR){
		  Error_Handler();
	  }
}

void compute_mpc_model(){
 8003198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800319a:	b0b3      	sub	sp, #204	@ 0xcc
	const uint16_t* PARAMETERS = modbus_server_get_parameters_array();
 800319c:	f003 fce8 	bl	8006b70 <modbus_server_get_parameters_array>
	const uint16_t A_MSB = PARAMETERS[19];
	const uint16_t B_LSB = PARAMETERS[20];
	const uint16_t B_MSB = PARAMETERS[21];
	const uint16_t qw_LSB = PARAMETERS[22];
	const uint16_t qw_MSB = PARAMETERS[23];
	const uint16_t rv_LSB = PARAMETERS[24];
 80031a0:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
	const uint16_t B_LSB = PARAMETERS[20];
 80031a2:	8d07      	ldrh	r7, [r0, #40]	@ 0x28
	const uint16_t rv_LSB = PARAMETERS[24];
 80031a4:	930f      	str	r3, [sp, #60]	@ 0x3c
	const uint16_t rv_MSB = PARAMETERS[25];
 80031a6:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
	const uint16_t B_MSB = PARAMETERS[21];
 80031a8:	8d46      	ldrh	r6, [r0, #42]	@ 0x2a
	const uint16_t rv_MSB = PARAMETERS[25];
 80031aa:	9310      	str	r3, [sp, #64]	@ 0x40
	const uint16_t qz_LSB = PARAMETERS[26];
 80031ac:	8e83      	ldrh	r3, [r0, #52]	@ 0x34
	const uint16_t qw_LSB = PARAMETERS[22];
 80031ae:	8d85      	ldrh	r5, [r0, #44]	@ 0x2c
	const uint16_t qz_LSB = PARAMETERS[26];
 80031b0:	9311      	str	r3, [sp, #68]	@ 0x44
	const uint16_t qz_MSB = PARAMETERS[27];
 80031b2:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
	const uint16_t qw_MSB = PARAMETERS[23];
 80031b4:	8dc4      	ldrh	r4, [r0, #46]	@ 0x2e
	const uint16_t qz_MSB = PARAMETERS[27];
 80031b6:	9312      	str	r3, [sp, #72]	@ 0x48
	const uint16_t s_LSB = PARAMETERS[28];
 80031b8:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 80031ba:	9313      	str	r3, [sp, #76]	@ 0x4c
	const uint16_t s_MSB = PARAMETERS[29];
 80031bc:	8f43      	ldrh	r3, [r0, #58]	@ 0x3a
 80031be:	9314      	str	r3, [sp, #80]	@ 0x50
	const uint16_t Spsi_spsi_LSB = PARAMETERS[30];
 80031c0:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
 80031c2:	9315      	str	r3, [sp, #84]	@ 0x54
	const uint16_t Spsi_spsi_MSB = PARAMETERS[31];
 80031c4:	8fc3      	ldrh	r3, [r0, #62]	@ 0x3e
 80031c6:	9316      	str	r3, [sp, #88]	@ 0x58
	const uint16_t alpha_LSB = PARAMETERS[32];
 80031c8:	1c83      	adds	r3, r0, #2
 80031ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031cc:	9317      	str	r3, [sp, #92]	@ 0x5c
	const uint16_t alpha_MSB = PARAMETERS[33];
 80031ce:	1d03      	adds	r3, r0, #4
 80031d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031d2:	9318      	str	r3, [sp, #96]	@ 0x60
	const uint16_t antiwindup_LSB = PARAMETERS[34];
 80031d4:	1d83      	adds	r3, r0, #6
 80031d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031d8:	9319      	str	r3, [sp, #100]	@ 0x64
	const uint16_t antiwindup_MSB = PARAMETERS[35];
 80031da:	0003      	movs	r3, r0
 80031dc:	3308      	adds	r3, #8
 80031de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031e0:	931a      	str	r3, [sp, #104]	@ 0x68
	const uint16_t umin_LSB = PARAMETERS[36];
 80031e2:	0003      	movs	r3, r0
 80031e4:	3348      	adds	r3, #72	@ 0x48
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	931b      	str	r3, [sp, #108]	@ 0x6c
	const uint16_t umin_MSB = PARAMETERS[37];
 80031ea:	0003      	movs	r3, r0
 80031ec:	334a      	adds	r3, #74	@ 0x4a
 80031ee:	881b      	ldrh	r3, [r3, #0]
 80031f0:	931c      	str	r3, [sp, #112]	@ 0x70
	const uint16_t umax_LSB = PARAMETERS[38];
 80031f2:	0003      	movs	r3, r0
 80031f4:	334c      	adds	r3, #76	@ 0x4c
 80031f6:	881b      	ldrh	r3, [r3, #0]
	const uint16_t deltaumin_MSB = PARAMETERS[45];
	const uint16_t deltaumax_LSB = PARAMETERS[46];
	const uint16_t deltaumax_MSB = PARAMETERS[47];

	/* Declare matrices */
	const float A[row_a * row_a] = { uint16_to_float(A_MSB, A_LSB) };
 80031f8:	8c81      	ldrh	r1, [r0, #36]	@ 0x24
	const uint16_t umax_LSB = PARAMETERS[38];
 80031fa:	931d      	str	r3, [sp, #116]	@ 0x74
	const uint16_t umax_MSB = PARAMETERS[39];
 80031fc:	0003      	movs	r3, r0
 80031fe:	334e      	adds	r3, #78	@ 0x4e
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	931e      	str	r3, [sp, #120]	@ 0x78
	const uint16_t steady_state_model_error_LSB = PARAMETERS[40];
 8003204:	0003      	movs	r3, r0
 8003206:	3350      	adds	r3, #80	@ 0x50
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	931f      	str	r3, [sp, #124]	@ 0x7c
	const uint16_t steady_state_model_error_MSB = PARAMETERS[41];
 800320c:	0003      	movs	r3, r0
 800320e:	3352      	adds	r3, #82	@ 0x52
 8003210:	881b      	ldrh	r3, [r3, #0]
 8003212:	9320      	str	r3, [sp, #128]	@ 0x80
	const uint16_t zmax_LSB = PARAMETERS[42];
 8003214:	0003      	movs	r3, r0
 8003216:	3354      	adds	r3, #84	@ 0x54
 8003218:	881b      	ldrh	r3, [r3, #0]
 800321a:	9321      	str	r3, [sp, #132]	@ 0x84
	const uint16_t zmax_MSB = PARAMETERS[43];
 800321c:	0003      	movs	r3, r0
 800321e:	3356      	adds	r3, #86	@ 0x56
 8003220:	881b      	ldrh	r3, [r3, #0]
 8003222:	9322      	str	r3, [sp, #136]	@ 0x88
	const uint16_t deltaumin_LSB = PARAMETERS[44];
 8003224:	0003      	movs	r3, r0
 8003226:	3358      	adds	r3, #88	@ 0x58
 8003228:	881b      	ldrh	r3, [r3, #0]
 800322a:	9323      	str	r3, [sp, #140]	@ 0x8c
	const uint16_t deltaumin_MSB = PARAMETERS[45];
 800322c:	0003      	movs	r3, r0
 800322e:	335a      	adds	r3, #90	@ 0x5a
 8003230:	881b      	ldrh	r3, [r3, #0]
 8003232:	9324      	str	r3, [sp, #144]	@ 0x90
	const uint16_t deltaumax_LSB = PARAMETERS[46];
 8003234:	0003      	movs	r3, r0
 8003236:	335c      	adds	r3, #92	@ 0x5c
 8003238:	881b      	ldrh	r3, [r3, #0]
 800323a:	9325      	str	r3, [sp, #148]	@ 0x94
	const uint16_t deltaumax_MSB = PARAMETERS[47];
 800323c:	0003      	movs	r3, r0
 800323e:	335e      	adds	r3, #94	@ 0x5e
 8003240:	881b      	ldrh	r3, [r3, #0]
	const float A[row_a * row_a] = { uint16_to_float(A_MSB, A_LSB) };
 8003242:	8cc0      	ldrh	r0, [r0, #38]	@ 0x26
	const uint16_t deltaumax_MSB = PARAMETERS[47];
 8003244:	9326      	str	r3, [sp, #152]	@ 0x98
	const float A[row_a * row_a] = { uint16_to_float(A_MSB, A_LSB) };
 8003246:	f003 fb61 	bl	800690c <uint16_to_float>
	const float B[row_a * column_b] = { uint16_to_float(B_MSB, B_LSB) };
 800324a:	0039      	movs	r1, r7
	const float A[row_a * row_a] = { uint16_to_float(A_MSB, A_LSB) };
 800324c:	9028      	str	r0, [sp, #160]	@ 0xa0
	const float B[row_a * column_b] = { uint16_to_float(B_MSB, B_LSB) };
 800324e:	0030      	movs	r0, r6
 8003250:	f003 fb5c 	bl	800690c <uint16_to_float>
	const float C[row_c * row_a] = { 1.0f };
 8003254:	23fe      	movs	r3, #254	@ 0xfe
	const float E[row_a * column_e] = { 0.0f };
 8003256:	2600      	movs	r6, #0
	const float C[row_c * row_a] = { 1.0f };
 8003258:	059b      	lsls	r3, r3, #22

	/* Declare parameters  */
	const float qw = uint16_to_float(qw_MSB, qw_LSB); /* Kalman scalar for disturbance covariance matrix Q */
 800325a:	0029      	movs	r1, r5
	const float B[row_a * column_b] = { uint16_to_float(B_MSB, B_LSB) };
 800325c:	9029      	str	r0, [sp, #164]	@ 0xa4
	const float qw = uint16_to_float(qw_MSB, qw_LSB); /* Kalman scalar for disturbance covariance matrix Q */
 800325e:	0020      	movs	r0, r4
	const float C[row_c * row_a] = { 1.0f };
 8003260:	932a      	str	r3, [sp, #168]	@ 0xa8
	const float E[row_a * column_e] = { 0.0f };
 8003262:	962b      	str	r6, [sp, #172]	@ 0xac
	const float qw = uint16_to_float(qw_MSB, qw_LSB); /* Kalman scalar for disturbance covariance matrix Q */
 8003264:	f003 fb52 	bl	800690c <uint16_to_float>
	const float rv = uint16_to_float(rv_MSB, rv_LSB); /* Kalman scalar for noise covariance matrix R */
 8003268:	990f      	ldr	r1, [sp, #60]	@ 0x3c
	const float qw = uint16_to_float(qw_MSB, qw_LSB); /* Kalman scalar for disturbance covariance matrix Q */
 800326a:	9027      	str	r0, [sp, #156]	@ 0x9c
	const float rv = uint16_to_float(rv_MSB, rv_LSB); /* Kalman scalar for noise covariance matrix R */
 800326c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800326e:	f003 fb4d 	bl	800690c <uint16_to_float>
	const float qz = uint16_to_float(qz_MSB, qz_LSB); /* Weight scalar for weight matrix QZ */
 8003272:	9911      	ldr	r1, [sp, #68]	@ 0x44
	const float rv = uint16_to_float(rv_MSB, rv_LSB); /* Kalman scalar for noise covariance matrix R */
 8003274:	900f      	str	r0, [sp, #60]	@ 0x3c
	const float qz = uint16_to_float(qz_MSB, qz_LSB); /* Weight scalar for weight matrix QZ */
 8003276:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8003278:	f003 fb48 	bl	800690c <uint16_to_float>
	const float s = uint16_to_float(s_MSB, s_LSB); /* Regularization scalar for regularization matrix S */
 800327c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
	const float qz = uint16_to_float(qz_MSB, qz_LSB); /* Weight scalar for weight matrix QZ */
 800327e:	9010      	str	r0, [sp, #64]	@ 0x40
	const float s = uint16_to_float(s_MSB, s_LSB); /* Regularization scalar for regularization matrix S */
 8003280:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8003282:	f003 fb43 	bl	800690c <uint16_to_float>
	const float Spsi_spsi = uint16_to_float(Spsi_spsi_MSB, Spsi_spsi_LSB); /* Slack variable scalar for slack variable matrix Spsi and slack vector spsi */
 8003286:	9915      	ldr	r1, [sp, #84]	@ 0x54
	const float s = uint16_to_float(s_MSB, s_LSB); /* Regularization scalar for regularization matrix S */
 8003288:	9011      	str	r0, [sp, #68]	@ 0x44
	const float Spsi_spsi = uint16_to_float(Spsi_spsi_MSB, Spsi_spsi_LSB); /* Slack variable scalar for slack variable matrix Spsi and slack vector spsi */
 800328a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800328c:	f003 fb3e 	bl	800690c <uint16_to_float>
	const float alpha = uint16_to_float(alpha_MSB, alpha_LSB); /* Integral action constant */
 8003290:	9917      	ldr	r1, [sp, #92]	@ 0x5c
	const float Spsi_spsi = uint16_to_float(Spsi_spsi_MSB, Spsi_spsi_LSB); /* Slack variable scalar for slack variable matrix Spsi and slack vector spsi */
 8003292:	1c07      	adds	r7, r0, #0
	const float alpha = uint16_to_float(alpha_MSB, alpha_LSB); /* Integral action constant */
 8003294:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8003296:	f003 fb39 	bl	800690c <uint16_to_float>
	const float antiwindup = uint16_to_float(antiwindup_MSB, antiwindup_LSB); /* Anti-windup max/min limitation for the integral action */
 800329a:	9919      	ldr	r1, [sp, #100]	@ 0x64
	const float alpha = uint16_to_float(alpha_MSB, alpha_LSB); /* Integral action constant */
 800329c:	1c04      	adds	r4, r0, #0
	const float antiwindup = uint16_to_float(antiwindup_MSB, antiwindup_LSB); /* Anti-windup max/min limitation for the integral action */
 800329e:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80032a0:	f003 fb34 	bl	800690c <uint16_to_float>

	/* Declare constraints */
	const float umin[column_b] = { uint16_to_float(umin_MSB, umin_LSB) };
 80032a4:	991b      	ldr	r1, [sp, #108]	@ 0x6c
	const float antiwindup = uint16_to_float(antiwindup_MSB, antiwindup_LSB); /* Anti-windup max/min limitation for the integral action */
 80032a6:	1c05      	adds	r5, r0, #0
	const float umin[column_b] = { uint16_to_float(umin_MSB, umin_LSB) };
 80032a8:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80032aa:	f003 fb2f 	bl	800690c <uint16_to_float>
	const float umax[column_b] = { uint16_to_float(umax_MSB, umax_LSB) };
 80032ae:	991d      	ldr	r1, [sp, #116]	@ 0x74
	const float umin[column_b] = { uint16_to_float(umin_MSB, umin_LSB) };
 80032b0:	902c      	str	r0, [sp, #176]	@ 0xb0
	const float umax[column_b] = { uint16_to_float(umax_MSB, umax_LSB) };
 80032b2:	981e      	ldr	r0, [sp, #120]	@ 0x78
 80032b4:	f003 fb2a 	bl	800690c <uint16_to_float>
	const float zmin[column_b] = { 0 };
	const float zmax[column_b] = { uint16_to_float(zmax_MSB, zmax_LSB) };
 80032b8:	9921      	ldr	r1, [sp, #132]	@ 0x84
	const float umax[column_b] = { uint16_to_float(umax_MSB, umax_LSB) };
 80032ba:	902d      	str	r0, [sp, #180]	@ 0xb4
	const float zmax[column_b] = { uint16_to_float(zmax_MSB, zmax_LSB) };
 80032bc:	9822      	ldr	r0, [sp, #136]	@ 0x88
	const float zmin[column_b] = { 0 };
 80032be:	962e      	str	r6, [sp, #184]	@ 0xb8
	const float zmax[column_b] = { uint16_to_float(zmax_MSB, zmax_LSB) };
 80032c0:	f003 fb24 	bl	800690c <uint16_to_float>
	const float deltaumin[column_b] = { uint16_to_float(deltaumin_MSB, deltaumin_LSB) };
 80032c4:	9923      	ldr	r1, [sp, #140]	@ 0x8c
	const float zmax[column_b] = { uint16_to_float(zmax_MSB, zmax_LSB) };
 80032c6:	902f      	str	r0, [sp, #188]	@ 0xbc
	const float deltaumin[column_b] = { uint16_to_float(deltaumin_MSB, deltaumin_LSB) };
 80032c8:	9824      	ldr	r0, [sp, #144]	@ 0x90
 80032ca:	f003 fb1f 	bl	800690c <uint16_to_float>
	const float deltaumax[column_b] = { uint16_to_float(deltaumax_MSB, deltaumax_LSB) };
 80032ce:	9925      	ldr	r1, [sp, #148]	@ 0x94
	const float deltaumin[column_b] = { uint16_to_float(deltaumin_MSB, deltaumin_LSB) };
 80032d0:	9030      	str	r0, [sp, #192]	@ 0xc0
	const float deltaumax[column_b] = { uint16_to_float(deltaumax_MSB, deltaumax_LSB) };
 80032d2:	9826      	ldr	r0, [sp, #152]	@ 0x98
 80032d4:	f003 fb1a 	bl	800690c <uint16_to_float>

	/* For the integral action */
	steady_state_model_error = uint16_to_float(steady_state_model_error_MSB, steady_state_model_error_LSB);
 80032d8:	991f      	ldr	r1, [sp, #124]	@ 0x7c
	const float deltaumax[column_b] = { uint16_to_float(deltaumax_MSB, deltaumax_LSB) };
 80032da:	9031      	str	r0, [sp, #196]	@ 0xc4
	steady_state_model_error = uint16_to_float(steady_state_model_error_MSB, steady_state_model_error_LSB);
 80032dc:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80032de:	f003 fb15 	bl	800690c <uint16_to_float>

	/* Free the pointer arrays inside MPC structure - Ignored if not initialized */
	mpc_free(&mpc);
 80032e2:	4e1b      	ldr	r6, [pc, #108]	@ (8003350 <compute_mpc_model+0x1b8>)
	steady_state_model_error = uint16_to_float(steady_state_model_error_MSB, steady_state_model_error_LSB);
 80032e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003354 <compute_mpc_model+0x1bc>)
 80032e6:	6018      	str	r0, [r3, #0]
	mpc_free(&mpc);
 80032e8:	0030      	movs	r0, r6
 80032ea:	f002 fad3 	bl	8005894 <mpc_free>

	/* Initialize the MPC structure */
	mpc_init(&mpc, A, B, C, E, sampleTime_mpc, sampleTime_kf, qw, rv, qz, s, Spsi_spsi, row_a, column_b, row_c, column_e, N, iterations);
 80032ee:	23fa      	movs	r3, #250	@ 0xfa
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	930d      	str	r3, [sp, #52]	@ 0x34
 80032f4:	2305      	movs	r3, #5
 80032f6:	930c      	str	r3, [sp, #48]	@ 0x30
 80032f8:	3b04      	subs	r3, #4
 80032fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80032fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80032fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8003300:	9308      	str	r3, [sp, #32]
 8003302:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003304:	aa29      	add	r2, sp, #164	@ 0xa4
 8003306:	9306      	str	r3, [sp, #24]
 8003308:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800330a:	a928      	add	r1, sp, #160	@ 0xa0
 800330c:	9305      	str	r3, [sp, #20]
 800330e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003310:	0030      	movs	r0, r6
 8003312:	9304      	str	r3, [sp, #16]
 8003314:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8003316:	9707      	str	r7, [sp, #28]
 8003318:	9303      	str	r3, [sp, #12]
 800331a:	23fc      	movs	r3, #252	@ 0xfc
 800331c:	059b      	lsls	r3, r3, #22
 800331e:	9302      	str	r3, [sp, #8]
 8003320:	2380      	movs	r3, #128	@ 0x80
 8003322:	05db      	lsls	r3, r3, #23
 8003324:	9301      	str	r3, [sp, #4]
 8003326:	ab2b      	add	r3, sp, #172	@ 0xac
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	ab2a      	add	r3, sp, #168	@ 0xa8
 800332c:	f001 fed6 	bl	80050dc <mpc_init>

	/* Set constraints */
	mpc_set_constraints(&mpc, umin, umax, zmin, zmax, deltaumin, deltaumax, alpha, antiwindup);
 8003330:	ab31      	add	r3, sp, #196	@ 0xc4
 8003332:	9302      	str	r3, [sp, #8]
 8003334:	ab30      	add	r3, sp, #192	@ 0xc0
 8003336:	9301      	str	r3, [sp, #4]
 8003338:	ab2f      	add	r3, sp, #188	@ 0xbc
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	0030      	movs	r0, r6
 800333e:	9504      	str	r5, [sp, #16]
 8003340:	9403      	str	r4, [sp, #12]
 8003342:	ab2e      	add	r3, sp, #184	@ 0xb8
 8003344:	aa2d      	add	r2, sp, #180	@ 0xb4
 8003346:	a92c      	add	r1, sp, #176	@ 0xb0
 8003348:	f002 f876 	bl	8005438 <mpc_set_constraints>
}
 800334c:	b033      	add	sp, #204	@ 0xcc
 800334e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003350:	20000250 	.word	0x20000250
 8003354:	20000240 	.word	0x20000240

08003358 <read_uart>:

void read_uart(){
	/* Read the modbus data */
	current_modbus_index = 0;
 8003358:	2200      	movs	r2, #0
void read_uart(){
 800335a:	b510      	push	{r4, lr}
	current_modbus_index = 0;
 800335c:	4b02      	ldr	r3, [pc, #8]	@ (8003368 <read_uart+0x10>)
 800335e:	701a      	strb	r2, [r3, #0]
	modbus_server_polling();
 8003360:	f003 fbf6 	bl	8006b50 <modbus_server_polling>
}
 8003364:	bd10      	pop	{r4, pc}
 8003366:	46c0      	nop			@ (mov r8, r8)
 8003368:	20000202 	.word	0x20000202

0800336c <read_temperature>:

void read_temperature(){
 800336c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800336e:	b085      	sub	sp, #20
	/* Read the calibration parameters */
	const uint16_t* PARAMETERS = modbus_server_get_parameters_array();
 8003370:	f003 fbfe 	bl	8006b70 <modbus_server_get_parameters_array>
	const uint16_t minTemperatureRaw = PARAMETERS[6];
 8003374:	8981      	ldrh	r1, [r0, #12]
	const uint16_t maxTemperatureRaw = PARAMETERS[7];
 8003376:	89c2      	ldrh	r2, [r0, #14]
	const uint16_t minTemperatureReal_LSB = PARAMETERS[8];
 8003378:	8a03      	ldrh	r3, [r0, #16]
	const uint16_t minTemperatureReal_MSB = PARAMETERS[9];
 800337a:	8a44      	ldrh	r4, [r0, #18]
	const uint16_t maxTemperatureReal_LSB = PARAMETERS[10];
 800337c:	8a86      	ldrh	r6, [r0, #20]
	const uint16_t maxTemperatureReal_MSB = PARAMETERS[11];
 800337e:	8ac7      	ldrh	r7, [r0, #22]

	/* Read the raw temperature value */
	temperature_raw = ADC_DATA[0];
 8003380:	480b      	ldr	r0, [pc, #44]	@ (80033b0 <read_temperature+0x44>)
 8003382:	4d0c      	ldr	r5, [pc, #48]	@ (80033b4 <read_temperature+0x48>)
 8003384:	8800      	ldrh	r0, [r0, #0]
 8003386:	8028      	strh	r0, [r5, #0]

	/* Calibrate the raw temperature value */
	y[0] = calibrate_value(temperature_raw, minTemperatureRaw,
 8003388:	9400      	str	r4, [sp, #0]
 800338a:	9702      	str	r7, [sp, #8]
 800338c:	9601      	str	r6, [sp, #4]
 800338e:	f003 facf 	bl	8006930 <calibrate_value>
 8003392:	4c09      	ldr	r4, [pc, #36]	@ (80033b8 <read_temperature+0x4c>)
 8003394:	6020      	str	r0, [r4, #0]
			maxTemperatureRaw, minTemperatureReal_LSB,
			minTemperatureReal_MSB, maxTemperatureReal_LSB,
			maxTemperatureReal_MSB);

	/* Save it to the analog inputs for Modbus */
	uint16_t* ANALOG_INPUTS = modbus_server_get_analog_inputs();
 8003396:	f003 fbe7 	bl	8006b68 <modbus_server_get_analog_inputs>
 800339a:	0001      	movs	r1, r0
	ANALOG_INPUTS[0] = temperature_raw;
 800339c:	882b      	ldrh	r3, [r5, #0]
	float_to_uint16(y[0], &ANALOG_INPUTS[4], &ANALOG_INPUTS[3]);
 800339e:	1d82      	adds	r2, r0, #6
	ANALOG_INPUTS[0] = temperature_raw;
 80033a0:	8003      	strh	r3, [r0, #0]
	float_to_uint16(y[0], &ANALOG_INPUTS[4], &ANALOG_INPUTS[3]);
 80033a2:	3108      	adds	r1, #8
 80033a4:	6820      	ldr	r0, [r4, #0]
 80033a6:	f003 fab9 	bl	800691c <float_to_uint16>
}
 80033aa:	b005      	add	sp, #20
 80033ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033ae:	46c0      	nop			@ (mov r8, r8)
 80033b0:	200001fc 	.word	0x200001fc
 80033b4:	20000238 	.word	0x20000238
 80033b8:	2000024c 	.word	0x2000024c

080033bc <read_current>:

void read_current(){
 80033bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033be:	b085      	sub	sp, #20
	/* Read the calibration parameters */
	const uint16_t* PARAMETERS = modbus_server_get_parameters_array();
 80033c0:	f003 fbd6 	bl	8006b70 <modbus_server_get_parameters_array>
	const uint16_t minCurrentRaw = PARAMETERS[12];
 80033c4:	8b01      	ldrh	r1, [r0, #24]
	const uint16_t maxCurrentRaw = PARAMETERS[13];
 80033c6:	8b42      	ldrh	r2, [r0, #26]
	const uint16_t minCurrentReal_LSB = PARAMETERS[14];
 80033c8:	8b83      	ldrh	r3, [r0, #28]
	const uint16_t minCurrentReal_MSB = PARAMETERS[15];
 80033ca:	8bc4      	ldrh	r4, [r0, #30]
	const uint16_t maxCurrentReal_LSB = PARAMETERS[16];
 80033cc:	8c06      	ldrh	r6, [r0, #32]
	const uint16_t maxCurrentReal_MSB = PARAMETERS[17];
 80033ce:	8c47      	ldrh	r7, [r0, #34]	@ 0x22

	/* Read the raw current */
	current_raw = ADC_DATA[1];
 80033d0:	480b      	ldr	r0, [pc, #44]	@ (8003400 <read_current+0x44>)
 80033d2:	4d0c      	ldr	r5, [pc, #48]	@ (8003404 <read_current+0x48>)
 80033d4:	8840      	ldrh	r0, [r0, #2]
 80033d6:	8028      	strh	r0, [r5, #0]

	/* Calibrate current */
	const float current = calibrate_value(current_raw, minCurrentRaw,
 80033d8:	9400      	str	r4, [sp, #0]
 80033da:	9702      	str	r7, [sp, #8]
 80033dc:	9601      	str	r6, [sp, #4]
 80033de:	f003 faa7 	bl	8006930 <calibrate_value>
 80033e2:	1c04      	adds	r4, r0, #0
			maxCurrentRaw, minCurrentReal_LSB, minCurrentReal_MSB,
			maxCurrentReal_LSB, maxCurrentReal_MSB);

	/* Set analog inputs */
	uint16_t* ANALOG_INPUTS = modbus_server_get_analog_inputs();
 80033e4:	f003 fbc0 	bl	8006b68 <modbus_server_get_analog_inputs>
 80033e8:	0001      	movs	r1, r0
	ANALOG_INPUTS[2] = current_raw;
	float_to_uint16(current, &ANALOG_INPUTS[8], &ANALOG_INPUTS[7]);
 80033ea:	0002      	movs	r2, r0
	ANALOG_INPUTS[2] = current_raw;
 80033ec:	882b      	ldrh	r3, [r5, #0]
	float_to_uint16(current, &ANALOG_INPUTS[8], &ANALOG_INPUTS[7]);
 80033ee:	320e      	adds	r2, #14
	ANALOG_INPUTS[2] = current_raw;
 80033f0:	8083      	strh	r3, [r0, #4]
	float_to_uint16(current, &ANALOG_INPUTS[8], &ANALOG_INPUTS[7]);
 80033f2:	3110      	adds	r1, #16
 80033f4:	1c20      	adds	r0, r4, #0
 80033f6:	f003 fa91 	bl	800691c <float_to_uint16>
}
 80033fa:	b005      	add	sp, #20
 80033fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033fe:	46c0      	nop			@ (mov r8, r8)
 8003400:	200001fc 	.word	0x200001fc
 8003404:	2000023a 	.word	0x2000023a

08003408 <read_everything_else>:

void read_everything_else(){
 8003408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800340a:	b087      	sub	sp, #28
	/* Read the calibration parameters */
	const uint16_t* PARAMETERS = modbus_server_get_parameters_array();
 800340c:	f003 fbb0 	bl	8006b70 <modbus_server_get_parameters_array>
	const uint16_t minSetpointRaw = PARAMETERS[0];
 8003410:	8801      	ldrh	r1, [r0, #0]
	const uint16_t maxSetpointRaw = PARAMETERS[1];
	const uint16_t minSetpointReal_LSB = PARAMETERS[2];
 8003412:	8883      	ldrh	r3, [r0, #4]
	const uint16_t maxSetpointRaw = PARAMETERS[1];
 8003414:	8842      	ldrh	r2, [r0, #2]
	const uint16_t minSetpointReal_MSB = PARAMETERS[3];
	const uint16_t maxSetpointReal_LSB = PARAMETERS[4];
 8003416:	8905      	ldrh	r5, [r0, #8]
	const uint16_t maxSetpointReal_MSB = PARAMETERS[5];
 8003418:	8946      	ldrh	r6, [r0, #10]
	const uint16_t minSetpointReal_MSB = PARAMETERS[3];
 800341a:	88c4      	ldrh	r4, [r0, #6]

	/* Read the raw setpoint */
	setpoint_raw = ADC_DATA[2];
 800341c:	4827      	ldr	r0, [pc, #156]	@ (80034bc <read_everything_else+0xb4>)
 800341e:	4f28      	ldr	r7, [pc, #160]	@ (80034c0 <read_everything_else+0xb8>)
 8003420:	8880      	ldrh	r0, [r0, #4]
 8003422:	8038      	strh	r0, [r7, #0]

	/* Calibrate setpoint */
	r[0] = calibrate_value(setpoint_raw, minSetpointRaw, maxSetpointRaw,
 8003424:	9602      	str	r6, [sp, #8]
 8003426:	9501      	str	r5, [sp, #4]
 8003428:	9400      	str	r4, [sp, #0]
 800342a:	f003 fa81 	bl	8006930 <calibrate_value>
			minSetpointReal_LSB, minSetpointReal_MSB,
			maxSetpointReal_LSB, maxSetpointReal_MSB);

	/* Check if we have placed the soldering tip into holder - Set to 100 degrees */
	const bool sleep = HAL_GPIO_ReadPin(SLEEP_GPIO_Port, SLEEP_Pin) == GPIO_PIN_SET;
 800342e:	2180      	movs	r1, #128	@ 0x80
	r[0] = calibrate_value(setpoint_raw, minSetpointRaw, maxSetpointRaw,
 8003430:	4e24      	ldr	r6, [pc, #144]	@ (80034c4 <read_everything_else+0xbc>)
	const bool sleep = HAL_GPIO_ReadPin(SLEEP_GPIO_Port, SLEEP_Pin) == GPIO_PIN_SET;
 8003432:	0189      	lsls	r1, r1, #6
	r[0] = calibrate_value(setpoint_raw, minSetpointRaw, maxSetpointRaw,
 8003434:	6030      	str	r0, [r6, #0]
	const bool sleep = HAL_GPIO_ReadPin(SLEEP_GPIO_Port, SLEEP_Pin) == GPIO_PIN_SET;
 8003436:	4824      	ldr	r0, [pc, #144]	@ (80034c8 <read_everything_else+0xc0>)
 8003438:	f005 fdc2 	bl	8008fc0 <HAL_GPIO_ReadPin>
 800343c:	1e45      	subs	r5, r0, #1
 800343e:	426b      	negs	r3, r5
 8003440:	415d      	adcs	r5, r3
 8003442:	b2ed      	uxtb	r5, r5
	if(sleep){
 8003444:	2801      	cmp	r0, #1
 8003446:	d101      	bne.n	800344c <read_everything_else+0x44>
		r[0] = 100;
 8003448:	4b20      	ldr	r3, [pc, #128]	@ (80034cc <read_everything_else+0xc4>)
 800344a:	6033      	str	r3, [r6, #0]
	if(fault){
		Error_Handler();
	}*/

	/* Save it to the analog inputs for Modbus */
	uint16_t* ANALOG_INPUTS = modbus_server_get_analog_inputs();
 800344c:	f003 fb8c 	bl	8006b68 <modbus_server_get_analog_inputs>
	ANALOG_INPUTS[1] = setpoint_raw;
	float_to_uint16(r[0], &ANALOG_INPUTS[6], &ANALOG_INPUTS[5]);
 8003450:	0002      	movs	r2, r0
 8003452:	0001      	movs	r1, r0
	uint16_t* ANALOG_INPUTS = modbus_server_get_analog_inputs();
 8003454:	0004      	movs	r4, r0
	ANALOG_INPUTS[1] = setpoint_raw;
 8003456:	883b      	ldrh	r3, [r7, #0]
	float_to_uint16(r[0], &ANALOG_INPUTS[6], &ANALOG_INPUTS[5]);
 8003458:	320a      	adds	r2, #10
	ANALOG_INPUTS[1] = setpoint_raw;
 800345a:	8043      	strh	r3, [r0, #2]
	float_to_uint16(r[0], &ANALOG_INPUTS[6], &ANALOG_INPUTS[5]);
 800345c:	310c      	adds	r1, #12
 800345e:	6830      	ldr	r0, [r6, #0]
 8003460:	f003 fa5c 	bl	800691c <float_to_uint16>
	float_to_uint16(mpc.x[0], &ANALOG_INPUTS[10], &ANALOG_INPUTS[9]);
 8003464:	0022      	movs	r2, r4
 8003466:	0021      	movs	r1, r4
 8003468:	4b19      	ldr	r3, [pc, #100]	@ (80034d0 <read_everything_else+0xc8>)
 800346a:	3212      	adds	r2, #18
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	3114      	adds	r1, #20
 8003470:	6818      	ldr	r0, [r3, #0]
 8003472:	f003 fa53 	bl	800691c <float_to_uint16>
	ANALOG_INPUTS[11] = iteration_time_ms;
	float_to_uint16(u[0], &ANALOG_INPUTS[13], &ANALOG_INPUTS[12]);
 8003476:	0022      	movs	r2, r4
 8003478:	0021      	movs	r1, r4
	ANALOG_INPUTS[11] = iteration_time_ms;
 800347a:	4b16      	ldr	r3, [pc, #88]	@ (80034d4 <read_everything_else+0xcc>)
	float_to_uint16(u[0], &ANALOG_INPUTS[13], &ANALOG_INPUTS[12]);
 800347c:	3218      	adds	r2, #24
	ANALOG_INPUTS[11] = iteration_time_ms;
 800347e:	881b      	ldrh	r3, [r3, #0]
	float_to_uint16(u[0], &ANALOG_INPUTS[13], &ANALOG_INPUTS[12]);
 8003480:	311a      	adds	r1, #26
	ANALOG_INPUTS[11] = iteration_time_ms;
 8003482:	82e3      	strh	r3, [r4, #22]
	float_to_uint16(u[0], &ANALOG_INPUTS[13], &ANALOG_INPUTS[12]);
 8003484:	4b14      	ldr	r3, [pc, #80]	@ (80034d8 <read_everything_else+0xd0>)
 8003486:	6818      	ldr	r0, [r3, #0]
 8003488:	f003 fa48 	bl	800691c <float_to_uint16>

	/* Read digital outputs */
	const bool led_green = HAL_GPIO_ReadPin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800348c:	2180      	movs	r1, #128	@ 0x80
 800348e:	4813      	ldr	r0, [pc, #76]	@ (80034dc <read_everything_else+0xd4>)
 8003490:	f005 fd96 	bl	8008fc0 <HAL_GPIO_ReadPin>
 8003494:	0003      	movs	r3, r0

	/* Set digital outputs */
	const uint8_t digital_outputs = led_green;
 8003496:	2016      	movs	r0, #22
	const bool led_green = HAL_GPIO_ReadPin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8003498:	1e5a      	subs	r2, r3, #1
 800349a:	4193      	sbcs	r3, r2
	const uint8_t digital_outputs = led_green;
 800349c:	4468      	add	r0, sp
	modbus_server_set_digital_outputs(&digital_outputs, 0, 1);
 800349e:	2201      	movs	r2, #1
 80034a0:	2100      	movs	r1, #0
	const bool led_green = HAL_GPIO_ReadPin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80034a2:	7003      	strb	r3, [r0, #0]
	modbus_server_set_digital_outputs(&digital_outputs, 0, 1);
 80034a4:	f003 fb58 	bl	8006b58 <modbus_server_set_digital_outputs>

	/* Set digital inputs */
	const uint8_t digital_inputs = sleep;
 80034a8:	2017      	movs	r0, #23
	modbus_server_set_digital_inputs(&digital_inputs, 0, 1);
 80034aa:	2201      	movs	r2, #1
	const uint8_t digital_inputs = sleep;
 80034ac:	4468      	add	r0, sp
	modbus_server_set_digital_inputs(&digital_inputs, 0, 1);
 80034ae:	2100      	movs	r1, #0
	const uint8_t digital_inputs = sleep;
 80034b0:	7005      	strb	r5, [r0, #0]
	modbus_server_set_digital_inputs(&digital_inputs, 0, 1);
 80034b2:	f003 fb55 	bl	8006b60 <modbus_server_set_digital_inputs>
}
 80034b6:	b007      	add	sp, #28
 80034b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034ba:	46c0      	nop			@ (mov r8, r8)
 80034bc:	200001fc 	.word	0x200001fc
 80034c0:	2000023c 	.word	0x2000023c
 80034c4:	20000244 	.word	0x20000244
 80034c8:	48000800 	.word	0x48000800
 80034cc:	42c80000 	.word	0x42c80000
 80034d0:	200002dc 	.word	0x200002dc
 80034d4:	2000023e 	.word	0x2000023e
 80034d8:	20000248 	.word	0x20000248
 80034dc:	48001400 	.word	0x48001400

080034e0 <HAL_TIM_PeriodElapsedCallback>:
		Error_Handler();
    }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
	if (htim->Instance == TIM3) {
 80034e0:	4b15      	ldr	r3, [pc, #84]	@ (8003538 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80034e2:	6802      	ldr	r2, [r0, #0]
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 80034e4:	b570      	push	{r4, r5, r6, lr}
	if (htim->Instance == TIM3) {
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d10f      	bne.n	800350a <HAL_TIM_PeriodElapsedCallback+0x2a>
		/* For every 2 Hz, this if-statement executes */
		if(PWM_active){
 80034ea:	4c14      	ldr	r4, [pc, #80]	@ (800353c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80034ec:	4d14      	ldr	r5, [pc, #80]	@ (8003540 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80034ee:	7826      	ldrb	r6, [r4, #0]
 80034f0:	2e00      	cmp	r6, #0
 80034f2:	d018      	beq.n	8003526 <HAL_TIM_PeriodElapsedCallback+0x46>
			read_temperature();
 80034f4:	f7ff ff3a 	bl	800336c <read_temperature>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); /* 50 Hz */
 80034f8:	2100      	movs	r1, #0
 80034fa:	0028      	movs	r0, r5
 80034fc:	f006 fcac 	bl	8009e58 <HAL_TIM_PWM_Start>
			PWM_active = false;
 8003500:	2300      	movs	r3, #0
		}else{
			read_current();
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1); /* 50 Hz */
			PWM_active = true;
		}
		HAL_TIM_Base_Start_IT(&htim3); /* 2 Hz */
 8003502:	4810      	ldr	r0, [pc, #64]	@ (8003544 <HAL_TIM_PeriodElapsedCallback+0x64>)
			PWM_active = false;
 8003504:	7023      	strb	r3, [r4, #0]
		HAL_TIM_Base_Start_IT(&htim3); /* 2 Hz */
 8003506:	f006 f97d 	bl	8009804 <HAL_TIM_Base_Start_IT>
	}

	/* For other measurements */
	read_everything_else();
 800350a:	f7ff ff7d 	bl	8003408 <read_everything_else>

	/* This is important if communication can be re-establish */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, UART_RX_DATA, UART_RX_DATA_SIZE);
 800350e:	2233      	movs	r2, #51	@ 0x33
 8003510:	490d      	ldr	r1, [pc, #52]	@ (8003548 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003512:	480e      	ldr	r0, [pc, #56]	@ (800354c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003514:	f007 f9eb 	bl	800a8ee <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8003518:	2104      	movs	r1, #4
 800351a:	4b0d      	ldr	r3, [pc, #52]	@ (8003550 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	6813      	ldr	r3, [r2, #0]
 8003520:	438b      	bics	r3, r1
 8003522:	6013      	str	r3, [r2, #0]
}
 8003524:	bd70      	pop	{r4, r5, r6, pc}
			read_current();
 8003526:	f7ff ff49 	bl	80033bc <read_current>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1); /* 50 Hz */
 800352a:	0031      	movs	r1, r6
 800352c:	0028      	movs	r0, r5
 800352e:	f006 fce1 	bl	8009ef4 <HAL_TIM_PWM_Stop>
 8003532:	2301      	movs	r3, #1
 8003534:	e7e5      	b.n	8003502 <HAL_TIM_PeriodElapsedCallback+0x22>
 8003536:	46c0      	nop			@ (mov r8, r8)
 8003538:	40000400 	.word	0x40000400
 800353c:	20000236 	.word	0x20000236
 8003540:	200003f4 	.word	0x200003f4
 8003544:	200003ac 	.word	0x200003ac
 8003548:	20000203 	.word	0x20000203
 800354c:	20000324 	.word	0x20000324
 8003550:	200002e0 	.word	0x200002e0

08003554 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8003554:	b510      	push	{r4, lr}
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, UART_RX_DATA, UART_RX_DATA_SIZE);
 8003556:	2233      	movs	r2, #51	@ 0x33
 8003558:	4906      	ldr	r1, [pc, #24]	@ (8003574 <HAL_UARTEx_RxEventCallback+0x20>)
 800355a:	4807      	ldr	r0, [pc, #28]	@ (8003578 <HAL_UARTEx_RxEventCallback+0x24>)
 800355c:	f007 f9c7 	bl	800a8ee <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8003560:	2104      	movs	r1, #4
 8003562:	4b06      	ldr	r3, [pc, #24]	@ (800357c <HAL_UARTEx_RxEventCallback+0x28>)
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	6813      	ldr	r3, [r2, #0]
 8003568:	438b      	bics	r3, r1
 800356a:	6013      	str	r3, [r2, #0]
	read_uart();
 800356c:	f7ff fef4 	bl	8003358 <read_uart>
}
 8003570:	bd10      	pop	{r4, pc}
 8003572:	46c0      	nop			@ (mov r8, r8)
 8003574:	20000203 	.word	0x20000203
 8003578:	20000324 	.word	0x20000324
 800357c:	200002e0 	.word	0x200002e0

08003580 <read_initial_memory>:

void read_initial_memory(){
 8003580:	b510      	push	{r4, lr}
	uint16_t* PARAMETERS = modbus_server_get_parameters_array();
 8003582:	f003 faf5 	bl	8006b70 <modbus_server_get_parameters_array>
	Flash_Read_Data(PARAMETERS, MAX_PARAMETERS);
 8003586:	2131      	movs	r1, #49	@ 0x31
 8003588:	f003 fa36 	bl	80069f8 <Flash_Read_Data>
}
 800358c:	bd10      	pop	{r4, pc}
	...

08003590 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003590:	b570      	push	{r4, r5, r6, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003592:	b672      	cpsid	i
  __disable_irq();
  while (1)
  {
	  /* Blink green if something went wrong - HAL_Delay() won't work here! */
	  for(long i = 0; i < 100000; i++){
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8003594:	2580      	movs	r5, #128	@ 0x80
{
 8003596:	4c09      	ldr	r4, [pc, #36]	@ (80035bc <Error_Handler+0x2c>)
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8003598:	2200      	movs	r2, #0
 800359a:	0029      	movs	r1, r5
 800359c:	4808      	ldr	r0, [pc, #32]	@ (80035c0 <Error_Handler+0x30>)
	  for(long i = 0; i < 100000; i++){
 800359e:	3c01      	subs	r4, #1
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80035a0:	f005 fd14 	bl	8008fcc <HAL_GPIO_WritePin>
	  for(long i = 0; i < 100000; i++){
 80035a4:	2c00      	cmp	r4, #0
 80035a6:	d1f7      	bne.n	8003598 <Error_Handler+0x8>
 80035a8:	4c04      	ldr	r4, [pc, #16]	@ (80035bc <Error_Handler+0x2c>)
	  };
	  for(long i = 0; i < 100000; i++){
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80035aa:	2201      	movs	r2, #1
 80035ac:	0029      	movs	r1, r5
 80035ae:	4804      	ldr	r0, [pc, #16]	@ (80035c0 <Error_Handler+0x30>)
	  for(long i = 0; i < 100000; i++){
 80035b0:	3c01      	subs	r4, #1
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80035b2:	f005 fd0b 	bl	8008fcc <HAL_GPIO_WritePin>
	  for(long i = 0; i < 100000; i++){
 80035b6:	2c00      	cmp	r4, #0
 80035b8:	d1f7      	bne.n	80035aa <Error_Handler+0x1a>
 80035ba:	e7ec      	b.n	8003596 <Error_Handler+0x6>
 80035bc:	000186a0 	.word	0x000186a0
 80035c0:	48001400 	.word	0x48001400

080035c4 <write_initial_memory>:
void write_initial_memory(){
 80035c4:	b510      	push	{r4, lr}
	  uint16_t* PARAMETERS = modbus_server_get_parameters_array();
 80035c6:	f003 fad3 	bl	8006b70 <modbus_server_get_parameters_array>
	  if(Flash_Write_Data(PARAMETERS, MAX_PARAMETERS) == HAL_ERROR){
 80035ca:	2131      	movs	r1, #49	@ 0x31
 80035cc:	f003 f9ea 	bl	80069a4 <Flash_Write_Data>
 80035d0:	2801      	cmp	r0, #1
 80035d2:	d101      	bne.n	80035d8 <write_initial_memory+0x14>
		  Error_Handler();
 80035d4:	f7ff ffdc 	bl	8003590 <Error_Handler>
}
 80035d8:	bd10      	pop	{r4, pc}

080035da <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80035da:	b510      	push	{r4, lr}
    if(GPIO_Pin == CURRENT_BLOCK_ON_Pin){
 80035dc:	2804      	cmp	r0, #4
 80035de:	d101      	bne.n	80035e4 <HAL_GPIO_EXTI_Callback+0xa>
		Error_Handler();
 80035e0:	f7ff ffd6 	bl	8003590 <Error_Handler>
}
 80035e4:	bd10      	pop	{r4, pc}

080035e6 <SystemClock_Config>:
{
 80035e6:	b530      	push	{r4, r5, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035e8:	2510      	movs	r5, #16
{
 80035ea:	b097      	sub	sp, #92	@ 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035ec:	222c      	movs	r2, #44	@ 0x2c
 80035ee:	2100      	movs	r1, #0
 80035f0:	a80b      	add	r0, sp, #44	@ 0x2c
 80035f2:	f008 f82b 	bl	800b64c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035f6:	002a      	movs	r2, r5
 80035f8:	2100      	movs	r1, #0
 80035fa:	a801      	add	r0, sp, #4
 80035fc:	f008 f826 	bl	800b64c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003600:	2100      	movs	r1, #0
 8003602:	2214      	movs	r2, #20
 8003604:	a805      	add	r0, sp, #20
 8003606:	f008 f821 	bl	800b64c <memset>
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800360a:	2401      	movs	r4, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 800360c:	2312      	movs	r3, #18
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800360e:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8003610:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003612:	940d      	str	r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8003614:	940f      	str	r4, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003616:	950e      	str	r5, [sp, #56]	@ 0x38
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8003618:	9510      	str	r5, [sp, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800361a:	f005 fce9 	bl	8008ff0 <HAL_RCC_OscConfig>
 800361e:	1e01      	subs	r1, r0, #0
 8003620:	d001      	beq.n	8003626 <SystemClock_Config+0x40>
    Error_Handler();
 8003622:	f7ff ffb5 	bl	8003590 <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003626:	2307      	movs	r3, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003628:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800362a:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800362c:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800362e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003630:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003632:	f005 ff01 	bl	8009438 <HAL_RCC_ClockConfig>
 8003636:	2800      	cmp	r0, #0
 8003638:	d1f3      	bne.n	8003622 <SystemClock_Config+0x3c>
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800363a:	9007      	str	r0, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800363c:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800363e:	9405      	str	r4, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003640:	f005 ff8e 	bl	8009560 <HAL_RCCEx_PeriphCLKConfig>
 8003644:	2800      	cmp	r0, #0
 8003646:	d1ec      	bne.n	8003622 <SystemClock_Config+0x3c>
}
 8003648:	b017      	add	sp, #92	@ 0x5c
 800364a:	bd30      	pop	{r4, r5, pc}

0800364c <main>:
{
 800364c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800364e:	b0a3      	sub	sp, #140	@ 0x8c
  HAL_Init();
 8003650:	f004 fe8e 	bl	8008370 <HAL_Init>
  SystemClock_Config();
 8003654:	f7ff ffc7 	bl	80035e6 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003658:	2214      	movs	r2, #20
 800365a:	2100      	movs	r1, #0
 800365c:	a81b      	add	r0, sp, #108	@ 0x6c
 800365e:	f007 fff5 	bl	800b64c <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003662:	2280      	movs	r2, #128	@ 0x80
 8003664:	4de2      	ldr	r5, [pc, #904]	@ (80039f0 <main+0x3a4>)
 8003666:	0312      	lsls	r2, r2, #12
 8003668:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800366a:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800366c:	4313      	orrs	r3, r2
 800366e:	616b      	str	r3, [r5, #20]
 8003670:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8003672:	48e0      	ldr	r0, [pc, #896]	@ (80039f4 <main+0x3a8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003674:	4013      	ands	r3, r2
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003676:	2280      	movs	r2, #128	@ 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003678:	9308      	str	r3, [sp, #32]
 800367a:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800367c:	696b      	ldr	r3, [r5, #20]
 800367e:	03d2      	lsls	r2, r2, #15
 8003680:	4313      	orrs	r3, r2
 8003682:	616b      	str	r3, [r5, #20]
 8003684:	696b      	ldr	r3, [r5, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003686:	2400      	movs	r4, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003688:	4013      	ands	r3, r2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800368a:	2280      	movs	r2, #128	@ 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800368c:	9309      	str	r3, [sp, #36]	@ 0x24
 800368e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003690:	696b      	ldr	r3, [r5, #20]
 8003692:	0292      	lsls	r2, r2, #10
 8003694:	4313      	orrs	r3, r2
 8003696:	616b      	str	r3, [r5, #20]
 8003698:	696b      	ldr	r3, [r5, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800369a:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800369c:	4013      	ands	r3, r2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800369e:	2280      	movs	r2, #128	@ 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80036a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80036a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80036a4:	696b      	ldr	r3, [r5, #20]
 80036a6:	0352      	lsls	r2, r2, #13
 80036a8:	4313      	orrs	r3, r2
 80036aa:	616b      	str	r3, [r5, #20]
 80036ac:	696b      	ldr	r3, [r5, #20]
  GPIO_InitStruct.Pin = CURRENT_BLOCK_ON_Pin;
 80036ae:	2704      	movs	r7, #4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80036b0:	4013      	ands	r3, r2
 80036b2:	930b      	str	r3, [sp, #44]	@ 0x2c
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80036b4:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80036b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80036b8:	f005 fc88 	bl	8008fcc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SLEEP_Pin;
 80036bc:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(SLEEP_GPIO_Port, &GPIO_InitStruct);
 80036be:	48ce      	ldr	r0, [pc, #824]	@ (80039f8 <main+0x3ac>)
  GPIO_InitStruct.Pin = SLEEP_Pin;
 80036c0:	019b      	lsls	r3, r3, #6
  HAL_GPIO_Init(SLEEP_GPIO_Port, &GPIO_InitStruct);
 80036c2:	a91b      	add	r1, sp, #108	@ 0x6c
  GPIO_InitStruct.Pin = SLEEP_Pin;
 80036c4:	931b      	str	r3, [sp, #108]	@ 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036c6:	941c      	str	r4, [sp, #112]	@ 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c8:	941d      	str	r4, [sp, #116]	@ 0x74
  HAL_GPIO_Init(SLEEP_GPIO_Port, &GPIO_InitStruct);
 80036ca:	f005 fbc1 	bl	8008e50 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80036ce:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80036d0:	48c8      	ldr	r0, [pc, #800]	@ (80039f4 <main+0x3a8>)
 80036d2:	a91b      	add	r1, sp, #108	@ 0x6c
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80036d4:	931b      	str	r3, [sp, #108]	@ 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036d6:	961c      	str	r6, [sp, #112]	@ 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d8:	941d      	str	r4, [sp, #116]	@ 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036da:	941e      	str	r4, [sp, #120]	@ 0x78
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80036dc:	f005 fbb8 	bl	8008e50 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80036e0:	2388      	movs	r3, #136	@ 0x88
  HAL_GPIO_Init(CURRENT_BLOCK_ON_GPIO_Port, &GPIO_InitStruct);
 80036e2:	48c6      	ldr	r0, [pc, #792]	@ (80039fc <main+0x3b0>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80036e4:	035b      	lsls	r3, r3, #13
  HAL_GPIO_Init(CURRENT_BLOCK_ON_GPIO_Port, &GPIO_InitStruct);
 80036e6:	a91b      	add	r1, sp, #108	@ 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80036e8:	931c      	str	r3, [sp, #112]	@ 0x70
  GPIO_InitStruct.Pin = CURRENT_BLOCK_ON_Pin;
 80036ea:	971b      	str	r7, [sp, #108]	@ 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ec:	941d      	str	r4, [sp, #116]	@ 0x74
  HAL_GPIO_Init(CURRENT_BLOCK_ON_GPIO_Port, &GPIO_InitStruct);
 80036ee:	f005 fbaf 	bl	8008e50 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80036f2:	0022      	movs	r2, r4
 80036f4:	0021      	movs	r1, r4
 80036f6:	2006      	movs	r0, #6
 80036f8:	f005 f94a 	bl	8008990 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80036fc:	2006      	movs	r0, #6
 80036fe:	f005 f971 	bl	80089e4 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003702:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003704:	0022      	movs	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003706:	4333      	orrs	r3, r6
 8003708:	616b      	str	r3, [r5, #20]
 800370a:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800370c:	0021      	movs	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800370e:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003710:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003712:	9307      	str	r3, [sp, #28]
 8003714:	9b07      	ldr	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003716:	f005 f93b 	bl	8008990 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800371a:	2009      	movs	r0, #9
 800371c:	f005 f962 	bl	80089e4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8003720:	0022      	movs	r2, r4
 8003722:	0021      	movs	r1, r4
 8003724:	200a      	movs	r0, #10
 8003726:	f005 f933 	bl	8008990 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800372a:	200a      	movs	r0, #10
 800372c:	f005 f95a 	bl	80089e4 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8003730:	220c      	movs	r2, #12
 8003732:	0021      	movs	r1, r4
 8003734:	a810      	add	r0, sp, #64	@ 0x40
 8003736:	f007 ff89 	bl	800b64c <memset>
  hadc.Instance = ADC1;
 800373a:	4db1      	ldr	r5, [pc, #708]	@ (8003a00 <main+0x3b4>)
 800373c:	4bb1      	ldr	r3, [pc, #708]	@ (8003a04 <main+0x3b8>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800373e:	0028      	movs	r0, r5
  hadc.Instance = ADC1;
 8003740:	602b      	str	r3, [r5, #0]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003742:	2380      	movs	r3, #128	@ 0x80
 8003744:	025b      	lsls	r3, r3, #9
 8003746:	61ab      	str	r3, [r5, #24]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003748:	23c2      	movs	r3, #194	@ 0xc2
 800374a:	33ff      	adds	r3, #255	@ 0xff
 800374c:	61eb      	str	r3, [r5, #28]
  hadc.Init.DMAContinuousRequests = ENABLE;
 800374e:	1d6b      	adds	r3, r5, #5
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003750:	606c      	str	r4, [r5, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003752:	60ac      	str	r4, [r5, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003754:	60ec      	str	r4, [r5, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003756:	612e      	str	r6, [r5, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003758:	616f      	str	r7, [r5, #20]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800375a:	622c      	str	r4, [r5, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 800375c:	77de      	strb	r6, [r3, #31]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800375e:	62ae      	str	r6, [r5, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003760:	f004 fee2 	bl	8008528 <HAL_ADC_Init>
 8003764:	42a0      	cmp	r0, r4
 8003766:	d001      	beq.n	800376c <main+0x120>
    Error_Handler();
 8003768:	f7ff ff12 	bl	8003590 <Error_Handler>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800376c:	2480      	movs	r4, #128	@ 0x80
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800376e:	2307      	movs	r3, #7
  sConfig.Channel = ADC_CHANNEL_0;
 8003770:	9010      	str	r0, [sp, #64]	@ 0x40
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003772:	0164      	lsls	r4, r4, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003774:	0028      	movs	r0, r5
 8003776:	a910      	add	r1, sp, #64	@ 0x40
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003778:	9411      	str	r4, [sp, #68]	@ 0x44
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800377a:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800377c:	f005 f82c 	bl	80087d8 <HAL_ADC_ConfigChannel>
 8003780:	2800      	cmp	r0, #0
 8003782:	d1f1      	bne.n	8003768 <main+0x11c>
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003784:	0028      	movs	r0, r5
 8003786:	a910      	add	r1, sp, #64	@ 0x40
  sConfig.Channel = ADC_CHANNEL_1;
 8003788:	9610      	str	r6, [sp, #64]	@ 0x40
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800378a:	f005 f825 	bl	80087d8 <HAL_ADC_ConfigChannel>
 800378e:	2800      	cmp	r0, #0
 8003790:	d1ea      	bne.n	8003768 <main+0x11c>
  sConfig.Channel = ADC_CHANNEL_12;
 8003792:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003794:	0028      	movs	r0, r5
 8003796:	a910      	add	r1, sp, #64	@ 0x40
  sConfig.Channel = ADC_CHANNEL_12;
 8003798:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800379a:	f005 f81d 	bl	80087d8 <HAL_ADC_ConfigChannel>
 800379e:	1e05      	subs	r5, r0, #0
 80037a0:	d1e2      	bne.n	8003768 <main+0x11c>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037a2:	0001      	movs	r1, r0
 80037a4:	2210      	movs	r2, #16
 80037a6:	a817      	add	r0, sp, #92	@ 0x5c
 80037a8:	f007 ff50 	bl	800b64c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037ac:	2208      	movs	r2, #8
 80037ae:	0029      	movs	r1, r5
 80037b0:	a80e      	add	r0, sp, #56	@ 0x38
 80037b2:	f007 ff4b 	bl	800b64c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80037b6:	221c      	movs	r2, #28
 80037b8:	0029      	movs	r1, r5
 80037ba:	a81b      	add	r0, sp, #108	@ 0x6c
 80037bc:	f007 ff46 	bl	800b64c <memset>
  htim2.Instance = TIM2;
 80037c0:	2380      	movs	r3, #128	@ 0x80
 80037c2:	4f91      	ldr	r7, [pc, #580]	@ (8003a08 <main+0x3bc>)
 80037c4:	05db      	lsls	r3, r3, #23
 80037c6:	603b      	str	r3, [r7, #0]
  htim2.Init.Period = 63999;
 80037c8:	4b90      	ldr	r3, [pc, #576]	@ (8003a0c <main+0x3c0>)
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80037ca:	0038      	movs	r0, r7
  htim2.Init.Prescaler = 1;
 80037cc:	607e      	str	r6, [r7, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037ce:	60bd      	str	r5, [r7, #8]
  htim2.Init.Period = 63999;
 80037d0:	60fb      	str	r3, [r7, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037d2:	613d      	str	r5, [r7, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037d4:	61bd      	str	r5, [r7, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80037d6:	f006 f93d 	bl	8009a54 <HAL_TIM_Base_Init>
 80037da:	2800      	cmp	r0, #0
 80037dc:	d1c4      	bne.n	8003768 <main+0x11c>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80037de:	0038      	movs	r0, r7
 80037e0:	a917      	add	r1, sp, #92	@ 0x5c
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037e2:	9417      	str	r4, [sp, #92]	@ 0x5c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80037e4:	f006 fa32 	bl	8009c4c <HAL_TIM_ConfigClockSource>
 80037e8:	2800      	cmp	r0, #0
 80037ea:	d1bd      	bne.n	8003768 <main+0x11c>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80037ec:	0038      	movs	r0, r7
 80037ee:	f006 f959 	bl	8009aa4 <HAL_TIM_PWM_Init>
 80037f2:	2800      	cmp	r0, #0
 80037f4:	d1b8      	bne.n	8003768 <main+0x11c>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80037f6:	2280      	movs	r2, #128	@ 0x80
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80037f8:	2320      	movs	r3, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80037fa:	0038      	movs	r0, r7
 80037fc:	a90e      	add	r1, sp, #56	@ 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80037fe:	920f      	str	r2, [sp, #60]	@ 0x3c
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003800:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003802:	f006 fb7b 	bl	8009efc <HAL_TIMEx_MasterConfigSynchronization>
 8003806:	1e02      	subs	r2, r0, #0
 8003808:	d1ae      	bne.n	8003768 <main+0x11c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800380a:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.Pulse = 0;
 800380c:	901c      	str	r0, [sp, #112]	@ 0x70
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800380e:	901d      	str	r0, [sp, #116]	@ 0x74
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003810:	901f      	str	r0, [sp, #124]	@ 0x7c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003812:	a91b      	add	r1, sp, #108	@ 0x6c
 8003814:	0038      	movs	r0, r7
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003816:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003818:	f006 f9ac 	bl	8009b74 <HAL_TIM_PWM_ConfigChannel>
 800381c:	1e05      	subs	r5, r0, #0
 800381e:	d1a3      	bne.n	8003768 <main+0x11c>
  HAL_TIM_MspPostInit(&htim2);
 8003820:	0038      	movs	r0, r7
 8003822:	f000 f9cd 	bl	8003bc0 <HAL_TIM_MspPostInit>
  huart1.Instance = USART1;
 8003826:	4c7a      	ldr	r4, [pc, #488]	@ (8003a10 <main+0x3c4>)
 8003828:	4b7a      	ldr	r3, [pc, #488]	@ (8003a14 <main+0x3c8>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800382a:	0020      	movs	r0, r4
  huart1.Instance = USART1;
 800382c:	6023      	str	r3, [r4, #0]
  huart1.Init.BaudRate = 115200;
 800382e:	23e1      	movs	r3, #225	@ 0xe1
 8003830:	025b      	lsls	r3, r3, #9
 8003832:	6063      	str	r3, [r4, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003834:	230c      	movs	r3, #12
 8003836:	6163      	str	r3, [r4, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8003838:	23c0      	movs	r3, #192	@ 0xc0
 800383a:	009b      	lsls	r3, r3, #2
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800383c:	60a5      	str	r5, [r4, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800383e:	60e5      	str	r5, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003840:	6125      	str	r5, [r4, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8003842:	61a3      	str	r3, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003844:	61e5      	str	r5, [r4, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003846:	6225      	str	r5, [r4, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003848:	6265      	str	r5, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800384a:	f006 ffc9 	bl	800a7e0 <HAL_UART_Init>
 800384e:	2800      	cmp	r0, #0
 8003850:	d18a      	bne.n	8003768 <main+0x11c>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003852:	2210      	movs	r2, #16
 8003854:	2100      	movs	r1, #0
 8003856:	a813      	add	r0, sp, #76	@ 0x4c
 8003858:	f007 fef8 	bl	800b64c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800385c:	2208      	movs	r2, #8
 800385e:	2100      	movs	r1, #0
 8003860:	a80c      	add	r0, sp, #48	@ 0x30
 8003862:	f007 fef3 	bl	800b64c <memset>
  htim3.Instance = TIM3;
 8003866:	4d6c      	ldr	r5, [pc, #432]	@ (8003a18 <main+0x3cc>)
 8003868:	4b6c      	ldr	r3, [pc, #432]	@ (8003a1c <main+0x3d0>)
  htim3.Init.Period = 19999;
 800386a:	4a6d      	ldr	r2, [pc, #436]	@ (8003a20 <main+0x3d4>)
  htim3.Instance = TIM3;
 800386c:	602b      	str	r3, [r5, #0]
  htim3.Init.Prescaler = 199;
 800386e:	23c7      	movs	r3, #199	@ 0xc7
 8003870:	606b      	str	r3, [r5, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003872:	2300      	movs	r3, #0
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003874:	0028      	movs	r0, r5
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003876:	60ab      	str	r3, [r5, #8]
  htim3.Init.Period = 19999;
 8003878:	60ea      	str	r2, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800387a:	612b      	str	r3, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800387c:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800387e:	f006 f8e9 	bl	8009a54 <HAL_TIM_Base_Init>
 8003882:	2800      	cmp	r0, #0
 8003884:	d000      	beq.n	8003888 <main+0x23c>
 8003886:	e76f      	b.n	8003768 <main+0x11c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003888:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800388a:	0028      	movs	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800388c:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800388e:	a913      	add	r1, sp, #76	@ 0x4c
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003890:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003892:	f006 f9db 	bl	8009c4c <HAL_TIM_ConfigClockSource>
 8003896:	2800      	cmp	r0, #0
 8003898:	d000      	beq.n	800389c <main+0x250>
 800389a:	e765      	b.n	8003768 <main+0x11c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800389c:	900c      	str	r0, [sp, #48]	@ 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800389e:	900d      	str	r0, [sp, #52]	@ 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80038a0:	a90c      	add	r1, sp, #48	@ 0x30
 80038a2:	0028      	movs	r0, r5
 80038a4:	f006 fb2a 	bl	8009efc <HAL_TIMEx_MasterConfigSynchronization>
 80038a8:	1e06      	subs	r6, r0, #0
 80038aa:	d000      	beq.n	80038ae <main+0x262>
 80038ac:	e75c      	b.n	8003768 <main+0x11c>
  modbus_set_serial_read(UART_read);
 80038ae:	485d      	ldr	r0, [pc, #372]	@ (8003a24 <main+0x3d8>)
 80038b0:	f003 f8dc 	bl	8006a6c <modbus_set_serial_read>
  modbus_set_serial_write(UART_write);
 80038b4:	485c      	ldr	r0, [pc, #368]	@ (8003a28 <main+0x3dc>)
 80038b6:	f003 f8d3 	bl	8006a60 <modbus_set_serial_write>
  modbus_set_serial_port(NULL);
 80038ba:	0030      	movs	r0, r6
 80038bc:	f003 f8dc 	bl	8006a78 <modbus_set_serial_port>
  modbus_server_create_RTU(1);
 80038c0:	2001      	movs	r0, #1
 80038c2:	f003 f8e3 	bl	8006a8c <modbus_server_create_RTU>
  read_initial_memory();
 80038c6:	f7ff fe5b 	bl	8003580 <read_initial_memory>
  compute_mpc_model();
 80038ca:	f7ff fc65 	bl	8003198 <compute_mpc_model>
  uint16_t* PARAMETERS = modbus_server_get_parameters_array();
 80038ce:	f003 f94f 	bl	8006b70 <modbus_server_get_parameters_array>
  PARAMETERS[48] = operation;
 80038d2:	0003      	movs	r3, r0
 80038d4:	3360      	adds	r3, #96	@ 0x60
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, UART_RX_DATA, UART_RX_DATA_SIZE);
 80038d6:	2233      	movs	r2, #51	@ 0x33
 80038d8:	4954      	ldr	r1, [pc, #336]	@ (8003a2c <main+0x3e0>)
  uint16_t* PARAMETERS = modbus_server_get_parameters_array();
 80038da:	9004      	str	r0, [sp, #16]
  PARAMETERS[48] = operation;
 80038dc:	801e      	strh	r6, [r3, #0]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, UART_RX_DATA, UART_RX_DATA_SIZE);
 80038de:	0020      	movs	r0, r4
 80038e0:	f007 f805 	bl	800a8ee <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80038e4:	2104      	movs	r1, #4
 80038e6:	4b52      	ldr	r3, [pc, #328]	@ (8003a30 <main+0x3e4>)
  HAL_TIM_PeriodElapsedCallback(&htim3);
 80038e8:	0028      	movs	r0, r5
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	6813      	ldr	r3, [r2, #0]
 80038ee:	438b      	bics	r3, r1
 80038f0:	6013      	str	r3, [r2, #0]
  HAL_TIM_PeriodElapsedCallback(&htim3);
 80038f2:	f7ff fdf5 	bl	80034e0 <HAL_TIM_PeriodElapsedCallback>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); /* 50 Hz */
 80038f6:	0031      	movs	r1, r6
 80038f8:	0038      	movs	r0, r7
 80038fa:	f006 faad 	bl	8009e58 <HAL_TIM_PWM_Start>
  HAL_ADC_Stop(&hadc);
 80038fe:	4c40      	ldr	r4, [pc, #256]	@ (8003a00 <main+0x3b4>)
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8003900:	683b      	ldr	r3, [r7, #0]
  HAL_ADC_Stop(&hadc);
 8003902:	0020      	movs	r0, r4
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8003904:	635e      	str	r6, [r3, #52]	@ 0x34
  HAL_ADC_Stop(&hadc);
 8003906:	f004 feb1 	bl	800866c <HAL_ADC_Stop>
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK){
 800390a:	0020      	movs	r0, r4
 800390c:	f004 ffe8 	bl	80088e0 <HAL_ADCEx_Calibration_Start>
 8003910:	2800      	cmp	r0, #0
 8003912:	d000      	beq.n	8003916 <main+0x2ca>
 8003914:	e728      	b.n	8003768 <main+0x11c>
  if (HAL_ADC_Start_DMA(&hadc, (uint32_t*)ADC_DATA, ADC_DATA_SIZE) != HAL_OK){
 8003916:	0020      	movs	r0, r4
 8003918:	2203      	movs	r2, #3
 800391a:	4946      	ldr	r1, [pc, #280]	@ (8003a34 <main+0x3e8>)
 800391c:	f004 fec4 	bl	80086a8 <HAL_ADC_Start_DMA>
 8003920:	1e04      	subs	r4, r0, #0
 8003922:	d000      	beq.n	8003926 <main+0x2da>
 8003924:	e720      	b.n	8003768 <main+0x11c>
  bool integral_action = false;
 8003926:	9002      	str	r0, [sp, #8]
  uint16_t tick = 0, tock = 0;
 8003928:	9003      	str	r0, [sp, #12]
	iteration_time_ms = tick - tock;
 800392a:	9a03      	ldr	r2, [sp, #12]
 800392c:	4b42      	ldr	r3, [pc, #264]	@ (8003a38 <main+0x3ec>)
 800392e:	1a80      	subs	r0, r0, r2
 8003930:	8018      	strh	r0, [r3, #0]
	tock = HAL_GetTick();
 8003932:	f004 fd39 	bl	80083a8 <HAL_GetTick>
 8003936:	b283      	uxth	r3, r0
 8003938:	9303      	str	r3, [sp, #12]
	switch (operation) {
 800393a:	2c00      	cmp	r4, #0
 800393c:	d00e      	beq.n	800395c <main+0x310>
 800393e:	2c01      	cmp	r4, #1
 8003940:	d012      	beq.n	8003968 <main+0x31c>
	operation = PARAMETERS[48];
 8003942:	9d04      	ldr	r5, [sp, #16]
 8003944:	3560      	adds	r5, #96	@ 0x60
 8003946:	782c      	ldrb	r4, [r5, #0]
	switch(operation){
 8003948:	2c02      	cmp	r4, #2
 800394a:	d100      	bne.n	800394e <main+0x302>
 800394c:	e08d      	b.n	8003a6a <main+0x41e>
 800394e:	2c03      	cmp	r4, #3
 8003950:	d100      	bne.n	8003954 <main+0x308>
 8003952:	e08f      	b.n	8003a74 <main+0x428>
	tick = HAL_GetTick();
 8003954:	f004 fd28 	bl	80083a8 <HAL_GetTick>
 8003958:	b280      	uxth	r0, r0
	iteration_time_ms = tick - tock;
 800395a:	e7e6      	b.n	800392a <main+0x2de>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, setpoint_raw);
 800395c:	4b2a      	ldr	r3, [pc, #168]	@ (8003a08 <main+0x3bc>)
 800395e:	4a37      	ldr	r2, [pc, #220]	@ (8003a3c <main+0x3f0>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	8812      	ldrh	r2, [r2, #0]
 8003964:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 8003966:	e7ec      	b.n	8003942 <main+0x2f6>
		switch (mpc_optimize(&mpc, u, r, y, d, integral_action)) {
 8003968:	4b35      	ldr	r3, [pc, #212]	@ (8003a40 <main+0x3f4>)
 800396a:	4d36      	ldr	r5, [pc, #216]	@ (8003a44 <main+0x3f8>)
 800396c:	9305      	str	r3, [sp, #20]
 800396e:	9b02      	ldr	r3, [sp, #8]
 8003970:	4e35      	ldr	r6, [pc, #212]	@ (8003a48 <main+0x3fc>)
 8003972:	9301      	str	r3, [sp, #4]
 8003974:	4b35      	ldr	r3, [pc, #212]	@ (8003a4c <main+0x400>)
 8003976:	0031      	movs	r1, r6
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	4835      	ldr	r0, [pc, #212]	@ (8003a50 <main+0x404>)
 800397c:	002b      	movs	r3, r5
 800397e:	9a05      	ldr	r2, [sp, #20]
 8003980:	f001 fd71 	bl	8005466 <mpc_optimize>
 8003984:	2800      	cmp	r0, #0
 8003986:	d001      	beq.n	800398c <main+0x340>
 8003988:	2801      	cmp	r0, #1
 800398a:	d11c      	bne.n	80039c6 <main+0x37a>
			u[0] = 0.0f; /* MPC could not be solved - Set to zero to prevent explosion */
 800398c:	2300      	movs	r3, #0
 800398e:	6033      	str	r3, [r6, #0]
		if(u[0] > htim2.Init.Period * 0.9f){
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f7fd fcc5 	bl	8001320 <__aeabi_ui2f>
 8003996:	492f      	ldr	r1, [pc, #188]	@ (8003a54 <main+0x408>)
 8003998:	f7fd f95e 	bl	8000c58 <__aeabi_fmul>
 800399c:	4c2a      	ldr	r4, [pc, #168]	@ (8003a48 <main+0x3fc>)
 800399e:	1c06      	adds	r6, r0, #0
 80039a0:	1c01      	adds	r1, r0, #0
 80039a2:	6820      	ldr	r0, [r4, #0]
 80039a4:	f7fc fdbc 	bl	8000520 <__aeabi_fcmpgt>
 80039a8:	2800      	cmp	r0, #0
 80039aa:	d000      	beq.n	80039ae <main+0x362>
			u[0] = htim2.Init.Period * 0.9f;
 80039ac:	6026      	str	r6, [r4, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, u[0]);
 80039ae:	6820      	ldr	r0, [r4, #0]
 80039b0:	f7fc fdca 	bl	8000548 <__aeabi_f2uiz>
 80039b4:	683e      	ldr	r6, [r7, #0]
		mpc_estimate(&mpc, u, y, d);
 80039b6:	002a      	movs	r2, r5
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, u[0]);
 80039b8:	6370      	str	r0, [r6, #52]	@ 0x34
		mpc_estimate(&mpc, u, y, d);
 80039ba:	0021      	movs	r1, r4
 80039bc:	4b23      	ldr	r3, [pc, #140]	@ (8003a4c <main+0x400>)
 80039be:	4824      	ldr	r0, [pc, #144]	@ (8003a50 <main+0x404>)
 80039c0:	f001 fec9 	bl	8005756 <mpc_estimate>
		break;
 80039c4:	e7bd      	b.n	8003942 <main+0x2f6>
			if (fabsf(r[0] - y[0]) <= steady_state_model_error) {
 80039c6:	9b05      	ldr	r3, [sp, #20]
 80039c8:	6829      	ldr	r1, [r5, #0]
 80039ca:	6818      	ldr	r0, [r3, #0]
 80039cc:	f7fd fa82 	bl	8000ed4 <__aeabi_fsub>
 80039d0:	4b21      	ldr	r3, [pc, #132]	@ (8003a58 <main+0x40c>)
 80039d2:	0040      	lsls	r0, r0, #1
 80039d4:	6819      	ldr	r1, [r3, #0]
 80039d6:	0840      	lsrs	r0, r0, #1
 80039d8:	f7fc fd98 	bl	800050c <__aeabi_fcmple>
 80039dc:	1e06      	subs	r6, r0, #0
 80039de:	d03d      	beq.n	8003a5c <main+0x410>
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80039e0:	0022      	movs	r2, r4
 80039e2:	2180      	movs	r1, #128	@ 0x80
 80039e4:	4803      	ldr	r0, [pc, #12]	@ (80039f4 <main+0x3a8>)
 80039e6:	f005 faf1 	bl	8008fcc <HAL_GPIO_WritePin>
				integral_action = true;
 80039ea:	9402      	str	r4, [sp, #8]
 80039ec:	e7d0      	b.n	8003990 <main+0x344>
 80039ee:	46c0      	nop			@ (mov r8, r8)
 80039f0:	40021000 	.word	0x40021000
 80039f4:	48001400 	.word	0x48001400
 80039f8:	48000800 	.word	0x48000800
 80039fc:	48000c00 	.word	0x48000c00
 8003a00:	20000480 	.word	0x20000480
 8003a04:	40012400 	.word	0x40012400
 8003a08:	200003f4 	.word	0x200003f4
 8003a0c:	0000f9ff 	.word	0x0000f9ff
 8003a10:	20000324 	.word	0x20000324
 8003a14:	40013800 	.word	0x40013800
 8003a18:	200003ac 	.word	0x200003ac
 8003a1c:	40000400 	.word	0x40000400
 8003a20:	00004e1f 	.word	0x00004e1f
 8003a24:	08003159 	.word	0x08003159
 8003a28:	0800317d 	.word	0x0800317d
 8003a2c:	20000203 	.word	0x20000203
 8003a30:	200002e0 	.word	0x200002e0
 8003a34:	200001fc 	.word	0x200001fc
 8003a38:	2000023e 	.word	0x2000023e
 8003a3c:	2000023c 	.word	0x2000023c
 8003a40:	20000244 	.word	0x20000244
 8003a44:	2000024c 	.word	0x2000024c
 8003a48:	20000248 	.word	0x20000248
 8003a4c:	0800d644 	.word	0x0800d644
 8003a50:	20000250 	.word	0x20000250
 8003a54:	3f666666 	.word	0x3f666666
 8003a58:	20000240 	.word	0x20000240
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8003a5c:	0002      	movs	r2, r0
 8003a5e:	2180      	movs	r1, #128	@ 0x80
 8003a60:	4806      	ldr	r0, [pc, #24]	@ (8003a7c <main+0x430>)
 8003a62:	f005 fab3 	bl	8008fcc <HAL_GPIO_WritePin>
				integral_action = false;
 8003a66:	9602      	str	r6, [sp, #8]
 8003a68:	e792      	b.n	8003990 <main+0x344>
		compute_mpc_model();
 8003a6a:	f7ff fb95 	bl	8003198 <compute_mpc_model>
		PARAMETERS[48] = FEEDBACK_CONTROL;
 8003a6e:	2401      	movs	r4, #1
 8003a70:	802c      	strh	r4, [r5, #0]
 8003a72:	e76f      	b.n	8003954 <main+0x308>
		write_initial_memory();
 8003a74:	f7ff fda6 	bl	80035c4 <write_initial_memory>
		break;
 8003a78:	e7f9      	b.n	8003a6e <main+0x422>
 8003a7a:	46c0      	nop			@ (mov r8, r8)
 8003a7c:	48001400 	.word	0x48001400

08003a80 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a80:	2101      	movs	r1, #1
 8003a82:	4b0a      	ldr	r3, [pc, #40]	@ (8003aac <HAL_MspInit+0x2c>)
{
 8003a84:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a86:	699a      	ldr	r2, [r3, #24]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	619a      	str	r2, [r3, #24]
 8003a8c:	699a      	ldr	r2, [r3, #24]
 8003a8e:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a90:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a92:	9200      	str	r2, [sp, #0]
 8003a94:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a96:	69da      	ldr	r2, [r3, #28]
 8003a98:	0549      	lsls	r1, r1, #21
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	61da      	str	r2, [r3, #28]
 8003a9e:	69db      	ldr	r3, [r3, #28]
 8003aa0:	400b      	ands	r3, r1
 8003aa2:	9301      	str	r3, [sp, #4]
 8003aa4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003aa6:	b002      	add	sp, #8
 8003aa8:	4770      	bx	lr
 8003aaa:	46c0      	nop			@ (mov r8, r8)
 8003aac:	40021000 	.word	0x40021000

08003ab0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003ab0:	b570      	push	{r4, r5, r6, lr}
 8003ab2:	0005      	movs	r5, r0
 8003ab4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ab6:	2214      	movs	r2, #20
 8003ab8:	2100      	movs	r1, #0
 8003aba:	a803      	add	r0, sp, #12
 8003abc:	f007 fdc6 	bl	800b64c <memset>
  if(hadc->Instance==ADC1)
 8003ac0:	4b25      	ldr	r3, [pc, #148]	@ (8003b58 <HAL_ADC_MspInit+0xa8>)
 8003ac2:	682a      	ldr	r2, [r5, #0]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d144      	bne.n	8003b52 <HAL_ADC_MspInit+0xa2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003ac8:	2180      	movs	r1, #128	@ 0x80
 8003aca:	4b24      	ldr	r3, [pc, #144]	@ (8003b5c <HAL_ADC_MspInit+0xac>)
 8003acc:	0089      	lsls	r1, r1, #2
 8003ace:	699a      	ldr	r2, [r3, #24]
    PC2     ------> ADC_IN12
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = POTENTIOMETER_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ad0:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	619a      	str	r2, [r3, #24]
 8003ad6:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(POTENTIOMETER_GPIO_Port, &GPIO_InitStruct);
 8003ad8:	4821      	ldr	r0, [pc, #132]	@ (8003b60 <HAL_ADC_MspInit+0xb0>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003ada:	400a      	ands	r2, r1
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003adc:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003ade:	9200      	str	r2, [sp, #0]
 8003ae0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ae2:	695a      	ldr	r2, [r3, #20]
 8003ae4:	0309      	lsls	r1, r1, #12
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	615a      	str	r2, [r3, #20]
 8003aea:	695a      	ldr	r2, [r3, #20]

    GPIO_InitStruct.Pin = TEMPERATURE_Pin|CURRENT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aec:	2600      	movs	r6, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003aee:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003af0:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003af2:	9201      	str	r2, [sp, #4]
 8003af4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003af6:	695a      	ldr	r2, [r3, #20]
 8003af8:	0289      	lsls	r1, r1, #10
 8003afa:	430a      	orrs	r2, r1
 8003afc:	615a      	str	r2, [r3, #20]
 8003afe:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b00:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b02:	400b      	ands	r3, r1
 8003b04:	9302      	str	r3, [sp, #8]
 8003b06:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = POTENTIOMETER_Pin;
 8003b08:	2304      	movs	r3, #4
    HAL_GPIO_Init(POTENTIOMETER_GPIO_Port, &GPIO_InitStruct);
 8003b0a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = POTENTIOMETER_Pin;
 8003b0c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(POTENTIOMETER_GPIO_Port, &GPIO_InitStruct);
 8003b0e:	f005 f99f 	bl	8008e50 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b12:	2090      	movs	r0, #144	@ 0x90
 8003b14:	a903      	add	r1, sp, #12
 8003b16:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = TEMPERATURE_Pin|CURRENT_Pin;
 8003b18:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b1a:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b1c:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b1e:	f005 f997 	bl	8008e50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8003b22:	4c10      	ldr	r4, [pc, #64]	@ (8003b64 <HAL_ADC_MspInit+0xb4>)
 8003b24:	4b10      	ldr	r3, [pc, #64]	@ (8003b68 <HAL_ADC_MspInit+0xb8>)
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc.Init.Mode = DMA_CIRCULAR;
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8003b26:	0020      	movs	r0, r4
    hdma_adc.Instance = DMA1_Channel1;
 8003b28:	6023      	str	r3, [r4, #0]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8003b2a:	2380      	movs	r3, #128	@ 0x80
 8003b2c:	60e3      	str	r3, [r4, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b2e:	18db      	adds	r3, r3, r3
 8003b30:	6123      	str	r3, [r4, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003b32:	2380      	movs	r3, #128	@ 0x80
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	6163      	str	r3, [r4, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8003b38:	2320      	movs	r3, #32
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b3a:	6066      	str	r6, [r4, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b3c:	60a6      	str	r6, [r4, #8]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8003b3e:	61a3      	str	r3, [r4, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8003b40:	61e6      	str	r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8003b42:	f004 ff75 	bl	8008a30 <HAL_DMA_Init>
 8003b46:	42b0      	cmp	r0, r6
 8003b48:	d001      	beq.n	8003b4e <HAL_ADC_MspInit+0x9e>
    {
      Error_Handler();
 8003b4a:	f7ff fd21 	bl	8003590 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8003b4e:	632c      	str	r4, [r5, #48]	@ 0x30
 8003b50:	6265      	str	r5, [r4, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003b52:	b008      	add	sp, #32
 8003b54:	bd70      	pop	{r4, r5, r6, pc}
 8003b56:	46c0      	nop			@ (mov r8, r8)
 8003b58:	40012400 	.word	0x40012400
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	48000800 	.word	0x48000800
 8003b64:	2000043c 	.word	0x2000043c
 8003b68:	40020008 	.word	0x40020008

08003b6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b6c:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 8003b6e:	2280      	movs	r2, #128	@ 0x80
 8003b70:	6803      	ldr	r3, [r0, #0]
 8003b72:	05d2      	lsls	r2, r2, #23
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d109      	bne.n	8003b8c <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b78:	2101      	movs	r1, #1
 8003b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8003bb8 <HAL_TIM_Base_MspInit+0x4c>)
 8003b7c:	69da      	ldr	r2, [r3, #28]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	61da      	str	r2, [r3, #28]
 8003b82:	69db      	ldr	r3, [r3, #28]
 8003b84:	400b      	ands	r3, r1
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003b8a:	bd07      	pop	{r0, r1, r2, pc}
  else if(htim_base->Instance==TIM3)
 8003b8c:	4a0b      	ldr	r2, [pc, #44]	@ (8003bbc <HAL_TIM_Base_MspInit+0x50>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d1fb      	bne.n	8003b8a <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b92:	2102      	movs	r1, #2
 8003b94:	4b08      	ldr	r3, [pc, #32]	@ (8003bb8 <HAL_TIM_Base_MspInit+0x4c>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003b96:	2010      	movs	r0, #16
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b98:	69da      	ldr	r2, [r3, #28]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003b9e:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	400b      	ands	r3, r1
 8003ba4:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003ba6:	0011      	movs	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003ba8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003baa:	f004 fef1 	bl	8008990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003bae:	2010      	movs	r0, #16
 8003bb0:	f004 ff18 	bl	80089e4 <HAL_NVIC_EnableIRQ>
}
 8003bb4:	e7e9      	b.n	8003b8a <HAL_TIM_Base_MspInit+0x1e>
 8003bb6:	46c0      	nop			@ (mov r8, r8)
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	40000400 	.word	0x40000400

08003bc0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003bc0:	b510      	push	{r4, lr}
 8003bc2:	0004      	movs	r4, r0
 8003bc4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bc6:	2214      	movs	r2, #20
 8003bc8:	2100      	movs	r1, #0
 8003bca:	a801      	add	r0, sp, #4
 8003bcc:	f007 fd3e 	bl	800b64c <memset>
  if(htim->Instance==TIM2)
 8003bd0:	2380      	movs	r3, #128	@ 0x80
 8003bd2:	6822      	ldr	r2, [r4, #0]
 8003bd4:	05db      	lsls	r3, r3, #23
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d117      	bne.n	8003c0a <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bda:	2180      	movs	r1, #128	@ 0x80
 8003bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8003c10 <HAL_TIM_MspPostInit+0x50>)
 8003bde:	0289      	lsls	r1, r1, #10
 8003be0:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = PWM_HEATER_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
    HAL_GPIO_Init(PWM_HEATER_GPIO_Port, &GPIO_InitStruct);
 8003be2:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003be4:	430a      	orrs	r2, r1
 8003be6:	615a      	str	r2, [r3, #20]
 8003be8:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003bea:	2203      	movs	r2, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bec:	400b      	ands	r3, r1
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = PWM_HEATER_Pin;
 8003bf2:	2380      	movs	r3, #128	@ 0x80
 8003bf4:	021b      	lsls	r3, r3, #8
 8003bf6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf8:	2302      	movs	r3, #2
    HAL_GPIO_Init(PWM_HEATER_GPIO_Port, &GPIO_InitStruct);
 8003bfa:	a901      	add	r1, sp, #4
 8003bfc:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bfe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003c00:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c02:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8003c04:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(PWM_HEATER_GPIO_Port, &GPIO_InitStruct);
 8003c06:	f005 f923 	bl	8008e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003c0a:	b006      	add	sp, #24
 8003c0c:	bd10      	pop	{r4, pc}
 8003c0e:	46c0      	nop			@ (mov r8, r8)
 8003c10:	40021000 	.word	0x40021000

08003c14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c14:	b530      	push	{r4, r5, lr}
 8003c16:	0005      	movs	r5, r0
 8003c18:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c1a:	2214      	movs	r2, #20
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	a803      	add	r0, sp, #12
 8003c20:	f007 fd14 	bl	800b64c <memset>
  if(huart->Instance==USART1)
 8003c24:	4b21      	ldr	r3, [pc, #132]	@ (8003cac <HAL_UART_MspInit+0x98>)
 8003c26:	682a      	ldr	r2, [r5, #0]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d13d      	bne.n	8003ca8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c2c:	2180      	movs	r1, #128	@ 0x80
 8003c2e:	4b20      	ldr	r3, [pc, #128]	@ (8003cb0 <HAL_UART_MspInit+0x9c>)
 8003c30:	01c9      	lsls	r1, r1, #7
 8003c32:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c34:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c36:	430a      	orrs	r2, r1
 8003c38:	619a      	str	r2, [r3, #24]
 8003c3a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c3c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c3e:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c40:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c42:	9201      	str	r2, [sp, #4]
 8003c44:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c46:	695a      	ldr	r2, [r3, #20]
 8003c48:	0289      	lsls	r1, r1, #10
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	615a      	str	r2, [r3, #20]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	400b      	ands	r3, r1
 8003c52:	9302      	str	r3, [sp, #8]
 8003c54:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003c56:	23f0      	movs	r3, #240	@ 0xf0
 8003c58:	015b      	lsls	r3, r3, #5
 8003c5a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c60:	3301      	adds	r3, #1
 8003c62:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c64:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003c66:	3b02      	subs	r3, #2
 8003c68:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c6a:	f005 f8f1 	bl	8008e50 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8003c6e:	4c11      	ldr	r4, [pc, #68]	@ (8003cb4 <HAL_UART_MspInit+0xa0>)
 8003c70:	4b11      	ldr	r3, [pc, #68]	@ (8003cb8 <HAL_UART_MspInit+0xa4>)
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c72:	2280      	movs	r2, #128	@ 0x80
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8003c74:	6023      	str	r3, [r4, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c76:	2300      	movs	r3, #0
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003c78:	0020      	movs	r0, r4
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c7a:	6063      	str	r3, [r4, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c7c:	60a3      	str	r3, [r4, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c7e:	60e2      	str	r2, [r4, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c80:	6123      	str	r3, [r4, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c82:	6163      	str	r3, [r4, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003c84:	61a3      	str	r3, [r4, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003c86:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003c88:	f004 fed2 	bl	8008a30 <HAL_DMA_Init>
 8003c8c:	2800      	cmp	r0, #0
 8003c8e:	d001      	beq.n	8003c94 <HAL_UART_MspInit+0x80>
    {
      Error_Handler();
 8003c90:	f7ff fc7e 	bl	8003590 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003c94:	2200      	movs	r2, #0
 8003c96:	201b      	movs	r0, #27
 8003c98:	0011      	movs	r1, r2
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003c9a:	676c      	str	r4, [r5, #116]	@ 0x74
 8003c9c:	6265      	str	r5, [r4, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003c9e:	f004 fe77 	bl	8008990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003ca2:	201b      	movs	r0, #27
 8003ca4:	f004 fe9e 	bl	80089e4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8003ca8:	b009      	add	sp, #36	@ 0x24
 8003caa:	bd30      	pop	{r4, r5, pc}
 8003cac:	40013800 	.word	0x40013800
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	200002e0 	.word	0x200002e0
 8003cb8:	40020030 	.word	0x40020030

08003cbc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003cbc:	e7fe      	b.n	8003cbc <NMI_Handler>

08003cbe <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cbe:	e7fe      	b.n	8003cbe <HardFault_Handler>

08003cc0 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003cc0:	4770      	bx	lr

08003cc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8003cc2:	4770      	bx	lr

08003cc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003cc4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003cc6:	f004 fb63 	bl	8008390 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003cca:	bd10      	pop	{r4, pc}

08003ccc <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8003ccc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CURRENT_BLOCK_ON_Pin);
 8003cce:	2004      	movs	r0, #4
 8003cd0:	f005 f982 	bl	8008fd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8003cd4:	bd10      	pop	{r4, pc}
	...

08003cd8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003cd8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8003cda:	4802      	ldr	r0, [pc, #8]	@ (8003ce4 <DMA1_Channel1_IRQHandler+0xc>)
 8003cdc:	f004 ff55 	bl	8008b8a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003ce0:	bd10      	pop	{r4, pc}
 8003ce2:	46c0      	nop			@ (mov r8, r8)
 8003ce4:	2000043c 	.word	0x2000043c

08003ce8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8003ce8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003cea:	4802      	ldr	r0, [pc, #8]	@ (8003cf4 <DMA1_Channel2_3_IRQHandler+0xc>)
 8003cec:	f004 ff4d 	bl	8008b8a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003cf0:	bd10      	pop	{r4, pc}
 8003cf2:	46c0      	nop			@ (mov r8, r8)
 8003cf4:	200002e0 	.word	0x200002e0

08003cf8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003cf8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003cfa:	4802      	ldr	r0, [pc, #8]	@ (8003d04 <TIM3_IRQHandler+0xc>)
 8003cfc:	f005 fdb7 	bl	800986e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003d00:	bd10      	pop	{r4, pc}
 8003d02:	46c0      	nop			@ (mov r8, r8)
 8003d04:	200003ac 	.word	0x200003ac

08003d08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003d08:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003d0a:	4802      	ldr	r0, [pc, #8]	@ (8003d14 <USART1_IRQHandler+0xc>)
 8003d0c:	f006 f99c 	bl	800a048 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003d10:	bd10      	pop	{r4, pc}
 8003d12:	46c0      	nop			@ (mov r8, r8)
 8003d14:	20000324 	.word	0x20000324

08003d18 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8003d18:	2001      	movs	r0, #1
 8003d1a:	4770      	bx	lr

08003d1c <_kill>:

int _kill(int pid, int sig)
{
 8003d1c:	b510      	push	{r4, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003d1e:	f007 fd15 	bl	800b74c <__errno>
 8003d22:	2316      	movs	r3, #22
 8003d24:	6003      	str	r3, [r0, #0]
  return -1;
 8003d26:	2001      	movs	r0, #1
}
 8003d28:	4240      	negs	r0, r0
 8003d2a:	bd10      	pop	{r4, pc}

08003d2c <_exit>:

void _exit (int status)
{
 8003d2c:	b510      	push	{r4, lr}
  errno = EINVAL;
 8003d2e:	f007 fd0d 	bl	800b74c <__errno>
 8003d32:	2316      	movs	r3, #22
 8003d34:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8003d36:	e7fe      	b.n	8003d36 <_exit+0xa>

08003d38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d38:	b570      	push	{r4, r5, r6, lr}
 8003d3a:	000e      	movs	r6, r1
 8003d3c:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d3e:	2500      	movs	r5, #0
 8003d40:	42a5      	cmp	r5, r4
 8003d42:	db01      	blt.n	8003d48 <_read+0x10>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8003d44:	0020      	movs	r0, r4
 8003d46:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8003d48:	e000      	b.n	8003d4c <_read+0x14>
 8003d4a:	bf00      	nop
 8003d4c:	5570      	strb	r0, [r6, r5]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d4e:	3501      	adds	r5, #1
 8003d50:	e7f6      	b.n	8003d40 <_read+0x8>

08003d52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d52:	b570      	push	{r4, r5, r6, lr}
 8003d54:	000e      	movs	r6, r1
 8003d56:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d58:	2500      	movs	r5, #0
 8003d5a:	42a5      	cmp	r5, r4
 8003d5c:	db01      	blt.n	8003d62 <_write+0x10>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8003d5e:	0020      	movs	r0, r4
 8003d60:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8003d62:	5d70      	ldrb	r0, [r6, r5]
 8003d64:	e000      	b.n	8003d68 <_write+0x16>
 8003d66:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d68:	3501      	adds	r5, #1
 8003d6a:	e7f6      	b.n	8003d5a <_write+0x8>

08003d6c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 8003d6c:	2001      	movs	r0, #1
}
 8003d6e:	4240      	negs	r0, r0
 8003d70:	4770      	bx	lr

08003d72 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8003d72:	2380      	movs	r3, #128	@ 0x80
 8003d74:	019b      	lsls	r3, r3, #6
  return 0;
}
 8003d76:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8003d78:	604b      	str	r3, [r1, #4]
}
 8003d7a:	4770      	bx	lr

08003d7c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8003d7c:	2001      	movs	r0, #1
 8003d7e:	4770      	bx	lr

08003d80 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8003d80:	2000      	movs	r0, #0
 8003d82:	4770      	bx	lr

08003d84 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d84:	490b      	ldr	r1, [pc, #44]	@ (8003db4 <_sbrk+0x30>)
 8003d86:	4a0c      	ldr	r2, [pc, #48]	@ (8003db8 <_sbrk+0x34>)
{
 8003d88:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d8a:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d8c:	490b      	ldr	r1, [pc, #44]	@ (8003dbc <_sbrk+0x38>)
{
 8003d8e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8003d90:	6808      	ldr	r0, [r1, #0]
 8003d92:	2800      	cmp	r0, #0
 8003d94:	d101      	bne.n	8003d9a <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8003d96:	480a      	ldr	r0, [pc, #40]	@ (8003dc0 <_sbrk+0x3c>)
 8003d98:	6008      	str	r0, [r1, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d9a:	6808      	ldr	r0, [r1, #0]
 8003d9c:	18c3      	adds	r3, r0, r3
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d906      	bls.n	8003db0 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8003da2:	f007 fcd3 	bl	800b74c <__errno>
 8003da6:	230c      	movs	r3, #12
 8003da8:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8003daa:	2001      	movs	r0, #1
 8003dac:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8003dae:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8003db0:	600b      	str	r3, [r1, #0]
  return (void *)prev_heap_end;
 8003db2:	e7fc      	b.n	8003dae <_sbrk+0x2a>
 8003db4:	00000400 	.word	0x00000400
 8003db8:	20002000 	.word	0x20002000
 8003dbc:	200004c0 	.word	0x200004c0
 8003dc0:	20000778 	.word	0x20000778

08003dc4 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003dc4:	4770      	bx	lr

08003dc6 <c2d>:
 * Turn A and B into discrete form
 * 
 * A[row_a*row_a]
 * B[row_a*column_b]
 */
void c2d(float A[], float B[], const size_t row_a, const size_t column_b, const float sampleTime) {
 8003dc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dc8:	b08d      	sub	sp, #52	@ 0x34
 8003dca:	930a      	str	r3, [sp, #40]	@ 0x28
 8003dcc:	9203      	str	r2, [sp, #12]
	size_t bytes_of_M = (row_a + column_b) * (row_a + column_b) * sizeof(float);
 8003dce:	0013      	movs	r3, r2
 8003dd0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
void c2d(float A[], float B[], const size_t row_a, const size_t column_b, const float sampleTime) {
 8003dd2:	900b      	str	r0, [sp, #44]	@ 0x2c
	size_t bytes_of_M = (row_a + column_b) * (row_a + column_b) * sizeof(float);
 8003dd4:	4694      	mov	ip, r2
 8003dd6:	4463      	add	r3, ip
 8003dd8:	001c      	movs	r4, r3
 8003dda:	435c      	muls	r4, r3
 8003ddc:	00a4      	lsls	r4, r4, #2
	float *M = (float*)malloc(bytes_of_M);
 8003dde:	0020      	movs	r0, r4
	size_t bytes_of_M = (row_a + column_b) * (row_a + column_b) * sizeof(float);
 8003de0:	9301      	str	r3, [sp, #4]
void c2d(float A[], float B[], const size_t row_a, const size_t column_b, const float sampleTime) {
 8003de2:	9109      	str	r1, [sp, #36]	@ 0x24
	float *M = (float*)malloc(bytes_of_M);
 8003de4:	f006 fdec 	bl	800a9c0 <malloc>
	memset(M, 0, bytes_of_M);
 8003de8:	0022      	movs	r2, r4
	size_t i, j;
	/* Create M = [A B; zeros(RDIM, ADIM) zeros(RDIM, RDIM)] */
	for (i = 0; i < row_a; i++) {
 8003dea:	2400      	movs	r4, #0
	memset(M, 0, bytes_of_M);
 8003dec:	2100      	movs	r1, #0
	float *M = (float*)malloc(bytes_of_M);
 8003dee:	9002      	str	r0, [sp, #8]
	memset(M, 0, bytes_of_M);
 8003df0:	f007 fc2c 	bl	800b64c <memset>
	for (i = 0; i < row_a; i++) {
 8003df4:	9b03      	ldr	r3, [sp, #12]
 8003df6:	9408      	str	r4, [sp, #32]
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	9304      	str	r3, [sp, #16]
 8003dfc:	9b03      	ldr	r3, [sp, #12]
 8003dfe:	9405      	str	r4, [sp, #20]
 8003e00:	9307      	str	r3, [sp, #28]
 8003e02:	9406      	str	r4, [sp, #24]
 8003e04:	9b06      	ldr	r3, [sp, #24]
 8003e06:	9a03      	ldr	r2, [sp, #12]
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d115      	bne.n	8003e38 <c2d+0x72>
		for (j = 0; j < column_b; j++) {
			M[i * (row_a + column_b) + j + row_a] = B[i * column_b + j] * sampleTime;
		}
	}
	expm(M, row_a + column_b);
	for (i = 0; i < row_a; i++) {
 8003e0c:	2700      	movs	r7, #0
	expm(M, row_a + column_b);
 8003e0e:	9901      	ldr	r1, [sp, #4]
 8003e10:	9802      	ldr	r0, [sp, #8]
 8003e12:	f001 ffbf 	bl	8005d94 <expm>
	for (i = 0; i < row_a; i++) {
 8003e16:	9b01      	ldr	r3, [sp, #4]
 8003e18:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	9305      	str	r3, [sp, #20]
 8003e1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003e20:	9e02      	ldr	r6, [sp, #8]
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8003e26:	9301      	str	r3, [sp, #4]
 8003e28:	9b03      	ldr	r3, [sp, #12]
 8003e2a:	429f      	cmp	r7, r3
 8003e2c:	d13d      	bne.n	8003eaa <c2d+0xe4>
			B[i * column_b + j] = M[i * (row_a + column_b) + j + row_a];
		}
	}

	/* Free */
	free(M);
 8003e2e:	9802      	ldr	r0, [sp, #8]
 8003e30:	f006 fdd0 	bl	800a9d4 <free>
}
 8003e34:	b00d      	add	sp, #52	@ 0x34
 8003e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < row_a; i++) {
 8003e38:	2500      	movs	r5, #0
 8003e3a:	9b08      	ldr	r3, [sp, #32]
 8003e3c:	00a6      	lsls	r6, r4, #2
 8003e3e:	009f      	lsls	r7, r3, #2
 8003e40:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003e42:	19df      	adds	r7, r3, r7
 8003e44:	9b02      	ldr	r3, [sp, #8]
 8003e46:	18f6      	adds	r6, r6, r3
			M[i * (row_a + column_b) + j] = A[i * row_a + j] * sampleTime;
 8003e48:	5978      	ldr	r0, [r7, r5]
 8003e4a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8003e4c:	f7fc ff04 	bl	8000c58 <__aeabi_fmul>
		for (j = 0; j < row_a; j++) {
 8003e50:	9b04      	ldr	r3, [sp, #16]
			M[i * (row_a + column_b) + j] = A[i * row_a + j] * sampleTime;
 8003e52:	5170      	str	r0, [r6, r5]
		for (j = 0; j < row_a; j++) {
 8003e54:	3504      	adds	r5, #4
 8003e56:	429d      	cmp	r5, r3
 8003e58:	d1f6      	bne.n	8003e48 <c2d+0x82>
 8003e5a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003e5c:	9b05      	ldr	r3, [sp, #20]
 8003e5e:	4694      	mov	ip, r2
 8003e60:	009d      	lsls	r5, r3, #2
 8003e62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e64:	18ed      	adds	r5, r5, r3
 8003e66:	9b07      	ldr	r3, [sp, #28]
 8003e68:	009e      	lsls	r6, r3, #2
 8003e6a:	9b02      	ldr	r3, [sp, #8]
 8003e6c:	199e      	adds	r6, r3, r6
 8003e6e:	9b05      	ldr	r3, [sp, #20]
 8003e70:	4463      	add	r3, ip
 8003e72:	009f      	lsls	r7, r3, #2
 8003e74:	9305      	str	r3, [sp, #20]
 8003e76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e78:	18ff      	adds	r7, r7, r3
		for (j = 0; j < column_b; j++) {
 8003e7a:	42bd      	cmp	r5, r7
 8003e7c:	d10f      	bne.n	8003e9e <c2d+0xd8>
	for (i = 0; i < row_a; i++) {
 8003e7e:	9a01      	ldr	r2, [sp, #4]
 8003e80:	9b06      	ldr	r3, [sp, #24]
 8003e82:	4694      	mov	ip, r2
 8003e84:	3301      	adds	r3, #1
 8003e86:	9a03      	ldr	r2, [sp, #12]
 8003e88:	9306      	str	r3, [sp, #24]
 8003e8a:	9b07      	ldr	r3, [sp, #28]
 8003e8c:	4463      	add	r3, ip
 8003e8e:	4694      	mov	ip, r2
 8003e90:	9307      	str	r3, [sp, #28]
 8003e92:	9b08      	ldr	r3, [sp, #32]
 8003e94:	4463      	add	r3, ip
 8003e96:	9308      	str	r3, [sp, #32]
 8003e98:	9b01      	ldr	r3, [sp, #4]
 8003e9a:	18e4      	adds	r4, r4, r3
 8003e9c:	e7b2      	b.n	8003e04 <c2d+0x3e>
			M[i * (row_a + column_b) + j + row_a] = B[i * column_b + j] * sampleTime;
 8003e9e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8003ea0:	cd01      	ldmia	r5!, {r0}
 8003ea2:	f7fc fed9 	bl	8000c58 <__aeabi_fmul>
 8003ea6:	c601      	stmia	r6!, {r0}
		for (j = 0; j < column_b; j++) {
 8003ea8:	e7e7      	b.n	8003e7a <c2d+0xb4>
			A[i * row_a + j] = M[i * (row_a + column_b) + j];
 8003eaa:	0031      	movs	r1, r6
 8003eac:	0028      	movs	r0, r5
 8003eae:	9a04      	ldr	r2, [sp, #16]
 8003eb0:	f007 fc8c 	bl	800b7cc <memcpy>
			B[i * column_b + j] = M[i * (row_a + column_b) + j + row_a];
 8003eb4:	9b04      	ldr	r3, [sp, #16]
 8003eb6:	0020      	movs	r0, r4
 8003eb8:	18f1      	adds	r1, r6, r3
 8003eba:	9a01      	ldr	r2, [sp, #4]
 8003ebc:	f007 fc86 	bl	800b7cc <memcpy>
	for (i = 0; i < row_a; i++) {
 8003ec0:	9b04      	ldr	r3, [sp, #16]
 8003ec2:	3701      	adds	r7, #1
 8003ec4:	18ed      	adds	r5, r5, r3
 8003ec6:	9b05      	ldr	r3, [sp, #20]
 8003ec8:	18f6      	adds	r6, r6, r3
 8003eca:	9b01      	ldr	r3, [sp, #4]
 8003ecc:	18e4      	adds	r4, r4, r3
 8003ece:	e7ab      	b.n	8003e28 <c2d+0x62>

08003ed0 <cab>:
 * Gamma[(N*row_c)*(N*column_b)]
 * Phi[(N*row_c)*row_a]
 * B[row_a*columb_b]
 * C[row_c*row_a]
 */
void cab(float Gamma[], const float Phi[], const float B[], const float C[], const size_t row_a, const size_t row_c, const size_t column_b, const size_t N) {
 8003ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ed2:	b091      	sub	sp, #68	@ 0x44
 8003ed4:	001e      	movs	r6, r3
 8003ed6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8003ed8:	900a      	str	r0, [sp, #40]	@ 0x28
	/* Decleration */
	size_t i, j;

	/* First create the initial C*A^0*B == C*I*B == C*B */
	float* CB = (float*)malloc(row_c * column_b * sizeof(float));
 8003eda:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8003edc:	009d      	lsls	r5, r3, #2
 8003ede:	4368      	muls	r0, r5
void cab(float Gamma[], const float Phi[], const float B[], const float C[], const size_t row_a, const size_t row_c, const size_t column_b, const size_t N) {
 8003ee0:	000f      	movs	r7, r1
 8003ee2:	0014      	movs	r4, r2
	float* CB = (float*)malloc(row_c * column_b * sizeof(float));
 8003ee4:	f006 fd6c 	bl	800a9c0 <malloc>
	mul(C, B, CB, row_c, row_a, column_b);
 8003ee8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8003eea:	0002      	movs	r2, r0
 8003eec:	9301      	str	r3, [sp, #4]
 8003eee:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8003ef0:	0021      	movs	r1, r4
	float* CB = (float*)malloc(row_c * column_b * sizeof(float));
 8003ef2:	9003      	str	r0, [sp, #12]
	mul(C, B, CB, row_c, row_a, column_b);
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	0030      	movs	r0, r6
 8003ef8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8003efa:	f002 f973 	bl	80061e4 <mul>

	/* Take the transpose of CB so it will have dimension column_b*row_c instead */
	tran(CB, row_c, column_b);
 8003efe:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8003f00:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8003f02:	9803      	ldr	r0, [sp, #12]
 8003f04:	f002 fa6a 	bl	80063dc <tran>

	/* Create the CAB matrix from Phi*B */
	float* PhiB = (float*)malloc(N * row_c * column_b * sizeof(float));
 8003f08:	0028      	movs	r0, r5
 8003f0a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8003f0c:	9e19      	ldr	r6, [sp, #100]	@ 0x64
	 *                    0  CB Phi;
	 *            		  0   0  CB Phi;
	 *            		  0   0   0  CB Phi] from left to right
	 */
	memset(Gamma, 0, N * row_c * N * column_b * sizeof(float));
	for (i = 0; i < N; i++) {
 8003f0e:	2500      	movs	r5, #0
	float* PhiB = (float*)malloc(N * row_c * column_b * sizeof(float));
 8003f10:	435e      	muls	r6, r3
 8003f12:	4370      	muls	r0, r6
 8003f14:	f006 fd54 	bl	800a9c0 <malloc>
	mul(Phi, B, PhiB, N * row_c, row_a, column_b); /* CAB = Phi*B */
 8003f18:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8003f1a:	0002      	movs	r2, r0
 8003f1c:	9301      	str	r3, [sp, #4]
 8003f1e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8003f20:	0021      	movs	r1, r4
	float* PhiB = (float*)malloc(N * row_c * column_b * sizeof(float));
 8003f22:	9004      	str	r0, [sp, #16]
	mul(Phi, B, PhiB, N * row_c, row_a, column_b); /* CAB = Phi*B */
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	0038      	movs	r0, r7
 8003f28:	0033      	movs	r3, r6
 8003f2a:	f002 f95b 	bl	80061e4 <mul>
	tran(PhiB, N * row_c, column_b);
 8003f2e:	0031      	movs	r1, r6
 8003f30:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8003f32:	9804      	ldr	r0, [sp, #16]
 8003f34:	f002 fa52 	bl	80063dc <tran>
	memset(Gamma, 0, N * row_c * N * column_b * sizeof(float));
 8003f38:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8003f3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	4353      	muls	r3, r2
 8003f40:	001a      	movs	r2, r3
 8003f42:	4372      	muls	r2, r6
 8003f44:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8003f46:	0092      	lsls	r2, r2, #2
 8003f48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003f4a:	f007 fb7f 	bl	800b64c <memset>
	for (i = 0; i < N; i++) {
 8003f4e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8003f50:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	9308      	str	r3, [sp, #32]
 8003f56:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8003f58:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8003f5a:	4373      	muls	r3, r6
 8003f5c:	189b      	adds	r3, r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	930e      	str	r3, [sp, #56]	@ 0x38
 8003f62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003f64:	9506      	str	r5, [sp, #24]
 8003f66:	3b01      	subs	r3, #1
 8003f68:	4353      	muls	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003f6e:	00b3      	lsls	r3, r6, #2
 8003f70:	930c      	str	r3, [sp, #48]	@ 0x30
 8003f72:	9b06      	ldr	r3, [sp, #24]
 8003f74:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d031      	beq.n	8003fde <cab+0x10e>
		for (j = 0; j < column_b; j++) {
			memcpy(Gamma + N * row_c * (i * column_b + j) + row_c * i, CB + row_c * j, row_c * sizeof(float)); /* Add CB */
			memcpy(Gamma + N * row_c * (i * column_b + j) + row_c * i + row_c, PhiB + N * row_c * j, (N - i - 1) * row_c * sizeof(float)); /* Add Phi*B */
 8003f7a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8003f7c:	00ab      	lsls	r3, r5, #2
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	930d      	str	r3, [sp, #52]	@ 0x34
 8003f82:	9b03      	ldr	r3, [sp, #12]
 8003f84:	003c      	movs	r4, r7
 8003f86:	9305      	str	r3, [sp, #20]
 8003f88:	9b04      	ldr	r3, [sp, #16]
 8003f8a:	9309      	str	r3, [sp, #36]	@ 0x24
		for (j = 0; j < column_b; j++) {
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	9307      	str	r3, [sp, #28]
 8003f90:	e019      	b.n	8003fc6 <cab+0xf6>
			memcpy(Gamma + N * row_c * (i * column_b + j) + row_c * i, CB + row_c * j, row_c * sizeof(float)); /* Add CB */
 8003f92:	0020      	movs	r0, r4
 8003f94:	9a08      	ldr	r2, [sp, #32]
 8003f96:	9905      	ldr	r1, [sp, #20]
 8003f98:	f007 fc18 	bl	800b7cc <memcpy>
			memcpy(Gamma + N * row_c * (i * column_b + j) + row_c * i + row_c, PhiB + N * row_c * j, (N - i - 1) * row_c * sizeof(float)); /* Add Phi*B */
 8003f9c:	9b08      	ldr	r3, [sp, #32]
 8003f9e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8003fa0:	1918      	adds	r0, r3, r4
 8003fa2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003fa4:	f007 fc12 	bl	800b7cc <memcpy>
		for (j = 0; j < column_b; j++) {
 8003fa8:	9a08      	ldr	r2, [sp, #32]
 8003faa:	9b07      	ldr	r3, [sp, #28]
 8003fac:	4694      	mov	ip, r2
 8003fae:	3301      	adds	r3, #1
 8003fb0:	9307      	str	r3, [sp, #28]
 8003fb2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003fb4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8003fb6:	18e4      	adds	r4, r4, r3
 8003fb8:	9b05      	ldr	r3, [sp, #20]
 8003fba:	4463      	add	r3, ip
 8003fbc:	4694      	mov	ip, r2
 8003fbe:	9305      	str	r3, [sp, #20]
 8003fc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fc2:	4463      	add	r3, ip
 8003fc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003fc6:	9b07      	ldr	r3, [sp, #28]
 8003fc8:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d1e1      	bne.n	8003f92 <cab+0xc2>
	for (i = 0; i < N; i++) {
 8003fce:	9b06      	ldr	r3, [sp, #24]
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	9306      	str	r3, [sp, #24]
 8003fd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003fd6:	18ff      	adds	r7, r7, r3
 8003fd8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8003fda:	18ed      	adds	r5, r5, r3
 8003fdc:	e7c9      	b.n	8003f72 <cab+0xa2>
		}
	}

	/* Transpose of gamma */
	tran(Gamma, N * column_b, N * row_c);
 8003fde:	0032      	movs	r2, r6
 8003fe0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003fe2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8003fe4:	f002 f9fa 	bl	80063dc <tran>

	/* Free */
	free(CB);
 8003fe8:	9803      	ldr	r0, [sp, #12]
 8003fea:	f006 fcf3 	bl	800a9d4 <free>
	free(PhiB);
 8003fee:	9804      	ldr	r0, [sp, #16]
 8003ff0:	f006 fcf0 	bl	800a9d4 <free>
}
 8003ff4:	b011      	add	sp, #68	@ 0x44
 8003ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ff8 <RTYUI.constprop.0>:
 * R[row_r * column_r]
 * Y[row_y * column_y]
 * U[row_u * column_u]
 * I[column_r * column_u]
 */
static void RTYUI(const float R[], const float Y[], const float U[], float I[], const size_t row_r, const size_t column_r, const size_t row_y, const size_t column_y, const size_t row_u, const size_t column_u) {
 8003ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ffa:	b085      	sub	sp, #20
	/* Turn R into transpose */
	float* RT = (float*)malloc(row_r * column_r * sizeof(float));
 8003ffc:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
static void RTYUI(const float R[], const float Y[], const float U[], float I[], const size_t row_r, const size_t column_r, const size_t row_y, const size_t column_y, const size_t row_u, const size_t column_u) {
 8003ffe:	9303      	str	r3, [sp, #12]
	float* RT = (float*)malloc(row_r * column_r * sizeof(float));
 8004000:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
static void RTYUI(const float R[], const float Y[], const float U[], float I[], const size_t row_r, const size_t column_r, const size_t row_y, const size_t column_y, const size_t row_u, const size_t column_u) {
 8004002:	0007      	movs	r7, r0
	float* RT = (float*)malloc(row_r * column_r * sizeof(float));
 8004004:	435d      	muls	r5, r3
 8004006:	00ad      	lsls	r5, r5, #2
 8004008:	0028      	movs	r0, r5
static void RTYUI(const float R[], const float Y[], const float U[], float I[], const size_t row_r, const size_t column_r, const size_t row_y, const size_t column_y, const size_t row_u, const size_t column_u) {
 800400a:	000e      	movs	r6, r1
 800400c:	9202      	str	r2, [sp, #8]
	float* RT = (float*)malloc(row_r * column_r * sizeof(float));
 800400e:	f006 fcd7 	bl	800a9c0 <malloc>
 8004012:	0004      	movs	r4, r0
	memcpy(RT, R, row_r * column_r * sizeof(float));
 8004014:	002a      	movs	r2, r5
 8004016:	0039      	movs	r1, r7
 8004018:	f007 fbd8 	bl	800b7cc <memcpy>
	tran(RT, row_r, column_r);
 800401c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800401e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004020:	0020      	movs	r0, r4
 8004022:	f002 f9db 	bl	80063dc <tran>

	/* Compute YU = Y*U */
	float* YU = (float*)malloc(row_y * column_u * sizeof(float));
 8004026:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004028:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800402a:	4358      	muls	r0, r3
 800402c:	0080      	lsls	r0, r0, #2
 800402e:	f006 fcc7 	bl	800a9c0 <malloc>
 8004032:	0007      	movs	r7, r0
	mul(Y, U, YU, row_y, column_y, column_u);
 8004034:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004036:	0002      	movs	r2, r0
 8004038:	9301      	str	r3, [sp, #4]
 800403a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800403c:	0030      	movs	r0, r6
 800403e:	9902      	ldr	r1, [sp, #8]
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004044:	f002 f8ce 	bl	80061e4 <mul>

	/* Compute I = RT*YU */
	mul(RT, YU, I, column_r, row_r, column_u);
 8004048:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800404a:	0039      	movs	r1, r7
 800404c:	9301      	str	r3, [sp, #4]
 800404e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004050:	9a03      	ldr	r2, [sp, #12]
 8004052:	0020      	movs	r0, r4
 8004054:	9300      	str	r3, [sp, #0]
 8004056:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004058:	f002 f8c4 	bl	80061e4 <mul>

	/* Free */
	free(RT);
 800405c:	0020      	movs	r0, r4
 800405e:	f006 fcb9 	bl	800a9d4 <free>
	free(YU);
 8004062:	0038      	movs	r0, r7
 8004064:	f006 fcb6 	bl	800a9d4 <free>
}
 8004068:	b005      	add	sp, #20
 800406a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800406c <odefun>:

/* Discrete Algebraic Riccati Equation
 * Iterate: X = A'*X*A - X - A'*X*B*(B'*X*B + R)^{-1}*B'*X*A + Q
 */
static void odefun(const float t, float X[], float* matrices[], const size_t rows[], const size_t columns[]) {
 800406c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Get the matrices */
	const float* A = matrices[0];
 800406e:	6810      	ldr	r0, [r2, #0]
static void odefun(const float t, float X[], float* matrices[], const size_t rows[], const size_t columns[]) {
 8004070:	b093      	sub	sp, #76	@ 0x4c
	const float* A = matrices[0];
 8004072:	9009      	str	r0, [sp, #36]	@ 0x24
	const float* B = matrices[1];
 8004074:	6850      	ldr	r0, [r2, #4]
static void odefun(const float t, float X[], float* matrices[], const size_t rows[], const size_t columns[]) {
 8004076:	9108      	str	r1, [sp, #32]
	const float* B = matrices[1];
 8004078:	900a      	str	r0, [sp, #40]	@ 0x28
static void odefun(const float t, float X[], float* matrices[], const size_t rows[], const size_t columns[]) {
 800407a:	9918      	ldr	r1, [sp, #96]	@ 0x60
	const float* Q = matrices[2];
 800407c:	6890      	ldr	r0, [r2, #8]
	const float* R = matrices[3];
 800407e:	68d2      	ldr	r2, [r2, #12]

	/* row_a and column_a has the same value */
	const size_t row_a = rows[0];
	const size_t column_a = columns[0];
 8004080:	680c      	ldr	r4, [r1, #0]
	const float* R = matrices[3];
 8004082:	920e      	str	r2, [sp, #56]	@ 0x38
	const size_t row_a = rows[0];
 8004084:	681a      	ldr	r2, [r3, #0]

	/* row_b has the same value as row_a */
	const size_t row_b = rows[1];
 8004086:	685b      	ldr	r3, [r3, #4]
	const float* Q = matrices[2];
 8004088:	9011      	str	r0, [sp, #68]	@ 0x44
	const size_t row_b = rows[1];
 800408a:	9310      	str	r3, [sp, #64]	@ 0x40
	/* row_x and column_x has the same value as row_a and column_a */
	const size_t row_x = row_a;
	const size_t column_x = column_a;

	/* Compute A'*X*A = ATXA */
	float* ATXA = (float*)malloc(column_a * column_a * sizeof(float));
 800408c:	0023      	movs	r3, r4
 800408e:	4363      	muls	r3, r4
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	0018      	movs	r0, r3
	const size_t column_b = columns[1];
 8004094:	684f      	ldr	r7, [r1, #4]
	const size_t row_a = rows[0];
 8004096:	9206      	str	r2, [sp, #24]
	float* ATXA = (float*)malloc(column_a * column_a * sizeof(float));
 8004098:	930f      	str	r3, [sp, #60]	@ 0x3c
 800409a:	f006 fc91 	bl	800a9c0 <malloc>
	RTYUI(A, X, A, ATXA, row_a, column_a, row_x, column_x, row_a, column_a);
 800409e:	9b06      	ldr	r3, [sp, #24]
 80040a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80040a2:	9908      	ldr	r1, [sp, #32]
	float* ATXA = (float*)malloc(column_a * column_a * sizeof(float));
 80040a4:	900c      	str	r0, [sp, #48]	@ 0x30
	RTYUI(A, X, A, ATXA, row_a, column_a, row_x, column_x, row_a, column_a);
 80040a6:	9302      	str	r3, [sp, #8]
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	9404      	str	r4, [sp, #16]
 80040ac:	0003      	movs	r3, r0
 80040ae:	9403      	str	r4, [sp, #12]
 80040b0:	0010      	movs	r0, r2
 80040b2:	9401      	str	r4, [sp, #4]
 80040b4:	f7ff ffa0 	bl	8003ff8 <RTYUI.constprop.0>

	/* Compute A'*X*B = ATXB */
	float* ATXB = (float*)malloc(column_a * column_b * sizeof(float));
 80040b8:	003b      	movs	r3, r7
 80040ba:	4363      	muls	r3, r4
	RTYUI(A, X, B, ATXB, row_a, column_a, row_x, column_x, row_b, column_b);

	/* Compute B'*X*B + R = BTXBpR */
	float* BTXBpR = (float*)malloc(column_b * column_b * sizeof(float));
 80040bc:	003e      	movs	r6, r7
	float* ATXB = (float*)malloc(column_a * column_b * sizeof(float));
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	0018      	movs	r0, r3
 80040c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80040c4:	f006 fc7c 	bl	800a9c0 <malloc>
	float* BTXBpR = (float*)malloc(column_b * column_b * sizeof(float));
 80040c8:	437e      	muls	r6, r7
	RTYUI(A, X, B, ATXB, row_a, column_a, row_x, column_x, row_b, column_b);
 80040ca:	9b06      	ldr	r3, [sp, #24]
 80040cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80040ce:	9908      	ldr	r1, [sp, #32]
	float* ATXB = (float*)malloc(column_a * column_b * sizeof(float));
 80040d0:	900d      	str	r0, [sp, #52]	@ 0x34
	RTYUI(A, X, B, ATXB, row_a, column_a, row_x, column_x, row_b, column_b);
 80040d2:	9302      	str	r3, [sp, #8]
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	9704      	str	r7, [sp, #16]
 80040d8:	0003      	movs	r3, r0
 80040da:	9403      	str	r4, [sp, #12]
 80040dc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80040de:	9401      	str	r4, [sp, #4]
	float* BTXBpR = (float*)malloc(column_b * column_b * sizeof(float));
 80040e0:	00b6      	lsls	r6, r6, #2
	RTYUI(A, X, B, ATXB, row_a, column_a, row_x, column_x, row_b, column_b);
 80040e2:	f7ff ff89 	bl	8003ff8 <RTYUI.constprop.0>
	float* BTXBpR = (float*)malloc(column_b * column_b * sizeof(float));
 80040e6:	0030      	movs	r0, r6
 80040e8:	f006 fc6a 	bl	800a9c0 <malloc>
	RTYUI(B, X, B, BTXBpR, row_b, column_b, row_x, column_x, row_b, column_b);
 80040ec:	9b06      	ldr	r3, [sp, #24]
 80040ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80040f0:	9302      	str	r3, [sp, #8]
 80040f2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
	float* BTXBpR = (float*)malloc(column_b * column_b * sizeof(float));
 80040f4:	9007      	str	r0, [sp, #28]
	RTYUI(B, X, B, BTXBpR, row_b, column_b, row_x, column_x, row_b, column_b);
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	9908      	ldr	r1, [sp, #32]
 80040fa:	0003      	movs	r3, r0
 80040fc:	9704      	str	r7, [sp, #16]
 80040fe:	0010      	movs	r0, r2
 8004100:	9403      	str	r4, [sp, #12]
 8004102:	9701      	str	r7, [sp, #4]
 8004104:	f7ff ff78 	bl	8003ff8 <RTYUI.constprop.0>
	size_t i;
	for (i = 0; i < column_b * column_b; i++) {
 8004108:	2500      	movs	r5, #0
 800410a:	42ae      	cmp	r6, r5
 800410c:	d146      	bne.n	800419c <odefun+0x130>
		BTXBpR[i] += R[i];
	}

	/* Do inverse of BTXBpR */
	inv(BTXBpR, column_b);
 800410e:	0039      	movs	r1, r7
 8004110:	9807      	ldr	r0, [sp, #28]
 8004112:	f001 fefb 	bl	8005f0c <inv>

	/* Compute B'*X*A = BTXA */
	float* BTXA = (float*)malloc(column_b * column_a * sizeof(float));
 8004116:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8004118:	f006 fc52 	bl	800a9c0 <malloc>
	RTYUI(B, X, A, BTXA, row_b, column_b, row_x, column_x, row_a, column_a);
 800411c:	9b06      	ldr	r3, [sp, #24]
 800411e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004120:	9302      	str	r3, [sp, #8]
 8004122:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004124:	9908      	ldr	r1, [sp, #32]
	float* BTXA = (float*)malloc(column_b * column_a * sizeof(float));
 8004126:	900e      	str	r0, [sp, #56]	@ 0x38
	RTYUI(B, X, A, BTXA, row_b, column_b, row_x, column_x, row_a, column_a);
 8004128:	9404      	str	r4, [sp, #16]
 800412a:	9403      	str	r4, [sp, #12]
 800412c:	9701      	str	r7, [sp, #4]
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	0003      	movs	r3, r0
 8004132:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004134:	f7ff ff60 	bl	8003ff8 <RTYUI.constprop.0>

	/* Compute ATXB * BTXBpR * BTXA = ATXB_BTXBpR_BTXA */
	float* BTXBpR_BTXA = (float*)malloc(column_b * column_a * sizeof(float));
 8004138:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800413a:	f006 fc41 	bl	800a9c0 <malloc>
	mul(BTXBpR, BTXA, BTXBpR_BTXA, column_b, column_b, column_a);
 800413e:	003b      	movs	r3, r7
 8004140:	0002      	movs	r2, r0
 8004142:	990e      	ldr	r1, [sp, #56]	@ 0x38
	float* BTXBpR_BTXA = (float*)malloc(column_b * column_a * sizeof(float));
 8004144:	0006      	movs	r6, r0
	mul(BTXBpR, BTXA, BTXBpR_BTXA, column_b, column_b, column_a);
 8004146:	9401      	str	r4, [sp, #4]
 8004148:	9807      	ldr	r0, [sp, #28]
 800414a:	9700      	str	r7, [sp, #0]
 800414c:	f002 f84a 	bl	80061e4 <mul>
	float* ATXB_BTXBpR_BTXA = (float*)malloc(column_a * column_a * sizeof(float));
 8004150:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8004152:	f006 fc35 	bl	800a9c0 <malloc>
	mul(ATXB, BTXBpR_BTXA, ATXB_BTXBpR_BTXA, column_a, column_b, column_a);
 8004156:	9700      	str	r7, [sp, #0]

	/* Return X */
	for (i = 0; i < row_x * column_x; i++) {
 8004158:	2700      	movs	r7, #0
	mul(ATXB, BTXBpR_BTXA, ATXB_BTXBpR_BTXA, column_a, column_b, column_a);
 800415a:	0023      	movs	r3, r4
 800415c:	0002      	movs	r2, r0
 800415e:	9401      	str	r4, [sp, #4]
	float* ATXB_BTXBpR_BTXA = (float*)malloc(column_a * column_a * sizeof(float));
 8004160:	0005      	movs	r5, r0
	mul(ATXB, BTXBpR_BTXA, ATXB_BTXBpR_BTXA, column_a, column_b, column_a);
 8004162:	0031      	movs	r1, r6
 8004164:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004166:	f002 f83d 	bl	80061e4 <mul>
	for (i = 0; i < row_x * column_x; i++) {
 800416a:	9b06      	ldr	r3, [sp, #24]
 800416c:	435c      	muls	r4, r3
 800416e:	00a4      	lsls	r4, r4, #2
 8004170:	42a7      	cmp	r7, r4
 8004172:	d11d      	bne.n	80041b0 <odefun+0x144>
		X[i] = ATXA[i] - X[i] - ATXB_BTXBpR_BTXA[i] + Q[i];
	}

	/* Free */
	free(ATXA);
 8004174:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8004176:	f006 fc2d 	bl	800a9d4 <free>
	free(ATXB);
 800417a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800417c:	f006 fc2a 	bl	800a9d4 <free>
	free(BTXBpR);
 8004180:	9807      	ldr	r0, [sp, #28]
 8004182:	f006 fc27 	bl	800a9d4 <free>
	free(BTXA);
 8004186:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8004188:	f006 fc24 	bl	800a9d4 <free>
	free(BTXBpR_BTXA);
 800418c:	0030      	movs	r0, r6
 800418e:	f006 fc21 	bl	800a9d4 <free>
	free(ATXB_BTXBpR_BTXA);
 8004192:	0028      	movs	r0, r5
 8004194:	f006 fc1e 	bl	800a9d4 <free>
}	
 8004198:	b013      	add	sp, #76	@ 0x4c
 800419a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BTXBpR[i] += R[i];
 800419c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800419e:	5959      	ldr	r1, [r3, r5]
 80041a0:	9b07      	ldr	r3, [sp, #28]
 80041a2:	5958      	ldr	r0, [r3, r5]
 80041a4:	f7fc f9e8 	bl	8000578 <__aeabi_fadd>
 80041a8:	9b07      	ldr	r3, [sp, #28]
 80041aa:	5158      	str	r0, [r3, r5]
	for (i = 0; i < column_b * column_b; i++) {
 80041ac:	3504      	adds	r5, #4
 80041ae:	e7ac      	b.n	800410a <odefun+0x9e>
		X[i] = ATXA[i] - X[i] - ATXB_BTXBpR_BTXA[i] + Q[i];
 80041b0:	9b08      	ldr	r3, [sp, #32]
 80041b2:	59d9      	ldr	r1, [r3, r7]
 80041b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80041b6:	59d8      	ldr	r0, [r3, r7]
 80041b8:	f7fc fe8c 	bl	8000ed4 <__aeabi_fsub>
 80041bc:	59e9      	ldr	r1, [r5, r7]
 80041be:	f7fc fe89 	bl	8000ed4 <__aeabi_fsub>
 80041c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80041c4:	59d9      	ldr	r1, [r3, r7]
 80041c6:	f7fc f9d7 	bl	8000578 <__aeabi_fadd>
 80041ca:	9b08      	ldr	r3, [sp, #32]
 80041cc:	51d8      	str	r0, [r3, r7]
	for (i = 0; i < row_x * column_x; i++) {
 80041ce:	3704      	adds	r7, #4
 80041d0:	e7ce      	b.n	8004170 <odefun+0x104>
	...

080041d4 <dare>:
 * B[row_a * column_b]
 * Q[row_a * row_a]
 * R[column_b * column_b]
 * X[row_a * row_a]
 */
void dare(const size_t iterations, const float sampleTime, const float A[], const float B[], const float Q[], const float R[], float X[], const size_t row_a, const size_t column_b) {
 80041d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041d6:	b095      	sub	sp, #84	@ 0x54
 80041d8:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
 80041da:	9010      	str	r0, [sp, #64]	@ 0x40
	/* Create sizes */
	const size_t N = row_a * row_a;
 80041dc:	0026      	movs	r6, r4
 80041de:	4366      	muls	r6, r4
	const size_t column_q = row_a;
	const size_t row_r = column_b;
	const size_t column_r = column_b;

	/* State vector */
	float* Y = (float*)malloc(N * sizeof(float));
 80041e0:	00b7      	lsls	r7, r6, #2
 80041e2:	0038      	movs	r0, r7
void dare(const size_t iterations, const float sampleTime, const float A[], const float B[], const float Q[], const float R[], float X[], const size_t row_a, const size_t column_b) {
 80041e4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80041e6:	9111      	str	r1, [sp, #68]	@ 0x44
 80041e8:	9212      	str	r2, [sp, #72]	@ 0x48
	float* Y = (float*)malloc(N * sizeof(float));
 80041ea:	f006 fbe9 	bl	800a9c0 <malloc>

	/* Clear solution */
	memset(X, 0, row_a * row_a * sizeof(float));
 80041ee:	003a      	movs	r2, r7
	float* Y = (float*)malloc(N * sizeof(float));
 80041f0:	0005      	movs	r5, r0
	memset(X, 0, row_a * row_a * sizeof(float));
 80041f2:	2100      	movs	r1, #0
 80041f4:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80041f6:	f007 fa29 	bl	800b64c <memset>

	/* Do Runge-Kutta ODE solver */
	rk4args(true, iterations, sampleTime, Y, X, N, odefun, number_of_pointers, A, row_a, column_a, B, row_b, column_b, Q, row_q, column_q, R, row_r, column_r);
 80041fa:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80041fc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80041fe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004200:	930e      	str	r3, [sp, #56]	@ 0x38
 8004202:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8004204:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8004206:	930d      	str	r3, [sp, #52]	@ 0x34
 8004208:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800420a:	2001      	movs	r0, #1
 800420c:	930a      	str	r3, [sp, #40]	@ 0x28
 800420e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8004210:	9405      	str	r4, [sp, #20]
 8004212:	9309      	str	r3, [sp, #36]	@ 0x24
 8004214:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004216:	9601      	str	r6, [sp, #4]
 8004218:	9307      	str	r3, [sp, #28]
 800421a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800421c:	940c      	str	r4, [sp, #48]	@ 0x30
 800421e:	9304      	str	r3, [sp, #16]
 8004220:	2304      	movs	r3, #4
 8004222:	9303      	str	r3, [sp, #12]
 8004224:	4b07      	ldr	r3, [pc, #28]	@ (8004244 <dare+0x70>)
 8004226:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004228:	9302      	str	r3, [sp, #8]
 800422a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800422c:	9408      	str	r4, [sp, #32]
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	002b      	movs	r3, r5
 8004232:	9406      	str	r4, [sp, #24]
 8004234:	f001 fbe8 	bl	8005a08 <rk4args>

	/* Free */
	free(Y);
 8004238:	0028      	movs	r0, r5
 800423a:	f006 fbcb 	bl	800a9d4 <free>
 800423e:	b015      	add	sp, #84	@ 0x54
 8004240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004242:	46c0      	nop			@ (mov r8, r8)
 8004244:	0800406d 	.word	0x0800406d

08004248 <lqe>:
 * C[row_c * row_a]
 * Q[row_a * row_a]
 * R[row_c * row_c]
 * K[row_a * row_c]
 */
void lqe(const size_t iterations, const float sampleTime, const float A[], const float C[], const float Q[], const float R[], float K[], const size_t row_a, const size_t row_c) {
 8004248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800424a:	b08b      	sub	sp, #44	@ 0x2c
 800424c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800424e:	9007      	str	r0, [sp, #28]
	/* Turn A to transpose */
	float* AT = (float*)malloc(row_a * row_a * sizeof(float));
 8004250:	0025      	movs	r5, r4
 8004252:	4365      	muls	r5, r4
 8004254:	00ad      	lsls	r5, r5, #2
 8004256:	0028      	movs	r0, r5
void lqe(const size_t iterations, const float sampleTime, const float A[], const float C[], const float Q[], const float R[], float K[], const size_t row_a, const size_t row_c) {
 8004258:	9309      	str	r3, [sp, #36]	@ 0x24
 800425a:	0017      	movs	r7, r2
 800425c:	9108      	str	r1, [sp, #32]
	float* AT = (float*)malloc(row_a * row_a * sizeof(float));
 800425e:	f006 fbaf 	bl	800a9c0 <malloc>
 8004262:	0006      	movs	r6, r0
	memcpy(AT, A, row_a * row_a * sizeof(float));
 8004264:	002a      	movs	r2, r5
 8004266:	0039      	movs	r1, r7
 8004268:	f007 fab0 	bl	800b7cc <memcpy>
	tran(AT, row_a, row_a);
 800426c:	0022      	movs	r2, r4
 800426e:	0021      	movs	r1, r4
 8004270:	0030      	movs	r0, r6
 8004272:	f002 f8b3 	bl	80063dc <tran>

	/* Turn C to transpose */
	float* CT = (float*)malloc(row_c * row_a * sizeof(float));
 8004276:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8004278:	4367      	muls	r7, r4
 800427a:	00bf      	lsls	r7, r7, #2
 800427c:	0038      	movs	r0, r7
 800427e:	f006 fb9f 	bl	800a9c0 <malloc>
 8004282:	0005      	movs	r5, r0
	memcpy(CT, C, row_c * row_a * sizeof(float));
 8004284:	003a      	movs	r2, r7
 8004286:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004288:	f007 faa0 	bl	800b7cc <memcpy>
	tran(CT, row_c, row_a);
 800428c:	0022      	movs	r2, r4
 800428e:	0028      	movs	r0, r5
 8004290:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8004292:	f002 f8a3 	bl	80063dc <tran>

	/* Compute LQR with duality method */
	lqr(iterations, sampleTime, AT, CT, Q, R, K, row_a, row_c);
 8004296:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004298:	0032      	movs	r2, r6
 800429a:	9304      	str	r3, [sp, #16]
 800429c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800429e:	9908      	ldr	r1, [sp, #32]
 80042a0:	9302      	str	r3, [sp, #8]
 80042a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80042a4:	9807      	ldr	r0, [sp, #28]
 80042a6:	9301      	str	r3, [sp, #4]
 80042a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80042aa:	9403      	str	r4, [sp, #12]
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	002b      	movs	r3, r5
 80042b0:	f000 f847 	bl	8004342 <lqr>

	/* Free */
	free(AT);
 80042b4:	0030      	movs	r0, r6
 80042b6:	f006 fb8d 	bl	800a9d4 <free>
	free(CT);
 80042ba:	0028      	movs	r0, r5
 80042bc:	f006 fb8a 	bl	800a9d4 <free>
	
	/* Transpose on K */
	tran(K, row_c, row_a);
 80042c0:	0022      	movs	r2, r4
 80042c2:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80042c4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80042c6:	f002 f889 	bl	80063dc <tran>
 80042ca:	b00b      	add	sp, #44	@ 0x2c
 80042cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080042ce <RTYUI.constprop.0>:
  * R[row_r * column_r]
  * Y[row_y * column_y]
  * U[row_u * column_u]
  * I[column_r * column_u]
  */
static void RTYUI(const float R[], const float Y[], const float U[], float I[], const size_t row_r, const size_t column_r, const size_t row_y, const size_t column_y, const size_t row_u, const size_t column_u) {
 80042ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042d0:	b085      	sub	sp, #20
	/* Turn R into transpose */
	float* RT = (float*)malloc(row_r * column_r * sizeof(float));
 80042d2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
static void RTYUI(const float R[], const float Y[], const float U[], float I[], const size_t row_r, const size_t column_r, const size_t row_y, const size_t column_y, const size_t row_u, const size_t column_u) {
 80042d4:	9303      	str	r3, [sp, #12]
	float* RT = (float*)malloc(row_r * column_r * sizeof(float));
 80042d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
static void RTYUI(const float R[], const float Y[], const float U[], float I[], const size_t row_r, const size_t column_r, const size_t row_y, const size_t column_y, const size_t row_u, const size_t column_u) {
 80042d8:	0007      	movs	r7, r0
	float* RT = (float*)malloc(row_r * column_r * sizeof(float));
 80042da:	435d      	muls	r5, r3
 80042dc:	00ad      	lsls	r5, r5, #2
 80042de:	0028      	movs	r0, r5
static void RTYUI(const float R[], const float Y[], const float U[], float I[], const size_t row_r, const size_t column_r, const size_t row_y, const size_t column_y, const size_t row_u, const size_t column_u) {
 80042e0:	000e      	movs	r6, r1
 80042e2:	9202      	str	r2, [sp, #8]
	float* RT = (float*)malloc(row_r * column_r * sizeof(float));
 80042e4:	f006 fb6c 	bl	800a9c0 <malloc>
 80042e8:	0004      	movs	r4, r0
	memcpy(RT, R, row_r * column_r * sizeof(float));
 80042ea:	002a      	movs	r2, r5
 80042ec:	0039      	movs	r1, r7
 80042ee:	f007 fa6d 	bl	800b7cc <memcpy>
	tran(RT, row_r, column_r);
 80042f2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80042f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80042f6:	0020      	movs	r0, r4
 80042f8:	f002 f870 	bl	80063dc <tran>

	/* Compute YU = Y*U */
	float* YU = (float*)malloc(row_y * column_u * sizeof(float));
 80042fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80042fe:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8004300:	4358      	muls	r0, r3
 8004302:	0080      	lsls	r0, r0, #2
 8004304:	f006 fb5c 	bl	800a9c0 <malloc>
 8004308:	0007      	movs	r7, r0
	mul(Y, U, YU, row_y, column_y, column_u);
 800430a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800430c:	0002      	movs	r2, r0
 800430e:	9301      	str	r3, [sp, #4]
 8004310:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004312:	0030      	movs	r0, r6
 8004314:	9902      	ldr	r1, [sp, #8]
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800431a:	f001 ff63 	bl	80061e4 <mul>

	/* Compute I = RT*YU */
	mul(RT, YU, I, column_r, row_r, column_u);
 800431e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004320:	0039      	movs	r1, r7
 8004322:	9301      	str	r3, [sp, #4]
 8004324:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004326:	9a03      	ldr	r2, [sp, #12]
 8004328:	0020      	movs	r0, r4
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800432e:	f001 ff59 	bl	80061e4 <mul>

	/* Free */
	free(RT);
 8004332:	0020      	movs	r0, r4
 8004334:	f006 fb4e 	bl	800a9d4 <free>
	free(YU);
 8004338:	0038      	movs	r0, r7
 800433a:	f006 fb4b 	bl	800a9d4 <free>
}
 800433e:	b005      	add	sp, #20
 8004340:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004342 <lqr>:
 * B[row_a * column_b]
 * Q[row_a * row_a]
 * R[column_b * column_b]
 * L[column_b * row_a]
 */
void lqr(const size_t iterations, const float sampleTime, const float A[], const float B[], const float Q[], const float R[], float L[], const size_t row_a, const size_t column_b) {
 8004342:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004344:	b08b      	sub	sp, #44	@ 0x2c
 8004346:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8004348:	0005      	movs	r5, r0
	/* Create the X solution to the discrete Algebraic Riccati Equation */
	float* X = (float*)malloc(row_a * row_a * sizeof(float));
 800434a:	0020      	movs	r0, r4
 800434c:	4360      	muls	r0, r4
 800434e:	0080      	lsls	r0, r0, #2
void lqr(const size_t iterations, const float sampleTime, const float A[], const float B[], const float Q[], const float R[], float L[], const size_t row_a, const size_t column_b) {
 8004350:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8004352:	1c0e      	adds	r6, r1, #0
 8004354:	9209      	str	r2, [sp, #36]	@ 0x24
 8004356:	9307      	str	r3, [sp, #28]
	float* X = (float*)malloc(row_a * row_a * sizeof(float));
 8004358:	f006 fb32 	bl	800a9c0 <malloc>

	/* Find the solution */
	dare(iterations, sampleTime, A, B, Q, R, X, row_a, column_b);
 800435c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800435e:	1c31      	adds	r1, r6, #0
 8004360:	9301      	str	r3, [sp, #4]
 8004362:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004364:	9a09      	ldr	r2, [sp, #36]	@ 0x24
	float* X = (float*)malloc(row_a * row_a * sizeof(float));
 8004366:	9006      	str	r0, [sp, #24]
	dare(iterations, sampleTime, A, B, Q, R, X, row_a, column_b);
 8004368:	9002      	str	r0, [sp, #8]
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	0028      	movs	r0, r5
 800436e:	9b07      	ldr	r3, [sp, #28]
 8004370:	9704      	str	r7, [sp, #16]
 8004372:	9403      	str	r4, [sp, #12]
 8004374:	f7ff ff2e 	bl	80041d4 <dare>

	/* Compute B'*X*B + R = BTXBpR */
	float* BTXBpR = (float*)malloc(column_b * column_b * sizeof(float));
 8004378:	003b      	movs	r3, r7
 800437a:	437b      	muls	r3, r7
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	0018      	movs	r0, r3
 8004380:	9308      	str	r3, [sp, #32]
 8004382:	f006 fb1d 	bl	800a9c0 <malloc>
	RTYUI(B, X, B, BTXBpR, row_a, column_b, row_a, row_a, row_a, column_b);
 8004386:	9a07      	ldr	r2, [sp, #28]
 8004388:	0003      	movs	r3, r0
	float* BTXBpR = (float*)malloc(column_b * column_b * sizeof(float));
 800438a:	0005      	movs	r5, r0
	RTYUI(B, X, B, BTXBpR, row_a, column_b, row_a, row_a, row_a, column_b);
 800438c:	9906      	ldr	r1, [sp, #24]
 800438e:	0010      	movs	r0, r2
 8004390:	9704      	str	r7, [sp, #16]
 8004392:	9403      	str	r4, [sp, #12]
 8004394:	9402      	str	r4, [sp, #8]
 8004396:	9701      	str	r7, [sp, #4]
 8004398:	9400      	str	r4, [sp, #0]
 800439a:	f7ff ff98 	bl	80042ce <RTYUI.constprop.0>
	size_t i;
	for (i = 0; i < column_b * column_b; i++) {
 800439e:	2600      	movs	r6, #0
 80043a0:	9b08      	ldr	r3, [sp, #32]
 80043a2:	42b3      	cmp	r3, r6
 80043a4:	d127      	bne.n	80043f6 <lqr+0xb4>
		BTXBpR[i] += R[i];
	}

	/* Do inverse of BTXBpR */
	inv(BTXBpR, column_b);
 80043a6:	0039      	movs	r1, r7
 80043a8:	0028      	movs	r0, r5
 80043aa:	f001 fdaf 	bl	8005f0c <inv>

	/* Compute B'*X*A = BTXA */
	float* BTXA = (float*)malloc(column_b * row_a * sizeof(float));
 80043ae:	0038      	movs	r0, r7
 80043b0:	4360      	muls	r0, r4
 80043b2:	0080      	lsls	r0, r0, #2
 80043b4:	f006 fb04 	bl	800a9c0 <malloc>
 80043b8:	0006      	movs	r6, r0
	RTYUI(B, X, A, BTXA, row_a, column_b, row_a, row_a, row_a, row_a);
 80043ba:	0003      	movs	r3, r0
 80043bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80043be:	9906      	ldr	r1, [sp, #24]
 80043c0:	9807      	ldr	r0, [sp, #28]
 80043c2:	9404      	str	r4, [sp, #16]
 80043c4:	9403      	str	r4, [sp, #12]
 80043c6:	9402      	str	r4, [sp, #8]
 80043c8:	9701      	str	r7, [sp, #4]
 80043ca:	9400      	str	r4, [sp, #0]
 80043cc:	f7ff ff7f 	bl	80042ce <RTYUI.constprop.0>

	/* Compute BTXBpR * BTXA = L */
	mul(BTXBpR, BTXA, L, column_b, column_b, row_a);
 80043d0:	003b      	movs	r3, r7
 80043d2:	0031      	movs	r1, r6
 80043d4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80043d6:	0028      	movs	r0, r5
 80043d8:	9401      	str	r4, [sp, #4]
 80043da:	9700      	str	r7, [sp, #0]
 80043dc:	f001 ff02 	bl	80061e4 <mul>

	/* Free */
	free(X);
 80043e0:	9806      	ldr	r0, [sp, #24]
 80043e2:	f006 faf7 	bl	800a9d4 <free>
	free(BTXBpR);
 80043e6:	0028      	movs	r0, r5
 80043e8:	f006 faf4 	bl	800a9d4 <free>
	free(BTXA);
 80043ec:	0030      	movs	r0, r6
 80043ee:	f006 faf1 	bl	800a9d4 <free>
 80043f2:	b00b      	add	sp, #44	@ 0x2c
 80043f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BTXBpR[i] += R[i];
 80043f6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80043f8:	59a8      	ldr	r0, [r5, r6]
 80043fa:	5999      	ldr	r1, [r3, r6]
 80043fc:	f7fc f8bc 	bl	8000578 <__aeabi_fadd>
 8004400:	51a8      	str	r0, [r5, r6]
	for (i = 0; i < column_b * column_b; i++) {
 8004402:	3604      	adds	r6, #4
 8004404:	e7cc      	b.n	80043a0 <lqr+0x5e>

08004406 <mpc_discrete_matrices>:
  * Ad[row_a * row_a]
  * Bd[row_a * column_b]
  * Cd[row_c * row_a]
  * Ed[row_a * column_e]
  */
void mpc_discrete_matrices(const float sampleTime, const float A[], const float B[], const float C[], const float E[], float Ad[], float Bd[], float Cd[], float Ed[], const size_t row_a, const size_t column_b, const size_t row_c, const size_t column_e) {
 8004406:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004408:	b089      	sub	sp, #36	@ 0x24
 800440a:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800440c:	9004      	str	r0, [sp, #16]
	/* Create augmented B */
	float* Bae = (float*)malloc(row_a * (column_b + column_e) * sizeof(float));
 800440e:	0038      	movs	r0, r7
void mpc_discrete_matrices(const float sampleTime, const float A[], const float B[], const float C[], const float E[], float Ad[], float Bd[], float Cd[], float Ed[], const size_t row_a, const size_t column_b, const size_t row_c, const size_t column_e) {
 8004410:	9206      	str	r2, [sp, #24]
 8004412:	9307      	str	r3, [sp, #28]
	float* Bae = (float*)malloc(row_a * (column_b + column_e) * sizeof(float));
 8004414:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8004416:	9b14      	ldr	r3, [sp, #80]	@ 0x50
void mpc_discrete_matrices(const float sampleTime, const float A[], const float B[], const float C[], const float E[], float Ad[], float Bd[], float Cd[], float Ed[], const size_t row_a, const size_t column_b, const size_t row_c, const size_t column_e) {
 8004418:	9105      	str	r1, [sp, #20]
	float* Bae = (float*)malloc(row_a * (column_b + column_e) * sizeof(float));
 800441a:	189d      	adds	r5, r3, r2
 800441c:	4368      	muls	r0, r5
 800441e:	0080      	lsls	r0, r0, #2
 8004420:	f006 face 	bl	800a9c0 <malloc>
	insert(B, Bae, row_a, column_b, column_b + column_e, 0, 0);
 8004424:	2600      	movs	r6, #0
	float* Bae = (float*)malloc(row_a * (column_b + column_e) * sizeof(float));
 8004426:	0004      	movs	r4, r0
	insert(B, Bae, row_a, column_b, column_b + column_e, 0, 0);
 8004428:	003a      	movs	r2, r7
 800442a:	0001      	movs	r1, r0
 800442c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800442e:	9806      	ldr	r0, [sp, #24]
 8004430:	9602      	str	r6, [sp, #8]
 8004432:	9601      	str	r6, [sp, #4]
 8004434:	9500      	str	r5, [sp, #0]
 8004436:	f002 f820 	bl	800647a <insert>
	insert(E, Bae, row_a, column_e, column_b + column_e, 0, column_b);
 800443a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800443c:	003a      	movs	r2, r7
 800443e:	0021      	movs	r1, r4
 8004440:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8004442:	9302      	str	r3, [sp, #8]
 8004444:	9601      	str	r6, [sp, #4]
 8004446:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004448:	9500      	str	r5, [sp, #0]
 800444a:	f002 f816 	bl	800647a <insert>

	/* Copy */
	memcpy(Ad, A, row_a * row_a * sizeof(float));
 800444e:	003a      	movs	r2, r7
 8004450:	437a      	muls	r2, r7
 8004452:	9905      	ldr	r1, [sp, #20]
 8004454:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8004456:	0092      	lsls	r2, r2, #2
 8004458:	f007 f9b8 	bl	800b7cc <memcpy>
	memcpy(Cd, C, row_c * row_a * sizeof(float));
 800445c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800445e:	9907      	ldr	r1, [sp, #28]
 8004460:	437a      	muls	r2, r7
 8004462:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8004464:	0092      	lsls	r2, r2, #2
 8004466:	f007 f9b1 	bl	800b7cc <memcpy>

	/* Turn Ad and Bae discrete */
	c2d(Ad, Bae, row_a, column_b + column_e, sampleTime);
 800446a:	9b04      	ldr	r3, [sp, #16]
 800446c:	003a      	movs	r2, r7
 800446e:	0021      	movs	r1, r4
 8004470:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	002b      	movs	r3, r5
 8004476:	f7ff fca6 	bl	8003dc6 <c2d>

	/* Then cut Bae into Bd and Ed */
	cut(Bae, column_b + column_e, Bd, 0, row_a - 1, 0, column_b - 1);
 800447a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800447c:	3f01      	subs	r7, #1
 800447e:	3b01      	subs	r3, #1
 8004480:	0029      	movs	r1, r5
 8004482:	0020      	movs	r0, r4
 8004484:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8004486:	9302      	str	r3, [sp, #8]
 8004488:	9601      	str	r6, [sp, #4]
 800448a:	0033      	movs	r3, r6
 800448c:	9700      	str	r7, [sp, #0]
 800448e:	f001 ffd6 	bl	800643e <cut>
	cut(Bae, column_b + column_e, Ed, 0, row_a - 1, column_b, column_b + column_e - 1);
 8004492:	1e6b      	subs	r3, r5, #1
 8004494:	9302      	str	r3, [sp, #8]
 8004496:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004498:	0029      	movs	r1, r5
 800449a:	0020      	movs	r0, r4
 800449c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800449e:	9301      	str	r3, [sp, #4]
 80044a0:	9700      	str	r7, [sp, #0]
 80044a2:	0033      	movs	r3, r6
 80044a4:	f001 ffcb 	bl	800643e <cut>

	/* Free */
	free(Bae);
 80044a8:	0020      	movs	r0, r4
 80044aa:	f006 fa93 	bl	800a9d4 <free>
}
 80044ae:	b009      	add	sp, #36	@ 0x24
 80044b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080044b2 <mpc_kalman_gain>:
/*
 * A[row_a * row_a]
 * C[row_c * row_a]
 * K[row_a * row_c]
 */
void mpc_kalman_gain(const size_t iterations, const float sampleTime, const float A[], const float C[], const float qw, const float rv, float K[], const size_t row_a, const size_t row_c) {
 80044b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044b4:	b08b      	sub	sp, #44	@ 0x2c
 80044b6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80044b8:	9006      	str	r0, [sp, #24]
	float* Q = (float*)malloc(row_a * row_a * sizeof(float));
 80044ba:	0030      	movs	r0, r6
 80044bc:	4370      	muls	r0, r6
 80044be:	0080      	lsls	r0, r0, #2
void mpc_kalman_gain(const size_t iterations, const float sampleTime, const float A[], const float C[], const float qw, const float rv, float K[], const size_t row_a, const size_t row_c) {
 80044c0:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 80044c2:	9107      	str	r1, [sp, #28]
 80044c4:	9208      	str	r2, [sp, #32]
 80044c6:	9309      	str	r3, [sp, #36]	@ 0x24
	float* Q = (float*)malloc(row_a * row_a * sizeof(float));
 80044c8:	f006 fa7a 	bl	800a9c0 <malloc>
	eye(Q, qw, row_a, row_a);
 80044cc:	0033      	movs	r3, r6
 80044ce:	0032      	movs	r2, r6
 80044d0:	9910      	ldr	r1, [sp, #64]	@ 0x40
	float* Q = (float*)malloc(row_a * row_a * sizeof(float));
 80044d2:	0005      	movs	r5, r0
	eye(Q, qw, row_a, row_a);
 80044d4:	f001 fcfa 	bl	8005ecc <eye>
	float* R = (float*)malloc(row_c * row_c * sizeof(float));
 80044d8:	0038      	movs	r0, r7
 80044da:	4378      	muls	r0, r7
 80044dc:	0080      	lsls	r0, r0, #2
 80044de:	f006 fa6f 	bl	800a9c0 <malloc>
 80044e2:	0004      	movs	r4, r0
	eye(R, rv, row_c, row_c);
 80044e4:	003b      	movs	r3, r7
 80044e6:	003a      	movs	r2, r7
 80044e8:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80044ea:	f001 fcef 	bl	8005ecc <eye>
	lqe(iterations, sampleTime, A, C, Q, R, K, row_a, row_c);
 80044ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80044f0:	9a08      	ldr	r2, [sp, #32]
 80044f2:	9907      	ldr	r1, [sp, #28]
 80044f4:	9806      	ldr	r0, [sp, #24]
 80044f6:	9302      	str	r3, [sp, #8]
 80044f8:	9704      	str	r7, [sp, #16]
 80044fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044fc:	9603      	str	r6, [sp, #12]
 80044fe:	9401      	str	r4, [sp, #4]
 8004500:	9500      	str	r5, [sp, #0]
 8004502:	f7ff fea1 	bl	8004248 <lqe>

	/* Free */
	free(Q);
 8004506:	0028      	movs	r0, r5
 8004508:	f006 fa64 	bl	800a9d4 <free>
	free(R);
 800450c:	0020      	movs	r0, r4
 800450e:	f006 fa61 	bl	800a9d4 <free>
}
 8004512:	b00b      	add	sp, #44	@ 0x2c
 8004514:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004516 <mpc_vector>:

/*
 * V[N*dim_v]
 * v[dim_v]
 */
void mpc_vector(float V[], const float v[], const size_t dim_v, const size_t N) {
 8004516:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	size_t i, j;
	for (i = 0; i < N; i++) {
 8004518:	2400      	movs	r4, #0
 800451a:	0026      	movs	r6, r4
void mpc_vector(float V[], const float v[], const size_t dim_v, const size_t N) {
 800451c:	9000      	str	r0, [sp, #0]
 800451e:	9301      	str	r3, [sp, #4]
 8004520:	0097      	lsls	r7, r2, #2
	for (i = 0; i < N; i++) {
 8004522:	9b01      	ldr	r3, [sp, #4]
 8004524:	429e      	cmp	r6, r3
 8004526:	d00c      	beq.n	8004542 <mpc_vector+0x2c>
 8004528:	9b00      	ldr	r3, [sp, #0]
 800452a:	00a5      	lsls	r5, r4, #2
 800452c:	2000      	movs	r0, #0
 800452e:	195d      	adds	r5, r3, r5
 8004530:	e002      	b.n	8004538 <mpc_vector+0x22>
		for (j = 0; j < dim_v; j++) {
			V[i * dim_v + j] = v[j];
 8004532:	580b      	ldr	r3, [r1, r0]
 8004534:	502b      	str	r3, [r5, r0]
		for (j = 0; j < dim_v; j++) {
 8004536:	3004      	adds	r0, #4
 8004538:	42b8      	cmp	r0, r7
 800453a:	d1fa      	bne.n	8004532 <mpc_vector+0x1c>
	for (i = 0; i < N; i++) {
 800453c:	3601      	adds	r6, #1
 800453e:	18a4      	adds	r4, r4, r2
 8004540:	e7ef      	b.n	8004522 <mpc_vector+0xc>
		}
	}
}
 8004542:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08004544 <mpc_QZ_matrix>:

/*
 * QZ[(N * row_c) * (N * row_c)]
 */
void mpc_QZ_matrix(float QZ[], const float qz, const size_t row_c, const size_t N) {
 8004544:	b5f0      	push	{r4, r5, r6, r7, lr}
	memset(QZ, 0, (N * row_c) * (N * row_c) * sizeof(float));
 8004546:	001f      	movs	r7, r3
 8004548:	4357      	muls	r7, r2
void mpc_QZ_matrix(float QZ[], const float qz, const size_t row_c, const size_t N) {
 800454a:	0014      	movs	r4, r2
	memset(QZ, 0, (N * row_c) * (N * row_c) * sizeof(float));
 800454c:	003a      	movs	r2, r7
 800454e:	437a      	muls	r2, r7
void mpc_QZ_matrix(float QZ[], const float qz, const size_t row_c, const size_t N) {
 8004550:	b089      	sub	sp, #36	@ 0x24
 8004552:	1c0d      	adds	r5, r1, #0
	memset(QZ, 0, (N * row_c) * (N * row_c) * sizeof(float));
 8004554:	0092      	lsls	r2, r2, #2
 8004556:	2100      	movs	r1, #0
void mpc_QZ_matrix(float QZ[], const float qz, const size_t row_c, const size_t N) {
 8004558:	9307      	str	r3, [sp, #28]
 800455a:	9006      	str	r0, [sp, #24]
	memset(QZ, 0, (N * row_c) * (N * row_c) * sizeof(float));
 800455c:	f007 f876 	bl	800b64c <memset>
	float* Qz = (float*)malloc(row_c * row_c * sizeof(float));
 8004560:	0020      	movs	r0, r4
 8004562:	4360      	muls	r0, r4
 8004564:	0080      	lsls	r0, r0, #2
 8004566:	f006 fa2b 	bl	800a9c0 <malloc>
	eye(Qz, qz, row_c, row_c);
 800456a:	1c29      	adds	r1, r5, #0
	size_t i;
	for (i = 0; i < N; i++) {
 800456c:	2500      	movs	r5, #0
	eye(Qz, qz, row_c, row_c);
 800456e:	0023      	movs	r3, r4
 8004570:	0022      	movs	r2, r4
	float* Qz = (float*)malloc(row_c * row_c * sizeof(float));
 8004572:	9005      	str	r0, [sp, #20]
	for (i = 0; i < N; i++) {
 8004574:	002e      	movs	r6, r5
	eye(Qz, qz, row_c, row_c);
 8004576:	f001 fca9 	bl	8005ecc <eye>
	for (i = 0; i < N; i++) {
 800457a:	9b07      	ldr	r3, [sp, #28]
 800457c:	429e      	cmp	r6, r3
 800457e:	d104      	bne.n	800458a <mpc_QZ_matrix+0x46>
		insert(Qz, QZ, row_c, row_c, N * row_c, i * row_c, i * row_c);
	}

	/* Free */
	free(Qz);
 8004580:	9805      	ldr	r0, [sp, #20]
 8004582:	f006 fa27 	bl	800a9d4 <free>
}
 8004586:	b009      	add	sp, #36	@ 0x24
 8004588:	bdf0      	pop	{r4, r5, r6, r7, pc}
		insert(Qz, QZ, row_c, row_c, N * row_c, i * row_c, i * row_c);
 800458a:	9502      	str	r5, [sp, #8]
 800458c:	9501      	str	r5, [sp, #4]
 800458e:	0023      	movs	r3, r4
 8004590:	0022      	movs	r2, r4
 8004592:	9906      	ldr	r1, [sp, #24]
 8004594:	9805      	ldr	r0, [sp, #20]
 8004596:	9700      	str	r7, [sp, #0]
 8004598:	f001 ff6f 	bl	800647a <insert>
	for (i = 0; i < N; i++) {
 800459c:	3601      	adds	r6, #1
 800459e:	192d      	adds	r5, r5, r4
 80045a0:	e7eb      	b.n	800457a <mpc_QZ_matrix+0x36>

080045a2 <mpc_S_matrix>:

/*
 * S[column_b * column_b]
 */
void mpc_S_matrix(float S[], const float s, const size_t column_b) {
 80045a2:	b510      	push	{r4, lr}
	eye(S, s, column_b, column_b);
 80045a4:	0013      	movs	r3, r2
 80045a6:	f001 fc91 	bl	8005ecc <eye>
}
 80045aa:	bd10      	pop	{r4, pc}

080045ac <mpc_HS_matrix>:

/*
 * HS[(N * column_b) * (N * column_b)]
 * S[column_b * column_b]
 */
void mpc_HS_matrix(float HS[], const float S[], const size_t column_b, const size_t N) {
 80045ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Positive 2*S */
	float* p2S = (float*)malloc(column_b * column_b * sizeof(float));
 80045ae:	0016      	movs	r6, r2
 80045b0:	4356      	muls	r6, r2
void mpc_HS_matrix(float HS[], const float S[], const size_t column_b, const size_t N) {
 80045b2:	b08b      	sub	sp, #44	@ 0x2c
	float* p2S = (float*)malloc(column_b * column_b * sizeof(float));
 80045b4:	00b6      	lsls	r6, r6, #2
void mpc_HS_matrix(float HS[], const float S[], const size_t column_b, const size_t N) {
 80045b6:	9004      	str	r0, [sp, #16]
	float* p2S = (float*)malloc(column_b * column_b * sizeof(float));
 80045b8:	0030      	movs	r0, r6
void mpc_HS_matrix(float HS[], const float S[], const size_t column_b, const size_t N) {
 80045ba:	0014      	movs	r4, r2
 80045bc:	000d      	movs	r5, r1
 80045be:	9308      	str	r3, [sp, #32]
	float* p2S = (float*)malloc(column_b * column_b * sizeof(float));
 80045c0:	f006 f9fe 	bl	800a9c0 <malloc>
 80045c4:	9006      	str	r0, [sp, #24]
	eye(p2S, 2.0f * S[0], column_b, column_b);
 80045c6:	6828      	ldr	r0, [r5, #0]
 80045c8:	1c01      	adds	r1, r0, #0
 80045ca:	f7fb ffd5 	bl	8000578 <__aeabi_fadd>
 80045ce:	0023      	movs	r3, r4
 80045d0:	0022      	movs	r2, r4
 80045d2:	1c01      	adds	r1, r0, #0
 80045d4:	9806      	ldr	r0, [sp, #24]
 80045d6:	f001 fc79 	bl	8005ecc <eye>

	/* Negative -2*S */
	float* m2S = (float*)malloc(column_b * column_b * sizeof(float));
 80045da:	0030      	movs	r0, r6
 80045dc:	f006 f9f0 	bl	800a9c0 <malloc>
	eye(m2S, -2.0f * S[0], column_b, column_b);
 80045e0:	21c0      	movs	r1, #192	@ 0xc0
	float* m2S = (float*)malloc(column_b * column_b * sizeof(float));
 80045e2:	9009      	str	r0, [sp, #36]	@ 0x24
	eye(m2S, -2.0f * S[0], column_b, column_b);
 80045e4:	0609      	lsls	r1, r1, #24
 80045e6:	6828      	ldr	r0, [r5, #0]
 80045e8:	f7fc fb36 	bl	8000c58 <__aeabi_fmul>
 80045ec:	0023      	movs	r3, r4
 80045ee:	1c01      	adds	r1, r0, #0
 80045f0:	0022      	movs	r2, r4
 80045f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80045f4:	f001 fc6a 	bl	8005ecc <eye>

	/* Negative S */
	float* mS = (float*)malloc(column_b * column_b * sizeof(float));
 80045f8:	0030      	movs	r0, r6
 80045fa:	f006 f9e1 	bl	800a9c0 <malloc>
	eye(mS, -1.0f * S[0], column_b, column_b);
 80045fe:	2380      	movs	r3, #128	@ 0x80
 8004600:	6829      	ldr	r1, [r5, #0]
 8004602:	061b      	lsls	r3, r3, #24
 8004604:	18c9      	adds	r1, r1, r3
 8004606:	0022      	movs	r2, r4
 8004608:	0023      	movs	r3, r4
	float* mS = (float*)malloc(column_b * column_b * sizeof(float));
 800460a:	9005      	str	r0, [sp, #20]
	eye(mS, -1.0f * S[0], column_b, column_b);
 800460c:	f001 fc5e 	bl	8005ecc <eye>

	/* Fill */
	if (N == 1) {
 8004610:	9b08      	ldr	r3, [sp, #32]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d10f      	bne.n	8004636 <mpc_HS_matrix+0x8a>
		memcpy(HS, S, column_b * column_b * sizeof(float));
 8004616:	0032      	movs	r2, r6
 8004618:	0029      	movs	r1, r5
 800461a:	9804      	ldr	r0, [sp, #16]
 800461c:	f007 f8d6 	bl	800b7cc <memcpy>
		insert(mS, HS, column_b, column_b, N * column_b, i_column_b + column_b, i_column_b);
		insert(S, HS, column_b, column_b, N * column_b, i_column_b + column_b, i_column_b + column_b);
	}

	/* Free */
	free(p2S);
 8004620:	9806      	ldr	r0, [sp, #24]
 8004622:	f006 f9d7 	bl	800a9d4 <free>
	free(m2S);
 8004626:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004628:	f006 f9d4 	bl	800a9d4 <free>
	free(mS);
 800462c:	9805      	ldr	r0, [sp, #20]
 800462e:	f006 f9d1 	bl	800a9d4 <free>
}
 8004632:	b00b      	add	sp, #44	@ 0x2c
 8004634:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(HS, 0, N * column_b * N * column_b * sizeof(float));
 8004636:	9e08      	ldr	r6, [sp, #32]
		insert(p2S, HS, column_b, column_b, N * column_b, 0, 0);
 8004638:	2700      	movs	r7, #0
		memset(HS, 0, N * column_b * N * column_b * sizeof(float));
 800463a:	4366      	muls	r6, r4
 800463c:	0032      	movs	r2, r6
 800463e:	4372      	muls	r2, r6
 8004640:	2100      	movs	r1, #0
 8004642:	0092      	lsls	r2, r2, #2
 8004644:	9804      	ldr	r0, [sp, #16]
 8004646:	f007 f801 	bl	800b64c <memset>
		insert(p2S, HS, column_b, column_b, N * column_b, 0, 0);
 800464a:	0023      	movs	r3, r4
 800464c:	0022      	movs	r2, r4
 800464e:	9904      	ldr	r1, [sp, #16]
 8004650:	9806      	ldr	r0, [sp, #24]
 8004652:	9702      	str	r7, [sp, #8]
 8004654:	9701      	str	r7, [sp, #4]
 8004656:	9600      	str	r6, [sp, #0]
 8004658:	f001 ff0f 	bl	800647a <insert>
		insert(mS, HS, column_b, column_b, N * column_b, 0, column_b);
 800465c:	0023      	movs	r3, r4
 800465e:	0022      	movs	r2, r4
 8004660:	9904      	ldr	r1, [sp, #16]
 8004662:	9805      	ldr	r0, [sp, #20]
 8004664:	9402      	str	r4, [sp, #8]
 8004666:	9701      	str	r7, [sp, #4]
 8004668:	9600      	str	r6, [sp, #0]
 800466a:	f001 ff06 	bl	800647a <insert>
		for (i = 0; i < N - 2; i++) {
 800466e:	003b      	movs	r3, r7
 8004670:	9707      	str	r7, [sp, #28]
 8004672:	9a08      	ldr	r2, [sp, #32]
 8004674:	9907      	ldr	r1, [sp, #28]
 8004676:	3a02      	subs	r2, #2
			insert(mS, HS, column_b, column_b, N * column_b, i_column_b + column_b, i_column_b);
 8004678:	18e7      	adds	r7, r4, r3
		for (i = 0; i < N - 2; i++) {
 800467a:	428a      	cmp	r2, r1
 800467c:	d814      	bhi.n	80046a8 <mpc_HS_matrix+0xfc>
 800467e:	1b37      	subs	r7, r6, r4
			i_column_b = i * column_b;
 8004680:	1b3b      	subs	r3, r7, r4
		insert(mS, HS, column_b, column_b, N * column_b, i_column_b + column_b, i_column_b);
 8004682:	0022      	movs	r2, r4
 8004684:	9904      	ldr	r1, [sp, #16]
 8004686:	9805      	ldr	r0, [sp, #20]
 8004688:	9302      	str	r3, [sp, #8]
 800468a:	9701      	str	r7, [sp, #4]
 800468c:	0023      	movs	r3, r4
 800468e:	9600      	str	r6, [sp, #0]
 8004690:	f001 fef3 	bl	800647a <insert>
		insert(S, HS, column_b, column_b, N * column_b, i_column_b + column_b, i_column_b + column_b);
 8004694:	0023      	movs	r3, r4
 8004696:	0022      	movs	r2, r4
 8004698:	0028      	movs	r0, r5
 800469a:	9904      	ldr	r1, [sp, #16]
 800469c:	9702      	str	r7, [sp, #8]
 800469e:	9701      	str	r7, [sp, #4]
 80046a0:	9600      	str	r6, [sp, #0]
 80046a2:	f001 feea 	bl	800647a <insert>
 80046a6:	e7bb      	b.n	8004620 <mpc_HS_matrix+0x74>
			insert(mS, HS, column_b, column_b, N * column_b, i_column_b + column_b, i_column_b);
 80046a8:	0022      	movs	r2, r4
 80046aa:	9904      	ldr	r1, [sp, #16]
 80046ac:	9805      	ldr	r0, [sp, #20]
 80046ae:	9302      	str	r3, [sp, #8]
 80046b0:	9701      	str	r7, [sp, #4]
 80046b2:	0023      	movs	r3, r4
 80046b4:	9600      	str	r6, [sp, #0]
 80046b6:	f001 fee0 	bl	800647a <insert>
			insert(p2S, HS, column_b, column_b, N * column_b, i_column_b + column_b, i_column_b + column_b);
 80046ba:	0023      	movs	r3, r4
 80046bc:	0022      	movs	r2, r4
 80046be:	9904      	ldr	r1, [sp, #16]
 80046c0:	9806      	ldr	r0, [sp, #24]
 80046c2:	9702      	str	r7, [sp, #8]
 80046c4:	9701      	str	r7, [sp, #4]
 80046c6:	9600      	str	r6, [sp, #0]
 80046c8:	f001 fed7 	bl	800647a <insert>
			insert(mS, HS, column_b, column_b, N * column_b, i_column_b + column_b, i_column_b + 2 * column_b);
 80046cc:	19e3      	adds	r3, r4, r7
 80046ce:	9302      	str	r3, [sp, #8]
 80046d0:	0022      	movs	r2, r4
 80046d2:	0023      	movs	r3, r4
 80046d4:	9904      	ldr	r1, [sp, #16]
 80046d6:	9805      	ldr	r0, [sp, #20]
 80046d8:	9701      	str	r7, [sp, #4]
 80046da:	9600      	str	r6, [sp, #0]
 80046dc:	f001 fecd 	bl	800647a <insert>
		for (i = 0; i < N - 2; i++) {
 80046e0:	9b07      	ldr	r3, [sp, #28]
 80046e2:	3301      	adds	r3, #1
 80046e4:	9307      	str	r3, [sp, #28]
 80046e6:	003b      	movs	r3, r7
 80046e8:	e7c3      	b.n	8004672 <mpc_HS_matrix+0xc6>

080046ea <mpc_H_matrix>:
 * H[(N * column_b) * (N * column_b)]
 * Gamma[(N * row_c) * (N * column_b)]
 * QZ[(N * row_c) * (N * row_c)]
 * HS[(N * column_b) * (N * column_b)]
 */
void mpc_H_matrix(float H[], const float Gamma[], const float QZ[], const float HS[], const size_t row_c, const size_t column_b, const size_t N) {
 80046ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ec:	b087      	sub	sp, #28
	/* Transpose Gamma */
	float* GammaT = (float*)malloc((N * row_c) * (N * column_b) * sizeof(float));
 80046ee:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
void mpc_H_matrix(float H[], const float Gamma[], const float QZ[], const float HS[], const size_t row_c, const size_t column_b, const size_t N) {
 80046f0:	9305      	str	r3, [sp, #20]
 80046f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
	float* GammaT = (float*)malloc((N * row_c) * (N * column_b) * sizeof(float));
 80046f4:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80046f6:	435c      	muls	r4, r3
 80046f8:	0027      	movs	r7, r4
 80046fa:	435d      	muls	r5, r3
 80046fc:	436f      	muls	r7, r5
 80046fe:	00bf      	lsls	r7, r7, #2
void mpc_H_matrix(float H[], const float Gamma[], const float QZ[], const float HS[], const size_t row_c, const size_t column_b, const size_t N) {
 8004700:	9002      	str	r0, [sp, #8]
	float* GammaT = (float*)malloc((N * row_c) * (N * column_b) * sizeof(float));
 8004702:	0038      	movs	r0, r7
void mpc_H_matrix(float H[], const float Gamma[], const float QZ[], const float HS[], const size_t row_c, const size_t column_b, const size_t N) {
 8004704:	9103      	str	r1, [sp, #12]
 8004706:	9204      	str	r2, [sp, #16]
	float* GammaT = (float*)malloc((N * row_c) * (N * column_b) * sizeof(float));
 8004708:	f006 f95a 	bl	800a9c0 <malloc>
 800470c:	0006      	movs	r6, r0
	memcpy(GammaT, Gamma, (N * row_c) * (N * column_b) * sizeof(float));
 800470e:	003a      	movs	r2, r7
 8004710:	9903      	ldr	r1, [sp, #12]
 8004712:	f007 f85b 	bl	800b7cc <memcpy>
	tran(GammaT, N * row_c, N * column_b);
 8004716:	0022      	movs	r2, r4
 8004718:	0029      	movs	r1, r5
 800471a:	0030      	movs	r0, r6
 800471c:	f001 fe5e 	bl	80063dc <tran>

	/* Compute QZGamma = QZ * Gamma */
	float* QZGamma = (float*)malloc(N * row_c * N * column_b * sizeof(float));
 8004720:	0038      	movs	r0, r7
 8004722:	f006 f94d 	bl	800a9c0 <malloc>
 8004726:	0007      	movs	r7, r0
	mul(QZ, Gamma, QZGamma, N * row_c, N * row_c, N * column_b);
 8004728:	002b      	movs	r3, r5
 800472a:	0002      	movs	r2, r0
 800472c:	9903      	ldr	r1, [sp, #12]
 800472e:	9804      	ldr	r0, [sp, #16]
 8004730:	9401      	str	r4, [sp, #4]
 8004732:	9500      	str	r5, [sp, #0]
 8004734:	f001 fd56 	bl	80061e4 <mul>

	/* Compute H = GammaT * QZGamma + HS */
	mul(GammaT, QZGamma, H, N * column_b, N * row_c, N * column_b);
 8004738:	0023      	movs	r3, r4
 800473a:	9401      	str	r4, [sp, #4]
 800473c:	9500      	str	r5, [sp, #0]
 800473e:	0039      	movs	r1, r7
 8004740:	0030      	movs	r0, r6
 8004742:	9a02      	ldr	r2, [sp, #8]
 8004744:	f001 fd4e 	bl	80061e4 <mul>
	size_t i;
	for (i = 0; i < N * column_b * N * column_b; i++) {
 8004748:	2500      	movs	r5, #0
 800474a:	4364      	muls	r4, r4
 800474c:	00a4      	lsls	r4, r4, #2
 800474e:	42ac      	cmp	r4, r5
 8004750:	d107      	bne.n	8004762 <mpc_H_matrix+0x78>
		H[i] += HS[i];
	}

	/* Free */
	free(GammaT);
 8004752:	0030      	movs	r0, r6
 8004754:	f006 f93e 	bl	800a9d4 <free>
	free(QZGamma);
 8004758:	0038      	movs	r0, r7
 800475a:	f006 f93b 	bl	800a9d4 <free>
}
 800475e:	b007      	add	sp, #28
 8004760:	bdf0      	pop	{r4, r5, r6, r7, pc}
		H[i] += HS[i];
 8004762:	9b05      	ldr	r3, [sp, #20]
 8004764:	5959      	ldr	r1, [r3, r5]
 8004766:	9b02      	ldr	r3, [sp, #8]
 8004768:	5958      	ldr	r0, [r3, r5]
 800476a:	f7fb ff05 	bl	8000578 <__aeabi_fadd>
 800476e:	9b02      	ldr	r3, [sp, #8]
 8004770:	5158      	str	r0, [r3, r5]
	for (i = 0; i < N * column_b * N * column_b; i++) {
 8004772:	3504      	adds	r5, #4
 8004774:	e7eb      	b.n	800474e <mpc_H_matrix+0x64>

08004776 <mpc_Mx0_matrix>:
 * Mx0[(N * column_b) * row_a]
 * Gamma[(N * row_c) * (N * column_b)]
 * QZ[(N * row_c) * (N * row_c)]
 * Phi[(N * row_c) * row_a]
 */
void mpc_Mx0_matrix(float Mx0[], const float Gamma[], const float QZ[], const float Phi[], const size_t row_a, const size_t row_c, const size_t column_b, const size_t N) {
 8004776:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004778:	b087      	sub	sp, #28
	/* Transpose Gamma */
	float* GammaT = (float*)malloc((N * row_c) * (N * column_b) * sizeof(float));
 800477a:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
void mpc_Mx0_matrix(float Mx0[], const float Gamma[], const float QZ[], const float Phi[], const size_t row_a, const size_t row_c, const size_t column_b, const size_t N) {
 800477c:	9305      	str	r3, [sp, #20]
 800477e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
	float* GammaT = (float*)malloc((N * row_c) * (N * column_b) * sizeof(float));
 8004780:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8004782:	435e      	muls	r6, r3
 8004784:	0035      	movs	r5, r6
 8004786:	435f      	muls	r7, r3
 8004788:	437d      	muls	r5, r7
 800478a:	00ad      	lsls	r5, r5, #2
void mpc_Mx0_matrix(float Mx0[], const float Gamma[], const float QZ[], const float Phi[], const size_t row_a, const size_t row_c, const size_t column_b, const size_t N) {
 800478c:	9002      	str	r0, [sp, #8]
	float* GammaT = (float*)malloc((N * row_c) * (N * column_b) * sizeof(float));
 800478e:	0028      	movs	r0, r5
void mpc_Mx0_matrix(float Mx0[], const float Gamma[], const float QZ[], const float Phi[], const size_t row_a, const size_t row_c, const size_t column_b, const size_t N) {
 8004790:	9103      	str	r1, [sp, #12]
 8004792:	9204      	str	r2, [sp, #16]
	float* GammaT = (float*)malloc((N * row_c) * (N * column_b) * sizeof(float));
 8004794:	f006 f914 	bl	800a9c0 <malloc>
 8004798:	0004      	movs	r4, r0
	memcpy(GammaT, Gamma, (N * row_c) * (N * column_b) * sizeof(float));
 800479a:	002a      	movs	r2, r5
 800479c:	9903      	ldr	r1, [sp, #12]
 800479e:	f007 f815 	bl	800b7cc <memcpy>
	tran(GammaT, N * row_c, N * column_b);
 80047a2:	0032      	movs	r2, r6
 80047a4:	0039      	movs	r1, r7
 80047a6:	0020      	movs	r0, r4
 80047a8:	f001 fe18 	bl	80063dc <tran>

	/* Compute QZPhi = QZ * Phi */
	float* QZPhi = (float*)malloc(N * row_c * row_a * sizeof(float));
 80047ac:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80047ae:	4378      	muls	r0, r7
 80047b0:	0080      	lsls	r0, r0, #2
 80047b2:	f006 f905 	bl	800a9c0 <malloc>
 80047b6:	0005      	movs	r5, r0
	mul(QZ, Phi, QZPhi, N * row_c, N * row_c, row_a);
 80047b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80047ba:	0002      	movs	r2, r0
 80047bc:	9905      	ldr	r1, [sp, #20]
 80047be:	9804      	ldr	r0, [sp, #16]
 80047c0:	9301      	str	r3, [sp, #4]
 80047c2:	9700      	str	r7, [sp, #0]
 80047c4:	003b      	movs	r3, r7
 80047c6:	f001 fd0d 	bl	80061e4 <mul>

	/* Compute Mx0 = GammaT * QZPhi */
	mul(GammaT, QZPhi, Mx0, N * column_b, N * row_c, row_a);
 80047ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80047cc:	0029      	movs	r1, r5
 80047ce:	9a02      	ldr	r2, [sp, #8]
 80047d0:	0020      	movs	r0, r4
 80047d2:	9301      	str	r3, [sp, #4]
 80047d4:	9700      	str	r7, [sp, #0]
 80047d6:	0033      	movs	r3, r6
 80047d8:	f001 fd04 	bl	80061e4 <mul>

	/* Free */
	free(GammaT);
 80047dc:	0020      	movs	r0, r4
 80047de:	f006 f8f9 	bl	800a9d4 <free>
	free(QZPhi);
 80047e2:	0028      	movs	r0, r5
 80047e4:	f006 f8f6 	bl	800a9d4 <free>
}
 80047e8:	b007      	add	sp, #28
 80047ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080047ec <mpc_Mum1_matrix>:

/*
 * Mum1[(N * column_b) * column_b]
 * S[column_b * column_b]
 */
void mpc_Mum1_matrix(float Mum1[], const float S[], const size_t column_b, const size_t N) {
 80047ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Negative S */
	float* mS = (float*)malloc(column_b * column_b * sizeof(float));
 80047ee:	0015      	movs	r5, r2
 80047f0:	4355      	muls	r5, r2
void mpc_Mum1_matrix(float Mum1[], const float S[], const size_t column_b, const size_t N) {
 80047f2:	b087      	sub	sp, #28
 80047f4:	0007      	movs	r7, r0
	float* mS = (float*)malloc(column_b * column_b * sizeof(float));
 80047f6:	00a8      	lsls	r0, r5, #2
void mpc_Mum1_matrix(float Mum1[], const float S[], const size_t column_b, const size_t N) {
 80047f8:	0014      	movs	r4, r2
 80047fa:	9305      	str	r3, [sp, #20]
 80047fc:	9104      	str	r1, [sp, #16]
	float* mS = (float*)malloc(column_b * column_b * sizeof(float));
 80047fe:	f006 f8df 	bl	800a9c0 <malloc>
 8004802:	0006      	movs	r6, r0
	memcpy(mS, S, column_b * column_b * sizeof(float));
 8004804:	9904      	ldr	r1, [sp, #16]
 8004806:	00aa      	lsls	r2, r5, #2
 8004808:	f006 ffe0 	bl	800b7cc <memcpy>
	scalar(mS, -1.0f, column_b * column_b);
 800480c:	002a      	movs	r2, r5
 800480e:	0030      	movs	r0, r6
 8004810:	490c      	ldr	r1, [pc, #48]	@ (8004844 <mpc_Mum1_matrix+0x58>)
 8004812:	f001 fe4e 	bl	80064b2 <scalar>

	/* Insert */
	memset(Mum1, 0, (N * column_b) * column_b * sizeof(float));
 8004816:	9b05      	ldr	r3, [sp, #20]
 8004818:	2100      	movs	r1, #0
 800481a:	435d      	muls	r5, r3
 800481c:	0038      	movs	r0, r7
 800481e:	00aa      	lsls	r2, r5, #2
 8004820:	f006 ff14 	bl	800b64c <memset>
	insert(mS, Mum1, column_b, column_b, column_b, 0, 0);
 8004824:	2300      	movs	r3, #0
 8004826:	0022      	movs	r2, r4
 8004828:	0039      	movs	r1, r7
 800482a:	0030      	movs	r0, r6
 800482c:	9302      	str	r3, [sp, #8]
 800482e:	9301      	str	r3, [sp, #4]
 8004830:	9400      	str	r4, [sp, #0]
 8004832:	0023      	movs	r3, r4
 8004834:	f001 fe21 	bl	800647a <insert>

	/* Free */
	free(mS);
 8004838:	0030      	movs	r0, r6
 800483a:	f006 f8cb 	bl	800a9d4 <free>
}
 800483e:	b007      	add	sp, #28
 8004840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004842:	46c0      	nop			@ (mov r8, r8)
 8004844:	bf800000 	.word	0xbf800000

08004848 <mpc_MR_matrix>:
/*
 * MR[(N * column_b) * (N * row_c)]
 * Gamma[(N * row_c) * (N * column_b)]
 * QZ[(N * row_c) * (N * row_c)]
 */
void mpc_MR_matrix(float MR[], const float Gamma[], const float QZ[], const size_t row_c, const size_t column_b, const size_t N) {
 8004848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800484a:	b087      	sub	sp, #28
	/* Transpose -Gamma */
	float* GammaT = (float*)malloc((N * row_c) * (N * column_b) * sizeof(float));
 800484c:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
void mpc_MR_matrix(float MR[], const float Gamma[], const float QZ[], const size_t row_c, const size_t column_b, const size_t N) {
 800484e:	9205      	str	r2, [sp, #20]
 8004850:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004852:	9003      	str	r0, [sp, #12]
	float* GammaT = (float*)malloc((N * row_c) * (N * column_b) * sizeof(float));
 8004854:	4357      	muls	r7, r2
 8004856:	003d      	movs	r5, r7
 8004858:	4353      	muls	r3, r2
 800485a:	435d      	muls	r5, r3
 800485c:	00ad      	lsls	r5, r5, #2
 800485e:	0028      	movs	r0, r5
 8004860:	001e      	movs	r6, r3
void mpc_MR_matrix(float MR[], const float Gamma[], const float QZ[], const size_t row_c, const size_t column_b, const size_t N) {
 8004862:	9104      	str	r1, [sp, #16]
	float* GammaT = (float*)malloc((N * row_c) * (N * column_b) * sizeof(float));
 8004864:	f006 f8ac 	bl	800a9c0 <malloc>
 8004868:	0004      	movs	r4, r0
	memcpy(GammaT, Gamma, (N * row_c) * (N * column_b) * sizeof(float));
 800486a:	002a      	movs	r2, r5
 800486c:	9904      	ldr	r1, [sp, #16]
 800486e:	f006 ffad 	bl	800b7cc <memcpy>
	tran(GammaT, N * row_c, N * column_b);
 8004872:	003a      	movs	r2, r7
 8004874:	0031      	movs	r1, r6
 8004876:	0020      	movs	r0, r4
 8004878:	f001 fdb0 	bl	80063dc <tran>
	size_t i;
	for (i = 0; i < (N * row_c) * (N * column_b); i++) {
 800487c:	0023      	movs	r3, r4
 800487e:	192d      	adds	r5, r5, r4
 8004880:	42ab      	cmp	r3, r5
 8004882:	d10c      	bne.n	800489e <mpc_MR_matrix+0x56>
		GammaT[i] = -GammaT[i];
	}

	/* MR = -GammaT * QZ */
	mul(GammaT, QZ, MR, N * column_b, N * row_c, N * row_c);
 8004884:	003b      	movs	r3, r7
 8004886:	0020      	movs	r0, r4
 8004888:	9a03      	ldr	r2, [sp, #12]
 800488a:	9905      	ldr	r1, [sp, #20]
 800488c:	9601      	str	r6, [sp, #4]
 800488e:	9600      	str	r6, [sp, #0]
 8004890:	f001 fca8 	bl	80061e4 <mul>

	/* Free */
	free(GammaT);
 8004894:	0020      	movs	r0, r4
 8004896:	f006 f89d 	bl	800a9d4 <free>
}
 800489a:	b007      	add	sp, #28
 800489c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		GammaT[i] = -GammaT[i];
 800489e:	2180      	movs	r1, #128	@ 0x80
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	0609      	lsls	r1, r1, #24
 80048a4:	1852      	adds	r2, r2, r1
 80048a6:	c304      	stmia	r3!, {r2}
	for (i = 0; i < (N * row_c) * (N * column_b); i++) {
 80048a8:	e7ea      	b.n	8004880 <mpc_MR_matrix+0x38>

080048aa <mpc_MD_matrix>:
 * MD[(N * column_b) * (N * column_e)]
 * Gamma[(N * row_c) * (N * column_b)]
 * QZ[(N * row_c) * (N * row_c)]
 * Gammad[(N * row_c) * (N * column_e)]
 */
void mpc_MD_matrix(float MD[], const float Gamma[], const float Gammad[], const float QZ[], const size_t row_c, const size_t column_b, const size_t column_e, const size_t N) {
 80048aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048ac:	b087      	sub	sp, #28
	/* Transpose Gamma */
	float* GammaT = (float*)malloc((N * row_c) * (N * column_b) * sizeof(float));
 80048ae:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
void mpc_MD_matrix(float MD[], const float Gamma[], const float Gammad[], const float QZ[], const size_t row_c, const size_t column_b, const size_t column_e, const size_t N) {
 80048b0:	9305      	str	r3, [sp, #20]
	float* GammaT = (float*)malloc((N * row_c) * (N * column_b) * sizeof(float));
 80048b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
void mpc_MD_matrix(float MD[], const float Gamma[], const float Gammad[], const float QZ[], const size_t row_c, const size_t column_b, const size_t column_e, const size_t N) {
 80048b4:	9204      	str	r2, [sp, #16]
	float* GammaT = (float*)malloc((N * row_c) * (N * column_b) * sizeof(float));
 80048b6:	435f      	muls	r7, r3
 80048b8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80048ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
void mpc_MD_matrix(float MD[], const float Gamma[], const float Gammad[], const float QZ[], const size_t row_c, const size_t column_b, const size_t column_e, const size_t N) {
 80048bc:	9003      	str	r0, [sp, #12]
	float* GammaT = (float*)malloc((N * row_c) * (N * column_b) * sizeof(float));
 80048be:	4353      	muls	r3, r2
 80048c0:	001d      	movs	r5, r3
 80048c2:	437d      	muls	r5, r7
 80048c4:	00ad      	lsls	r5, r5, #2
 80048c6:	0028      	movs	r0, r5
 80048c8:	9302      	str	r3, [sp, #8]
void mpc_MD_matrix(float MD[], const float Gamma[], const float Gammad[], const float QZ[], const size_t row_c, const size_t column_b, const size_t column_e, const size_t N) {
 80048ca:	000e      	movs	r6, r1
	float* GammaT = (float*)malloc((N * row_c) * (N * column_b) * sizeof(float));
 80048cc:	f006 f878 	bl	800a9c0 <malloc>
 80048d0:	0004      	movs	r4, r0
	memcpy(GammaT, Gamma, (N * row_c) * (N * column_b) * sizeof(float));
 80048d2:	002a      	movs	r2, r5
 80048d4:	0031      	movs	r1, r6
 80048d6:	f006 ff79 	bl	800b7cc <memcpy>
	tran(GammaT, N * row_c, N * column_b);
 80048da:	0039      	movs	r1, r7
 80048dc:	9a02      	ldr	r2, [sp, #8]
 80048de:	0020      	movs	r0, r4
 80048e0:	f001 fd7c 	bl	80063dc <tran>

	/* Compute QZGamma = QZ * Gammad */
	float* QZGammad = (float*)malloc(N * row_c * N * column_e * sizeof(float));
 80048e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80048e6:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80048e8:	435e      	muls	r6, r3
 80048ea:	0030      	movs	r0, r6
 80048ec:	4378      	muls	r0, r7
 80048ee:	0080      	lsls	r0, r0, #2
 80048f0:	f006 f866 	bl	800a9c0 <malloc>
 80048f4:	0005      	movs	r5, r0
	mul(QZ, Gammad, QZGammad, N * row_c, N * row_c, N * column_e);
 80048f6:	003b      	movs	r3, r7
 80048f8:	0002      	movs	r2, r0
 80048fa:	9904      	ldr	r1, [sp, #16]
 80048fc:	9805      	ldr	r0, [sp, #20]
 80048fe:	9601      	str	r6, [sp, #4]
 8004900:	9700      	str	r7, [sp, #0]
 8004902:	f001 fc6f 	bl	80061e4 <mul>

	/* Compute MD = GammaT * QZGammad */
	mul(GammaT, QZGammad, MD, N * column_b, N * row_c, N * column_e);
 8004906:	0029      	movs	r1, r5
 8004908:	9b02      	ldr	r3, [sp, #8]
 800490a:	9a03      	ldr	r2, [sp, #12]
 800490c:	0020      	movs	r0, r4
 800490e:	9601      	str	r6, [sp, #4]
 8004910:	9700      	str	r7, [sp, #0]
 8004912:	f001 fc67 	bl	80061e4 <mul>

	/* Free */
	free(GammaT);
 8004916:	0020      	movs	r0, r4
 8004918:	f006 f85c 	bl	800a9d4 <free>
	free(QZGammad);
 800491c:	0028      	movs	r0, r5
 800491e:	f006 f859 	bl	800a9d4 <free>
}
 8004922:	b007      	add	sp, #28
 8004924:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004928 <mpc_Lambda_matrix>:

/*
 * Lambda[((N-1)*column_b) * (N * column_b)]
 */
void mpc_Lambda_matrix(float Lambda[], const size_t column_b, const size_t N) {
 8004928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800492a:	000c      	movs	r4, r1
	memset(Lambda, 0, ((N - 1) * column_b) * (N * column_b) * sizeof(float));
 800492c:	1e53      	subs	r3, r2, #1
 800492e:	434a      	muls	r2, r1
void mpc_Lambda_matrix(float Lambda[], const size_t column_b, const size_t N) {
 8004930:	b08b      	sub	sp, #44	@ 0x2c
	memset(Lambda, 0, ((N - 1) * column_b) * (N * column_b) * sizeof(float));
 8004932:	9205      	str	r2, [sp, #20]
 8004934:	001a      	movs	r2, r3
	float* I = (float*)malloc(column_b * column_b * sizeof(float));
 8004936:	0026      	movs	r6, r4
	memset(Lambda, 0, ((N - 1) * column_b) * (N * column_b) * sizeof(float));
 8004938:	434a      	muls	r2, r1
 800493a:	9308      	str	r3, [sp, #32]
 800493c:	9b05      	ldr	r3, [sp, #20]
	float* I = (float*)malloc(column_b * column_b * sizeof(float));
 800493e:	4366      	muls	r6, r4
	memset(Lambda, 0, ((N - 1) * column_b) * (N * column_b) * sizeof(float));
 8004940:	435a      	muls	r2, r3
 8004942:	2100      	movs	r1, #0
 8004944:	0092      	lsls	r2, r2, #2
void mpc_Lambda_matrix(float Lambda[], const size_t column_b, const size_t N) {
 8004946:	9007      	str	r0, [sp, #28]
	memset(Lambda, 0, ((N - 1) * column_b) * (N * column_b) * sizeof(float));
 8004948:	f006 fe80 	bl	800b64c <memset>
	float* I = (float*)malloc(column_b * column_b * sizeof(float));
 800494c:	00b0      	lsls	r0, r6, #2
 800494e:	f006 f837 	bl	800a9c0 <malloc>
	eye(I, 1.0f, column_b, column_b);
 8004952:	21fe      	movs	r1, #254	@ 0xfe
 8004954:	0023      	movs	r3, r4
 8004956:	0022      	movs	r2, r4
 8004958:	0589      	lsls	r1, r1, #22
	float* I = (float*)malloc(column_b * column_b * sizeof(float));
 800495a:	0005      	movs	r5, r0
	eye(I, 1.0f, column_b, column_b);
 800495c:	f001 fab6 	bl	8005ecc <eye>
	float* T = (float*)malloc(column_b * (2 * column_b) * sizeof(float));
 8004960:	00f0      	lsls	r0, r6, #3
 8004962:	f006 f82d 	bl	800a9c0 <malloc>
	insert(I, T, column_b, column_b, 2 * column_b, 0, column_b);
 8004966:	2600      	movs	r6, #0
	float* T = (float*)malloc(column_b * (2 * column_b) * sizeof(float));
 8004968:	0007      	movs	r7, r0
	insert(I, T, column_b, column_b, 2 * column_b, 0, column_b);
 800496a:	0063      	lsls	r3, r4, #1
 800496c:	0001      	movs	r1, r0
 800496e:	0022      	movs	r2, r4
 8004970:	0028      	movs	r0, r5
 8004972:	9309      	str	r3, [sp, #36]	@ 0x24
 8004974:	9601      	str	r6, [sp, #4]
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	9402      	str	r4, [sp, #8]
 800497a:	0023      	movs	r3, r4
 800497c:	f001 fd7d 	bl	800647a <insert>
	eye(I, -1.0f, column_b, column_b);
 8004980:	0023      	movs	r3, r4
 8004982:	0022      	movs	r2, r4
 8004984:	0028      	movs	r0, r5
 8004986:	491a      	ldr	r1, [pc, #104]	@ (80049f0 <mpc_Lambda_matrix+0xc8>)
 8004988:	f001 faa0 	bl	8005ecc <eye>
	insert(I, T, column_b, column_b, 2 * column_b, 0, 0);
 800498c:	0063      	lsls	r3, r4, #1
 800498e:	0022      	movs	r2, r4
 8004990:	0039      	movs	r1, r7
 8004992:	0028      	movs	r0, r5
 8004994:	9602      	str	r6, [sp, #8]
 8004996:	9601      	str	r6, [sp, #4]
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	0023      	movs	r3, r4
 800499c:	f001 fd6d 	bl	800647a <insert>
	insert(T, Lambda, column_b, 2 * column_b, N * column_b, 0, 0);
 80049a0:	9b05      	ldr	r3, [sp, #20]
 80049a2:	9602      	str	r6, [sp, #8]
 80049a4:	9601      	str	r6, [sp, #4]
 80049a6:	9300      	str	r3, [sp, #0]
 80049a8:	0022      	movs	r2, r4
 80049aa:	0063      	lsls	r3, r4, #1
 80049ac:	0038      	movs	r0, r7
 80049ae:	9907      	ldr	r1, [sp, #28]
 80049b0:	f001 fd63 	bl	800647a <insert>
	size_t i;
	for (i = 1; i < N - 1; i++) {
 80049b4:	2301      	movs	r3, #1
 80049b6:	0026      	movs	r6, r4
 80049b8:	9306      	str	r3, [sp, #24]
 80049ba:	9b08      	ldr	r3, [sp, #32]
 80049bc:	9a06      	ldr	r2, [sp, #24]
 80049be:	4293      	cmp	r3, r2
 80049c0:	d807      	bhi.n	80049d2 <mpc_Lambda_matrix+0xaa>
		insert(T, Lambda, column_b, 2 * column_b, N * column_b, i * column_b, i * column_b);
	}

	/* Free */
	free(I);
 80049c2:	0028      	movs	r0, r5
 80049c4:	f006 f806 	bl	800a9d4 <free>
	free(T);
 80049c8:	0038      	movs	r0, r7
 80049ca:	f006 f803 	bl	800a9d4 <free>
}
 80049ce:	b00b      	add	sp, #44	@ 0x2c
 80049d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		insert(T, Lambda, column_b, 2 * column_b, N * column_b, i * column_b, i * column_b);
 80049d2:	9b05      	ldr	r3, [sp, #20]
 80049d4:	9602      	str	r6, [sp, #8]
 80049d6:	9601      	str	r6, [sp, #4]
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	0022      	movs	r2, r4
 80049dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049de:	0038      	movs	r0, r7
 80049e0:	9907      	ldr	r1, [sp, #28]
 80049e2:	f001 fd4a 	bl	800647a <insert>
	for (i = 1; i < N - 1; i++) {
 80049e6:	9b06      	ldr	r3, [sp, #24]
 80049e8:	1936      	adds	r6, r6, r4
 80049ea:	3301      	adds	r3, #1
 80049ec:	9306      	str	r3, [sp, #24]
 80049ee:	e7e4      	b.n	80049ba <mpc_Lambda_matrix+0x92>
 80049f0:	bf800000 	.word	0xbf800000

080049f4 <mpc_barSpsi_matrix>:

/*
 * barSpsi[(N * column_b * (N * column_b)]
 */
void mpc_barSpsi_matrix(float barSpsi[], const float Spsi, const size_t column_b, const size_t N) {
 80049f4:	b510      	push	{r4, lr}
	eye(barSpsi, Spsi, N * column_b, N * column_b);
 80049f6:	435a      	muls	r2, r3
 80049f8:	0013      	movs	r3, r2
 80049fa:	f001 fa67 	bl	8005ecc <eye>
}
 80049fe:	bd10      	pop	{r4, pc}

08004a00 <mpc_barspsi_vector>:
/*
 * barspsi[N]
 */
void mpc_barspsi_vector(float barspsi[], const float spsi, const size_t column_b, const size_t N) {
	size_t i;
	for (i = 0; i < N * column_b; i++) {
 8004a00:	435a      	muls	r2, r3
 8004a02:	0092      	lsls	r2, r2, #2
 8004a04:	1882      	adds	r2, r0, r2
 8004a06:	4290      	cmp	r0, r2
 8004a08:	d100      	bne.n	8004a0c <mpc_barspsi_vector+0xc>
		barspsi[i] = spsi;
	}
}
 8004a0a:	4770      	bx	lr
		barspsi[i] = spsi;
 8004a0c:	c002      	stmia	r0!, {r1}
	for (i = 0; i < N * column_b; i++) {
 8004a0e:	e7fa      	b.n	8004a06 <mpc_barspsi_vector+0x6>

08004a10 <mpc_barH_matrix>:
/*
 * barH[(2 * N * column_b) * (2 * N * column_b)]
 * H[(N * column_b) * (N * column_b)]
 * barSpsi[(N * column_b) * (N * column_b)]
 */
void mpc_barH_matrix(float barH[], const float H[], const float barSpsi[], const size_t column_b, const size_t N) {
 8004a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a12:	b087      	sub	sp, #28
	memset(barH, 0, (2 * N * column_b) * (2 * N * column_b) * sizeof(float));
 8004a14:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
void mpc_barH_matrix(float barH[], const float H[], const float barSpsi[], const size_t column_b, const size_t N) {
 8004a16:	9205      	str	r2, [sp, #20]
	memset(barH, 0, (2 * N * column_b) * (2 * N * column_b) * sizeof(float));
 8004a18:	435c      	muls	r4, r3
 8004a1a:	0022      	movs	r2, r4
 8004a1c:	4362      	muls	r2, r4
void mpc_barH_matrix(float barH[], const float H[], const float barSpsi[], const size_t column_b, const size_t N) {
 8004a1e:	000e      	movs	r6, r1
	memset(barH, 0, (2 * N * column_b) * (2 * N * column_b) * sizeof(float));
 8004a20:	0112      	lsls	r2, r2, #4
 8004a22:	2100      	movs	r1, #0
void mpc_barH_matrix(float barH[], const float H[], const float barSpsi[], const size_t column_b, const size_t N) {
 8004a24:	0005      	movs	r5, r0
	memset(barH, 0, (2 * N * column_b) * (2 * N * column_b) * sizeof(float));
 8004a26:	f006 fe11 	bl	800b64c <memset>
	insert(H, barH, N * column_b, N * column_b, 2 * N * column_b, 0, 0);
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	0067      	lsls	r7, r4, #1
 8004a2e:	0022      	movs	r2, r4
 8004a30:	0029      	movs	r1, r5
 8004a32:	0030      	movs	r0, r6
 8004a34:	9302      	str	r3, [sp, #8]
 8004a36:	9301      	str	r3, [sp, #4]
 8004a38:	9700      	str	r7, [sp, #0]
 8004a3a:	0023      	movs	r3, r4
 8004a3c:	f001 fd1d 	bl	800647a <insert>
	insert(barSpsi, barH, N * column_b, N * column_b, 2 * N * column_b, N * column_b, N * column_b);
 8004a40:	0023      	movs	r3, r4
 8004a42:	0022      	movs	r2, r4
 8004a44:	0029      	movs	r1, r5
 8004a46:	9805      	ldr	r0, [sp, #20]
 8004a48:	9402      	str	r4, [sp, #8]
 8004a4a:	9401      	str	r4, [sp, #4]
 8004a4c:	9700      	str	r7, [sp, #0]
 8004a4e:	f001 fd14 	bl	800647a <insert>
}
 8004a52:	b007      	add	sp, #28
 8004a54:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a56 <mpc_eta_vector>:
/*
 * eta[row_c]
 * r[row_c]
 * y[row_c]
 */
void mpc_eta_vector(float eta[], const float r[], const float y[], const float alpha, const bool integral_active, const size_t row_c) {
 8004a56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a58:	9301      	str	r3, [sp, #4]
 8004a5a:	ab08      	add	r3, sp, #32
 8004a5c:	9100      	str	r1, [sp, #0]
 8004a5e:	7819      	ldrb	r1, [r3, #0]
 8004a60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a62:	0005      	movs	r5, r0
 8004a64:	0017      	movs	r7, r2
	if (integral_active) {
 8004a66:	2400      	movs	r4, #0
 8004a68:	009e      	lsls	r6, r3, #2
 8004a6a:	2900      	cmp	r1, #0
 8004a6c:	d111      	bne.n	8004a92 <mpc_eta_vector+0x3c>
			const float psi = r[i] - y[i];
			eta[i] = eta[i] + alpha * psi;
		}
	}else{
		/* Reset the integral */
		memset(eta, 0, row_c * sizeof(float));
 8004a6e:	0032      	movs	r2, r6
 8004a70:	f006 fdec 	bl	800b64c <memset>
	}
}
 8004a74:	e00f      	b.n	8004a96 <mpc_eta_vector+0x40>
			const float psi = r[i] - y[i];
 8004a76:	9b00      	ldr	r3, [sp, #0]
 8004a78:	5939      	ldr	r1, [r7, r4]
 8004a7a:	5918      	ldr	r0, [r3, r4]
 8004a7c:	f7fc fa2a 	bl	8000ed4 <__aeabi_fsub>
			eta[i] = eta[i] + alpha * psi;
 8004a80:	9901      	ldr	r1, [sp, #4]
 8004a82:	f7fc f8e9 	bl	8000c58 <__aeabi_fmul>
 8004a86:	1c01      	adds	r1, r0, #0
 8004a88:	5928      	ldr	r0, [r5, r4]
 8004a8a:	f7fb fd75 	bl	8000578 <__aeabi_fadd>
 8004a8e:	5128      	str	r0, [r5, r4]
		for (i = 0; i < row_c; i++) {
 8004a90:	3404      	adds	r4, #4
 8004a92:	42b4      	cmp	r4, r6
 8004a94:	d1ef      	bne.n	8004a76 <mpc_eta_vector+0x20>
}
 8004a96:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08004a98 <mpc_antiwindup_vector>:

/*
 * eta[row_c]
 */
void mpc_antiwindup_vector(float eta[], const float antiwindup, const size_t row_c) {
 8004a98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a9a:	0004      	movs	r4, r0
	size_t i;
	for (i = 0; i < row_c; i++) {
 8004a9c:	2600      	movs	r6, #0
void mpc_antiwindup_vector(float eta[], const float antiwindup, const size_t row_c) {
 8004a9e:	1c0d      	adds	r5, r1, #0
 8004aa0:	9201      	str	r2, [sp, #4]
	for (i = 0; i < row_c; i++) {
 8004aa2:	9b01      	ldr	r3, [sp, #4]
 8004aa4:	429e      	cmp	r6, r3
 8004aa6:	d100      	bne.n	8004aaa <mpc_antiwindup_vector+0x12>
		if (fabsf(eta[i]) > antiwindup) {
			eta[i] = sign(eta[i]) * antiwindup;
		}
	}
}
 8004aa8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		if (fabsf(eta[i]) > antiwindup) {
 8004aaa:	6827      	ldr	r7, [r4, #0]
 8004aac:	1c29      	adds	r1, r5, #0
 8004aae:	0078      	lsls	r0, r7, #1
 8004ab0:	0840      	lsrs	r0, r0, #1
 8004ab2:	f7fb fd35 	bl	8000520 <__aeabi_fcmpgt>
 8004ab6:	2800      	cmp	r0, #0
 8004ab8:	d006      	beq.n	8004ac8 <mpc_antiwindup_vector+0x30>
			eta[i] = sign(eta[i]) * antiwindup;
 8004aba:	1c38      	adds	r0, r7, #0
 8004abc:	f001 fd08 	bl	80064d0 <sign>
 8004ac0:	1c29      	adds	r1, r5, #0
 8004ac2:	f7fc f8c9 	bl	8000c58 <__aeabi_fmul>
 8004ac6:	6020      	str	r0, [r4, #0]
	for (i = 0; i < row_c; i++) {
 8004ac8:	3601      	adds	r6, #1
 8004aca:	3404      	adds	r4, #4
 8004acc:	e7e9      	b.n	8004aa2 <mpc_antiwindup_vector+0xa>

08004ace <mpc_g_vector>:
 * MD(N * column_b) * (N * column_e)
 * D[N * column_b]
 * Mum1[(N * column_b) * column_b]
 * um1[column_b]
 */
void mpc_g_vector(float g[], const float Mx0[], const float x[], const float MR[], const float R[], const float eta[], const float MD[], const float D[], const float Mum1[], const float um1[], const size_t row_a, const size_t row_c, const size_t column_b, const size_t column_e, const size_t N) {
 8004ace:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ad0:	0015      	movs	r5, r2
 8004ad2:	b08b      	sub	sp, #44	@ 0x2c
	float* Mx0x = (float*)malloc(N * column_b * sizeof(float));
 8004ad4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
void mpc_g_vector(float g[], const float Mx0[], const float x[], const float MR[], const float R[], const float eta[], const float MD[], const float D[], const float Mum1[], const float um1[], const size_t row_a, const size_t row_c, const size_t column_b, const size_t column_e, const size_t N) {
 8004ad6:	9309      	str	r3, [sp, #36]	@ 0x24
	float* Mx0x = (float*)malloc(N * column_b * sizeof(float));
 8004ad8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
void mpc_g_vector(float g[], const float Mx0[], const float x[], const float MR[], const float R[], const float eta[], const float MD[], const float D[], const float Mum1[], const float um1[], const size_t row_a, const size_t row_c, const size_t column_b, const size_t column_e, const size_t N) {
 8004ada:	9008      	str	r0, [sp, #32]
	float* Mx0x = (float*)malloc(N * column_b * sizeof(float));
 8004adc:	4353      	muls	r3, r2
 8004ade:	9302      	str	r3, [sp, #8]
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	0018      	movs	r0, r3
void mpc_g_vector(float g[], const float Mx0[], const float x[], const float MR[], const float R[], const float eta[], const float MD[], const float D[], const float Mum1[], const float um1[], const size_t row_a, const size_t row_c, const size_t column_b, const size_t column_e, const size_t N) {
 8004ae4:	000c      	movs	r4, r1
	float* Mx0x = (float*)malloc(N * column_b * sizeof(float));
 8004ae6:	9303      	str	r3, [sp, #12]
 8004ae8:	f005 ff6a 	bl	800a9c0 <malloc>
	mul(Mx0, x, Mx0x, N * column_b, row_a, 1);
 8004aec:	2301      	movs	r3, #1
 8004aee:	0029      	movs	r1, r5

	float* Reta = (float*)malloc(N * row_c * sizeof(float));
	size_t i, j;
	for (i = 0; i < N; i++) {
 8004af0:	2500      	movs	r5, #0
	mul(Mx0, x, Mx0x, N * column_b, row_a, 1);
 8004af2:	9301      	str	r3, [sp, #4]
 8004af4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004af6:	0002      	movs	r2, r0
	float* Mx0x = (float*)malloc(N * column_b * sizeof(float));
 8004af8:	9004      	str	r0, [sp, #16]
	mul(Mx0, x, Mx0x, N * column_b, row_a, 1);
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	0020      	movs	r0, r4
 8004afe:	9b02      	ldr	r3, [sp, #8]
 8004b00:	f001 fb70 	bl	80061e4 <mul>
	float* Reta = (float*)malloc(N * row_c * sizeof(float));
 8004b04:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004b06:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
	for (i = 0; i < N; i++) {
 8004b08:	002e      	movs	r6, r5
	float* Reta = (float*)malloc(N * row_c * sizeof(float));
 8004b0a:	4353      	muls	r3, r2
 8004b0c:	0098      	lsls	r0, r3, #2
 8004b0e:	9306      	str	r3, [sp, #24]
 8004b10:	f005 ff56 	bl	800a9c0 <malloc>
 8004b14:	9005      	str	r0, [sp, #20]
	for (i = 0; i < N; i++) {
 8004b16:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8004b18:	429e      	cmp	r6, r3
 8004b1a:	d014      	beq.n	8004b46 <mpc_g_vector+0x78>
 8004b1c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004b1e:	00ac      	lsls	r4, r5, #2
 8004b20:	18ed      	adds	r5, r5, r3
 8004b22:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004b24:	00af      	lsls	r7, r5, #2
 8004b26:	1b1b      	subs	r3, r3, r4
 8004b28:	9307      	str	r3, [sp, #28]
 8004b2a:	e008      	b.n	8004b3e <mpc_g_vector+0x70>
		for (j = 0; j < row_c; j++) {
			Reta[i * row_c + j] = R[i * row_c + j] + eta[j];
 8004b2c:	9b07      	ldr	r3, [sp, #28]
 8004b2e:	5919      	ldr	r1, [r3, r4]
 8004b30:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004b32:	5918      	ldr	r0, [r3, r4]
 8004b34:	f7fb fd20 	bl	8000578 <__aeabi_fadd>
 8004b38:	9b05      	ldr	r3, [sp, #20]
 8004b3a:	5118      	str	r0, [r3, r4]
		for (j = 0; j < row_c; j++) {
 8004b3c:	3404      	adds	r4, #4
 8004b3e:	42bc      	cmp	r4, r7
 8004b40:	d1f4      	bne.n	8004b2c <mpc_g_vector+0x5e>
	for (i = 0; i < N; i++) {
 8004b42:	3601      	adds	r6, #1
 8004b44:	e7e7      	b.n	8004b16 <mpc_g_vector+0x48>
		}
	}
	float* MRReta = (float*)malloc(N * column_b * sizeof(float));
 8004b46:	9803      	ldr	r0, [sp, #12]
 8004b48:	f005 ff3a 	bl	800a9c0 <malloc>
	mul(MR, Reta, MRReta, N * column_b, N * row_c, 1);
 8004b4c:	2501      	movs	r5, #1
 8004b4e:	9b06      	ldr	r3, [sp, #24]
 8004b50:	0002      	movs	r2, r0
 8004b52:	9905      	ldr	r1, [sp, #20]
 8004b54:	9501      	str	r5, [sp, #4]
 8004b56:	9300      	str	r3, [sp, #0]
	float* MRReta = (float*)malloc(N * column_b * sizeof(float));
 8004b58:	0007      	movs	r7, r0
	mul(MR, Reta, MRReta, N * column_b, N * row_c, 1);
 8004b5a:	9b02      	ldr	r3, [sp, #8]
 8004b5c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b5e:	f001 fb41 	bl	80061e4 <mul>

	float* MDD = (float*)malloc(N * column_b * sizeof(float));
 8004b62:	9803      	ldr	r0, [sp, #12]
 8004b64:	f005 ff2c 	bl	800a9c0 <malloc>
	mul(MD, D, MDD, N * column_b, N * column_e, 1);
 8004b68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004b6a:	0002      	movs	r2, r0
 8004b6c:	4373      	muls	r3, r6
 8004b6e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8004b70:	9501      	str	r5, [sp, #4]
 8004b72:	9300      	str	r3, [sp, #0]
	float* MDD = (float*)malloc(N * column_b * sizeof(float));
 8004b74:	0004      	movs	r4, r0
	mul(MD, D, MDD, N * column_b, N * column_e, 1);
 8004b76:	9b02      	ldr	r3, [sp, #8]
 8004b78:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8004b7a:	f001 fb33 	bl	80061e4 <mul>

	float* Mum1um1 = (float*)malloc(N * column_b * sizeof(float));
 8004b7e:	9803      	ldr	r0, [sp, #12]
 8004b80:	f005 ff1e 	bl	800a9c0 <malloc>
	mul(Mum1, um1, Mum1um1, N * column_b, column_b, 1);
 8004b84:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8004b86:	0002      	movs	r2, r0
 8004b88:	9501      	str	r5, [sp, #4]
 8004b8a:	9300      	str	r3, [sp, #0]
	float* Mum1um1 = (float*)malloc(N * column_b * sizeof(float));
 8004b8c:	0006      	movs	r6, r0
	mul(Mum1, um1, Mum1um1, N * column_b, column_b, 1);
 8004b8e:	9b02      	ldr	r3, [sp, #8]
 8004b90:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8004b92:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8004b94:	f001 fb26 	bl	80061e4 <mul>

	for (i = 0; i < N * column_b; i++) {
 8004b98:	2500      	movs	r5, #0
 8004b9a:	9b03      	ldr	r3, [sp, #12]
 8004b9c:	42ab      	cmp	r3, r5
 8004b9e:	d110      	bne.n	8004bc2 <mpc_g_vector+0xf4>
		g[i] = Mx0x[i] + MRReta[i] + MDD[i] + Mum1um1[i];
	}

	/* Free */
	free(Mx0x);
 8004ba0:	9804      	ldr	r0, [sp, #16]
 8004ba2:	f005 ff17 	bl	800a9d4 <free>
	free(Reta);
 8004ba6:	9805      	ldr	r0, [sp, #20]
 8004ba8:	f005 ff14 	bl	800a9d4 <free>
	free(MRReta);
 8004bac:	0038      	movs	r0, r7
 8004bae:	f005 ff11 	bl	800a9d4 <free>
	free(MDD);
 8004bb2:	0020      	movs	r0, r4
 8004bb4:	f005 ff0e 	bl	800a9d4 <free>
	free(Mum1um1);
 8004bb8:	0030      	movs	r0, r6
 8004bba:	f005 ff0b 	bl	800a9d4 <free>
}
 8004bbe:	b00b      	add	sp, #44	@ 0x2c
 8004bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		g[i] = Mx0x[i] + MRReta[i] + MDD[i] + Mum1um1[i];
 8004bc2:	9b04      	ldr	r3, [sp, #16]
 8004bc4:	5979      	ldr	r1, [r7, r5]
 8004bc6:	5958      	ldr	r0, [r3, r5]
 8004bc8:	f7fb fcd6 	bl	8000578 <__aeabi_fadd>
 8004bcc:	5961      	ldr	r1, [r4, r5]
 8004bce:	f7fb fcd3 	bl	8000578 <__aeabi_fadd>
 8004bd2:	5971      	ldr	r1, [r6, r5]
 8004bd4:	f7fb fcd0 	bl	8000578 <__aeabi_fadd>
 8004bd8:	9b08      	ldr	r3, [sp, #32]
 8004bda:	5158      	str	r0, [r3, r5]
	for (i = 0; i < N * column_b; i++) {
 8004bdc:	3504      	adds	r5, #4
 8004bde:	e7dc      	b.n	8004b9a <mpc_g_vector+0xcc>

08004be0 <mpc_Umin_vector>:
 * Umin[N * column_b]
 * umin[column_b]
 * deltaumin[column_b]
 * um1[column_b]
 */
void mpc_Umin_vector(float Umin[], const float umin[], const float deltaumin[], const float um1[], const size_t N, const size_t column_b) {
 8004be0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004be2:	9200      	str	r2, [sp, #0]
 8004be4:	9301      	str	r3, [sp, #4]
	mpc_vector(Umin, umin, column_b, N);
 8004be6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004be8:	9b08      	ldr	r3, [sp, #32]
void mpc_Umin_vector(float Umin[], const float umin[], const float deltaumin[], const float um1[], const size_t N, const size_t column_b) {
 8004bea:	0005      	movs	r5, r0
 8004bec:	000e      	movs	r6, r1
	size_t i;
	for (i = 0; i < column_b; i++) {
 8004bee:	2400      	movs	r4, #0
	mpc_vector(Umin, umin, column_b, N);
 8004bf0:	f7ff fc91 	bl	8004516 <mpc_vector>
	for (i = 0; i < column_b; i++) {
 8004bf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bf6:	429c      	cmp	r4, r3
 8004bf8:	d100      	bne.n	8004bfc <mpc_Umin_vector+0x1c>
		Umin[i] = vmax(umin[i], deltaumin[i] + um1[i]);
	}
}
 8004bfa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		Umin[i] = vmax(umin[i], deltaumin[i] + um1[i]);
 8004bfc:	9b01      	ldr	r3, [sp, #4]
 8004bfe:	00a7      	lsls	r7, r4, #2
 8004c00:	59d9      	ldr	r1, [r3, r7]
 8004c02:	9b00      	ldr	r3, [sp, #0]
	for (i = 0; i < column_b; i++) {
 8004c04:	3401      	adds	r4, #1
		Umin[i] = vmax(umin[i], deltaumin[i] + um1[i]);
 8004c06:	59d8      	ldr	r0, [r3, r7]
 8004c08:	f7fb fcb6 	bl	8000578 <__aeabi_fadd>
 8004c0c:	1c01      	adds	r1, r0, #0
 8004c0e:	59f0      	ldr	r0, [r6, r7]
 8004c10:	f001 fc74 	bl	80064fc <vmax>
 8004c14:	51e8      	str	r0, [r5, r7]
	for (i = 0; i < column_b; i++) {
 8004c16:	e7ed      	b.n	8004bf4 <mpc_Umin_vector+0x14>

08004c18 <mpc_Umax_vector>:
 * Umax[N * column_b]
 * umax[column_b]
 * deltaumax[column_b]
 * um1[column_b]
 */
void mpc_Umax_vector(float Umax[], const float umax[], const float deltaumax[], const float um1[], const size_t N, const size_t column_b) {
 8004c18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c1a:	9200      	str	r2, [sp, #0]
 8004c1c:	9301      	str	r3, [sp, #4]
	mpc_vector(Umax, umax, column_b, N);
 8004c1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c20:	9b08      	ldr	r3, [sp, #32]
void mpc_Umax_vector(float Umax[], const float umax[], const float deltaumax[], const float um1[], const size_t N, const size_t column_b) {
 8004c22:	0005      	movs	r5, r0
 8004c24:	000e      	movs	r6, r1
	size_t i;
	for (i = 0; i < column_b; i++) {
 8004c26:	2400      	movs	r4, #0
	mpc_vector(Umax, umax, column_b, N);
 8004c28:	f7ff fc75 	bl	8004516 <mpc_vector>
	for (i = 0; i < column_b; i++) {
 8004c2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c2e:	429c      	cmp	r4, r3
 8004c30:	d100      	bne.n	8004c34 <mpc_Umax_vector+0x1c>
		Umax[i] = vmin(umax[i], deltaumax[i] + um1[i]);
	}
}
 8004c32:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		Umax[i] = vmin(umax[i], deltaumax[i] + um1[i]);
 8004c34:	9b01      	ldr	r3, [sp, #4]
 8004c36:	00a7      	lsls	r7, r4, #2
 8004c38:	59d9      	ldr	r1, [r3, r7]
 8004c3a:	9b00      	ldr	r3, [sp, #0]
	for (i = 0; i < column_b; i++) {
 8004c3c:	3401      	adds	r4, #1
		Umax[i] = vmin(umax[i], deltaumax[i] + um1[i]);
 8004c3e:	59d8      	ldr	r0, [r3, r7]
 8004c40:	f7fb fc9a 	bl	8000578 <__aeabi_fadd>
 8004c44:	1c01      	adds	r1, r0, #0
 8004c46:	59f0      	ldr	r0, [r6, r7]
 8004c48:	f001 fc62 	bl	8006510 <vmin>
 8004c4c:	51e8      	str	r0, [r5, r7]
	for (i = 0; i < column_b; i++) {
 8004c4e:	e7ed      	b.n	8004c2c <mpc_Umax_vector+0x14>

08004c50 <mpc_barZmin_vector>:
 * Phi[(N * row_c) * row_a]
 * x0[row_a]
 * Gammad[(N * row_c) * (N * column_e)]
 * D[N * column_e]
 */
void mpc_barZmin_vector(float barZmin[], const float Zmin[], const float Phi[], const float x0[], const float Gammad[], const float D[], const size_t row_a, const size_t row_c, const size_t column_b, const size_t column_e, const size_t N) {
 8004c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c52:	b087      	sub	sp, #28
	float* Phix0 = (float*)malloc(N * row_c * sizeof(float));
 8004c54:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
void mpc_barZmin_vector(float barZmin[], const float Zmin[], const float Phi[], const float x0[], const float Gammad[], const float D[], const size_t row_a, const size_t row_c, const size_t column_b, const size_t column_e, const size_t N) {
 8004c56:	9305      	str	r3, [sp, #20]
	float* Phix0 = (float*)malloc(N * row_c * sizeof(float));
 8004c58:	9b12      	ldr	r3, [sp, #72]	@ 0x48
void mpc_barZmin_vector(float barZmin[], const float Zmin[], const float Phi[], const float x0[], const float Gammad[], const float D[], const size_t row_a, const size_t row_c, const size_t column_b, const size_t column_e, const size_t N) {
 8004c5a:	9003      	str	r0, [sp, #12]
	float* Phix0 = (float*)malloc(N * row_c * sizeof(float));
 8004c5c:	435e      	muls	r6, r3
 8004c5e:	00b7      	lsls	r7, r6, #2
 8004c60:	0038      	movs	r0, r7
void mpc_barZmin_vector(float barZmin[], const float Zmin[], const float Phi[], const float x0[], const float Gammad[], const float D[], const size_t row_a, const size_t row_c, const size_t column_b, const size_t column_e, const size_t N) {
 8004c62:	0014      	movs	r4, r2
 8004c64:	9104      	str	r1, [sp, #16]
	float* Phix0 = (float*)malloc(N * row_c * sizeof(float));
 8004c66:	f005 feab 	bl	800a9c0 <malloc>
	mul(Phi, x0, Phix0, N * row_c, row_a, 1);
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004c6e:	9905      	ldr	r1, [sp, #20]
 8004c70:	9301      	str	r3, [sp, #4]
 8004c72:	9200      	str	r2, [sp, #0]
 8004c74:	0033      	movs	r3, r6
 8004c76:	0002      	movs	r2, r0
	float* Phix0 = (float*)malloc(N * row_c * sizeof(float));
 8004c78:	0005      	movs	r5, r0
	mul(Phi, x0, Phix0, N * row_c, row_a, 1);
 8004c7a:	0020      	movs	r0, r4
 8004c7c:	f001 fab2 	bl	80061e4 <mul>
	float* GammadD = (float*)malloc(N * row_c * sizeof(float));
 8004c80:	0038      	movs	r0, r7
 8004c82:	f005 fe9d 	bl	800a9c0 <malloc>
	mul(Gammad, D, GammadD, N * row_c, N * column_e, 1);
 8004c86:	2301      	movs	r3, #1
 8004c88:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004c8a:	9301      	str	r3, [sp, #4]
 8004c8c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
	float* GammadD = (float*)malloc(N * row_c * sizeof(float));
 8004c8e:	0004      	movs	r4, r0
	mul(Gammad, D, GammadD, N * row_c, N * column_e, 1);
 8004c90:	4353      	muls	r3, r2
 8004c92:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004c94:	0002      	movs	r2, r0
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8004c9a:	0033      	movs	r3, r6
 8004c9c:	f001 faa2 	bl	80061e4 <mul>
	size_t i;
	for (i = 0; i < N * row_c; i++) {
 8004ca0:	2600      	movs	r6, #0
 8004ca2:	42b7      	cmp	r7, r6
 8004ca4:	d107      	bne.n	8004cb6 <mpc_barZmin_vector+0x66>
		barZmin[i] = Zmin[i] - Phix0[i] - GammadD[i];
	}

	/* Free */
	free(Phix0);
 8004ca6:	0028      	movs	r0, r5
 8004ca8:	f005 fe94 	bl	800a9d4 <free>
	free(GammadD);
 8004cac:	0020      	movs	r0, r4
 8004cae:	f005 fe91 	bl	800a9d4 <free>
}
 8004cb2:	b007      	add	sp, #28
 8004cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		barZmin[i] = Zmin[i] - Phix0[i] - GammadD[i];
 8004cb6:	9b04      	ldr	r3, [sp, #16]
 8004cb8:	59a9      	ldr	r1, [r5, r6]
 8004cba:	5998      	ldr	r0, [r3, r6]
 8004cbc:	f7fc f90a 	bl	8000ed4 <__aeabi_fsub>
 8004cc0:	59a1      	ldr	r1, [r4, r6]
 8004cc2:	f7fc f907 	bl	8000ed4 <__aeabi_fsub>
 8004cc6:	9b03      	ldr	r3, [sp, #12]
 8004cc8:	5198      	str	r0, [r3, r6]
	for (i = 0; i < N * row_c; i++) {
 8004cca:	3604      	adds	r6, #4
 8004ccc:	e7e9      	b.n	8004ca2 <mpc_barZmin_vector+0x52>

08004cce <mpc_barg_vector>:
/*
 * barg[N * column_b + column_b * N]
 * g[N * column_b]
 * barspsi[N * column_b]
 */
void mpc_barg_vector(float barg[], const float g[], const float barspsi[], const size_t column_b, const size_t N) {
 8004cce:	b5f0      	push	{r4, r5, r6, r7, lr}
	insert(g, barg, N * column_b, 1, 1, 0, 0);
 8004cd0:	2601      	movs	r6, #1
void mpc_barg_vector(float barg[], const float g[], const float barspsi[], const size_t column_b, const size_t N) {
 8004cd2:	0005      	movs	r5, r0
	insert(g, barg, N * column_b, 1, 1, 0, 0);
 8004cd4:	2700      	movs	r7, #0
void mpc_barg_vector(float barg[], const float g[], const float barspsi[], const size_t column_b, const size_t N) {
 8004cd6:	b087      	sub	sp, #28
	insert(g, barg, N * column_b, 1, 1, 0, 0);
 8004cd8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
void mpc_barg_vector(float barg[], const float g[], const float barspsi[], const size_t column_b, const size_t N) {
 8004cda:	0008      	movs	r0, r1
	insert(g, barg, N * column_b, 1, 1, 0, 0);
 8004cdc:	435c      	muls	r4, r3
 8004cde:	0029      	movs	r1, r5
 8004ce0:	0033      	movs	r3, r6
void mpc_barg_vector(float barg[], const float g[], const float barspsi[], const size_t column_b, const size_t N) {
 8004ce2:	9205      	str	r2, [sp, #20]
	insert(g, barg, N * column_b, 1, 1, 0, 0);
 8004ce4:	9702      	str	r7, [sp, #8]
 8004ce6:	0022      	movs	r2, r4
 8004ce8:	9701      	str	r7, [sp, #4]
 8004cea:	9600      	str	r6, [sp, #0]
 8004cec:	f001 fbc5 	bl	800647a <insert>
	insert(barspsi, barg, N * column_b, 1, 1, N * column_b, 0);
 8004cf0:	0033      	movs	r3, r6
 8004cf2:	0022      	movs	r2, r4
 8004cf4:	0029      	movs	r1, r5
 8004cf6:	9805      	ldr	r0, [sp, #20]
 8004cf8:	9702      	str	r7, [sp, #8]
 8004cfa:	9401      	str	r4, [sp, #4]
 8004cfc:	9600      	str	r6, [sp, #0]
 8004cfe:	f001 fbbc 	bl	800647a <insert>
}
 8004d02:	b007      	add	sp, #28
 8004d04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d06 <mpc_barUmin_vector>:

/*
 * barUmin[N * column_b + N]
 * Umin[N * column_b]
 */
void mpc_barUmin_vector(float barUmin[], const float Umin[], const size_t column_b, const size_t N) {
 8004d06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d08:	001c      	movs	r4, r3
 8004d0a:	0016      	movs	r6, r2
	memset(barUmin, 0, (N * column_b + N) * sizeof(float));
 8004d0c:	3201      	adds	r2, #1
 8004d0e:	435a      	muls	r2, r3
void mpc_barUmin_vector(float barUmin[], const float Umin[], const size_t column_b, const size_t N) {
 8004d10:	b085      	sub	sp, #20
 8004d12:	000f      	movs	r7, r1
	memset(barUmin, 0, (N * column_b + N) * sizeof(float));
 8004d14:	0092      	lsls	r2, r2, #2
 8004d16:	2100      	movs	r1, #0
void mpc_barUmin_vector(float barUmin[], const float Umin[], const size_t column_b, const size_t N) {
 8004d18:	0005      	movs	r5, r0
	memset(barUmin, 0, (N * column_b + N) * sizeof(float));
 8004d1a:	f006 fc97 	bl	800b64c <memset>
	insert(Umin, barUmin, N * column_b, 1, 1, 0, 0);
 8004d1e:	2300      	movs	r3, #0
 8004d20:	0022      	movs	r2, r4
 8004d22:	9302      	str	r3, [sp, #8]
 8004d24:	9301      	str	r3, [sp, #4]
 8004d26:	3301      	adds	r3, #1
 8004d28:	0029      	movs	r1, r5
 8004d2a:	0038      	movs	r0, r7
 8004d2c:	4372      	muls	r2, r6
 8004d2e:	9300      	str	r3, [sp, #0]
 8004d30:	f001 fba3 	bl	800647a <insert>
}
 8004d34:	b005      	add	sp, #20
 8004d36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d38 <mpc_barUmax_vector>:

/*
 * barUmax[N * column_b + N]
 * Umax[N * column_b]
 */
void mpc_barUmax_vector(float barUmax[], const float Umax[], const size_t column_b, const size_t N) {
 8004d38:	b530      	push	{r4, r5, lr}
 8004d3a:	0004      	movs	r4, r0
	const float infinity = FLT_MAX;
	size_t i;
	for (i = 0; i < N; i++) {
		barUmax[N * column_b + i] = infinity;
 8004d3c:	435a      	muls	r2, r3
 8004d3e:	18d3      	adds	r3, r2, r3
void mpc_barUmax_vector(float barUmax[], const float Umax[], const size_t column_b, const size_t N) {
 8004d40:	0008      	movs	r0, r1
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	0091      	lsls	r1, r2, #2
		barUmax[N * column_b + i] = infinity;
 8004d46:	4d09      	ldr	r5, [pc, #36]	@ (8004d6c <mpc_barUmax_vector+0x34>)
void mpc_barUmax_vector(float barUmax[], const float Umax[], const size_t column_b, const size_t N) {
 8004d48:	b085      	sub	sp, #20
 8004d4a:	1861      	adds	r1, r4, r1
 8004d4c:	18e3      	adds	r3, r4, r3
	for (i = 0; i < N; i++) {
 8004d4e:	4299      	cmp	r1, r3
 8004d50:	d109      	bne.n	8004d66 <mpc_barUmax_vector+0x2e>
	}
	insert(Umax, barUmax, N * column_b, 1, 1, 0, 0);
 8004d52:	2300      	movs	r3, #0
 8004d54:	9302      	str	r3, [sp, #8]
 8004d56:	9301      	str	r3, [sp, #4]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	0021      	movs	r1, r4
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	f001 fb8c 	bl	800647a <insert>
}
 8004d62:	b005      	add	sp, #20
 8004d64:	bd30      	pop	{r4, r5, pc}
		barUmax[N * column_b + i] = infinity;
 8004d66:	c120      	stmia	r1!, {r5}
	for (i = 0; i < N; i++) {
 8004d68:	e7f1      	b.n	8004d4e <mpc_barUmax_vector+0x16>
 8004d6a:	46c0      	nop			@ (mov r8, r8)
 8004d6c:	7f7fffff 	.word	0x7f7fffff

08004d70 <mpc_bmin_vector>:
/*
 * bmin[(N - 1) * column_b + N * row_c + N * row_c]
 * deltaUmin[(N - 1) * column_b]
 * barZmin[N * row_c]
 */
void mpc_bmin_vector(float bmin[], const float deltaUmin[], const float barZmin[], const size_t column_b, const size_t row_c, const size_t N) {
 8004d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d72:	b085      	sub	sp, #20
 8004d74:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8004d76:	0005      	movs	r5, r0
	size_t insert_row = 0;
	insert(deltaUmin, bmin, (N - 1) * column_b, 1, 1, insert_row, 0);
 8004d78:	1e7c      	subs	r4, r7, #1
 8004d7a:	435c      	muls	r4, r3
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	9302      	str	r3, [sp, #8]
 8004d80:	9301      	str	r3, [sp, #4]
 8004d82:	3301      	adds	r3, #1
void mpc_bmin_vector(float bmin[], const float deltaUmin[], const float barZmin[], const size_t column_b, const size_t row_c, const size_t N) {
 8004d84:	0008      	movs	r0, r1
	insert(deltaUmin, bmin, (N - 1) * column_b, 1, 1, insert_row, 0);
 8004d86:	9300      	str	r3, [sp, #0]
 8004d88:	0029      	movs	r1, r5
void mpc_bmin_vector(float bmin[], const float deltaUmin[], const float barZmin[], const size_t column_b, const size_t row_c, const size_t N) {
 8004d8a:	0016      	movs	r6, r2
	insert(deltaUmin, bmin, (N - 1) * column_b, 1, 1, insert_row, 0);
 8004d8c:	0022      	movs	r2, r4
 8004d8e:	f001 fb74 	bl	800647a <insert>
	insert_row += (N - 1) * column_b;
	const float infinity = FLT_MAX;
	size_t i;
	for (i = 0; i < N * row_c; i++) {
 8004d92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004d94:	00a3      	lsls	r3, r4, #2
 8004d96:	437a      	muls	r2, r7
 8004d98:	18a4      	adds	r4, r4, r2
 8004d9a:	00a1      	lsls	r1, r4, #2
		bmin[insert_row + i] = -infinity;
 8004d9c:	4808      	ldr	r0, [pc, #32]	@ (8004dc0 <mpc_bmin_vector+0x50>)
 8004d9e:	18eb      	adds	r3, r5, r3
 8004da0:	1869      	adds	r1, r5, r1
	for (i = 0; i < N * row_c; i++) {
 8004da2:	428b      	cmp	r3, r1
 8004da4:	d10a      	bne.n	8004dbc <mpc_bmin_vector+0x4c>
	}
	insert_row += i;
	insert(barZmin, bmin, N * row_c, 1, 1, insert_row, 0);
 8004da6:	2300      	movs	r3, #0
 8004da8:	9302      	str	r3, [sp, #8]
 8004daa:	3301      	adds	r3, #1
 8004dac:	0029      	movs	r1, r5
 8004dae:	0030      	movs	r0, r6
 8004db0:	9401      	str	r4, [sp, #4]
 8004db2:	9300      	str	r3, [sp, #0]
 8004db4:	f001 fb61 	bl	800647a <insert>
}
 8004db8:	b005      	add	sp, #20
 8004dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bmin[insert_row + i] = -infinity;
 8004dbc:	c301      	stmia	r3!, {r0}
	for (i = 0; i < N * row_c; i++) {
 8004dbe:	e7f0      	b.n	8004da2 <mpc_bmin_vector+0x32>
 8004dc0:	ff7fffff 	.word	0xff7fffff

08004dc4 <mpc_bmax_vector>:
/*
 * bmax[(N - 1) * column_b + N * row_c + N * row_c]
 * deltaUmax[(N - 1) * column_b]
 * barZmax[N * row_c]
 */
void mpc_bmax_vector(float bmax[], const float deltaUmax[], const float barZmax[], const size_t column_b, const size_t row_c, const size_t N) {
 8004dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dc6:	0005      	movs	r5, r0
	size_t insert_row = 0;
	insert(deltaUmax, bmax, (N - 1) * column_b, 1, 1, insert_row, 0);
 8004dc8:	2601      	movs	r6, #1
 8004dca:	2700      	movs	r7, #0
void mpc_bmax_vector(float bmax[], const float deltaUmax[], const float barZmax[], const size_t column_b, const size_t row_c, const size_t N) {
 8004dcc:	b087      	sub	sp, #28
 8004dce:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8004dd0:	9205      	str	r2, [sp, #20]
	insert(deltaUmax, bmax, (N - 1) * column_b, 1, 1, insert_row, 0);
 8004dd2:	1e62      	subs	r2, r4, #1
 8004dd4:	4353      	muls	r3, r2
 8004dd6:	9304      	str	r3, [sp, #16]
void mpc_bmax_vector(float bmax[], const float deltaUmax[], const float barZmax[], const size_t column_b, const size_t row_c, const size_t N) {
 8004dd8:	0008      	movs	r0, r1
	insert(deltaUmax, bmax, (N - 1) * column_b, 1, 1, insert_row, 0);
 8004dda:	0033      	movs	r3, r6
 8004ddc:	0029      	movs	r1, r5
 8004dde:	9a04      	ldr	r2, [sp, #16]
 8004de0:	9702      	str	r7, [sp, #8]
 8004de2:	9701      	str	r7, [sp, #4]
 8004de4:	9600      	str	r6, [sp, #0]
 8004de6:	f001 fb48 	bl	800647a <insert>
	insert_row += (N - 1) * column_b;
	insert(barZmax, bmax, N * row_c, 1, 1, insert_row, 0);
 8004dea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004dec:	0029      	movs	r1, r5
 8004dee:	435c      	muls	r4, r3
 8004df0:	9b04      	ldr	r3, [sp, #16]
 8004df2:	0022      	movs	r2, r4
 8004df4:	9301      	str	r3, [sp, #4]
 8004df6:	9805      	ldr	r0, [sp, #20]
 8004df8:	0033      	movs	r3, r6
 8004dfa:	9702      	str	r7, [sp, #8]
 8004dfc:	9600      	str	r6, [sp, #0]
 8004dfe:	f001 fb3c 	bl	800647a <insert>
	insert_row += N * row_c;
 8004e02:	9b04      	ldr	r3, [sp, #16]
 8004e04:	191b      	adds	r3, r3, r4
	const float infinity = FLT_MAX;
	size_t i;
	for (i = 0; i < N * row_c; i++) {
 8004e06:	18e4      	adds	r4, r4, r3
 8004e08:	009a      	lsls	r2, r3, #2
 8004e0a:	00a4      	lsls	r4, r4, #2
		bmax[insert_row + i] = infinity;
 8004e0c:	4b04      	ldr	r3, [pc, #16]	@ (8004e20 <mpc_bmax_vector+0x5c>)
 8004e0e:	18aa      	adds	r2, r5, r2
 8004e10:	192d      	adds	r5, r5, r4
	for (i = 0; i < N * row_c; i++) {
 8004e12:	42aa      	cmp	r2, r5
 8004e14:	d101      	bne.n	8004e1a <mpc_bmax_vector+0x56>
	}
}
 8004e16:	b007      	add	sp, #28
 8004e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bmax[insert_row + i] = infinity;
 8004e1a:	c208      	stmia	r2!, {r3}
	for (i = 0; i < N * row_c; i++) {
 8004e1c:	e7f9      	b.n	8004e12 <mpc_bmax_vector+0x4e>
 8004e1e:	46c0      	nop			@ (mov r8, r8)
 8004e20:	7f7fffff 	.word	0x7f7fffff

08004e24 <mpc_AA_matrix>:
/*
 * AA[((N-1) * column_b + 2 * N * row_c) * (2 * N * column_b)]
 * Lambda[((N-1)*column_b) * (N * column_b)]
 * Gamma[(N * row_c) * (N * column_b)]
 */
void mpc_AA_matrix(float AA[], const float Lambda[], const float Gamma[], const size_t row_c, const size_t column_b, const size_t N) {
 8004e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e26:	b089      	sub	sp, #36	@ 0x24
 8004e28:	000e      	movs	r6, r1
 8004e2a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8004e2c:	9207      	str	r2, [sp, #28]
	memset(AA, 0, ((N - 1) * column_b + 2 * N * row_c) * (2 * N * column_b) * sizeof(float));
 8004e2e:	000c      	movs	r4, r1
void mpc_AA_matrix(float AA[], const float Lambda[], const float Gamma[], const size_t row_c, const size_t column_b, const size_t N) {
 8004e30:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8004e32:	9005      	str	r0, [sp, #20]
	memset(AA, 0, ((N - 1) * column_b + 2 * N * row_c) * (2 * N * column_b) * sizeof(float));
 8004e34:	4354      	muls	r4, r2
 8004e36:	4353      	muls	r3, r2
 8004e38:	1a67      	subs	r7, r4, r1
 8004e3a:	001d      	movs	r5, r3
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	19db      	adds	r3, r3, r7
 8004e40:	001a      	movs	r2, r3
 8004e42:	4362      	muls	r2, r4
 8004e44:	2100      	movs	r1, #0
 8004e46:	00d2      	lsls	r2, r2, #3
 8004e48:	9306      	str	r3, [sp, #24]
 8004e4a:	f006 fbff 	bl	800b64c <memset>
	insert(Lambda, AA, (N - 1) * column_b, N * column_b, 2 * N * column_b, 0, 0);
 8004e4e:	2300      	movs	r3, #0
 8004e50:	0062      	lsls	r2, r4, #1
 8004e52:	9905      	ldr	r1, [sp, #20]
 8004e54:	0030      	movs	r0, r6
 8004e56:	9302      	str	r3, [sp, #8]
 8004e58:	9301      	str	r3, [sp, #4]
 8004e5a:	9200      	str	r2, [sp, #0]
 8004e5c:	0023      	movs	r3, r4
 8004e5e:	003a      	movs	r2, r7
 8004e60:	f001 fb0b 	bl	800647a <insert>
	float* I = (float*)malloc((N * row_c) * (N * column_b) * sizeof(float));
 8004e64:	0028      	movs	r0, r5
 8004e66:	4360      	muls	r0, r4
 8004e68:	0080      	lsls	r0, r0, #2
 8004e6a:	f005 fda9 	bl	800a9c0 <malloc>
	eye(I, -1.0f, N * row_c, N * column_b);
 8004e6e:	0023      	movs	r3, r4
 8004e70:	002a      	movs	r2, r5
 8004e72:	491e      	ldr	r1, [pc, #120]	@ (8004eec <mpc_AA_matrix+0xc8>)
	float* I = (float*)malloc((N * row_c) * (N * column_b) * sizeof(float));
 8004e74:	0006      	movs	r6, r0
	eye(I, -1.0f, N * row_c, N * column_b);
 8004e76:	f001 f829 	bl	8005ecc <eye>
	insert(Gamma, AA, N * row_c, N * column_b, 2 * N * column_b, (N - 1) * column_b, 0);
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	0062      	lsls	r2, r4, #1
 8004e7e:	9905      	ldr	r1, [sp, #20]
 8004e80:	9807      	ldr	r0, [sp, #28]
 8004e82:	9302      	str	r3, [sp, #8]
 8004e84:	9701      	str	r7, [sp, #4]
 8004e86:	0023      	movs	r3, r4
 8004e88:	9200      	str	r2, [sp, #0]
 8004e8a:	002a      	movs	r2, r5
 8004e8c:	f001 faf5 	bl	800647a <insert>
	insert(I, AA, N * row_c, N * column_b, 2 * N * column_b, (N - 1) * column_b, N * column_b);
 8004e90:	0062      	lsls	r2, r4, #1
 8004e92:	0023      	movs	r3, r4
 8004e94:	0030      	movs	r0, r6
 8004e96:	9905      	ldr	r1, [sp, #20]
 8004e98:	9701      	str	r7, [sp, #4]
 8004e9a:	9200      	str	r2, [sp, #0]
 8004e9c:	9402      	str	r4, [sp, #8]
 8004e9e:	002a      	movs	r2, r5
 8004ea0:	f001 faeb 	bl	800647a <insert>
	insert(Gamma, AA, N * row_c, N * column_b, 2 * N * column_b, (N - 1) * column_b + N * row_c, 0);
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	9a06      	ldr	r2, [sp, #24]
 8004ea8:	9302      	str	r3, [sp, #8]
 8004eaa:	1b57      	subs	r7, r2, r5
 8004eac:	0063      	lsls	r3, r4, #1
 8004eae:	002a      	movs	r2, r5
 8004eb0:	9905      	ldr	r1, [sp, #20]
 8004eb2:	9807      	ldr	r0, [sp, #28]
 8004eb4:	9300      	str	r3, [sp, #0]
 8004eb6:	9701      	str	r7, [sp, #4]
 8004eb8:	0023      	movs	r3, r4
 8004eba:	f001 fade 	bl	800647a <insert>
	eye(I, 1.0f, N * row_c, N * column_b);
 8004ebe:	21fe      	movs	r1, #254	@ 0xfe
 8004ec0:	0023      	movs	r3, r4
 8004ec2:	002a      	movs	r2, r5
 8004ec4:	0030      	movs	r0, r6
 8004ec6:	0589      	lsls	r1, r1, #22
 8004ec8:	f001 f800 	bl	8005ecc <eye>
	insert(I, AA, N * row_c, N * column_b, 2 * N * column_b, (N - 1) * column_b + N * row_c, N * column_b);
 8004ecc:	0063      	lsls	r3, r4, #1
 8004ece:	002a      	movs	r2, r5
 8004ed0:	0030      	movs	r0, r6
 8004ed2:	9905      	ldr	r1, [sp, #20]
 8004ed4:	9300      	str	r3, [sp, #0]
 8004ed6:	9402      	str	r4, [sp, #8]
 8004ed8:	0023      	movs	r3, r4
 8004eda:	9701      	str	r7, [sp, #4]
 8004edc:	f001 facd 	bl	800647a <insert>

	/* Free */
	free(I);
 8004ee0:	0030      	movs	r0, r6
 8004ee2:	f005 fd77 	bl	800a9d4 <free>
}
 8004ee6:	b009      	add	sp, #36	@ 0x24
 8004ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004eea:	46c0      	nop			@ (mov r8, r8)
 8004eec:	bf800000 	.word	0xbf800000

08004ef0 <mpc_aqp_matrix>:

/*
 * aqp[(2*((N-1) * column_b + 2 * N * row_c) + 2 * (N * column_b + N)) * (2 * N * column_b)]
 * AA[((N-1) * column_b + 2 * N * row_c) * (2 * N * column_b)]
 */
void mpc_aqp_matrix(float aqp[], const float AA[], const size_t column_b, const size_t row_c, const size_t N) {
 8004ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* First create a row index variable */
	size_t insert_row = 0;

	/* Clear aqp matrix */
	memset(aqp, 0, (2 * ((N - 1) * column_b + 2 * N * row_c) + 2 * (N * column_b + N)) * (2 * N * column_b) * sizeof(float));
 8004ef2:	0015      	movs	r5, r2
void mpc_aqp_matrix(float aqp[], const float AA[], const size_t column_b, const size_t row_c, const size_t N) {
 8004ef4:	b089      	sub	sp, #36	@ 0x24
 8004ef6:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8004ef8:	9107      	str	r1, [sp, #28]
	memset(aqp, 0, (2 * ((N - 1) * column_b + 2 * N * row_c) + 2 * (N * column_b + N)) * (2 * N * column_b) * sizeof(float));
 8004efa:	4365      	muls	r5, r4
 8004efc:	4363      	muls	r3, r4
 8004efe:	1aaa      	subs	r2, r5, r2
 8004f00:	005b      	lsls	r3, r3, #1
 8004f02:	192c      	adds	r4, r5, r4
 8004f04:	189b      	adds	r3, r3, r2
 8004f06:	9304      	str	r3, [sp, #16]
 8004f08:	191b      	adds	r3, r3, r4
 8004f0a:	9305      	str	r3, [sp, #20]
 8004f0c:	436b      	muls	r3, r5
 8004f0e:	2100      	movs	r1, #0
 8004f10:	011a      	lsls	r2, r3, #4
void mpc_aqp_matrix(float aqp[], const float AA[], const size_t column_b, const size_t row_c, const size_t N) {
 8004f12:	0006      	movs	r6, r0
	memset(aqp, 0, (2 * ((N - 1) * column_b + 2 * N * row_c) + 2 * (N * column_b + N)) * (2 * N * column_b) * sizeof(float));
 8004f14:	9306      	str	r3, [sp, #24]
 8004f16:	f006 fb99 	bl	800b64c <memset>
	
	/* Insert first I matrix */
	eye(aqp + insert_row * (2 * N * column_b), 1.0f, N * column_b + N, 2 * N * column_b);
 8004f1a:	21fe      	movs	r1, #254	@ 0xfe
 8004f1c:	006f      	lsls	r7, r5, #1
 8004f1e:	0022      	movs	r2, r4
 8004f20:	0030      	movs	r0, r6
 8004f22:	003b      	movs	r3, r7
 8004f24:	0589      	lsls	r1, r1, #22
 8004f26:	f000 ffd1 	bl	8005ecc <eye>
	insert_row += N * column_b + N;
	
	/* Insert first AA matrix */
	insert(AA, aqp, (N - 1) * column_b + 2 * N * row_c, 2 * N * column_b, 2 * N * column_b, insert_row, 0);
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	0031      	movs	r1, r6
 8004f2e:	9a04      	ldr	r2, [sp, #16]
 8004f30:	9807      	ldr	r0, [sp, #28]
 8004f32:	9302      	str	r3, [sp, #8]
 8004f34:	9401      	str	r4, [sp, #4]
 8004f36:	003b      	movs	r3, r7
 8004f38:	9700      	str	r7, [sp, #0]
 8004f3a:	f001 fa9e 	bl	800647a <insert>
	insert_row += (N - 1) * column_b + 2 * N * row_c;
	
	/* Insert second -I matrix */
	eye(aqp + insert_row * (2 * N * column_b), -1.0f, N * column_b + N, 2 * N * column_b);
 8004f3e:	9b06      	ldr	r3, [sp, #24]
 8004f40:	0022      	movs	r2, r4
 8004f42:	00d8      	lsls	r0, r3, #3
 8004f44:	1830      	adds	r0, r6, r0
 8004f46:	003b      	movs	r3, r7
 8004f48:	490b      	ldr	r1, [pc, #44]	@ (8004f78 <mpc_aqp_matrix+0x88>)
 8004f4a:	f000 ffbf 	bl	8005ecc <eye>
	insert_row += N * column_b + N;
 8004f4e:	9b05      	ldr	r3, [sp, #20]
 8004f50:	9a04      	ldr	r2, [sp, #16]
 8004f52:	18e4      	adds	r4, r4, r3
	
	/* Then insert -AA matrix */
	size_t i;
	for (i = 0; i < ((N - 1) * column_b + 2 * N * row_c) * (2 * N * column_b); i++) {
 8004f54:	2300      	movs	r3, #0
 8004f56:	00ed      	lsls	r5, r5, #3
 8004f58:	436a      	muls	r2, r5
 8004f5a:	4365      	muls	r5, r4
 8004f5c:	1976      	adds	r6, r6, r5
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d101      	bne.n	8004f66 <mpc_aqp_matrix+0x76>
		aqp[insert_row * 2 * N * column_b + i] = -AA[i];
	}
}
 8004f62:	b009      	add	sp, #36	@ 0x24
 8004f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
		aqp[insert_row * 2 * N * column_b + i] = -AA[i];
 8004f66:	2080      	movs	r0, #128	@ 0x80
 8004f68:	9907      	ldr	r1, [sp, #28]
 8004f6a:	0600      	lsls	r0, r0, #24
 8004f6c:	58c9      	ldr	r1, [r1, r3]
 8004f6e:	1809      	adds	r1, r1, r0
 8004f70:	50f1      	str	r1, [r6, r3]
	for (i = 0; i < ((N - 1) * column_b + 2 * N * row_c) * (2 * N * column_b); i++) {
 8004f72:	3304      	adds	r3, #4
 8004f74:	e7f3      	b.n	8004f5e <mpc_aqp_matrix+0x6e>
 8004f76:	46c0      	nop			@ (mov r8, r8)
 8004f78:	bf800000 	.word	0xbf800000

08004f7c <mpc_bqp_vector>:
 * barUmin[N * column_b + N]
 * barUmax[N * column_b + N]
 * bmin[(N - 1) * column_b + N * row_c + N * row_c]
 * bmax[(N - 1) * column_b + N * row_c + N * row_c]
 */
void mpc_bqp_vector(float bqp[], const float barUmin[], const float barUmax[], const float bmin[], const float bmax[], const size_t column_b, const size_t row_c, const size_t N) {
 8004f7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	size_t i, row = 0;
	for (i = 0; i < N * column_b + N; i++) {
 8004f7e:	2500      	movs	r5, #0
void mpc_bqp_vector(float bqp[], const float barUmin[], const float barUmax[], const float bmin[], const float bmax[], const size_t column_b, const size_t row_c, const size_t N) {
 8004f80:	9301      	str	r3, [sp, #4]
	for (i = 0; i < N * column_b + N; i++) {
 8004f82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
void mpc_bqp_vector(float bqp[], const float barUmin[], const float barUmax[], const float bmin[], const float bmax[], const size_t column_b, const size_t row_c, const size_t N) {
 8004f84:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
	for (i = 0; i < N * column_b + N; i++) {
 8004f86:	1c5c      	adds	r4, r3, #1
 8004f88:	437c      	muls	r4, r7
void mpc_bqp_vector(float bqp[], const float barUmin[], const float barUmax[], const float bmin[], const float bmax[], const size_t column_b, const size_t row_c, const size_t N) {
 8004f8a:	9100      	str	r1, [sp, #0]
 8004f8c:	00a6      	lsls	r6, r4, #2
	for (i = 0; i < N * column_b + N; i++) {
 8004f8e:	42b5      	cmp	r5, r6
 8004f90:	d118      	bne.n	8004fc4 <mpc_bqp_vector+0x48>
		bqp[i] = barUmax[i];
	}
	row += i;
	for (i = 0; i < (N - 1) * column_b + N * row_c + N * row_c; i++) {
 8004f92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f94:	1e7a      	subs	r2, r7, #1
 8004f96:	4353      	muls	r3, r2
 8004f98:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004f9a:	4357      	muls	r7, r2
 8004f9c:	007a      	lsls	r2, r7, #1
 8004f9e:	189b      	adds	r3, r3, r2
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	009d      	lsls	r5, r3, #2
 8004fa4:	1987      	adds	r7, r0, r6
 8004fa6:	4295      	cmp	r5, r2
 8004fa8:	d110      	bne.n	8004fcc <mpc_bqp_vector+0x50>
		bqp[row + i] = bmax[i];
 8004faa:	2500      	movs	r5, #0
 8004fac:	18e3      	adds	r3, r4, r3
 8004fae:	009f      	lsls	r7, r3, #2
 8004fb0:	19c7      	adds	r7, r0, r7
	}
	row += i;
	for (i = 0; i < N * column_b + N; i++) {
 8004fb2:	42b5      	cmp	r5, r6
 8004fb4:	d10f      	bne.n	8004fd6 <mpc_bqp_vector+0x5a>
		bqp[row + i] = -barUmin[i];
 8004fb6:	18e4      	adds	r4, r4, r3
 8004fb8:	2300      	movs	r3, #0
 8004fba:	00a4      	lsls	r4, r4, #2
 8004fbc:	1900      	adds	r0, r0, r4
	}
	row += i;
	for (i = 0; i < (N - 1) * column_b + N * row_c + N * row_c; i++) {
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d113      	bne.n	8004fea <mpc_bqp_vector+0x6e>
		bqp[row + i] = -bmin[i];
	}
}
 8004fc2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		bqp[i] = barUmax[i];
 8004fc4:	5953      	ldr	r3, [r2, r5]
 8004fc6:	5143      	str	r3, [r0, r5]
	for (i = 0; i < N * column_b + N; i++) {
 8004fc8:	3504      	adds	r5, #4
 8004fca:	e7e0      	b.n	8004f8e <mpc_bqp_vector+0x12>
		bqp[row + i] = bmax[i];
 8004fcc:	9908      	ldr	r1, [sp, #32]
 8004fce:	5889      	ldr	r1, [r1, r2]
 8004fd0:	50b9      	str	r1, [r7, r2]
	for (i = 0; i < (N - 1) * column_b + N * row_c + N * row_c; i++) {
 8004fd2:	3204      	adds	r2, #4
 8004fd4:	e7e7      	b.n	8004fa6 <mpc_bqp_vector+0x2a>
		bqp[row + i] = -barUmin[i];
 8004fd6:	9900      	ldr	r1, [sp, #0]
 8004fd8:	5949      	ldr	r1, [r1, r5]
 8004fda:	468c      	mov	ip, r1
 8004fdc:	2180      	movs	r1, #128	@ 0x80
 8004fde:	0609      	lsls	r1, r1, #24
 8004fe0:	448c      	add	ip, r1
 8004fe2:	4661      	mov	r1, ip
 8004fe4:	5179      	str	r1, [r7, r5]
	for (i = 0; i < N * column_b + N; i++) {
 8004fe6:	3504      	adds	r5, #4
 8004fe8:	e7e3      	b.n	8004fb2 <mpc_bqp_vector+0x36>
		bqp[row + i] = -bmin[i];
 8004fea:	2480      	movs	r4, #128	@ 0x80
 8004fec:	9901      	ldr	r1, [sp, #4]
 8004fee:	0624      	lsls	r4, r4, #24
 8004ff0:	58c9      	ldr	r1, [r1, r3]
 8004ff2:	1909      	adds	r1, r1, r4
 8004ff4:	50c1      	str	r1, [r0, r3]
	for (i = 0; i < (N - 1) * column_b + N * row_c + N * row_c; i++) {
 8004ff6:	3304      	adds	r3, #4
 8004ff8:	e7e1      	b.n	8004fbe <mpc_bqp_vector+0x42>

08004ffa <mpc_set_input_change_constraints>:

/*
 * deltaumin[column_b]
 * deltaumax[column_b]
 */
void mpc_set_input_change_constraints(MPC* mpc, const float deltaumin[], const float deltaumax[]) {
 8004ffa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ffc:	0004      	movs	r4, r0
	/* Create constraints on the movment - Equation (3.38) */
	const size_t column_b = mpc->column_b;
 8004ffe:	6885      	ldr	r5, [r0, #8]
	const size_t N = mpc->N;
 8005000:	6946      	ldr	r6, [r0, #20]
	if (mpc->deltaUmin) {
 8005002:	6d40      	ldr	r0, [r0, #84]	@ 0x54
void mpc_set_input_change_constraints(MPC* mpc, const float deltaumin[], const float deltaumax[]) {
 8005004:	b085      	sub	sp, #20
 8005006:	9101      	str	r1, [sp, #4]
 8005008:	9202      	str	r2, [sp, #8]
	if (mpc->deltaUmin) {
 800500a:	2800      	cmp	r0, #0
 800500c:	d001      	beq.n	8005012 <mpc_set_input_change_constraints+0x18>
		free(mpc->deltaUmin);
 800500e:	f005 fce1 	bl	800a9d4 <free>
	}
	if (mpc->deltaUmax) {
 8005012:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005014:	2800      	cmp	r0, #0
 8005016:	d001      	beq.n	800501c <mpc_set_input_change_constraints+0x22>
		free(mpc->deltaUmax);
 8005018:	f005 fcdc 	bl	800a9d4 <free>
	}
	mpc->deltaUmin = (float*)malloc((N - 1) * column_b * sizeof(float));
 800501c:	002f      	movs	r7, r5
 800501e:	3e01      	subs	r6, #1
 8005020:	4377      	muls	r7, r6
 8005022:	00bf      	lsls	r7, r7, #2
 8005024:	0038      	movs	r0, r7
 8005026:	f005 fccb 	bl	800a9c0 <malloc>
 800502a:	9003      	str	r0, [sp, #12]
 800502c:	6560      	str	r0, [r4, #84]	@ 0x54
	mpc->deltaUmax = (float*)malloc((N - 1) * column_b * sizeof(float));
 800502e:	0038      	movs	r0, r7
 8005030:	f005 fcc6 	bl	800a9c0 <malloc>
 8005034:	0007      	movs	r7, r0
	mpc_vector(mpc->deltaUmin, deltaumin, column_b, N - 1);
 8005036:	0033      	movs	r3, r6
 8005038:	002a      	movs	r2, r5
 800503a:	9901      	ldr	r1, [sp, #4]
	mpc->deltaUmax = (float*)malloc((N - 1) * column_b * sizeof(float));
 800503c:	65a0      	str	r0, [r4, #88]	@ 0x58
	mpc_vector(mpc->deltaUmin, deltaumin, column_b, N - 1);
 800503e:	9803      	ldr	r0, [sp, #12]
 8005040:	f7ff fa69 	bl	8004516 <mpc_vector>
	mpc_vector(mpc->deltaUmax, deltaumax, column_b, N - 1);
 8005044:	0033      	movs	r3, r6
 8005046:	002a      	movs	r2, r5
 8005048:	0038      	movs	r0, r7
 800504a:	9902      	ldr	r1, [sp, #8]
 800504c:	f7ff fa63 	bl	8004516 <mpc_vector>
	memcpy(mpc->deltaumin, deltaumin, mpc->column_b * sizeof(float));
 8005050:	68a2      	ldr	r2, [r4, #8]
 8005052:	9901      	ldr	r1, [sp, #4]
 8005054:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8005056:	0092      	lsls	r2, r2, #2
 8005058:	f006 fbb8 	bl	800b7cc <memcpy>
	memcpy(mpc->deltaumax, deltaumax, mpc->column_b * sizeof(float));
 800505c:	68a2      	ldr	r2, [r4, #8]
 800505e:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8005060:	9902      	ldr	r1, [sp, #8]
 8005062:	0092      	lsls	r2, r2, #2
 8005064:	f006 fbb2 	bl	800b7cc <memcpy>

	/* Debug
	print(mpc->deltaUmin, (N - 1) * column_b, 1);
	print(mpc->deltaUmax, (N - 1) * column_b, 1); */
}
 8005068:	b005      	add	sp, #20
 800506a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800506c <mpc_set_output_constraints>:

/*
 * zmin[row_c]
 * zmax[row_c]
 */
void mpc_set_output_constraints(MPC* mpc, const float zmin[], const float zmax[]) {
 800506c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800506e:	0004      	movs	r4, r0
	/* Create constraints on outputs - Equation (3.43) */
	const size_t row_c = mpc->row_c;
 8005070:	68c6      	ldr	r6, [r0, #12]
	const size_t N = mpc->N;
 8005072:	6947      	ldr	r7, [r0, #20]
	if (mpc->Zmin) {
 8005074:	6e40      	ldr	r0, [r0, #100]	@ 0x64
void mpc_set_output_constraints(MPC* mpc, const float zmin[], const float zmax[]) {
 8005076:	9100      	str	r1, [sp, #0]
 8005078:	9201      	str	r2, [sp, #4]
	if (mpc->Zmin) {
 800507a:	2800      	cmp	r0, #0
 800507c:	d001      	beq.n	8005082 <mpc_set_output_constraints+0x16>
		free(mpc->Zmin);
 800507e:	f005 fca9 	bl	800a9d4 <free>
	}
	mpc->Zmin = (float*)malloc(N * row_c * sizeof(float));
 8005082:	003d      	movs	r5, r7
 8005084:	4375      	muls	r5, r6
 8005086:	00ad      	lsls	r5, r5, #2
 8005088:	0028      	movs	r0, r5
 800508a:	f005 fc99 	bl	800a9c0 <malloc>
 800508e:	6660      	str	r0, [r4, #100]	@ 0x64
	if (mpc->Zmax) {
 8005090:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8005092:	2800      	cmp	r0, #0
 8005094:	d001      	beq.n	800509a <mpc_set_output_constraints+0x2e>
		free(mpc->Zmax);
 8005096:	f005 fc9d 	bl	800a9d4 <free>
	}
	mpc->Zmax = (float*)malloc(N * row_c * sizeof(float));
 800509a:	0028      	movs	r0, r5
 800509c:	f005 fc90 	bl	800a9c0 <malloc>
 80050a0:	0005      	movs	r5, r0
	mpc_vector(mpc->Zmin, zmin, row_c, N);
 80050a2:	003b      	movs	r3, r7
 80050a4:	0032      	movs	r2, r6
 80050a6:	9900      	ldr	r1, [sp, #0]
	mpc->Zmax = (float*)malloc(N * row_c * sizeof(float));
 80050a8:	66a0      	str	r0, [r4, #104]	@ 0x68
	mpc_vector(mpc->Zmin, zmin, row_c, N);
 80050aa:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 80050ac:	f7ff fa33 	bl	8004516 <mpc_vector>
	mpc_vector(mpc->Zmax, zmax, row_c, N);
 80050b0:	003b      	movs	r3, r7
 80050b2:	0032      	movs	r2, r6
 80050b4:	0028      	movs	r0, r5
 80050b6:	9901      	ldr	r1, [sp, #4]
 80050b8:	f7ff fa2d 	bl	8004516 <mpc_vector>

	/* Debug
	print(mpc->Zmin, N * row_c, 1);
	print(mpc->Zmax, N * row_c, 1); */
}
 80050bc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

080050be <mpc_set_input_constraints>:

/*
 * umin[column_b]
 * umax[column_b]
 */
void mpc_set_input_constraints(MPC* mpc, const float umin[], const float umax[]) {
 80050be:	b570      	push	{r4, r5, r6, lr}
 80050c0:	0004      	movs	r4, r0
 80050c2:	0015      	movs	r5, r2
	/* Create constraints on inputs - Equation (3.40) */
	memcpy(mpc->umin, umin, mpc->column_b * sizeof(float));
 80050c4:	68a2      	ldr	r2, [r4, #8]
 80050c6:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
 80050c8:	0092      	lsls	r2, r2, #2
 80050ca:	f006 fb7f 	bl	800b7cc <memcpy>
	memcpy(mpc->umax, umax, mpc->column_b * sizeof(float));
 80050ce:	68a2      	ldr	r2, [r4, #8]
 80050d0:	0029      	movs	r1, r5
 80050d2:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 80050d4:	0092      	lsls	r2, r2, #2
 80050d6:	f006 fb79 	bl	800b7cc <memcpy>
}
 80050da:	bd70      	pop	{r4, r5, r6, pc}

080050dc <mpc_init>:
 * A[row_a * row_a]
 * B[row_a * column_b]
 * C[row_c * row_a]
 * E[row_a * column_e]
 */
bool mpc_init(MPC* mpc, const float A[], const float B[], const float C[], const float E[], const float sampleTime_mpc, const float sampleTime_kf, const float qw, const float rv, const float qz, const float s, const float Spsi_spsi, const size_t row_a, const size_t column_b, const size_t row_c, const size_t column_e, const size_t N, const size_t iterations) {
 80050dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050de:	b095      	sub	sp, #84	@ 0x54
 80050e0:	9211      	str	r2, [sp, #68]	@ 0x44
	/* Check if the mpc has been initlized before */
	if (mpc->is_initlized) {
		return false;
 80050e2:	2200      	movs	r2, #0
bool mpc_init(MPC* mpc, const float A[], const float B[], const float C[], const float E[], const float sampleTime_mpc, const float sampleTime_kf, const float qw, const float rv, const float qz, const float s, const float Spsi_spsi, const size_t row_a, const size_t column_b, const size_t row_c, const size_t column_e, const size_t N, const size_t iterations) {
 80050e4:	9312      	str	r3, [sp, #72]	@ 0x48
	if (mpc->is_initlized) {
 80050e6:	7803      	ldrb	r3, [r0, #0]
bool mpc_init(MPC* mpc, const float A[], const float B[], const float C[], const float E[], const float sampleTime_mpc, const float sampleTime_kf, const float qw, const float rv, const float qz, const float s, const float Spsi_spsi, const size_t row_a, const size_t column_b, const size_t row_c, const size_t column_e, const size_t N, const size_t iterations) {
 80050e8:	0004      	movs	r4, r0
 80050ea:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
 80050ec:	9110      	str	r1, [sp, #64]	@ 0x40
		return false;
 80050ee:	920a      	str	r2, [sp, #40]	@ 0x28
	if (mpc->is_initlized) {
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d000      	beq.n	80050f6 <mpc_init+0x1a>
 80050f4:	e19d      	b.n	8005432 <mpc_init+0x356>
	}

	/* Set sizes */
	mpc->row_a = row_a;           /* Dimension of A matrix */
 80050f6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
	mpc->column_b = column_b;     /* Columns of B matrix */
 80050f8:	6087      	str	r7, [r0, #8]
	mpc->row_a = row_a;           /* Dimension of A matrix */
 80050fa:	6043      	str	r3, [r0, #4]
	mpc->row_c = row_c;           /* Dimension of C matrix */
 80050fc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80050fe:	60c3      	str	r3, [r0, #12]
	mpc->column_e = column_e;     /* Columns of E matrix */
 8005100:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8005102:	6103      	str	r3, [r0, #16]
	mpc->N = N;                   /* Horizon */
 8005104:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8005106:	6143      	str	r3, [r0, #20]

	/* Create discrete matrices for MPC - Equation (2.9) */
	mpc->Ad = (float*)malloc(row_a * row_a * sizeof(float));
 8005108:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800510a:	435b      	muls	r3, r3
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	0018      	movs	r0, r3
 8005110:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005112:	f005 fc55 	bl	800a9c0 <malloc>
 8005116:	00bb      	lsls	r3, r7, #2
 8005118:	930c      	str	r3, [sp, #48]	@ 0x30
	mpc->Bd = (float*)malloc(row_a * column_b * sizeof(float));
 800511a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800511c:	00ba      	lsls	r2, r7, #2
 800511e:	4353      	muls	r3, r2
	mpc->Ad = (float*)malloc(row_a * row_a * sizeof(float));
 8005120:	9013      	str	r0, [sp, #76]	@ 0x4c
 8005122:	61a0      	str	r0, [r4, #24]
	mpc->Bd = (float*)malloc(row_a * column_b * sizeof(float));
 8005124:	0018      	movs	r0, r3
 8005126:	930d      	str	r3, [sp, #52]	@ 0x34
 8005128:	f005 fc4a 	bl	800a9c0 <malloc>
 800512c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800512e:	0005      	movs	r5, r0
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	930f      	str	r3, [sp, #60]	@ 0x3c
	mpc->Cd = (float*)malloc(row_c * row_a * sizeof(float));
 8005134:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005136:	9b22      	ldr	r3, [sp, #136]	@ 0x88
	mpc->Bd = (float*)malloc(row_a * column_b * sizeof(float));
 8005138:	61e0      	str	r0, [r4, #28]
	mpc->Cd = (float*)malloc(row_c * row_a * sizeof(float));
 800513a:	4353      	muls	r3, r2
 800513c:	0018      	movs	r0, r3
 800513e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005140:	f005 fc3e 	bl	800a9c0 <malloc>
	mpc->Ed = (float*)malloc(row_a * column_e * sizeof(float));
 8005144:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005146:	9b25      	ldr	r3, [sp, #148]	@ 0x94
	mpc->Cd = (float*)malloc(row_c * row_a * sizeof(float));
 8005148:	0006      	movs	r6, r0
	mpc->Ed = (float*)malloc(row_a * column_e * sizeof(float));
 800514a:	4353      	muls	r3, r2
 800514c:	009b      	lsls	r3, r3, #2
	mpc->Cd = (float*)malloc(row_c * row_a * sizeof(float));
 800514e:	6220      	str	r0, [r4, #32]
	mpc->Ed = (float*)malloc(row_a * column_e * sizeof(float));
 8005150:	0018      	movs	r0, r3
 8005152:	930e      	str	r3, [sp, #56]	@ 0x38
 8005154:	f005 fc34 	bl	800a9c0 <malloc>
	mpc_discrete_matrices(sampleTime_mpc, A, B, C, E, mpc->Ad, mpc->Bd, mpc->Cd, mpc->Ed, row_a, column_b, row_c, column_e);
 8005158:	9b25      	ldr	r3, [sp, #148]	@ 0x94
	mpc->Ed = (float*)malloc(row_a * column_e * sizeof(float));
 800515a:	6260      	str	r0, [r4, #36]	@ 0x24
	mpc_discrete_matrices(sampleTime_mpc, A, B, C, E, mpc->Ad, mpc->Bd, mpc->Cd, mpc->Ed, row_a, column_b, row_c, column_e);
 800515c:	9308      	str	r3, [sp, #32]
 800515e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005160:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005162:	9307      	str	r3, [sp, #28]
 8005164:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005166:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8005168:	9305      	str	r3, [sp, #20]
 800516a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800516c:	9004      	str	r0, [sp, #16]
 800516e:	9301      	str	r3, [sp, #4]
 8005170:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8005172:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8005174:	9603      	str	r6, [sp, #12]
 8005176:	9502      	str	r5, [sp, #8]
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	9706      	str	r7, [sp, #24]
 800517c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800517e:	f7ff f942 	bl	8004406 <mpc_discrete_matrices>

	/* Create discrete matrices for KF - Equation (2.9) */
	mpc->Adkf = (float*)malloc(row_a * row_a * sizeof(float));
 8005182:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8005184:	f005 fc1c 	bl	800a9c0 <malloc>
 8005188:	0005      	movs	r5, r0
 800518a:	62a0      	str	r0, [r4, #40]	@ 0x28
	mpc->Bdkf = (float*)malloc(row_a * column_b * sizeof(float));
 800518c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800518e:	f005 fc17 	bl	800a9c0 <malloc>
 8005192:	0006      	movs	r6, r0
 8005194:	62e0      	str	r0, [r4, #44]	@ 0x2c
	mpc->Cdkf = (float*)malloc(row_c * row_a * sizeof(float));
 8005196:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005198:	f005 fc12 	bl	800a9c0 <malloc>
 800519c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800519e:	6320      	str	r0, [r4, #48]	@ 0x30
	mpc->Edkf = (float*)malloc(row_a * column_e * sizeof(float));
 80051a0:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80051a2:	f005 fc0d 	bl	800a9c0 <malloc>
	mpc_discrete_matrices(sampleTime_kf, A, B, C, E, mpc->Adkf, mpc->Bdkf, mpc->Cdkf, mpc->Edkf, row_a, column_b, row_c, column_e);
 80051a6:	9b25      	ldr	r3, [sp, #148]	@ 0x94
	mpc->Edkf = (float*)malloc(row_a * column_e * sizeof(float));
 80051a8:	6360      	str	r0, [r4, #52]	@ 0x34
	mpc_discrete_matrices(sampleTime_kf, A, B, C, E, mpc->Adkf, mpc->Bdkf, mpc->Cdkf, mpc->Edkf, row_a, column_b, row_c, column_e);
 80051aa:	9308      	str	r3, [sp, #32]
 80051ac:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80051ae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80051b0:	9307      	str	r3, [sp, #28]
 80051b2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80051b4:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80051b6:	9305      	str	r3, [sp, #20]
 80051b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80051ba:	9004      	str	r0, [sp, #16]
 80051bc:	9303      	str	r3, [sp, #12]
 80051be:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80051c0:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80051c2:	9602      	str	r6, [sp, #8]
 80051c4:	9501      	str	r5, [sp, #4]
 80051c6:	9300      	str	r3, [sp, #0]
 80051c8:	9706      	str	r7, [sp, #24]
 80051ca:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80051cc:	f7ff f91b 	bl	8004406 <mpc_discrete_matrices>
	print(mpc->Bdkf, row_a, column_b);
	print(mpc->Cdkf, row_c, row_a);
	print(mpc->Edkf, row_a, column_e); */

	/* Create the kalman gain matrix K - Here we use Kalman-Bucy (1961) filter instead of Kalman Filter (1960) */
	mpc->K = (float*)malloc(row_a * row_c * sizeof(float));
 80051d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80051d2:	f005 fbf5 	bl	800a9c0 <malloc>
	mpc_kalman_gain(iterations, sampleTime_kf, mpc->Adkf, mpc->Cdkf, qw, rv, mpc->K, row_a, row_c);
 80051d6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
	mpc->K = (float*)malloc(row_a * row_c * sizeof(float));
 80051d8:	63a0      	str	r0, [r4, #56]	@ 0x38
	mpc_kalman_gain(iterations, sampleTime_kf, mpc->Adkf, mpc->Cdkf, qw, rv, mpc->K, row_a, row_c);
 80051da:	9304      	str	r3, [sp, #16]
 80051dc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80051de:	9002      	str	r0, [sp, #8]
 80051e0:	9303      	str	r3, [sp, #12]
 80051e2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80051e4:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80051e6:	9301      	str	r3, [sp, #4]
 80051e8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80051ea:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80051f0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80051f2:	f7ff f95e 	bl	80044b2 <mpc_kalman_gain>

	/* Debug 
	print(mpc->K, row_a, row_c); */

	/* Create the Phi matrix and lower hankel toeplitz Gamma matrix of inputs - Equation (3.6) */
	mpc->Phi = (float*)malloc((N * row_c) * row_a * sizeof(float));
 80051f6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80051f8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80051fa:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80051fc:	4353      	muls	r3, r2
 80051fe:	009d      	lsls	r5, r3, #2
 8005200:	4368      	muls	r0, r5
 8005202:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005204:	f005 fbdc 	bl	800a9c0 <malloc>
	obsv(Phi, A, C, row_a, row_c, N);
 8005208:	9b26      	ldr	r3, [sp, #152]	@ 0x98
	mpc->Phi = (float*)malloc((N * row_c) * row_a * sizeof(float));
 800520a:	63e0      	str	r0, [r4, #60]	@ 0x3c
	obsv(Phi, A, C, row_a, row_c, N);
 800520c:	9301      	str	r3, [sp, #4]
 800520e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	6a22      	ldr	r2, [r4, #32]
 8005214:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005216:	69a1      	ldr	r1, [r4, #24]
 8005218:	f000 fb9c 	bl	8005954 <obsv>

	/* Debug
	print(mpc->Phi, N * row_c, row_a); */

	/* Lower triangular toeplitz of extended observability matrix */
	float* Gamma = (float*)malloc((N * row_c) * (N * column_b) * sizeof(float));
 800521c:	9e26      	ldr	r6, [sp, #152]	@ 0x98
 800521e:	437e      	muls	r6, r7
 8005220:	4375      	muls	r5, r6
 8005222:	0028      	movs	r0, r5
 8005224:	9512      	str	r5, [sp, #72]	@ 0x48
 8005226:	f005 fbcb 	bl	800a9c0 <malloc>
	cab(Gamma, Phi, B, C, row_a, row_c, column_b, N);
 800522a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800522c:	9702      	str	r7, [sp, #8]
 800522e:	9303      	str	r3, [sp, #12]
 8005230:	9b24      	ldr	r3, [sp, #144]	@ 0x90
	float* Gamma = (float*)malloc((N * row_c) * (N * column_b) * sizeof(float));
 8005232:	900a      	str	r0, [sp, #40]	@ 0x28
	cab(Gamma, Phi, B, C, row_a, row_c, column_b, N);
 8005234:	9301      	str	r3, [sp, #4]
 8005236:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005238:	9300      	str	r3, [sp, #0]
 800523a:	6a23      	ldr	r3, [r4, #32]
 800523c:	69e2      	ldr	r2, [r4, #28]
 800523e:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8005240:	f7fe fe46 	bl	8003ed0 <cab>

	/* Debug
	print(Gamma, N * row_c, N * column_b); */

	/* Create the weigth matrix - Equation (3.10) */
	float* QZ = (float*)malloc((N * row_c) * (N * row_c) * sizeof(float));
 8005244:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8005246:	4340      	muls	r0, r0
 8005248:	0080      	lsls	r0, r0, #2
 800524a:	f005 fbb9 	bl	800a9c0 <malloc>
	mpc_QZ_matrix(QZ, qz, row_c, N);
 800524e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8005250:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005252:	991f      	ldr	r1, [sp, #124]	@ 0x7c
	float* QZ = (float*)malloc((N * row_c) * (N * row_c) * sizeof(float));
 8005254:	0005      	movs	r5, r0
	mpc_QZ_matrix(QZ, qz, row_c, N);
 8005256:	f7ff f975 	bl	8004544 <mpc_QZ_matrix>

	/* Debug
	print(QZ, N * row_c, N * row_c); */

	/* Create the regularization matrix - Equation (3.21) */
	float* S = (float*)malloc(column_b * column_b * sizeof(float));
 800525a:	0038      	movs	r0, r7
 800525c:	4378      	muls	r0, r7
 800525e:	0080      	lsls	r0, r0, #2
 8005260:	f005 fbae 	bl	800a9c0 <malloc>
	mpc_S_matrix(S, s, column_b);
 8005264:	003a      	movs	r2, r7
 8005266:	9920      	ldr	r1, [sp, #128]	@ 0x80
	float* S = (float*)malloc(column_b * column_b * sizeof(float));
 8005268:	900d      	str	r0, [sp, #52]	@ 0x34
	mpc_S_matrix(S, s, column_b);
 800526a:	f7ff f99a 	bl	80045a2 <mpc_S_matrix>
	float* HS = (float*)malloc((N * column_b) * (N * column_b) * sizeof(float));
 800526e:	0033      	movs	r3, r6
 8005270:	4373      	muls	r3, r6
 8005272:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	0018      	movs	r0, r3
 8005278:	930e      	str	r3, [sp, #56]	@ 0x38
 800527a:	f005 fba1 	bl	800a9c0 <malloc>
	mpc_HS_matrix(HS, S, column_b, N);
 800527e:	003a      	movs	r2, r7
 8005280:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8005282:	990d      	ldr	r1, [sp, #52]	@ 0x34
	float* HS = (float*)malloc((N * column_b) * (N * column_b) * sizeof(float));
 8005284:	9010      	str	r0, [sp, #64]	@ 0x40
	mpc_HS_matrix(HS, S, column_b, N);
 8005286:	f7ff f991 	bl	80045ac <mpc_HS_matrix>
	/* Debug
	print(S, column_b, column_b);
	print(HS, N * column_b, N * column_b); */

	/* Create the QP solver H matrix - Equation (3.24) */
	float* H = (float*)malloc((N * column_b) * (N * column_b) * sizeof(float));
 800528a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800528c:	f005 fb98 	bl	800a9c0 <malloc>
	mpc_H_matrix(H, Gamma, QZ, HS, row_c, column_b, N);
 8005290:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8005292:	002a      	movs	r2, r5
 8005294:	9302      	str	r3, [sp, #8]
 8005296:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005298:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	9701      	str	r7, [sp, #4]
 800529e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
	float* H = (float*)malloc((N * column_b) * (N * column_b) * sizeof(float));
 80052a0:	9011      	str	r0, [sp, #68]	@ 0x44
	mpc_H_matrix(H, Gamma, QZ, HS, row_c, column_b, N);
 80052a2:	f7ff fa22 	bl	80046ea <mpc_H_matrix>

	/* Free */
	free(HS);
 80052a6:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80052a8:	f005 fb94 	bl	800a9d4 <free>

	/* Debug
	print(H, N * column_b, N * column_b); */

	/* Create the lower hankel toeplitz Gamma matrix of disturbance - Equation (3.27) */
	mpc->Gammad = (float*)malloc((N * row_c) * (N * column_e) * sizeof(float));
 80052ac:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80052ae:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80052b0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80052b2:	4353      	muls	r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4358      	muls	r0, r3
 80052b8:	9310      	str	r3, [sp, #64]	@ 0x40
 80052ba:	f005 fb81 	bl	800a9c0 <malloc>
	cab(Gamma, Phi, B, C, row_a, row_c, column_b, N);
 80052be:	9b26      	ldr	r3, [sp, #152]	@ 0x98
	mpc->Gammad = (float*)malloc((N * row_c) * (N * column_e) * sizeof(float));
 80052c0:	6420      	str	r0, [r4, #64]	@ 0x40
	cab(Gamma, Phi, B, C, row_a, row_c, column_b, N);
 80052c2:	9303      	str	r3, [sp, #12]
 80052c4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80052c6:	9302      	str	r3, [sp, #8]
 80052c8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80052ca:	9301      	str	r3, [sp, #4]
 80052cc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80052ce:	9300      	str	r3, [sp, #0]
 80052d0:	6a23      	ldr	r3, [r4, #32]
 80052d2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80052d4:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80052d6:	f7fe fdfb 	bl	8003ed0 <cab>

	/* Debug
	print(mpc->Gammad, N * row_c, N * column_e); */

	/* Create the QP solver matrix for the gradient - Equation (3.32) */
	mpc->Mx0 = (float*)malloc((N * column_b) * row_a * sizeof(float));
 80052da:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80052dc:	4370      	muls	r0, r6
 80052de:	0080      	lsls	r0, r0, #2
 80052e0:	f005 fb6e 	bl	800a9c0 <malloc>
	mpc_Mx0_matrix(mpc->Mx0, Gamma, QZ, mpc->Phi, row_a, row_c, column_b, N);
 80052e4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
	mpc->Mx0 = (float*)malloc((N * column_b) * row_a * sizeof(float));
 80052e6:	6460      	str	r0, [r4, #68]	@ 0x44
	mpc_Mx0_matrix(mpc->Mx0, Gamma, QZ, mpc->Phi, row_a, row_c, column_b, N);
 80052e8:	9303      	str	r3, [sp, #12]
 80052ea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80052ec:	9702      	str	r7, [sp, #8]
 80052ee:	9301      	str	r3, [sp, #4]
 80052f0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80052f2:	002a      	movs	r2, r5
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80052f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80052fa:	f7ff fa3c 	bl	8004776 <mpc_Mx0_matrix>
	mpc->Mum1 = (float*)malloc((N * column_b) * column_b * sizeof(float));
 80052fe:	00b8      	lsls	r0, r7, #2
 8005300:	4370      	muls	r0, r6
 8005302:	f005 fb5d 	bl	800a9c0 <malloc>
	mpc_Mum1_matrix(mpc->Mum1, S, column_b, N);
 8005306:	003a      	movs	r2, r7
 8005308:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800530a:	990d      	ldr	r1, [sp, #52]	@ 0x34
	mpc->Mum1 = (float*)malloc((N * column_b) * column_b * sizeof(float));
 800530c:	64a0      	str	r0, [r4, #72]	@ 0x48
	mpc_Mum1_matrix(mpc->Mum1, S, column_b, N);
 800530e:	f7ff fa6d 	bl	80047ec <mpc_Mum1_matrix>
	mpc->MR = (float*)malloc((N * column_b) * (N * row_c) * sizeof(float));
 8005312:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8005314:	f005 fb54 	bl	800a9c0 <malloc>
	mpc_MR_matrix(mpc->MR, Gamma, QZ, row_c, column_b, N);
 8005318:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800531a:	002a      	movs	r2, r5
	mpc->MR = (float*)malloc((N * column_b) * (N * row_c) * sizeof(float));
 800531c:	64e0      	str	r0, [r4, #76]	@ 0x4c
	mpc_MR_matrix(mpc->MR, Gamma, QZ, row_c, column_b, N);
 800531e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005320:	9301      	str	r3, [sp, #4]
 8005322:	9700      	str	r7, [sp, #0]
 8005324:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005326:	f7ff fa8f 	bl	8004848 <mpc_MR_matrix>
	mpc->MD = (float*)malloc((N * column_b) * (N * column_e) * sizeof(float));
 800532a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800532c:	4370      	muls	r0, r6
 800532e:	f005 fb47 	bl	800a9c0 <malloc>
	mpc_MD_matrix(mpc->MD, Gamma, mpc->Gammad, QZ, row_c, column_b, column_e, N);
 8005332:	9b26      	ldr	r3, [sp, #152]	@ 0x98
	mpc->MD = (float*)malloc((N * column_b) * (N * column_e) * sizeof(float));
 8005334:	6520      	str	r0, [r4, #80]	@ 0x50
	mpc_MD_matrix(mpc->MD, Gamma, mpc->Gammad, QZ, row_c, column_b, column_e, N);
 8005336:	9303      	str	r3, [sp, #12]
 8005338:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800533a:	9701      	str	r7, [sp, #4]
 800533c:	9302      	str	r3, [sp, #8]
 800533e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005340:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005346:	002b      	movs	r3, r5
 8005348:	f7ff faaf 	bl	80048aa <mpc_MD_matrix>

	/* Free */
	free(S);
 800534c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800534e:	f005 fb41 	bl	800a9d4 <free>
	free(QZ);
 8005352:	0028      	movs	r0, r5
 8005354:	f005 fb3e 	bl	800a9d4 <free>
	print(mpc->Mum1, N * column_b, column_b);
	print(mpc->MR, N * column_b, N * row_c);
	print(mpc->MD, N * column_b, N * column_e); */

	/* Create constraints on the movment - Equation (3.38) */
	float* Lambda = (float*)malloc(((N - 1) * column_b) * (N * column_b) * sizeof(float));
 8005358:	1bf0      	subs	r0, r6, r7
 800535a:	4370      	muls	r0, r6
 800535c:	0080      	lsls	r0, r0, #2
 800535e:	f005 fb2f 	bl	800a9c0 <malloc>
	mpc_Lambda_matrix(Lambda, column_b, N);
 8005362:	0039      	movs	r1, r7
 8005364:	9a26      	ldr	r2, [sp, #152]	@ 0x98
	float* Lambda = (float*)malloc(((N - 1) * column_b) * (N * column_b) * sizeof(float));
 8005366:	0005      	movs	r5, r0
	mpc_Lambda_matrix(Lambda, column_b, N);
 8005368:	f7ff fade 	bl	8004928 <mpc_Lambda_matrix>

	/* Debug
	print(Lambda, (N - 1) * column_b, N * column_b); */

	/* Create the slack variables - Equation (3.49) */
	float* barSpsi = (float*)malloc((N * column_b) * (N * column_b) * sizeof(float));
 800536c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800536e:	f005 fb27 	bl	800a9c0 <malloc>
	mpc_barSpsi_matrix(barSpsi, Spsi_spsi, column_b, N);
 8005372:	003a      	movs	r2, r7
 8005374:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8005376:	9921      	ldr	r1, [sp, #132]	@ 0x84
	float* barSpsi = (float*)malloc((N * column_b) * (N * column_b) * sizeof(float));
 8005378:	900d      	str	r0, [sp, #52]	@ 0x34
	mpc_barSpsi_matrix(barSpsi, Spsi_spsi, column_b, N);
 800537a:	f7ff fb3b 	bl	80049f4 <mpc_barSpsi_matrix>
	mpc->barspsi = (float*)malloc(N * column_b * sizeof(float));
 800537e:	00b0      	lsls	r0, r6, #2
 8005380:	f005 fb1e 	bl	800a9c0 <malloc>
	mpc_barspsi_vector(mpc->barspsi, Spsi_spsi, column_b, N);
 8005384:	003a      	movs	r2, r7
 8005386:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8005388:	9b26      	ldr	r3, [sp, #152]	@ 0x98
	mpc->barspsi = (float*)malloc(N * column_b * sizeof(float));
 800538a:	6760      	str	r0, [r4, #116]	@ 0x74
	mpc_barspsi_vector(mpc->barspsi, Spsi_spsi, column_b, N);
 800538c:	f7ff fb38 	bl	8004a00 <mpc_barspsi_vector>
	/* Debug
	print(barSpsi, N * column_b, N * column_b);
	print(mpc->barspsi, N, 1); */

	/* Create QP solver matrix - Equation (3.51) */
	mpc->barH = (float*)malloc((2 * N * column_b) * (2 * N * column_b) * sizeof(float));
 8005390:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005392:	0118      	lsls	r0, r3, #4
 8005394:	f005 fb14 	bl	800a9c0 <malloc>
	mpc_barH_matrix(mpc->barH, H, barSpsi, column_b, N);
 8005398:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800539a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800539c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
	mpc->barH = (float*)malloc((2 * N * column_b) * (2 * N * column_b) * sizeof(float));
 800539e:	67a0      	str	r0, [r4, #120]	@ 0x78
	mpc_barH_matrix(mpc->barH, H, barSpsi, column_b, N);
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	003b      	movs	r3, r7
 80053a4:	f7ff fb34 	bl	8004a10 <mpc_barH_matrix>

	/* Free */
	free(H);
 80053a8:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80053aa:	f005 fb13 	bl	800a9d4 <free>
	free(barSpsi);
 80053ae:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80053b0:	f005 fb10 	bl	800a9d4 <free>

	/* Debug
	print(mpc->barH, 2 * N * column_b, 2 * N * column_b); */

	/* Create inequality constraints AA - Equation (3.56) */
	mpc->AA = (float*)malloc(((N - 1) * column_b + 2 * N * row_c) * (2 * N * column_b) * sizeof(float));
 80053b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80053b6:	1bf2      	subs	r2, r6, r7
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	189b      	adds	r3, r3, r2
 80053bc:	4373      	muls	r3, r6
 80053be:	00d8      	lsls	r0, r3, #3
 80053c0:	f005 fafe 	bl	800a9c0 <malloc>
	mpc_AA_matrix(mpc->AA, Lambda, Gamma, row_c, column_b, N);
 80053c4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80053c6:	0029      	movs	r1, r5
 80053c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
	mpc->AA = (float*)malloc(((N - 1) * column_b + 2 * N * row_c) * (2 * N * column_b) * sizeof(float));
 80053ca:	67e0      	str	r0, [r4, #124]	@ 0x7c
	mpc_AA_matrix(mpc->AA, Lambda, Gamma, row_c, column_b, N);
 80053cc:	9301      	str	r3, [sp, #4]
 80053ce:	9700      	str	r7, [sp, #0]
 80053d0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80053d2:	f7ff fd27 	bl	8004e24 <mpc_AA_matrix>

	/* Debug 
	print(mpc->AA, (N - 1) * column_b + 2 * N * row_c, (2 * N * column_b)); */

	/* Free */
	free(Gamma);
 80053d6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80053d8:	f005 fafc 	bl	800a9d4 <free>
	free(Lambda);
 80053dc:	0028      	movs	r0, r5
 80053de:	f005 faf9 	bl	800a9d4 <free>

	/* Create empty arrays */
	mpc->eta = (float*)malloc(row_c * sizeof(float));
 80053e2:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80053e4:	f005 faec 	bl	800a9c0 <malloc>
 80053e8:	1d23      	adds	r3, r4, #4
	memset(mpc->eta, 0, row_c * sizeof(float));
 80053ea:	2100      	movs	r1, #0
 80053ec:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
	mpc->eta = (float*)malloc(row_c * sizeof(float));
 80053ee:	67d8      	str	r0, [r3, #124]	@ 0x7c
	memset(mpc->eta, 0, row_c * sizeof(float));
 80053f0:	f006 f92c 	bl	800b64c <memset>
	mpc->x = (float*)malloc(row_a * sizeof(float));
 80053f4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80053f6:	009d      	lsls	r5, r3, #2
 80053f8:	0028      	movs	r0, r5
 80053fa:	f005 fae1 	bl	800a9c0 <malloc>
 80053fe:	0023      	movs	r3, r4
 8005400:	338c      	adds	r3, #140	@ 0x8c
 8005402:	6018      	str	r0, [r3, #0]
	memset(mpc->x, 0, row_a * sizeof(float));
 8005404:	002a      	movs	r2, r5
 8005406:	2100      	movs	r1, #0
 8005408:	f006 f920 	bl	800b64c <memset>

	/* Create holders */
	mpc->deltaumin = (float*)malloc(column_b * sizeof(float));
 800540c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800540e:	f005 fad7 	bl	800a9c0 <malloc>
 8005412:	65e0      	str	r0, [r4, #92]	@ 0x5c
	mpc->deltaumax = (float*)malloc(column_b * sizeof(float));
 8005414:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8005416:	f005 fad3 	bl	800a9c0 <malloc>
 800541a:	6620      	str	r0, [r4, #96]	@ 0x60
	mpc->umin = (float*)malloc(column_b * sizeof(float));
 800541c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800541e:	f005 facf 	bl	800a9c0 <malloc>
 8005422:	66e0      	str	r0, [r4, #108]	@ 0x6c
	mpc->umax = (float*)malloc(column_b * sizeof(float));
 8005424:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8005426:	f005 facb 	bl	800a9c0 <malloc>

	/* Flag */
	mpc->is_initlized = true;
 800542a:	2301      	movs	r3, #1
	mpc->umax = (float*)malloc(column_b * sizeof(float));
 800542c:	6720      	str	r0, [r4, #112]	@ 0x70
	mpc->is_initlized = true;
 800542e:	7023      	strb	r3, [r4, #0]

	/* Return true */
	return true;
 8005430:	930a      	str	r3, [sp, #40]	@ 0x28
}
 8005432:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005434:	b015      	add	sp, #84	@ 0x54
 8005436:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005438 <mpc_set_constraints>:
 * zmin[row_c]
 * zmax[row_c]
 * deltaumin[column_b]
 * deltaumax[column_b]
 */
void mpc_set_constraints(MPC* mpc, const float umin[], const float umax[], const float zmin[], const float zmax[], const float deltaumin[], const float deltaumax[], const float alpha, const float antiwindup) {
 8005438:	b570      	push	{r4, r5, r6, lr}
 800543a:	001d      	movs	r5, r3
 800543c:	0004      	movs	r4, r0
	mpc_set_input_constraints(mpc, umin, umax);
 800543e:	f7ff fe3e 	bl	80050be <mpc_set_input_constraints>
	mpc_set_output_constraints(mpc, zmin, zmax);
 8005442:	0029      	movs	r1, r5
 8005444:	0020      	movs	r0, r4
 8005446:	9a04      	ldr	r2, [sp, #16]
 8005448:	f7ff fe10 	bl	800506c <mpc_set_output_constraints>
	mpc_set_input_change_constraints(mpc, deltaumin, deltaumax);
 800544c:	0020      	movs	r0, r4
 800544e:	9a06      	ldr	r2, [sp, #24]
 8005450:	9905      	ldr	r1, [sp, #20]
 8005452:	f7ff fdd2 	bl	8004ffa <mpc_set_input_change_constraints>
	mpc->alpha = alpha;
 8005456:	0023      	movs	r3, r4
 8005458:	9a07      	ldr	r2, [sp, #28]
 800545a:	3308      	adds	r3, #8
 800545c:	67da      	str	r2, [r3, #124]	@ 0x7c
	mpc->antiwindup = antiwindup;
 800545e:	9b08      	ldr	r3, [sp, #32]
 8005460:	3488      	adds	r4, #136	@ 0x88
 8005462:	6023      	str	r3, [r4, #0]
}
 8005464:	bd70      	pop	{r4, r5, r6, pc}

08005466 <mpc_optimize>:
 * u[column_b]
 * r[row_c]
 * y[row_c]
 * d[column_e]
 */
STATUS_CODES mpc_optimize(MPC* mpc, float u[], const float r[], const float y[], const float d[], const bool integral_active) {
 8005466:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005468:	b09d      	sub	sp, #116	@ 0x74
 800546a:	0015      	movs	r5, r2
 800546c:	001a      	movs	r2, r3
 800546e:	ab22      	add	r3, sp, #136	@ 0x88
 8005470:	911b      	str	r1, [sp, #108]	@ 0x6c
 8005472:	cb02      	ldmia	r3!, {r1}
 8005474:	0004      	movs	r4, r0
 8005476:	910e      	str	r1, [sp, #56]	@ 0x38
 8005478:	7819      	ldrb	r1, [r3, #0]
	/* Get sizes */
	const size_t row_a = mpc->row_a;
 800547a:	6843      	ldr	r3, [r0, #4]
	const size_t column_b = mpc->column_b;
	const size_t row_c = mpc->row_c;
	const size_t column_e = mpc->column_e;
	const size_t N = mpc->N;
 800547c:	6947      	ldr	r7, [r0, #20]
	const size_t row_a = mpc->row_a;
 800547e:	9316      	str	r3, [sp, #88]	@ 0x58
	const size_t column_b = mpc->column_b;
 8005480:	6883      	ldr	r3, [r0, #8]

	/* Integral action - Equation (3.66) */
	mpc_eta_vector(mpc->eta, r, y, mpc->alpha, integral_active, row_c);
 8005482:	1d06      	adds	r6, r0, #4
	const size_t column_b = mpc->column_b;
 8005484:	930c      	str	r3, [sp, #48]	@ 0x30
	const size_t row_c = mpc->row_c;
 8005486:	68c3      	ldr	r3, [r0, #12]
 8005488:	930d      	str	r3, [sp, #52]	@ 0x34
	const size_t column_e = mpc->column_e;
 800548a:	6903      	ldr	r3, [r0, #16]
	mpc_eta_vector(mpc->eta, r, y, mpc->alpha, integral_active, row_c);
 800548c:	9100      	str	r1, [sp, #0]
	const size_t column_e = mpc->column_e;
 800548e:	930f      	str	r3, [sp, #60]	@ 0x3c
	mpc_eta_vector(mpc->eta, r, y, mpc->alpha, integral_active, row_c);
 8005490:	0003      	movs	r3, r0
 8005492:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005494:	3308      	adds	r3, #8
 8005496:	9001      	str	r0, [sp, #4]
 8005498:	0029      	movs	r1, r5
 800549a:	6ff0      	ldr	r0, [r6, #124]	@ 0x7c
 800549c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800549e:	f7ff fada 	bl	8004a56 <mpc_eta_vector>

	/* Debug
	print(mpc->eta, row_c, 1); */

	/* Anti-windup */
	mpc_antiwindup_vector(mpc->eta, mpc->antiwindup, row_c);
 80054a2:	0023      	movs	r3, r4
 80054a4:	3388      	adds	r3, #136	@ 0x88
 80054a6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80054a8:	6819      	ldr	r1, [r3, #0]
 80054aa:	6ff0      	ldr	r0, [r6, #124]	@ 0x7c
 80054ac:	f7ff faf4 	bl	8004a98 <mpc_antiwindup_vector>

	/* Debug
	print(mpc->eta, row_c, 1); */

	/* Create reference vector */
	float* R = (float*)malloc(N * row_c * sizeof(float));
 80054b0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80054b2:	437b      	muls	r3, r7
 80054b4:	9312      	str	r3, [sp, #72]	@ 0x48
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	0018      	movs	r0, r3
 80054ba:	9313      	str	r3, [sp, #76]	@ 0x4c
 80054bc:	f005 fa80 	bl	800a9c0 <malloc>
	mpc_vector(R, r, row_c, N);
 80054c0:	003b      	movs	r3, r7
 80054c2:	0029      	movs	r1, r5
 80054c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
	float* R = (float*)malloc(N * row_c * sizeof(float));
 80054c6:	9017      	str	r0, [sp, #92]	@ 0x5c
	mpc_vector(R, r, row_c, N);
 80054c8:	f7ff f825 	bl	8004516 <mpc_vector>

	/* Debug
	print(R, N * row_c, 1); */

	/* Create disturbance vector */
	float* D = (float*)malloc(N * column_e * sizeof(float));
 80054cc:	980f      	ldr	r0, [sp, #60]	@ 0x3c
	/*
	 * Create gradient g. Also add the integral eta together with reference vector R for adjust the reference settings - Equation (3.32)
	 * The reason why adjusting the reference R vector is because then the integral action will be optimized inside the QP-solver.
	 */
	float* g = (float*)malloc(N * column_b * sizeof(float));
	mpc_g_vector(g, mpc->Mx0, mpc->x, mpc->MR, R, mpc->eta, mpc->MD, D, mpc->Mum1, um1, row_a, row_c, column_b, column_e, N);
 80054ce:	0025      	movs	r5, r4
	float* D = (float*)malloc(N * column_e * sizeof(float));
 80054d0:	4378      	muls	r0, r7
 80054d2:	0080      	lsls	r0, r0, #2
 80054d4:	f005 fa74 	bl	800a9c0 <malloc>
	mpc_vector(D, d, column_e, N);
 80054d8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80054da:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80054dc:	003b      	movs	r3, r7
	float* D = (float*)malloc(N * column_e * sizeof(float));
 80054de:	9010      	str	r0, [sp, #64]	@ 0x40
	mpc_vector(D, d, column_e, N);
 80054e0:	f7ff f819 	bl	8004516 <mpc_vector>
	float* um1 = (float*)malloc(column_b * sizeof(float));
 80054e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
	mpc_g_vector(g, mpc->Mx0, mpc->x, mpc->MR, R, mpc->eta, mpc->MD, D, mpc->Mum1, um1, row_a, row_c, column_b, column_e, N);
 80054e6:	358c      	adds	r5, #140	@ 0x8c
	float* um1 = (float*)malloc(column_b * sizeof(float));
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	0018      	movs	r0, r3
 80054ec:	9314      	str	r3, [sp, #80]	@ 0x50
 80054ee:	f005 fa67 	bl	800a9c0 <malloc>
	memcpy(um1, u, column_b * sizeof(float));
 80054f2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80054f4:	991b      	ldr	r1, [sp, #108]	@ 0x6c
	float* um1 = (float*)malloc(column_b * sizeof(float));
 80054f6:	9011      	str	r0, [sp, #68]	@ 0x44
	memcpy(um1, u, column_b * sizeof(float));
 80054f8:	f006 f968 	bl	800b7cc <memcpy>
	float* g = (float*)malloc(N * column_b * sizeof(float));
 80054fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80054fe:	437b      	muls	r3, r7
 8005500:	930e      	str	r3, [sp, #56]	@ 0x38
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	0018      	movs	r0, r3
 8005506:	9315      	str	r3, [sp, #84]	@ 0x54
 8005508:	f005 fa5a 	bl	800a9c0 <malloc>
	mpc_g_vector(g, mpc->Mx0, mpc->x, mpc->MR, R, mpc->eta, mpc->MD, D, mpc->Mum1, um1, row_a, row_c, column_b, column_e, N);
 800550c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800550e:	970a      	str	r7, [sp, #40]	@ 0x28
 8005510:	9309      	str	r3, [sp, #36]	@ 0x24
 8005512:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
	float* g = (float*)malloc(N * column_b * sizeof(float));
 8005514:	9018      	str	r0, [sp, #96]	@ 0x60
	mpc_g_vector(g, mpc->Mx0, mpc->x, mpc->MR, R, mpc->eta, mpc->MD, D, mpc->Mum1, um1, row_a, row_c, column_b, column_e, N);
 8005516:	9308      	str	r3, [sp, #32]
 8005518:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800551a:	9307      	str	r3, [sp, #28]
 800551c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800551e:	9306      	str	r3, [sp, #24]
 8005520:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005522:	9305      	str	r3, [sp, #20]
 8005524:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8005526:	9304      	str	r3, [sp, #16]
 8005528:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800552a:	9303      	str	r3, [sp, #12]
 800552c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800552e:	9302      	str	r3, [sp, #8]
 8005530:	6ff3      	ldr	r3, [r6, #124]	@ 0x7c
 8005532:	9301      	str	r3, [sp, #4]
 8005534:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005536:	9300      	str	r3, [sp, #0]
 8005538:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800553a:	682a      	ldr	r2, [r5, #0]
 800553c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800553e:	f7ff fac6 	bl	8004ace <mpc_g_vector>

	/* Free */
	free(R);
 8005542:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8005544:	f005 fa46 	bl	800a9d4 <free>

	/* Debug
	print(g, N * column_b, 1); */

	/* Create constrants on inputs */
	float* Umin = (float*)malloc(N * column_b * sizeof(float));
 8005548:	9815      	ldr	r0, [sp, #84]	@ 0x54
 800554a:	f005 fa39 	bl	800a9c0 <malloc>
 800554e:	9017      	str	r0, [sp, #92]	@ 0x5c
	float* Umax = (float*)malloc(N * column_b * sizeof(float));
 8005550:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8005552:	f005 fa35 	bl	800a9c0 <malloc>
 8005556:	0006      	movs	r6, r0
	mpc_Umin_vector(Umin, mpc->umin, mpc->deltaumin, um1, N, column_b);
 8005558:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800555a:	9700      	str	r7, [sp, #0]
 800555c:	9301      	str	r3, [sp, #4]
 800555e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8005560:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005562:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8005564:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8005566:	f7ff fb3b 	bl	8004be0 <mpc_Umin_vector>
	mpc_Umax_vector(Umax, mpc->umax, mpc->deltaumax, um1, N, column_b);
 800556a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800556c:	9700      	str	r7, [sp, #0]
 800556e:	9301      	str	r3, [sp, #4]
 8005570:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8005572:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005574:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8005576:	0030      	movs	r0, r6
 8005578:	f7ff fb4e 	bl	8004c18 <mpc_Umax_vector>

	/* Free */
	free(um1);
 800557c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800557e:	f005 fa29 	bl	800a9d4 <free>

	/* Create constraints for the output - Equation (3.44) */
	float* barZmin = (float*)malloc(N * row_c * sizeof(float));
 8005582:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8005584:	f005 fa1c 	bl	800a9c0 <malloc>
 8005588:	9011      	str	r0, [sp, #68]	@ 0x44
	float* barZmax = (float*)malloc(N * row_c * sizeof(float));
 800558a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800558c:	f005 fa18 	bl	800a9c0 <malloc>
	mpc_barZmin_vector(barZmin, mpc->Zmin, mpc->Phi, mpc->x, mpc->Gammad, D, row_a, row_c, column_b, column_e, N);
 8005590:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005592:	9706      	str	r7, [sp, #24]
 8005594:	9305      	str	r3, [sp, #20]
 8005596:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
	float* barZmax = (float*)malloc(N * row_c * sizeof(float));
 8005598:	9013      	str	r0, [sp, #76]	@ 0x4c
	mpc_barZmin_vector(barZmin, mpc->Zmin, mpc->Phi, mpc->x, mpc->Gammad, D, row_a, row_c, column_b, column_e, N);
 800559a:	9304      	str	r3, [sp, #16]
 800559c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800559e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80055a0:	9303      	str	r3, [sp, #12]
 80055a2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80055a4:	9302      	str	r3, [sp, #8]
 80055a6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80055a8:	9301      	str	r3, [sp, #4]
 80055aa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80055ac:	9300      	str	r3, [sp, #0]
 80055ae:	682b      	ldr	r3, [r5, #0]
 80055b0:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80055b2:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 80055b4:	f7ff fb4c 	bl	8004c50 <mpc_barZmin_vector>
	mpc_barZmax_vector(barZmax, mpc->Zmax, mpc->Phi, mpc->x, mpc->Gammad, D, row_a, row_c, column_b, column_e, N);
 80055b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80055ba:	9706      	str	r7, [sp, #24]
 80055bc:	9305      	str	r3, [sp, #20]
 80055be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80055c0:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80055c2:	9304      	str	r3, [sp, #16]
 80055c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80055c6:	9303      	str	r3, [sp, #12]
 80055c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80055ca:	9302      	str	r3, [sp, #8]
 80055cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80055ce:	9301      	str	r3, [sp, #4]
 80055d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80055d2:	9300      	str	r3, [sp, #0]
 80055d4:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80055d6:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 80055d8:	682b      	ldr	r3, [r5, #0]
 80055da:	f7ff fb39 	bl	8004c50 <mpc_barZmin_vector>

	/* Free */
	free(D);
 80055de:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80055e0:	f005 f9f8 	bl	800a9d4 <free>
	/* Debug
	print(mpc->barZmin, N * row_c, 1);
	print(mpc->barZmax, N * row_c, 1); */

	/* Create gradient bar g - Equation (3.51) */
	float* barg = (float*)malloc((N * column_b + column_b * N) * sizeof(float));
 80055e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80055e6:	00db      	lsls	r3, r3, #3
 80055e8:	0018      	movs	r0, r3
 80055ea:	9319      	str	r3, [sp, #100]	@ 0x64
 80055ec:	f005 f9e8 	bl	800a9c0 <malloc>
	mpc_barg_vector(barg, g, mpc->barspsi, column_b, N);
 80055f0:	9700      	str	r7, [sp, #0]
 80055f2:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 80055f4:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80055f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
	float* barg = (float*)malloc((N * column_b + column_b * N) * sizeof(float));
 80055f8:	900f      	str	r0, [sp, #60]	@ 0x3c
	mpc_barg_vector(barg, g, mpc->barspsi, column_b, N);
 80055fa:	f7ff fb68 	bl	8004cce <mpc_barg_vector>

	/* Free */
	free(g);
 80055fe:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8005600:	f005 f9e8 	bl	800a9d4 <free>
	/* Debug
	print(Umin, N * column_b, 1);
	print(Umax, N * column_b, 1); */

	/* Create barUmin and barUmax - Equation (3.52) */
	float* barUmin = (float*)malloc((N * column_b + N) * sizeof(float));
 8005604:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005606:	19db      	adds	r3, r3, r7
 8005608:	009d      	lsls	r5, r3, #2
 800560a:	0028      	movs	r0, r5
 800560c:	9318      	str	r3, [sp, #96]	@ 0x60
 800560e:	f005 f9d7 	bl	800a9c0 <malloc>
 8005612:	9010      	str	r0, [sp, #64]	@ 0x40
	float* barUmax = (float*)malloc((N * column_b + N) * sizeof(float));
 8005614:	0028      	movs	r0, r5
 8005616:	f005 f9d3 	bl	800a9c0 <malloc>
	mpc_barUmin_vector(barUmin, Umin, column_b, N);
 800561a:	003b      	movs	r3, r7
 800561c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800561e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
	float* barUmax = (float*)malloc((N * column_b + N) * sizeof(float));
 8005620:	9015      	str	r0, [sp, #84]	@ 0x54
	mpc_barUmin_vector(barUmin, Umin, column_b, N);
 8005622:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8005624:	f7ff fb6f 	bl	8004d06 <mpc_barUmin_vector>
	mpc_barUmax_vector(barUmax, Umax, column_b, N);
 8005628:	0031      	movs	r1, r6
 800562a:	003b      	movs	r3, r7
 800562c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800562e:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8005630:	f7ff fb82 	bl	8004d38 <mpc_barUmax_vector>

	/* Free */
	free(Umin);
 8005634:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8005636:	f005 f9cd 	bl	800a9d4 <free>
	free(Umax);
 800563a:	0030      	movs	r0, r6
 800563c:	f005 f9ca 	bl	800a9d4 <free>
	/* Debug
	print(barUmin, N * column_b + N, 1);
	print(barUmax, N * column_b + N, 1); */

	/* Create bmin and bmax - Equation (3.56) */
	float* bmin = (float*)malloc(((N - 1) * column_b + N * row_c + N * row_c) * sizeof(float));
 8005640:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005642:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005644:	1a9d      	subs	r5, r3, r2
 8005646:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005648:	195b      	adds	r3, r3, r5
 800564a:	931a      	str	r3, [sp, #104]	@ 0x68
 800564c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800564e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005650:	189e      	adds	r6, r3, r2
 8005652:	00b6      	lsls	r6, r6, #2
 8005654:	0030      	movs	r0, r6
 8005656:	f005 f9b3 	bl	800a9c0 <malloc>
 800565a:	9016      	str	r0, [sp, #88]	@ 0x58
	float* bmax = (float*)malloc(((N - 1) * column_b + N * row_c + N * row_c) * sizeof(float));
 800565c:	0030      	movs	r0, r6
 800565e:	f005 f9af 	bl	800a9c0 <malloc>
	mpc_bmax_vector(bmax, mpc->deltaUmax, barZmax, column_b, row_c, N);
 8005662:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005664:	9701      	str	r7, [sp, #4]
 8005666:	9300      	str	r3, [sp, #0]
 8005668:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800566a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800566c:	6da1      	ldr	r1, [r4, #88]	@ 0x58
	float* bmax = (float*)malloc(((N - 1) * column_b + N * row_c + N * row_c) * sizeof(float));
 800566e:	9017      	str	r0, [sp, #92]	@ 0x5c
	mpc_bmax_vector(bmax, mpc->deltaUmax, barZmax, column_b, row_c, N);
 8005670:	f7ff fba8 	bl	8004dc4 <mpc_bmax_vector>
	mpc_bmin_vector(bmin, mpc->deltaUmin, barZmin, column_b, row_c, N);
 8005674:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005676:	9701      	str	r7, [sp, #4]
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800567c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800567e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005680:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8005682:	f7ff fb75 	bl	8004d70 <mpc_bmin_vector>
	/* Debug
	print(bmin, (N - 1) * column_b + N * row_c + N * row_c, 1);
	print(bmax, (N - 1) * column_b + N * row_c + N * row_c, 1); */

	/* Free */
	free(barZmin);
 8005686:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8005688:	f005 f9a4 	bl	800a9d4 <free>
	free(barZmax);
 800568c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800568e:	f005 f9a1 	bl	800a9d4 <free>

	/* Create for QP - Equation (3.57) */
	float* aqp = (float*)malloc((2 * ((N - 1) * column_b + 2 * N * row_c) + 2 * (N * column_b + N)) * (2 * N * column_b) * sizeof(float));
 8005692:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8005694:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005696:	1955      	adds	r5, r2, r5
 8005698:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800569a:	005b      	lsls	r3, r3, #1
 800569c:	195b      	adds	r3, r3, r5
 800569e:	4358      	muls	r0, r3
 80056a0:	0100      	lsls	r0, r0, #4
 80056a2:	9311      	str	r3, [sp, #68]	@ 0x44
 80056a4:	f005 f98c 	bl	800a9c0 <malloc>
	float* bqp = (float*)malloc((2 * (N * column_b + N) + 2 * ((N - 1) * column_b + N * row_c + N * row_c)) * sizeof(float));
 80056a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80056aa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
	float* aqp = (float*)malloc((2 * ((N - 1) * column_b + 2 * N * row_c) + 2 * (N * column_b + N)) * (2 * N * column_b) * sizeof(float));
 80056ac:	0006      	movs	r6, r0
	float* bqp = (float*)malloc((2 * (N * column_b + N) + 2 * ((N - 1) * column_b + N * row_c + N * row_c)) * sizeof(float));
 80056ae:	1898      	adds	r0, r3, r2
 80056b0:	3001      	adds	r0, #1
 80056b2:	4378      	muls	r0, r7
 80056b4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80056b6:	18c0      	adds	r0, r0, r3
 80056b8:	00c0      	lsls	r0, r0, #3
 80056ba:	f005 f981 	bl	800a9c0 <malloc>
 80056be:	0005      	movs	r5, r0
	mpc_aqp_matrix(aqp, mpc->AA, column_b, row_c, N);
 80056c0:	9700      	str	r7, [sp, #0]
 80056c2:	0030      	movs	r0, r6
 80056c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80056c6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80056c8:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 80056ca:	f7ff fc11 	bl	8004ef0 <mpc_aqp_matrix>
	mpc_bqp_vector(bqp, barUmin, barUmax, bmin, bmax, column_b, row_c, N);
 80056ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80056d0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80056d2:	9302      	str	r3, [sp, #8]
 80056d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80056d6:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80056d8:	9301      	str	r3, [sp, #4]
 80056da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80056dc:	0028      	movs	r0, r5
 80056de:	9703      	str	r7, [sp, #12]
 80056e0:	9300      	str	r3, [sp, #0]
 80056e2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80056e4:	f7ff fc4a 	bl	8004f7c <mpc_bqp_vector>

	/* Free */
	free(bmin);
 80056e8:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80056ea:	f005 f973 	bl	800a9d4 <free>
	free(bmax);
 80056ee:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80056f0:	f005 f970 	bl	800a9d4 <free>
	free(barUmin);
 80056f4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80056f6:	f005 f96d 	bl	800a9d4 <free>
	free(barUmax);
 80056fa:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80056fc:	f005 f96a 	bl	800a9d4 <free>
	/* Debug 
	print(aqp, 2 * ((N - 1) * column_b + 2 * N * row_c) + 2 * (N * column_b + N), 2 * N * column_b);
	print(bqp, 2 * (N * column_b + N) + 2 * ((N - 1) * column_b + N * row_c + N * row_c), 1); */

	/* Quadraptic programming output */
	float* U = (float*)malloc(2 * N * column_b * sizeof(float));
 8005700:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005702:	f005 f95d 	bl	800a9c0 <malloc>
	const STATUS_CODES status = quadprogslim(mpc->barH, barg, aqp, bqp, NULL, NULL, U, 2 * ((N - 1) * column_b + 2 * N * row_c) + 2 * (N * column_b + N), 0, 2 * N * column_b, false);
 8005706:	2200      	movs	r2, #0
 8005708:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800570a:	9206      	str	r2, [sp, #24]
 800570c:	005b      	lsls	r3, r3, #1
 800570e:	9305      	str	r3, [sp, #20]
 8005710:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005712:	9204      	str	r2, [sp, #16]
 8005714:	005b      	lsls	r3, r3, #1
 8005716:	9303      	str	r3, [sp, #12]
 8005718:	9201      	str	r2, [sp, #4]
 800571a:	9200      	str	r2, [sp, #0]
 800571c:	9002      	str	r0, [sp, #8]
 800571e:	002b      	movs	r3, r5
	float* U = (float*)malloc(2 * N * column_b * sizeof(float));
 8005720:	0007      	movs	r7, r0
	const STATUS_CODES status = quadprogslim(mpc->barH, barg, aqp, bqp, NULL, NULL, U, 2 * ((N - 1) * column_b + 2 * N * row_c) + 2 * (N * column_b + N), 0, 2 * N * column_b, false);
 8005722:	0032      	movs	r2, r6
 8005724:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005726:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8005728:	f001 f87c 	bl	8006824 <quadprogslim>
 800572c:	0004      	movs	r4, r0

	/* Get amount of output from U */
	memcpy(u, U, column_b * sizeof(float));
 800572e:	0039      	movs	r1, r7
 8005730:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005732:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8005734:	f006 f84a 	bl	800b7cc <memcpy>

	/* Free */
	free(barg);
 8005738:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800573a:	f005 f94b 	bl	800a9d4 <free>
	free(aqp);
 800573e:	0030      	movs	r0, r6
 8005740:	f005 f948 	bl	800a9d4 <free>
	free(bqp);
 8005744:	0028      	movs	r0, r5
 8005746:	f005 f945 	bl	800a9d4 <free>
	free(U);
 800574a:	0038      	movs	r0, r7
 800574c:	f005 f942 	bl	800a9d4 <free>

	/* Return status */
	return status;
}
 8005750:	0020      	movs	r0, r4
 8005752:	b01d      	add	sp, #116	@ 0x74
 8005754:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005756 <mpc_estimate>:
/*
 * u[column_b]
 * y[row_c]
 * d[column_e]
 */
void mpc_estimate(MPC* mpc, const float u[], const float y[], const float d[]) {
 8005756:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005758:	0004      	movs	r4, r0
 800575a:	b08b      	sub	sp, #44	@ 0x2c
 800575c:	9309      	str	r3, [sp, #36]	@ 0x24
	/* Get sizes */
	const size_t row_c = mpc->row_c;
	const size_t row_a = mpc->row_a;
 800575e:	6843      	ldr	r3, [r0, #4]
	const size_t row_c = mpc->row_c;
 8005760:	68c6      	ldr	r6, [r0, #12]
	const size_t row_a = mpc->row_a;
 8005762:	9302      	str	r3, [sp, #8]
	const size_t column_b = mpc->column_b;
 8005764:	6883      	ldr	r3, [r0, #8]
void mpc_estimate(MPC* mpc, const float u[], const float y[], const float d[]) {
 8005766:	9107      	str	r1, [sp, #28]
	const size_t column_b = mpc->column_b;
 8005768:	9305      	str	r3, [sp, #20]
	const size_t column_e = mpc->column_e;
 800576a:	6903      	ldr	r3, [r0, #16]
void mpc_estimate(MPC* mpc, const float u[], const float y[], const float d[]) {
 800576c:	9208      	str	r2, [sp, #32]
	const size_t column_e = mpc->column_e;
 800576e:	9306      	str	r3, [sp, #24]

	/* Compute model output */
	float* Cdkfx = (float*)malloc(row_c * sizeof(float));
 8005770:	00b3      	lsls	r3, r6, #2
 8005772:	0018      	movs	r0, r3
 8005774:	9304      	str	r3, [sp, #16]
 8005776:	f005 f923 	bl	800a9c0 <malloc>
	mul(mpc->Cdkf, mpc->x, Cdkfx, row_c, row_a, 1);
 800577a:	2301      	movs	r3, #1
 800577c:	0021      	movs	r1, r4
 800577e:	9301      	str	r3, [sp, #4]
 8005780:	9b02      	ldr	r3, [sp, #8]
 8005782:	318c      	adds	r1, #140	@ 0x8c
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	0002      	movs	r2, r0
 8005788:	0033      	movs	r3, r6
 800578a:	6809      	ldr	r1, [r1, #0]
	float* Cdkfx = (float*)malloc(row_c * sizeof(float));
 800578c:	0007      	movs	r7, r0
	mul(mpc->Cdkf, mpc->x, Cdkfx, row_c, row_a, 1);
 800578e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8005790:	f000 fd28 	bl	80061e4 <mul>

	/* Update error - Equation (3.72) */
	float* e = (float*)malloc(row_c * sizeof(float));
 8005794:	00b0      	lsls	r0, r6, #2
 8005796:	f005 f913 	bl	800a9c0 <malloc>
	size_t i;
	for (i = 0; i < row_c; i++) {
 800579a:	2500      	movs	r5, #0
	float* e = (float*)malloc(row_c * sizeof(float));
 800579c:	9003      	str	r0, [sp, #12]
	for (i = 0; i < row_c; i++) {
 800579e:	9b04      	ldr	r3, [sp, #16]
 80057a0:	42ab      	cmp	r3, r5
 80057a2:	d156      	bne.n	8005852 <mpc_estimate+0xfc>
		e[i] = y[i] - Cdkfx[i];
	}

	/* Free */
	free(Cdkfx);
 80057a4:	0038      	movs	r0, r7
 80057a6:	f005 f915 	bl	800a9d4 <free>

	/* Compute kalman */
	float* Ke = (float*)malloc(row_a * sizeof(float));
 80057aa:	9b02      	ldr	r3, [sp, #8]
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	0018      	movs	r0, r3
 80057b0:	9304      	str	r3, [sp, #16]
 80057b2:	f005 f905 	bl	800a9c0 <malloc>
	mul(mpc->K, e, Ke, row_a, row_c, 1);
 80057b6:	2301      	movs	r3, #1
 80057b8:	9600      	str	r6, [sp, #0]
 80057ba:	9301      	str	r3, [sp, #4]
 80057bc:	0002      	movs	r2, r0
 80057be:	9b02      	ldr	r3, [sp, #8]
 80057c0:	9903      	ldr	r1, [sp, #12]
	float* Ke = (float*)malloc(row_a * sizeof(float));
 80057c2:	0007      	movs	r7, r0
	mul(mpc->K, e, Ke, row_a, row_c, 1);
 80057c4:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80057c6:	f000 fd0d 	bl	80061e4 <mul>

	/* Free */
	free(e);
 80057ca:	9803      	ldr	r0, [sp, #12]
 80057cc:	f005 f902 	bl	800a9d4 <free>

	/* Kalman update - Equation (3.75) */
	for (i = 0; i < row_a; i++) {
		mpc->x[i] = mpc->x[i] + Ke[i];
 80057d0:	0023      	movs	r3, r4
	for (i = 0; i < row_a; i++) {
 80057d2:	2600      	movs	r6, #0
		mpc->x[i] = mpc->x[i] + Ke[i];
 80057d4:	338c      	adds	r3, #140	@ 0x8c
 80057d6:	9303      	str	r3, [sp, #12]
	for (i = 0; i < row_a; i++) {
 80057d8:	9b04      	ldr	r3, [sp, #16]
 80057da:	42b3      	cmp	r3, r6
 80057dc:	d142      	bne.n	8005864 <mpc_estimate+0x10e>
	}

	/* Free */
	free(Ke);
 80057de:	0038      	movs	r0, r7
 80057e0:	f005 f8f8 	bl	800a9d4 <free>

	/* Compute candidate state x - Equation (3.65) */
	float* Adkfx = (float*)malloc(row_a * sizeof(float));
	mul(mpc->Adkf, mpc->x, Adkfx, row_a, row_a, 1);
 80057e4:	2701      	movs	r7, #1
 80057e6:	0025      	movs	r5, r4
	float* Adkfx = (float*)malloc(row_a * sizeof(float));
 80057e8:	0030      	movs	r0, r6
 80057ea:	f005 f8e9 	bl	800a9c0 <malloc>
	mul(mpc->Adkf, mpc->x, Adkfx, row_a, row_a, 1);
 80057ee:	9b02      	ldr	r3, [sp, #8]
 80057f0:	9701      	str	r7, [sp, #4]
 80057f2:	9300      	str	r3, [sp, #0]
 80057f4:	358c      	adds	r5, #140	@ 0x8c
 80057f6:	0002      	movs	r2, r0
 80057f8:	6829      	ldr	r1, [r5, #0]
	float* Adkfx = (float*)malloc(row_a * sizeof(float));
 80057fa:	9003      	str	r0, [sp, #12]
	mul(mpc->Adkf, mpc->x, Adkfx, row_a, row_a, 1);
 80057fc:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80057fe:	f000 fcf1 	bl	80061e4 <mul>
	float* Bdkfu = (float*)malloc(row_a * sizeof(float));
 8005802:	0030      	movs	r0, r6
 8005804:	f005 f8dc 	bl	800a9c0 <malloc>
	mul(mpc->Bdkf, u, Bdkfu, row_a, column_b, 1);
 8005808:	9b05      	ldr	r3, [sp, #20]
 800580a:	9701      	str	r7, [sp, #4]
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	0002      	movs	r2, r0
 8005810:	9b02      	ldr	r3, [sp, #8]
 8005812:	9907      	ldr	r1, [sp, #28]
	float* Bdkfu = (float*)malloc(row_a * sizeof(float));
 8005814:	9004      	str	r0, [sp, #16]
	mul(mpc->Bdkf, u, Bdkfu, row_a, column_b, 1);
 8005816:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8005818:	f000 fce4 	bl	80061e4 <mul>
	float* Edkfd = (float*)malloc(row_a * sizeof(float));
 800581c:	0030      	movs	r0, r6
 800581e:	f005 f8cf 	bl	800a9c0 <malloc>
	mul(mpc->Edkf, d, Edkfd, row_a, column_e, 1);
 8005822:	9b06      	ldr	r3, [sp, #24]
 8005824:	9701      	str	r7, [sp, #4]
 8005826:	9300      	str	r3, [sp, #0]
 8005828:	0002      	movs	r2, r0
	float* Edkfd = (float*)malloc(row_a * sizeof(float));
 800582a:	9005      	str	r0, [sp, #20]
	mul(mpc->Edkf, d, Edkfd, row_a, column_e, 1);
 800582c:	9b02      	ldr	r3, [sp, #8]
 800582e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8005830:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005832:	f000 fcd7 	bl	80061e4 <mul>
	for (i = 0; i < row_a; i++) {
 8005836:	2400      	movs	r4, #0
 8005838:	42a6      	cmp	r6, r4
 800583a:	d11d      	bne.n	8005878 <mpc_estimate+0x122>
		mpc->x[i] = Adkfx[i] + Bdkfu[i] + Edkfd[i];
	}

	/* Free */
	free(Adkfx);
 800583c:	9803      	ldr	r0, [sp, #12]
 800583e:	f005 f8c9 	bl	800a9d4 <free>
	free(Bdkfu);
 8005842:	9804      	ldr	r0, [sp, #16]
 8005844:	f005 f8c6 	bl	800a9d4 <free>
	free(Edkfd);
 8005848:	9805      	ldr	r0, [sp, #20]
 800584a:	f005 f8c3 	bl	800a9d4 <free>
}
 800584e:	b00b      	add	sp, #44	@ 0x2c
 8005850:	bdf0      	pop	{r4, r5, r6, r7, pc}
		e[i] = y[i] - Cdkfx[i];
 8005852:	9b08      	ldr	r3, [sp, #32]
 8005854:	5979      	ldr	r1, [r7, r5]
 8005856:	5958      	ldr	r0, [r3, r5]
 8005858:	f7fb fb3c 	bl	8000ed4 <__aeabi_fsub>
 800585c:	9b03      	ldr	r3, [sp, #12]
 800585e:	5158      	str	r0, [r3, r5]
	for (i = 0; i < row_c; i++) {
 8005860:	3504      	adds	r5, #4
 8005862:	e79c      	b.n	800579e <mpc_estimate+0x48>
		mpc->x[i] = mpc->x[i] + Ke[i];
 8005864:	9b03      	ldr	r3, [sp, #12]
 8005866:	59b9      	ldr	r1, [r7, r6]
 8005868:	681d      	ldr	r5, [r3, #0]
 800586a:	19ad      	adds	r5, r5, r6
 800586c:	6828      	ldr	r0, [r5, #0]
 800586e:	f7fa fe83 	bl	8000578 <__aeabi_fadd>
 8005872:	3604      	adds	r6, #4
 8005874:	6028      	str	r0, [r5, #0]
	for (i = 0; i < row_a; i++) {
 8005876:	e7af      	b.n	80057d8 <mpc_estimate+0x82>
		mpc->x[i] = Adkfx[i] + Bdkfu[i] + Edkfd[i];
 8005878:	9b04      	ldr	r3, [sp, #16]
 800587a:	682f      	ldr	r7, [r5, #0]
 800587c:	5919      	ldr	r1, [r3, r4]
 800587e:	9b03      	ldr	r3, [sp, #12]
 8005880:	5918      	ldr	r0, [r3, r4]
 8005882:	f7fa fe79 	bl	8000578 <__aeabi_fadd>
 8005886:	9b05      	ldr	r3, [sp, #20]
 8005888:	5919      	ldr	r1, [r3, r4]
 800588a:	f7fa fe75 	bl	8000578 <__aeabi_fadd>
 800588e:	5138      	str	r0, [r7, r4]
	for (i = 0; i < row_a; i++) {
 8005890:	3404      	adds	r4, #4
 8005892:	e7d1      	b.n	8005838 <mpc_estimate+0xe2>

08005894 <mpc_free>:

bool mpc_free(MPC* mpc) {
 8005894:	b570      	push	{r4, r5, r6, lr}
	/* Only free if it has been initlized */
	if (!mpc->is_initlized) {
 8005896:	7805      	ldrb	r5, [r0, #0]
bool mpc_free(MPC* mpc) {
 8005898:	0004      	movs	r4, r0
	if (!mpc->is_initlized) {
 800589a:	2d00      	cmp	r5, #0
 800589c:	d058      	beq.n	8005950 <mpc_free+0xbc>
		return false;
	}

	/* This follows the MPC struct */
	free(mpc->Ad);
 800589e:	6980      	ldr	r0, [r0, #24]
 80058a0:	f005 f898 	bl	800a9d4 <free>
	free(mpc->Bd);
 80058a4:	69e0      	ldr	r0, [r4, #28]
 80058a6:	f005 f895 	bl	800a9d4 <free>
	free(mpc->Cd);
 80058aa:	6a20      	ldr	r0, [r4, #32]
 80058ac:	f005 f892 	bl	800a9d4 <free>
	free(mpc->Ed);
 80058b0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80058b2:	f005 f88f 	bl	800a9d4 <free>
	free(mpc->Adkf);
 80058b6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80058b8:	f005 f88c 	bl	800a9d4 <free>
	free(mpc->Bdkf);
 80058bc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80058be:	f005 f889 	bl	800a9d4 <free>
	free(mpc->Cdkf);
 80058c2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80058c4:	f005 f886 	bl	800a9d4 <free>
	free(mpc->Edkf);
 80058c8:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80058ca:	f005 f883 	bl	800a9d4 <free>
	free(mpc->K);
 80058ce:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80058d0:	f005 f880 	bl	800a9d4 <free>
	free(mpc->Phi);
 80058d4:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80058d6:	f005 f87d 	bl	800a9d4 <free>
	free(mpc->Gammad);
 80058da:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80058dc:	f005 f87a 	bl	800a9d4 <free>
	free(mpc->Mx0);
 80058e0:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80058e2:	f005 f877 	bl	800a9d4 <free>
	free(mpc->Mum1);
 80058e6:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 80058e8:	f005 f874 	bl	800a9d4 <free>
	free(mpc->MR);
 80058ec:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80058ee:	f005 f871 	bl	800a9d4 <free>
	free(mpc->MD);
 80058f2:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 80058f4:	f005 f86e 	bl	800a9d4 <free>
	free(mpc->deltaUmin);
 80058f8:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80058fa:	f005 f86b 	bl	800a9d4 <free>
	free(mpc->deltaUmax);
 80058fe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005900:	f005 f868 	bl	800a9d4 <free>
	free(mpc->deltaumin);
 8005904:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8005906:	f005 f865 	bl	800a9d4 <free>
	free(mpc->deltaumax);
 800590a:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800590c:	f005 f862 	bl	800a9d4 <free>
	free(mpc->Zmin);
 8005910:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8005912:	f005 f85f 	bl	800a9d4 <free>
	free(mpc->Zmax);
 8005916:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8005918:	f005 f85c 	bl	800a9d4 <free>
	free(mpc->umin);
 800591c:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 800591e:	f005 f859 	bl	800a9d4 <free>
	free(mpc->umax);
 8005922:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8005924:	f005 f856 	bl	800a9d4 <free>
	free(mpc->barspsi);
 8005928:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800592a:	f005 f853 	bl	800a9d4 <free>
	free(mpc->barH);
 800592e:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8005930:	f005 f850 	bl	800a9d4 <free>
	free(mpc->AA);
 8005934:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8005936:	f005 f84d 	bl	800a9d4 <free>
	free(mpc->eta);
 800593a:	1d23      	adds	r3, r4, #4
 800593c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800593e:	f005 f849 	bl	800a9d4 <free>
	free(mpc->x);
 8005942:	0023      	movs	r3, r4
 8005944:	338c      	adds	r3, #140	@ 0x8c
 8005946:	6818      	ldr	r0, [r3, #0]
 8005948:	f005 f844 	bl	800a9d4 <free>

	/* Flag */
	mpc->is_initlized = false;
 800594c:	2300      	movs	r3, #0
 800594e:	7023      	strb	r3, [r4, #0]

	/* Return true */
	return true;
}
 8005950:	0028      	movs	r0, r5
 8005952:	bd70      	pop	{r4, r5, r6, pc}

08005954 <obsv>:
  * [C*A^1; C*A^2; C*A^3; ... ; C*A^N] % Extended observability matrix
  * A[row_a*row_a]
  * C[row_c*row_a]
  * Phi[(N*row_c)*row_a]
  */
void obsv(float Phi[], const float A[], const float C[], const size_t row_a, const size_t row_c, const size_t N) {
 8005954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005956:	001c      	movs	r4, r3
	/* Decleration */
	size_t i;

	/* This matrix will A^(i+1) all the time */
	float* A_copy = (float*)malloc(row_a * row_a * sizeof(float));
 8005958:	435b      	muls	r3, r3
 800595a:	009b      	lsls	r3, r3, #2
void obsv(float Phi[], const float A[], const float C[], const size_t row_a, const size_t row_c, const size_t N) {
 800595c:	b089      	sub	sp, #36	@ 0x24
 800595e:	0005      	movs	r5, r0
	float* A_copy = (float*)malloc(row_a * row_a * sizeof(float));
 8005960:	0018      	movs	r0, r3
 8005962:	9302      	str	r3, [sp, #8]
void obsv(float Phi[], const float A[], const float C[], const size_t row_a, const size_t row_c, const size_t N) {
 8005964:	9106      	str	r1, [sp, #24]
 8005966:	9207      	str	r2, [sp, #28]
	float* A_copy = (float*)malloc(row_a * row_a * sizeof(float));
 8005968:	f005 f82a 	bl	800a9c0 <malloc>
	memcpy(A_copy, A, row_a * row_a * sizeof(float));
 800596c:	9a02      	ldr	r2, [sp, #8]
 800596e:	9906      	ldr	r1, [sp, #24]
	float* A_copy = (float*)malloc(row_a * row_a * sizeof(float));
 8005970:	9003      	str	r0, [sp, #12]
	memcpy(A_copy, A, row_a * row_a * sizeof(float));
 8005972:	f005 ff2b 	bl	800b7cc <memcpy>

	/* Temporary matrix */
	float* T = (float*)malloc(row_c * row_a * sizeof(float));
 8005976:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8005978:	4367      	muls	r7, r4
 800597a:	00bf      	lsls	r7, r7, #2
 800597c:	0038      	movs	r0, r7
 800597e:	f005 f81f 	bl	800a9c0 <malloc>
 8005982:	0006      	movs	r6, r0

	/* Regular T = C*A^(1+i) */
	mul(C, A, T, row_c, row_a, row_a);
 8005984:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005986:	0002      	movs	r2, r0
 8005988:	9906      	ldr	r1, [sp, #24]
 800598a:	9807      	ldr	r0, [sp, #28]
 800598c:	9401      	str	r4, [sp, #4]
 800598e:	9400      	str	r4, [sp, #0]
 8005990:	f000 fc28 	bl	80061e4 <mul>

	/* Insert temporary T into Phi */
	memcpy(Phi, T, row_c * row_a * sizeof(float));
 8005994:	003a      	movs	r2, r7
 8005996:	0031      	movs	r1, r6
 8005998:	0028      	movs	r0, r5
 800599a:	f005 ff17 	bl	800b7cc <memcpy>

	/* Do the rest C*A^(i+1) because we have already done i = 0 */
	float* A_pow = (float*)malloc(row_a * row_a * sizeof(float));
 800599e:	9802      	ldr	r0, [sp, #8]
 80059a0:	f005 f80e 	bl	800a9c0 <malloc>
 80059a4:	19eb      	adds	r3, r5, r7
	for (i = 1; i < N; i++) {
 80059a6:	2501      	movs	r5, #1
	float* A_pow = (float*)malloc(row_a * row_a * sizeof(float));
 80059a8:	9004      	str	r0, [sp, #16]
	for (i = 1; i < N; i++) {
 80059aa:	9305      	str	r3, [sp, #20]
 80059ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80059ae:	429d      	cmp	r5, r3
 80059b0:	d30a      	bcc.n	80059c8 <obsv+0x74>
		memcpy(Phi + i * row_c * row_a, T, row_c * row_a * sizeof(float)); /* Insert temporary T into PHI */
		memcpy(A_copy, A_pow, row_a * row_a * sizeof(float)); /* A_copy <- A_pow */
	}

	/* Free */
	free(A_copy);
 80059b2:	9803      	ldr	r0, [sp, #12]
 80059b4:	f005 f80e 	bl	800a9d4 <free>
	free(T);
 80059b8:	0030      	movs	r0, r6
 80059ba:	f005 f80b 	bl	800a9d4 <free>
	free(A_pow);
 80059be:	9804      	ldr	r0, [sp, #16]
 80059c0:	f005 f808 	bl	800a9d4 <free>
}
 80059c4:	b009      	add	sp, #36	@ 0x24
 80059c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		mul(A, A_copy, A_pow, row_a, row_a, row_a); /*  Matrix power A_pow = A*A_copy */
 80059c8:	0023      	movs	r3, r4
 80059ca:	9a04      	ldr	r2, [sp, #16]
 80059cc:	9903      	ldr	r1, [sp, #12]
 80059ce:	9806      	ldr	r0, [sp, #24]
 80059d0:	9401      	str	r4, [sp, #4]
 80059d2:	9400      	str	r4, [sp, #0]
 80059d4:	f000 fc06 	bl	80061e4 <mul>
		mul(C, A_pow, T, row_c, row_a, row_a); /* T = C*A^(1+i) */
 80059d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80059da:	0032      	movs	r2, r6
 80059dc:	9904      	ldr	r1, [sp, #16]
 80059de:	9807      	ldr	r0, [sp, #28]
 80059e0:	9401      	str	r4, [sp, #4]
 80059e2:	9400      	str	r4, [sp, #0]
 80059e4:	f000 fbfe 	bl	80061e4 <mul>
		memcpy(Phi + i * row_c * row_a, T, row_c * row_a * sizeof(float)); /* Insert temporary T into PHI */
 80059e8:	003a      	movs	r2, r7
 80059ea:	0031      	movs	r1, r6
 80059ec:	9805      	ldr	r0, [sp, #20]
 80059ee:	f005 feed 	bl	800b7cc <memcpy>
		memcpy(A_copy, A_pow, row_a * row_a * sizeof(float)); /* A_copy <- A_pow */
 80059f2:	9a02      	ldr	r2, [sp, #8]
 80059f4:	9904      	ldr	r1, [sp, #16]
 80059f6:	9803      	ldr	r0, [sp, #12]
 80059f8:	f005 fee8 	bl	800b7cc <memcpy>
	for (i = 1; i < N; i++) {
 80059fc:	9b05      	ldr	r3, [sp, #20]
 80059fe:	3501      	adds	r5, #1
 8005a00:	19db      	adds	r3, r3, r7
 8005a02:	9305      	str	r3, [sp, #20]
 8005a04:	e7d2      	b.n	80059ac <obsv+0x58>
	...

08005a08 <rk4args>:
  * N - Dimension for y-vector
  * odefun(const float t, float y[], const float* matrices[], const size_t rows[], const size_t columns[])
  * ... = const float matrixA[], const size_t rowA, const size_t columnA, const float matrixB[], const size_t rowB, const size_t columnB, const float matrixC[], const size_t rowC, const size_t columnC, etc...
  * no_ode_output = If true, then Y[N]. If false, then Y[iterations*N].
  */
void rk4args(const bool no_ode_output, const size_t iterations, const float h, float Y[], float y[], const size_t N, void (*odefun)(float, float*, float**, const size_t*, const size_t*), const size_t number_of_pointers, ...) {
 8005a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a0a:	b097      	sub	sp, #92	@ 0x5c
 8005a0c:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8005a0e:	930f      	str	r3, [sp, #60]	@ 0x3c
	/* Variables */
	size_t i, j;

	/* Constants */
	const size_t length = N * sizeof(float);
 8005a10:	00ab      	lsls	r3, r5, #2
void rk4args(const bool no_ode_output, const size_t iterations, const float h, float Y[], float y[], const size_t N, void (*odefun)(float, float*, float**, const size_t*, const size_t*), const size_t number_of_pointers, ...) {
 8005a12:	0007      	movs	r7, r0

	/* Create vectors */
	float* k1 = (float*)malloc(length);
 8005a14:	0018      	movs	r0, r3
	const size_t length = N * sizeof(float);
 8005a16:	9311      	str	r3, [sp, #68]	@ 0x44
void rk4args(const bool no_ode_output, const size_t iterations, const float h, float Y[], float y[], const size_t N, void (*odefun)(float, float*, float**, const size_t*, const size_t*), const size_t number_of_pointers, ...) {
 8005a18:	9112      	str	r1, [sp, #72]	@ 0x48
 8005a1a:	9206      	str	r2, [sp, #24]
	float* k1 = (float*)malloc(length);
 8005a1c:	f004 ffd0 	bl	800a9c0 <malloc>
 8005a20:	9007      	str	r0, [sp, #28]
	float* k2 = (float*)malloc(length);
 8005a22:	00a8      	lsls	r0, r5, #2
 8005a24:	f004 ffcc 	bl	800a9c0 <malloc>
 8005a28:	9008      	str	r0, [sp, #32]
	float* k3 = (float*)malloc(length);
 8005a2a:	00a8      	lsls	r0, r5, #2
 8005a2c:	f004 ffc8 	bl	800a9c0 <malloc>
 8005a30:	9009      	str	r0, [sp, #36]	@ 0x24
	float* k4 = (float*)malloc(length);
 8005a32:	00a8      	lsls	r0, r5, #2
 8005a34:	f004 ffc4 	bl	800a9c0 <malloc>
 8005a38:	900b      	str	r0, [sp, #44]	@ 0x2c

	/* Temporary vectors */
	float* yt = (float*)malloc(length);
 8005a3a:	00a8      	lsls	r0, r5, #2
 8005a3c:	f004 ffc0 	bl	800a9c0 <malloc>

	/* Variables */
	float t = 0.0f;

	/* Initial output */
	memcpy(Y, y, length);
 8005a40:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8005a42:	00aa      	lsls	r2, r5, #2
	float* yt = (float*)malloc(length);
 8005a44:	0006      	movs	r6, r0
	memcpy(Y, y, length);
 8005a46:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8005a48:	f005 fec0 	bl	800b7cc <memcpy>

	/* Variable arguments */
	va_list args;
	va_start(args, number_of_pointers);
 8005a4c:	ab20      	add	r3, sp, #128	@ 0x80
 8005a4e:	9315      	str	r3, [sp, #84]	@ 0x54

	/* Pointers */
	float** matrices = (float**)malloc(number_of_pointers * sizeof(float*));
 8005a50:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8005a52:	009c      	lsls	r4, r3, #2
 8005a54:	0020      	movs	r0, r4
 8005a56:	f004 ffb3 	bl	800a9c0 <malloc>
 8005a5a:	9003      	str	r0, [sp, #12]
	size_t* rows = (size_t*)malloc(number_of_pointers * sizeof(size_t));
 8005a5c:	0020      	movs	r0, r4
 8005a5e:	f004 ffaf 	bl	800a9c0 <malloc>
 8005a62:	9004      	str	r0, [sp, #16]
	size_t* columns = (size_t*)malloc(number_of_pointers * sizeof(size_t));
 8005a64:	0020      	movs	r0, r4
 8005a66:	f004 ffab 	bl	800a9c0 <malloc>

	/* Get the arguments */
	for (i = 0; i < number_of_pointers; i++) {
 8005a6a:	2100      	movs	r1, #0
	size_t* columns = (size_t*)malloc(number_of_pointers * sizeof(size_t));
 8005a6c:	9005      	str	r0, [sp, #20]
		matrices[i] = va_arg(args, float*);
		rows[i] = va_arg(args, const size_t);
		columns[i] = va_arg(args, const size_t);
 8005a6e:	2001      	movs	r0, #1
	for (i = 0; i < number_of_pointers; i++) {
 8005a70:	000a      	movs	r2, r1
		columns[i] = va_arg(args, const size_t);
 8005a72:	4684      	mov	ip, r0
 8005a74:	9b15      	ldr	r3, [sp, #84]	@ 0x54
	for (i = 0; i < number_of_pointers; i++) {
 8005a76:	4294      	cmp	r4, r2
 8005a78:	d116      	bne.n	8005aa8 <rk4args+0xa0>
 8005a7a:	2900      	cmp	r1, #0
 8005a7c:	d000      	beq.n	8005a80 <rk4args+0x78>
 8005a7e:	9315      	str	r3, [sp, #84]	@ 0x54
			k4[j] = yt[j] * h;
		}

		/* Save output */
		for (j = 0; j < N; j++) {
			Y[i * N * (!no_ode_output) + j] = y[j] + (k1[j] + 2.0f * k2[j] + 2.0f * k3[j] + k4[j]) / 6.0f;
 8005a80:	2301      	movs	r3, #1
 8005a82:	2200      	movs	r2, #0
 8005a84:	405f      	eors	r7, r3
 8005a86:	437d      	muls	r5, r7
	float t = 0.0f;
 8005a88:	2700      	movs	r7, #0
 8005a8a:	950c      	str	r5, [sp, #48]	@ 0x30
			Y[i * N * (!no_ode_output) + j] = y[j] + (k1[j] + 2.0f * k2[j] + 2.0f * k3[j] + k4[j]) / 6.0f;
 8005a8c:	950d      	str	r5, [sp, #52]	@ 0x34
 8005a8e:	920e      	str	r2, [sp, #56]	@ 0x38
	for (i = 1; i < iterations; i++) {
 8005a90:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a94:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d300      	bcc.n	8005a9c <rk4args+0x94>
 8005a9a:	e0e3      	b.n	8005c64 <rk4args+0x25c>
 8005a9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a9e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	2400      	movs	r4, #0
 8005aa4:	189b      	adds	r3, r3, r2
 8005aa6:	e010      	b.n	8005aca <rk4args+0xc2>
		matrices[i] = va_arg(args, float*);
 8005aa8:	6819      	ldr	r1, [r3, #0]
 8005aaa:	9803      	ldr	r0, [sp, #12]
 8005aac:	5081      	str	r1, [r0, r2]
		rows[i] = va_arg(args, const size_t);
 8005aae:	6859      	ldr	r1, [r3, #4]
 8005ab0:	9804      	ldr	r0, [sp, #16]
 8005ab2:	5081      	str	r1, [r0, r2]
		columns[i] = va_arg(args, const size_t);
 8005ab4:	6899      	ldr	r1, [r3, #8]
 8005ab6:	9805      	ldr	r0, [sp, #20]
 8005ab8:	330c      	adds	r3, #12
 8005aba:	5081      	str	r1, [r0, r2]
 8005abc:	4661      	mov	r1, ip
 8005abe:	3204      	adds	r2, #4
 8005ac0:	e7d9      	b.n	8005a76 <rk4args+0x6e>
			y[j] = Y[(i - 1) * N * (!no_ode_output) + j];
 8005ac2:	591a      	ldr	r2, [r3, r4]
 8005ac4:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8005ac6:	510a      	str	r2, [r1, r4]
		for (j = 0; j < N; j++) {
 8005ac8:	3404      	adds	r4, #4
 8005aca:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005acc:	42a2      	cmp	r2, r4
 8005ace:	d1f8      	bne.n	8005ac2 <rk4args+0xba>
		memcpy(yt, y, length);
 8005ad0:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8005ad2:	0030      	movs	r0, r6
 8005ad4:	f005 fe7a 	bl	800b7cc <memcpy>
		odefun(t, yt, matrices, rows, columns);
 8005ad8:	9b05      	ldr	r3, [sp, #20]
 8005ada:	9d1e      	ldr	r5, [sp, #120]	@ 0x78
 8005adc:	9300      	str	r3, [sp, #0]
 8005ade:	0031      	movs	r1, r6
 8005ae0:	9b04      	ldr	r3, [sp, #16]
 8005ae2:	9a03      	ldr	r2, [sp, #12]
 8005ae4:	1c38      	adds	r0, r7, #0
 8005ae6:	47a8      	blx	r5
		for (j = 0; j < N; j++) {
 8005ae8:	2500      	movs	r5, #0
 8005aea:	42ac      	cmp	r4, r5
 8005aec:	d158      	bne.n	8005ba0 <rk4args+0x198>
		memcpy(yt, y, length);
 8005aee:	0022      	movs	r2, r4
 8005af0:	0030      	movs	r0, r6
 8005af2:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8005af4:	f005 fe6a 	bl	800b7cc <memcpy>
		for (j = 0; j < N; j++) {
 8005af8:	2500      	movs	r5, #0
			yt[j] += k1[j] / 2.0f;
 8005afa:	21fc      	movs	r1, #252	@ 0xfc
 8005afc:	0589      	lsls	r1, r1, #22
		for (j = 0; j < N; j++) {
 8005afe:	42ac      	cmp	r4, r5
 8005b00:	d156      	bne.n	8005bb0 <rk4args+0x1a8>
		odefun(t + h / 2.0f, yt, matrices, rows, columns);
 8005b02:	9806      	ldr	r0, [sp, #24]
 8005b04:	f7fb f8a8 	bl	8000c58 <__aeabi_fmul>
 8005b08:	1c39      	adds	r1, r7, #0
 8005b0a:	f7fa fd35 	bl	8000578 <__aeabi_fadd>
 8005b0e:	9b05      	ldr	r3, [sp, #20]
 8005b10:	9d1e      	ldr	r5, [sp, #120]	@ 0x78
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	0031      	movs	r1, r6
 8005b16:	9b04      	ldr	r3, [sp, #16]
 8005b18:	9a03      	ldr	r2, [sp, #12]
 8005b1a:	9010      	str	r0, [sp, #64]	@ 0x40
 8005b1c:	47a8      	blx	r5
		for (j = 0; j < N; j++) {
 8005b1e:	2500      	movs	r5, #0
 8005b20:	42ac      	cmp	r4, r5
 8005b22:	d150      	bne.n	8005bc6 <rk4args+0x1be>
		memcpy(yt, y, length);
 8005b24:	0022      	movs	r2, r4
 8005b26:	0030      	movs	r0, r6
 8005b28:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8005b2a:	f005 fe4f 	bl	800b7cc <memcpy>
		for (j = 0; j < N; j++) {
 8005b2e:	2500      	movs	r5, #0
 8005b30:	42a5      	cmp	r5, r4
 8005b32:	d150      	bne.n	8005bd6 <rk4args+0x1ce>
		odefun(t + h / 2.0f, yt, matrices, rows, columns);
 8005b34:	9b05      	ldr	r3, [sp, #20]
 8005b36:	9d1e      	ldr	r5, [sp, #120]	@ 0x78
 8005b38:	9300      	str	r3, [sp, #0]
 8005b3a:	0031      	movs	r1, r6
 8005b3c:	9b04      	ldr	r3, [sp, #16]
 8005b3e:	9a03      	ldr	r2, [sp, #12]
 8005b40:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8005b42:	47a8      	blx	r5
		for (j = 0; j < N; j++) {
 8005b44:	2500      	movs	r5, #0
 8005b46:	42a5      	cmp	r5, r4
 8005b48:	d152      	bne.n	8005bf0 <rk4args+0x1e8>
		memcpy(yt, y, length);
 8005b4a:	0022      	movs	r2, r4
 8005b4c:	0030      	movs	r0, r6
 8005b4e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8005b50:	f005 fe3c 	bl	800b7cc <memcpy>
		for (j = 0; j < N; j++) {
 8005b54:	2500      	movs	r5, #0
 8005b56:	42a5      	cmp	r5, r4
 8005b58:	d152      	bne.n	8005c00 <rk4args+0x1f8>
		odefun(t + h, yt, matrices, rows, columns);
 8005b5a:	9906      	ldr	r1, [sp, #24]
 8005b5c:	1c38      	adds	r0, r7, #0
 8005b5e:	f7fa fd0b 	bl	8000578 <__aeabi_fadd>
 8005b62:	9b05      	ldr	r3, [sp, #20]
 8005b64:	9d1e      	ldr	r5, [sp, #120]	@ 0x78
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	0031      	movs	r1, r6
 8005b6a:	9b04      	ldr	r3, [sp, #16]
 8005b6c:	9a03      	ldr	r2, [sp, #12]
 8005b6e:	1c07      	adds	r7, r0, #0
 8005b70:	47a8      	blx	r5
		for (j = 0; j < N; j++) {
 8005b72:	2500      	movs	r5, #0
 8005b74:	42a5      	cmp	r5, r4
 8005b76:	d14b      	bne.n	8005c10 <rk4args+0x208>
 8005b78:	2500      	movs	r5, #0
 8005b7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b7c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	18d3      	adds	r3, r2, r3
 8005b82:	9310      	str	r3, [sp, #64]	@ 0x40
		for (j = 0; j < N; j++) {
 8005b84:	42ac      	cmp	r4, r5
 8005b86:	d14b      	bne.n	8005c20 <rk4args+0x218>
	for (i = 1; i < iterations; i++) {
 8005b88:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005b8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b8c:	4694      	mov	ip, r2
 8005b8e:	3301      	adds	r3, #1
 8005b90:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b94:	4463      	add	r3, ip
 8005b96:	930d      	str	r3, [sp, #52]	@ 0x34
 8005b98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b9a:	4463      	add	r3, ip
 8005b9c:	930e      	str	r3, [sp, #56]	@ 0x38
 8005b9e:	e778      	b.n	8005a92 <rk4args+0x8a>
			k1[j] = yt[j] * h;
 8005ba0:	5970      	ldr	r0, [r6, r5]
 8005ba2:	9906      	ldr	r1, [sp, #24]
 8005ba4:	f7fb f858 	bl	8000c58 <__aeabi_fmul>
 8005ba8:	9b07      	ldr	r3, [sp, #28]
 8005baa:	5158      	str	r0, [r3, r5]
		for (j = 0; j < N; j++) {
 8005bac:	3504      	adds	r5, #4
 8005bae:	e79c      	b.n	8005aea <rk4args+0xe2>
			yt[j] += k1[j] / 2.0f;
 8005bb0:	9b07      	ldr	r3, [sp, #28]
 8005bb2:	5958      	ldr	r0, [r3, r5]
 8005bb4:	f7fb f850 	bl	8000c58 <__aeabi_fmul>
 8005bb8:	1c01      	adds	r1, r0, #0
 8005bba:	5970      	ldr	r0, [r6, r5]
 8005bbc:	f7fa fcdc 	bl	8000578 <__aeabi_fadd>
 8005bc0:	5170      	str	r0, [r6, r5]
		for (j = 0; j < N; j++) {
 8005bc2:	3504      	adds	r5, #4
 8005bc4:	e799      	b.n	8005afa <rk4args+0xf2>
			k2[j] = yt[j] * h;
 8005bc6:	5970      	ldr	r0, [r6, r5]
 8005bc8:	9906      	ldr	r1, [sp, #24]
 8005bca:	f7fb f845 	bl	8000c58 <__aeabi_fmul>
 8005bce:	9b08      	ldr	r3, [sp, #32]
 8005bd0:	5158      	str	r0, [r3, r5]
		for (j = 0; j < N; j++) {
 8005bd2:	3504      	adds	r5, #4
 8005bd4:	e7a4      	b.n	8005b20 <rk4args+0x118>
			yt[j] += k2[j] / 2.0f;
 8005bd6:	21fc      	movs	r1, #252	@ 0xfc
 8005bd8:	9b08      	ldr	r3, [sp, #32]
 8005bda:	0589      	lsls	r1, r1, #22
 8005bdc:	5958      	ldr	r0, [r3, r5]
 8005bde:	f7fb f83b 	bl	8000c58 <__aeabi_fmul>
 8005be2:	1c01      	adds	r1, r0, #0
 8005be4:	5970      	ldr	r0, [r6, r5]
 8005be6:	f7fa fcc7 	bl	8000578 <__aeabi_fadd>
 8005bea:	5170      	str	r0, [r6, r5]
		for (j = 0; j < N; j++) {
 8005bec:	3504      	adds	r5, #4
 8005bee:	e79f      	b.n	8005b30 <rk4args+0x128>
			k3[j] = yt[j] * h;
 8005bf0:	5970      	ldr	r0, [r6, r5]
 8005bf2:	9906      	ldr	r1, [sp, #24]
 8005bf4:	f7fb f830 	bl	8000c58 <__aeabi_fmul>
 8005bf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bfa:	5158      	str	r0, [r3, r5]
		for (j = 0; j < N; j++) {
 8005bfc:	3504      	adds	r5, #4
 8005bfe:	e7a2      	b.n	8005b46 <rk4args+0x13e>
			yt[j] += k3[j];
 8005c00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c02:	5970      	ldr	r0, [r6, r5]
 8005c04:	5959      	ldr	r1, [r3, r5]
 8005c06:	f7fa fcb7 	bl	8000578 <__aeabi_fadd>
 8005c0a:	5170      	str	r0, [r6, r5]
		for (j = 0; j < N; j++) {
 8005c0c:	3504      	adds	r5, #4
 8005c0e:	e7a2      	b.n	8005b56 <rk4args+0x14e>
			k4[j] = yt[j] * h;
 8005c10:	5970      	ldr	r0, [r6, r5]
 8005c12:	9906      	ldr	r1, [sp, #24]
 8005c14:	f7fb f820 	bl	8000c58 <__aeabi_fmul>
 8005c18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c1a:	5158      	str	r0, [r3, r5]
		for (j = 0; j < N; j++) {
 8005c1c:	3504      	adds	r5, #4
 8005c1e:	e7a9      	b.n	8005b74 <rk4args+0x16c>
			Y[i * N * (!no_ode_output) + j] = y[j] + (k1[j] + 2.0f * k2[j] + 2.0f * k3[j] + k4[j]) / 6.0f;
 8005c20:	9b08      	ldr	r3, [sp, #32]
 8005c22:	5958      	ldr	r0, [r3, r5]
 8005c24:	1c01      	adds	r1, r0, #0
 8005c26:	f7fa fca7 	bl	8000578 <__aeabi_fadd>
 8005c2a:	9b07      	ldr	r3, [sp, #28]
 8005c2c:	5959      	ldr	r1, [r3, r5]
 8005c2e:	f7fa fca3 	bl	8000578 <__aeabi_fadd>
 8005c32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c34:	9013      	str	r0, [sp, #76]	@ 0x4c
 8005c36:	5958      	ldr	r0, [r3, r5]
 8005c38:	1c01      	adds	r1, r0, #0
 8005c3a:	f7fa fc9d 	bl	8000578 <__aeabi_fadd>
 8005c3e:	1c01      	adds	r1, r0, #0
 8005c40:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8005c42:	f7fa fc99 	bl	8000578 <__aeabi_fadd>
 8005c46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c48:	5959      	ldr	r1, [r3, r5]
 8005c4a:	f7fa fc95 	bl	8000578 <__aeabi_fadd>
 8005c4e:	4912      	ldr	r1, [pc, #72]	@ (8005c98 <rk4args+0x290>)
 8005c50:	f7fa fe1c 	bl	800088c <__aeabi_fdiv>
 8005c54:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8005c56:	5959      	ldr	r1, [r3, r5]
 8005c58:	f7fa fc8e 	bl	8000578 <__aeabi_fadd>
 8005c5c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005c5e:	5158      	str	r0, [r3, r5]
		for (j = 0; j < N; j++) {
 8005c60:	3504      	adds	r5, #4
 8005c62:	e78f      	b.n	8005b84 <rk4args+0x17c>
		/* Update t */
		t += h;
	}

	/* Free */
	free(k1);
 8005c64:	9807      	ldr	r0, [sp, #28]
 8005c66:	f004 feb5 	bl	800a9d4 <free>
	free(k2);
 8005c6a:	9808      	ldr	r0, [sp, #32]
 8005c6c:	f004 feb2 	bl	800a9d4 <free>
	free(k3);
 8005c70:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c72:	f004 feaf 	bl	800a9d4 <free>
	free(k4);
 8005c76:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8005c78:	f004 feac 	bl	800a9d4 <free>
	free(yt);
 8005c7c:	0030      	movs	r0, r6
 8005c7e:	f004 fea9 	bl	800a9d4 <free>
	free(rows);
 8005c82:	9804      	ldr	r0, [sp, #16]
 8005c84:	f004 fea6 	bl	800a9d4 <free>
	free(columns);
 8005c88:	9805      	ldr	r0, [sp, #20]
 8005c8a:	f004 fea3 	bl	800a9d4 <free>
	free(matrices);
 8005c8e:	9803      	ldr	r0, [sp, #12]
 8005c90:	f004 fea0 	bl	800a9d4 <free>

	/* Close */
	va_end(args);
}
 8005c94:	b017      	add	sp, #92	@ 0x5c
 8005c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c98:	40c00000 	.word	0x40c00000

08005c9c <chol>:
 * A need to be symmetric positive definite
 * A [m*n]
 * L [m*n]
 * n == m
 */
bool chol(const float A[], float L[], const size_t row) {
 8005c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c9e:	0017      	movs	r7, r2
	const float* Ai = A;

	memset(L, 0, row * row * sizeof(float));
	float s;
	size_t i, j;
	for (i = 0; i < row; i++) {
 8005ca0:	2500      	movs	r5, #0
	memset(L, 0, row * row * sizeof(float));
 8005ca2:	4352      	muls	r2, r2
bool chol(const float A[], float L[], const size_t row) {
 8005ca4:	b089      	sub	sp, #36	@ 0x24
 8005ca6:	9102      	str	r1, [sp, #8]
 8005ca8:	9001      	str	r0, [sp, #4]
	memset(L, 0, row * row * sizeof(float));
 8005caa:	2100      	movs	r1, #0
 8005cac:	9802      	ldr	r0, [sp, #8]
 8005cae:	0092      	lsls	r2, r2, #2
 8005cb0:	f005 fccc 	bl	800b64c <memset>
				Lj[j] = FLT_EPSILON;
				/* L[row * j + j] = FLT_EPSILON; // Same as eps command in MATLAB */
			}
			Li[j] = (i == j) ? sqrtf(Ai[i] - s) : (1.0f / Lj[j] * (Ai[j] - s));
			/* L[row * i + j] = (i == j) ? sqrtf(A[row * i + i] - s) : (1.0f / L[row * j + j] * (A[row * i + j] - s)); */
			Lj += row;
 8005cb4:	00bb      	lsls	r3, r7, #2
 8005cb6:	9303      	str	r3, [sp, #12]
 8005cb8:	3304      	adds	r3, #4
 8005cba:	9307      	str	r3, [sp, #28]
 8005cbc:	9b01      	ldr	r3, [sp, #4]
 8005cbe:	9305      	str	r3, [sp, #20]
	for (i = 0; i < row; i++) {
 8005cc0:	9b02      	ldr	r3, [sp, #8]
 8005cc2:	9300      	str	r3, [sp, #0]
 8005cc4:	42bd      	cmp	r5, r7
 8005cc6:	d102      	bne.n	8005cce <chol+0x32>
		Li += row;
		Ai += row;
	}
#endif
	return true;
 8005cc8:	2001      	movs	r0, #1
 8005cca:	b009      	add	sp, #36	@ 0x24
 8005ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (j = 0; j <= i; j++) {
 8005cce:	2400      	movs	r4, #0
 8005cd0:	9e02      	ldr	r6, [sp, #8]
			Li[j] = (i == j) ? sqrtf(Ai[i] - s) : (1.0f / Lj[j] * (Ai[j] - s));
 8005cd2:	9604      	str	r6, [sp, #16]
			s = dot(Li, Lj, j);
 8005cd4:	9904      	ldr	r1, [sp, #16]
 8005cd6:	0022      	movs	r2, r4
 8005cd8:	9800      	ldr	r0, [sp, #0]
 8005cda:	f000 f843 	bl	8005d64 <dot>
 8005cde:	9006      	str	r0, [sp, #24]
			if (fabsf(Lj[j]) < MIN_VALUE) {
 8005ce0:	6830      	ldr	r0, [r6, #0]
 8005ce2:	491f      	ldr	r1, [pc, #124]	@ (8005d60 <chol+0xc4>)
 8005ce4:	0040      	lsls	r0, r0, #1
 8005ce6:	0840      	lsrs	r0, r0, #1
 8005ce8:	f7fa fc06 	bl	80004f8 <__aeabi_fcmplt>
 8005cec:	2800      	cmp	r0, #0
 8005cee:	d002      	beq.n	8005cf6 <chol+0x5a>
				Lj[j] = FLT_EPSILON;
 8005cf0:	23d0      	movs	r3, #208	@ 0xd0
 8005cf2:	059b      	lsls	r3, r3, #22
 8005cf4:	6033      	str	r3, [r6, #0]
			Li[j] = (i == j) ? sqrtf(Ai[i] - s) : (1.0f / Lj[j] * (Ai[j] - s));
 8005cf6:	42a5      	cmp	r5, r4
 8005cf8:	d120      	bne.n	8005d3c <chol+0xa0>
 8005cfa:	9b05      	ldr	r3, [sp, #20]
 8005cfc:	9906      	ldr	r1, [sp, #24]
 8005cfe:	6818      	ldr	r0, [r3, #0]
 8005d00:	f7fb f8e8 	bl	8000ed4 <__aeabi_fsub>
 8005d04:	f007 fba0 	bl	800d448 <sqrtf>
 8005d08:	9a00      	ldr	r2, [sp, #0]
 8005d0a:	00a3      	lsls	r3, r4, #2
 8005d0c:	50d0      	str	r0, [r2, r3]
			Lj += row;
 8005d0e:	9a03      	ldr	r2, [sp, #12]
 8005d10:	9b04      	ldr	r3, [sp, #16]
 8005d12:	4694      	mov	ip, r2
 8005d14:	4463      	add	r3, ip
 8005d16:	9304      	str	r3, [sp, #16]
		for (j = 0; j <= i; j++) {
 8005d18:	9b07      	ldr	r3, [sp, #28]
 8005d1a:	3401      	adds	r4, #1
 8005d1c:	18f6      	adds	r6, r6, r3
 8005d1e:	42a5      	cmp	r5, r4
 8005d20:	d2d8      	bcs.n	8005cd4 <chol+0x38>
		Li += row;
 8005d22:	9b00      	ldr	r3, [sp, #0]
 8005d24:	9a07      	ldr	r2, [sp, #28]
 8005d26:	4463      	add	r3, ip
 8005d28:	9300      	str	r3, [sp, #0]
		Ai += row;
 8005d2a:	9b01      	ldr	r3, [sp, #4]
	for (i = 0; i < row; i++) {
 8005d2c:	3501      	adds	r5, #1
		Ai += row;
 8005d2e:	4463      	add	r3, ip
 8005d30:	4694      	mov	ip, r2
 8005d32:	9301      	str	r3, [sp, #4]
	for (i = 0; i < row; i++) {
 8005d34:	9b05      	ldr	r3, [sp, #20]
 8005d36:	4463      	add	r3, ip
 8005d38:	9305      	str	r3, [sp, #20]
 8005d3a:	e7c3      	b.n	8005cc4 <chol+0x28>
			Li[j] = (i == j) ? sqrtf(Ai[i] - s) : (1.0f / Lj[j] * (Ai[j] - s));
 8005d3c:	9a01      	ldr	r2, [sp, #4]
 8005d3e:	00a3      	lsls	r3, r4, #2
 8005d40:	9906      	ldr	r1, [sp, #24]
 8005d42:	58d0      	ldr	r0, [r2, r3]
 8005d44:	f7fb f8c6 	bl	8000ed4 <__aeabi_fsub>
 8005d48:	9006      	str	r0, [sp, #24]
 8005d4a:	20fe      	movs	r0, #254	@ 0xfe
 8005d4c:	6831      	ldr	r1, [r6, #0]
 8005d4e:	0580      	lsls	r0, r0, #22
 8005d50:	f7fa fd9c 	bl	800088c <__aeabi_fdiv>
 8005d54:	1c01      	adds	r1, r0, #0
 8005d56:	9806      	ldr	r0, [sp, #24]
 8005d58:	f7fa ff7e 	bl	8000c58 <__aeabi_fmul>
 8005d5c:	e7d4      	b.n	8005d08 <chol+0x6c>
 8005d5e:	46c0      	nop			@ (mov r8, r8)
 8005d60:	2d2febff 	.word	0x2d2febff

08005d64 <dot>:
/*
 * Compute dot product of two vectors
 * a[m]
 * b[m]
 */
float dot(const float a[], const float b[], const size_t row) {
 8005d64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d66:	0006      	movs	r6, r0
 8005d68:	000f      	movs	r7, r1
#elif defined(MKL_LAPACK_USED)
    return cblas_sdot(row, a, 1, b, 1);
#else
    float result = 0.0f;
    size_t i;
    for (i = 0; i < row; i++) {
 8005d6a:	2500      	movs	r5, #0
    float result = 0.0f;
 8005d6c:	2400      	movs	r4, #0
 8005d6e:	0093      	lsls	r3, r2, #2
 8005d70:	9301      	str	r3, [sp, #4]
    for (i = 0; i < row; i++) {
 8005d72:	9b01      	ldr	r3, [sp, #4]
 8005d74:	429d      	cmp	r5, r3
 8005d76:	d101      	bne.n	8005d7c <dot+0x18>
        result += a[i] * b[i];
    }
    return result;
#endif

 8005d78:	1c20      	adds	r0, r4, #0
 8005d7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        result += a[i] * b[i];
 8005d7c:	5979      	ldr	r1, [r7, r5]
 8005d7e:	5970      	ldr	r0, [r6, r5]
 8005d80:	f7fa ff6a 	bl	8000c58 <__aeabi_fmul>
 8005d84:	1c01      	adds	r1, r0, #0
 8005d86:	1c20      	adds	r0, r4, #0
 8005d88:	f7fa fbf6 	bl	8000578 <__aeabi_fadd>
 8005d8c:	3504      	adds	r5, #4
 8005d8e:	1c04      	adds	r4, r0, #0
    for (i = 0; i < row; i++) {
 8005d90:	e7ef      	b.n	8005d72 <dot+0xe>
	...

08005d94 <expm>:
/*
 * Find matrix exponential, return A as A = expm(A)
 * A[m*n]
 * m == n
 */
bool expm(float A[], const size_t row){
 8005d94:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Decleration */
	size_t i;

	/* Create zero matrix */
	size_t row_row_size = row * row * sizeof(float);
 8005d96:	000c      	movs	r4, r1
 8005d98:	434c      	muls	r4, r1
bool expm(float A[], const size_t row){
 8005d9a:	b08b      	sub	sp, #44	@ 0x2c
	size_t row_row_size = row * row * sizeof(float);
 8005d9c:	00a4      	lsls	r4, r4, #2
bool expm(float A[], const size_t row){
 8005d9e:	9009      	str	r0, [sp, #36]	@ 0x24
	float *E = (float*)malloc(row_row_size);
 8005da0:	0020      	movs	r0, r4
bool expm(float A[], const size_t row){
 8005da2:	000f      	movs	r7, r1
	float *E = (float*)malloc(row_row_size);
 8005da4:	f004 fe0c 	bl	800a9c0 <malloc>
	memset(E, 0, row_row_size);
 8005da8:	0022      	movs	r2, r4
 8005daa:	2100      	movs	r1, #0
	float *E = (float*)malloc(row_row_size);
 8005dac:	9005      	str	r0, [sp, #20]
	memset(E, 0, row_row_size);
 8005dae:	f005 fc4d 	bl	800b64c <memset>
	/* Create identity matrices */
	float *F = (float*)malloc(row_row_size);
 8005db2:	0020      	movs	r0, r4
 8005db4:	f004 fe04 	bl	800a9c0 <malloc>
 8005db8:	9003      	str	r0, [sp, #12]
	float *T = (float*)malloc(row_row_size);
 8005dba:	0020      	movs	r0, r4
 8005dbc:	f004 fe00 	bl	800a9c0 <malloc>
	memset(F, 0, row_row_size);
 8005dc0:	0022      	movs	r2, r4
 8005dc2:	2100      	movs	r1, #0
	float *T = (float*)malloc(row_row_size);
 8005dc4:	9004      	str	r0, [sp, #16]
	memset(F, 0, row_row_size);
 8005dc6:	9803      	ldr	r0, [sp, #12]
 8005dc8:	f005 fc40 	bl	800b64c <memset>
	memset(T, 0, row_row_size);
 8005dcc:	25fe      	movs	r5, #254	@ 0xfe
 8005dce:	0022      	movs	r2, r4
 8005dd0:	2100      	movs	r1, #0
 8005dd2:	9804      	ldr	r0, [sp, #16]
 8005dd4:	f005 fc3a 	bl	800b64c <memset>
	for(i = 0; i < row; i++){
 8005dd8:	2200      	movs	r2, #0
		F[i * row + i] = 1;
 8005dda:	1c7b      	adds	r3, r7, #1
 8005ddc:	9903      	ldr	r1, [sp, #12]
 8005dde:	9804      	ldr	r0, [sp, #16]
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	05ad      	lsls	r5, r5, #22
	for(i = 0; i < row; i++){
 8005de4:	42ba      	cmp	r2, r7
 8005de6:	d129      	bne.n	8005e3c <expm+0xa8>
		T[i * row + i] = 1;
	}
	float k = 1.0f;
	size_t iterations = 0;
 8005de8:	2300      	movs	r3, #0
 8005dea:	9306      	str	r3, [sp, #24]
	float k = 1.0f;
 8005dec:	23fe      	movs	r3, #254	@ 0xfe
 8005dee:	059b      	lsls	r3, r3, #22
 8005df0:	9307      	str	r3, [sp, #28]
	while (norm(T, row, row, NORM_METHOD_L1) > 0.0f && iterations < MAX_ITERATIONS){
 8005df2:	0039      	movs	r1, r7
 8005df4:	2300      	movs	r3, #0
 8005df6:	003a      	movs	r2, r7
 8005df8:	9804      	ldr	r0, [sp, #16]
 8005dfa:	f000 fa37 	bl	800626c <norm>
 8005dfe:	2100      	movs	r1, #0
 8005e00:	f7fa fb8e 	bl	8000520 <__aeabi_fcmpgt>
 8005e04:	2800      	cmp	r0, #0
 8005e06:	d003      	beq.n	8005e10 <expm+0x7c>
 8005e08:	4b2e      	ldr	r3, [pc, #184]	@ (8005ec4 <expm+0x130>)
 8005e0a:	9a06      	ldr	r2, [sp, #24]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d13e      	bne.n	8005e8e <expm+0xfa>
			T[i] = E[i] + F[i] - E[i];
		}
		k++;
		iterations++;
	}
	memcpy(A, E, row_row_size);
 8005e10:	0022      	movs	r2, r4
 8005e12:	9905      	ldr	r1, [sp, #20]
 8005e14:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e16:	f005 fcd9 	bl	800b7cc <memcpy>

	/* Free */
	free(E);
 8005e1a:	9805      	ldr	r0, [sp, #20]
 8005e1c:	f004 fdda 	bl	800a9d4 <free>
	free(F);
 8005e20:	9803      	ldr	r0, [sp, #12]
 8005e22:	f004 fdd7 	bl	800a9d4 <free>
	free(T);
 8005e26:	9804      	ldr	r0, [sp, #16]
 8005e28:	f004 fdd4 	bl	800a9d4 <free>

	/* Return status */
	return iterations < MAX_ITERATIONS;
 8005e2c:	2000      	movs	r0, #0
 8005e2e:	4b26      	ldr	r3, [pc, #152]	@ (8005ec8 <expm+0x134>)
 8005e30:	9a06      	ldr	r2, [sp, #24]
 8005e32:	4293      	cmp	r3, r2
 8005e34:	4140      	adcs	r0, r0
 8005e36:	b2c0      	uxtb	r0, r0
}
 8005e38:	b00b      	add	sp, #44	@ 0x2c
 8005e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		F[i * row + i] = 1;
 8005e3c:	600d      	str	r5, [r1, #0]
		T[i * row + i] = 1;
 8005e3e:	6005      	str	r5, [r0, #0]
	for(i = 0; i < row; i++){
 8005e40:	3201      	adds	r2, #1
 8005e42:	18c9      	adds	r1, r1, r3
 8005e44:	18c0      	adds	r0, r0, r3
 8005e46:	e7cd      	b.n	8005de4 <expm+0x50>
			E[i] = E[i] + F[i];
 8005e48:	9b03      	ldr	r3, [sp, #12]
 8005e4a:	5959      	ldr	r1, [r3, r5]
 8005e4c:	9b05      	ldr	r3, [sp, #20]
 8005e4e:	5958      	ldr	r0, [r3, r5]
 8005e50:	f7fa fb92 	bl	8000578 <__aeabi_fadd>
 8005e54:	9b05      	ldr	r3, [sp, #20]
 8005e56:	5158      	str	r0, [r3, r5]
		for(i = 0; i < row*row; i++){
 8005e58:	3504      	adds	r5, #4
 8005e5a:	42ac      	cmp	r4, r5
 8005e5c:	d1f4      	bne.n	8005e48 <expm+0xb4>
		mul(A, F, T, row, row, row);
 8005e5e:	003b      	movs	r3, r7
 8005e60:	9a04      	ldr	r2, [sp, #16]
 8005e62:	9903      	ldr	r1, [sp, #12]
 8005e64:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e66:	9701      	str	r7, [sp, #4]
 8005e68:	9700      	str	r7, [sp, #0]
 8005e6a:	f000 f9bb 	bl	80061e4 <mul>
		for(i = 0; i < row*row; i++){
 8005e6e:	2600      	movs	r6, #0
 8005e70:	42ae      	cmp	r6, r5
 8005e72:	d10e      	bne.n	8005e92 <expm+0xfe>
 8005e74:	2600      	movs	r6, #0
		for(i = 0; i < row*row; i++){
 8005e76:	42ae      	cmp	r6, r5
 8005e78:	d114      	bne.n	8005ea4 <expm+0x110>
		k++;
 8005e7a:	21fe      	movs	r1, #254	@ 0xfe
 8005e7c:	9807      	ldr	r0, [sp, #28]
 8005e7e:	0589      	lsls	r1, r1, #22
 8005e80:	f7fa fb7a 	bl	8000578 <__aeabi_fadd>
		iterations++;
 8005e84:	9b06      	ldr	r3, [sp, #24]
		k++;
 8005e86:	9007      	str	r0, [sp, #28]
		iterations++;
 8005e88:	3301      	adds	r3, #1
 8005e8a:	9306      	str	r3, [sp, #24]
 8005e8c:	e7b1      	b.n	8005df2 <expm+0x5e>
 8005e8e:	2500      	movs	r5, #0
 8005e90:	e7e3      	b.n	8005e5a <expm+0xc6>
			F[i] = T[i]/k;
 8005e92:	9b04      	ldr	r3, [sp, #16]
 8005e94:	9907      	ldr	r1, [sp, #28]
 8005e96:	5998      	ldr	r0, [r3, r6]
 8005e98:	f7fa fcf8 	bl	800088c <__aeabi_fdiv>
 8005e9c:	9b03      	ldr	r3, [sp, #12]
 8005e9e:	5198      	str	r0, [r3, r6]
		for(i = 0; i < row*row; i++){
 8005ea0:	3604      	adds	r6, #4
 8005ea2:	e7e5      	b.n	8005e70 <expm+0xdc>
			T[i] = E[i] + F[i] - E[i];
 8005ea4:	9b05      	ldr	r3, [sp, #20]
 8005ea6:	599b      	ldr	r3, [r3, r6]
 8005ea8:	9308      	str	r3, [sp, #32]
 8005eaa:	9b03      	ldr	r3, [sp, #12]
 8005eac:	9808      	ldr	r0, [sp, #32]
 8005eae:	5999      	ldr	r1, [r3, r6]
 8005eb0:	f7fa fb62 	bl	8000578 <__aeabi_fadd>
 8005eb4:	9908      	ldr	r1, [sp, #32]
 8005eb6:	f7fb f80d 	bl	8000ed4 <__aeabi_fsub>
 8005eba:	9b04      	ldr	r3, [sp, #16]
 8005ebc:	5198      	str	r0, [r3, r6]
		for(i = 0; i < row*row; i++){
 8005ebe:	3604      	adds	r6, #4
 8005ec0:	e7d9      	b.n	8005e76 <expm+0xe2>
 8005ec2:	46c0      	nop			@ (mov r8, r8)
 8005ec4:	00002710 	.word	0x00002710
 8005ec8:	0000270f 	.word	0x0000270f

08005ecc <eye>:

/*
 * Create identity matrix I
 * I[row * column]
 */
void eye(float I[], const float value, const size_t row, const size_t column) {
 8005ecc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ece:	001f      	movs	r7, r3
 8005ed0:	009d      	lsls	r5, r3, #2
 8005ed2:	0016      	movs	r6, r2
 8005ed4:	9101      	str	r1, [sp, #4]
	memset(I, 0, row * column * sizeof(float));
 8005ed6:	436a      	muls	r2, r5
 8005ed8:	2100      	movs	r1, #0
void eye(float I[], const float value, const size_t row, const size_t column) {
 8005eda:	0004      	movs	r4, r0
	memset(I, 0, row * column * sizeof(float));
 8005edc:	f005 fbb6 	bl	800b64c <memset>
	size_t i;
	const size_t smallest = (size_t)vmin(row, column);
 8005ee0:	0038      	movs	r0, r7
 8005ee2:	f7fb fa1d 	bl	8001320 <__aeabi_ui2f>
 8005ee6:	1c07      	adds	r7, r0, #0
 8005ee8:	0030      	movs	r0, r6
 8005eea:	f7fb fa19 	bl	8001320 <__aeabi_ui2f>
 8005eee:	1c39      	adds	r1, r7, #0
 8005ef0:	f000 fb0e 	bl	8006510 <vmin>
 8005ef4:	f7fa fb28 	bl	8000548 <__aeabi_f2uiz>
	for (i = 0; i < smallest; i++) {
 8005ef8:	2300      	movs	r3, #0
 8005efa:	3504      	adds	r5, #4
 8005efc:	4283      	cmp	r3, r0
 8005efe:	d100      	bne.n	8005f02 <eye+0x36>
		I[i * column + i] = value;
	}
 8005f00:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		I[i * column + i] = value;
 8005f02:	9a01      	ldr	r2, [sp, #4]
	for (i = 0; i < smallest; i++) {
 8005f04:	3301      	adds	r3, #1
		I[i * column + i] = value;
 8005f06:	6022      	str	r2, [r4, #0]
	for (i = 0; i < smallest; i++) {
 8005f08:	1964      	adds	r4, r4, r5
 8005f0a:	e7f7      	b.n	8005efc <eye+0x30>

08005f0c <inv>:
	bool status_sgetri = LAPACKE_sgetri(LAPACK_ROW_MAJOR, row, A, row, ipiv) == 0;
	free(ipiv);
	return status_sgetrf && status_sgetri;
#else
	/* Create iA matrix */
	float *iA = (float*)malloc(row * row * sizeof(float));
 8005f0c:	000b      	movs	r3, r1
bool inv(float A[], const size_t row) {
 8005f0e:	b5f0      	push	{r4, r5, r6, r7, lr}
	float *iA = (float*)malloc(row * row * sizeof(float));
 8005f10:	434b      	muls	r3, r1
bool inv(float A[], const size_t row) {
 8005f12:	b08d      	sub	sp, #52	@ 0x34
	float *iA = (float*)malloc(row * row * sizeof(float));
 8005f14:	009b      	lsls	r3, r3, #2
bool inv(float A[], const size_t row) {
 8005f16:	900b      	str	r0, [sp, #44]	@ 0x2c
	float *iA = (float*)malloc(row * row * sizeof(float));
 8005f18:	0018      	movs	r0, r3
bool inv(float A[], const size_t row) {
 8005f1a:	9100      	str	r1, [sp, #0]
	float *iA = (float*)malloc(row * row * sizeof(float));
 8005f1c:	9307      	str	r3, [sp, #28]
 8005f1e:	f004 fd4f 	bl	800a9c0 <malloc>
	float *A0 = iA; 

	/* Create temporary matrix */
	float *tmpvec = (float*)malloc(row * sizeof(float));
 8005f22:	9b00      	ldr	r3, [sp, #0]
	float *iA = (float*)malloc(row * row * sizeof(float));
 8005f24:	9003      	str	r0, [sp, #12]
	float *tmpvec = (float*)malloc(row * sizeof(float));
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	0018      	movs	r0, r3
 8005f2a:	9301      	str	r3, [sp, #4]
 8005f2c:	f004 fd48 	bl	800a9c0 <malloc>
	memset(tmpvec, 0, row*sizeof(float));
 8005f30:	2100      	movs	r1, #0
 8005f32:	9a01      	ldr	r2, [sp, #4]
	float *tmpvec = (float*)malloc(row * sizeof(float));
 8005f34:	9004      	str	r0, [sp, #16]
	memset(tmpvec, 0, row*sizeof(float));
 8005f36:	f005 fb89 	bl	800b64c <memset>

	/* Check if the determinant is 0 */
	float* LU = (float*)malloc(row * row * sizeof(float));
 8005f3a:	9807      	ldr	r0, [sp, #28]
 8005f3c:	f004 fd40 	bl	800a9c0 <malloc>
 8005f40:	9005      	str	r0, [sp, #20]
	int* P = (int*)malloc(row * sizeof(int));
 8005f42:	9801      	ldr	r0, [sp, #4]
 8005f44:	f004 fd3c 	bl	800a9c0 <malloc>
	bool ok = lup(A, LU, P, row);
 8005f48:	9b00      	ldr	r3, [sp, #0]
 8005f4a:	0002      	movs	r2, r0
	int* P = (int*)malloc(row * sizeof(int));
 8005f4c:	9006      	str	r0, [sp, #24]
	bool ok = lup(A, LU, P, row);
 8005f4e:	9905      	ldr	r1, [sp, #20]
 8005f50:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8005f52:	f000 f8b5 	bl	80060c0 <lup>
 8005f56:	9008      	str	r0, [sp, #32]
    if (ok) {
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	d000      	beq.n	8005f5e <inv+0x52>
 8005f5c:	e07c      	b.n	8006058 <inv+0x14c>
            /* Copy over iA -> A */
            memcpy(A, iA, row * row * sizeof(float));
        }
    }
	/* Free */
    free(tmpvec);
 8005f5e:	9804      	ldr	r0, [sp, #16]
 8005f60:	f004 fd38 	bl	800a9d4 <free>
	free(iA);
 8005f64:	9803      	ldr	r0, [sp, #12]
 8005f66:	f004 fd35 	bl	800a9d4 <free>
	free(LU);
 8005f6a:	9805      	ldr	r0, [sp, #20]
 8005f6c:	f004 fd32 	bl	800a9d4 <free>
	free(P);
 8005f70:	9806      	ldr	r0, [sp, #24]
 8005f72:	f004 fd2f 	bl	800a9d4 <free>

	return ok;
#endif
}
 8005f76:	9808      	ldr	r0, [sp, #32]
 8005f78:	b00d      	add	sp, #52	@ 0x34
 8005f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            tmpvec[i] = 1.0f;
 8005f7c:	21fe      	movs	r1, #254	@ 0xfe
 8005f7e:	2400      	movs	r4, #0
 8005f80:	9b02      	ldr	r3, [sp, #8]
 8005f82:	0589      	lsls	r1, r1, #22
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f8a:	9b04      	ldr	r3, [sp, #16]
 8005f8c:	5099      	str	r1, [r3, r2]
static bool solve(float x[], float b[], int P[], float LU[], size_t row){
	/* forward substitution with pivoting */
	int32_t i, j;
	for (i = 0; i < row; ++i) {
		x[i] = b[P[i]];
		for (j = 0; j < i; ++j) {
 8005f8e:	2500      	movs	r5, #0
		x[i] = b[P[i]];
 8005f90:	9b06      	ldr	r3, [sp, #24]
 8005f92:	9904      	ldr	r1, [sp, #16]
 8005f94:	591b      	ldr	r3, [r3, r4]
 8005f96:	009a      	lsls	r2, r3, #2
 8005f98:	5856      	ldr	r6, [r2, r1]
		for (j = 0; j < i; ++j) {
 8005f9a:	9a01      	ldr	r2, [sp, #4]
 8005f9c:	4353      	muls	r3, r2
 8005f9e:	9a05      	ldr	r2, [sp, #20]
 8005fa0:	18d3      	adds	r3, r2, r3
 8005fa2:	930a      	str	r3, [sp, #40]	@ 0x28
		x[i] = b[P[i]];
 8005fa4:	513e      	str	r6, [r7, r4]
		for (j = 0; j < i; ++j) {
 8005fa6:	42ac      	cmp	r4, r5
 8005fa8:	d13a      	bne.n	8006020 <inv+0x114>
	for (i = 0; i < row; ++i) {
 8005faa:	9b01      	ldr	r3, [sp, #4]
 8005fac:	3404      	adds	r4, #4
 8005fae:	42a3      	cmp	r3, r4
 8005fb0:	d1ed      	bne.n	8005f8e <inv+0x82>
			x[i] = x[i] - LU[row * P[i] + j] * x[j];
		}
	}

	/* backward substitution with pivoting */
	for (i = row - 1; i >= 0; --i) {
 8005fb2:	9b00      	ldr	r3, [sp, #0]
 8005fb4:	1e5d      	subs	r5, r3, #1
		for (j = i + 1; j < row; ++j)
			x[i] = x[i] - LU[row * P[i] + j] * x[j];
 8005fb6:	9b06      	ldr	r3, [sp, #24]
 8005fb8:	00ae      	lsls	r6, r5, #2
 8005fba:	599b      	ldr	r3, [r3, r6]
 8005fbc:	9a00      	ldr	r2, [sp, #0]
		for (j = i + 1; j < row; ++j)
 8005fbe:	1c6c      	adds	r4, r5, #1
			x[i] = x[i] - LU[row * P[i] + j] * x[j];
 8005fc0:	435a      	muls	r2, r3
 8005fc2:	920a      	str	r2, [sp, #40]	@ 0x28
		for (j = i + 1; j < row; ++j)
 8005fc4:	9b00      	ldr	r3, [sp, #0]
 8005fc6:	42a3      	cmp	r3, r4
 8005fc8:	d836      	bhi.n	8006038 <inv+0x12c>
		
		/* Just in case if we divide with zero */
		if (fabsf(LU[row * P[i] + i]) > MIN_VALUE) {
 8005fca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fcc:	4925      	ldr	r1, [pc, #148]	@ (8006064 <inv+0x158>)
 8005fce:	18ec      	adds	r4, r5, r3
 8005fd0:	9b05      	ldr	r3, [sp, #20]
 8005fd2:	00a4      	lsls	r4, r4, #2
 8005fd4:	58e4      	ldr	r4, [r4, r3]
 8005fd6:	0060      	lsls	r0, r4, #1
 8005fd8:	0840      	lsrs	r0, r0, #1
 8005fda:	f7fa faa1 	bl	8000520 <__aeabi_fcmpgt>
 8005fde:	2800      	cmp	r0, #0
 8005fe0:	d03d      	beq.n	800605e <inv+0x152>
			x[i] = x[i] / LU[row * P[i] + i];
 8005fe2:	59b8      	ldr	r0, [r7, r6]
 8005fe4:	1c21      	adds	r1, r4, #0
 8005fe6:	f7fa fc51 	bl	800088c <__aeabi_fdiv>
 8005fea:	51b8      	str	r0, [r7, r6]
	for (i = row - 1; i >= 0; --i) {
 8005fec:	3d01      	subs	r5, #1
 8005fee:	d2e2      	bcs.n	8005fb6 <inv+0xaa>
            tmpvec[i] = 0.0f;
 8005ff0:	2100      	movs	r1, #0
 8005ff2:	9b04      	ldr	r3, [sp, #16]
 8005ff4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ff6:	5099      	str	r1, [r3, r2]
			iA += row;
 8005ff8:	9b01      	ldr	r3, [sp, #4]
 8005ffa:	18ff      	adds	r7, r7, r3
        for (i = 0; i < row; i++) {
 8005ffc:	9b02      	ldr	r3, [sp, #8]
 8005ffe:	3301      	adds	r3, #1
 8006000:	9302      	str	r3, [sp, #8]
 8006002:	9b02      	ldr	r3, [sp, #8]
 8006004:	9a00      	ldr	r2, [sp, #0]
 8006006:	4293      	cmp	r3, r2
 8006008:	d1b8      	bne.n	8005f7c <inv+0x70>
            tran(iA, row, row);
 800600a:	9a02      	ldr	r2, [sp, #8]
 800600c:	9803      	ldr	r0, [sp, #12]
 800600e:	0011      	movs	r1, r2
 8006010:	f000 f9e4 	bl	80063dc <tran>
            memcpy(A, iA, row * row * sizeof(float));
 8006014:	9a07      	ldr	r2, [sp, #28]
 8006016:	9903      	ldr	r1, [sp, #12]
 8006018:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800601a:	f005 fbd7 	bl	800b7cc <memcpy>
 800601e:	e79e      	b.n	8005f5e <inv+0x52>
			x[i] = x[i] - LU[row * P[i] + j] * x[j];
 8006020:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006022:	5979      	ldr	r1, [r7, r5]
 8006024:	5958      	ldr	r0, [r3, r5]
 8006026:	f7fa fe17 	bl	8000c58 <__aeabi_fmul>
 800602a:	1c01      	adds	r1, r0, #0
 800602c:	1c30      	adds	r0, r6, #0
 800602e:	f7fa ff51 	bl	8000ed4 <__aeabi_fsub>
 8006032:	3504      	adds	r5, #4
 8006034:	1c06      	adds	r6, r0, #0
		for (j = 0; j < i; ++j) {
 8006036:	e7b5      	b.n	8005fa4 <inv+0x98>
			x[i] = x[i] - LU[row * P[i] + j] * x[j];
 8006038:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800603a:	00a2      	lsls	r2, r4, #2
 800603c:	58b9      	ldr	r1, [r7, r2]
 800603e:	18e3      	adds	r3, r4, r3
 8006040:	9a05      	ldr	r2, [sp, #20]
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	5898      	ldr	r0, [r3, r2]
 8006046:	f7fa fe07 	bl	8000c58 <__aeabi_fmul>
 800604a:	1c01      	adds	r1, r0, #0
 800604c:	59b8      	ldr	r0, [r7, r6]
 800604e:	f7fa ff41 	bl	8000ed4 <__aeabi_fsub>
		for (j = i + 1; j < row; ++j)
 8006052:	3401      	adds	r4, #1
			x[i] = x[i] - LU[row * P[i] + j] * x[j];
 8006054:	51b8      	str	r0, [r7, r6]
		for (j = i + 1; j < row; ++j)
 8006056:	e7b5      	b.n	8005fc4 <inv+0xb8>
        for (i = 0; i < row; i++) {
 8006058:	2300      	movs	r3, #0
	float *iA = (float*)malloc(row * row * sizeof(float));
 800605a:	9f03      	ldr	r7, [sp, #12]
 800605c:	e7d0      	b.n	8006000 <inv+0xf4>
 800605e:	9703      	str	r7, [sp, #12]
 8006060:	9008      	str	r0, [sp, #32]
 8006062:	e77c      	b.n	8005f5e <inv+0x52>
 8006064:	2d2febff 	.word	0x2d2febff

08006068 <linsolve_lower_triangular>:
 * A [m*n] need to be lower triangular and square
 * b [m]
 * x [n]
 * n == m
 */
void linsolve_lower_triangular(const float A[], float x[], const float b[], const size_t row) {
 8006068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800606a:	0004      	movs	r4, r0
	/* Time to solve x from Ax = b */
	memset(x, 0, row * sizeof(float));
	size_t i;
	for (i = 0; i < row; i++) {
 800606c:	2500      	movs	r5, #0
 800606e:	0027      	movs	r7, r4
void linsolve_lower_triangular(const float A[], float x[], const float b[], const size_t row) {
 8006070:	b085      	sub	sp, #20
 8006072:	9100      	str	r1, [sp, #0]
	memset(x, 0, row * sizeof(float));
 8006074:	009e      	lsls	r6, r3, #2
void linsolve_lower_triangular(const float A[], float x[], const float b[], const size_t row) {
 8006076:	9203      	str	r2, [sp, #12]
	memset(x, 0, row * sizeof(float));
 8006078:	2100      	movs	r1, #0
 800607a:	0032      	movs	r2, r6
 800607c:	9800      	ldr	r0, [sp, #0]
void linsolve_lower_triangular(const float A[], float x[], const float b[], const size_t row) {
 800607e:	9301      	str	r3, [sp, #4]
	memset(x, 0, row * sizeof(float));
 8006080:	f005 fae4 	bl	800b64c <memset>
	for (i = 0; i < row; i++) {
 8006084:	1d33      	adds	r3, r6, #4
 8006086:	9302      	str	r3, [sp, #8]
 8006088:	9b01      	ldr	r3, [sp, #4]
 800608a:	429d      	cmp	r5, r3
 800608c:	d101      	bne.n	8006092 <linsolve_lower_triangular+0x2a>
		const float s = dot(A, x, i);
		x[i] = (b[i] - s) / A[i];
		A += row;
	}
}
 800608e:	b005      	add	sp, #20
 8006090:	bdf0      	pop	{r4, r5, r6, r7, pc}
		const float s = dot(A, x, i);
 8006092:	002a      	movs	r2, r5
 8006094:	0020      	movs	r0, r4
 8006096:	9900      	ldr	r1, [sp, #0]
 8006098:	f7ff fe64 	bl	8005d64 <dot>
		x[i] = (b[i] - s) / A[i];
 800609c:	9b03      	ldr	r3, [sp, #12]
 800609e:	00aa      	lsls	r2, r5, #2
		const float s = dot(A, x, i);
 80060a0:	1c01      	adds	r1, r0, #0
		x[i] = (b[i] - s) / A[i];
 80060a2:	5898      	ldr	r0, [r3, r2]
 80060a4:	f7fa ff16 	bl	8000ed4 <__aeabi_fsub>
 80060a8:	6839      	ldr	r1, [r7, #0]
 80060aa:	f7fa fbef 	bl	800088c <__aeabi_fdiv>
 80060ae:	9b00      	ldr	r3, [sp, #0]
 80060b0:	00aa      	lsls	r2, r5, #2
 80060b2:	5098      	str	r0, [r3, r2]
		A += row;
 80060b4:	9b02      	ldr	r3, [sp, #8]
 80060b6:	19a4      	adds	r4, r4, r6
	for (i = 0; i < row; i++) {
 80060b8:	3501      	adds	r5, #1
 80060ba:	18ff      	adds	r7, r7, r3
 80060bc:	e7e4      	b.n	8006088 <linsolve_lower_triangular+0x20>
	...

080060c0 <lup>:
 * P [n]
 * n == m
 * Returns true == Success
 * Returns false == Fail
 */
bool lup(float A[], float LU[], int P[], size_t row) {
 80060c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060c2:	b08b      	sub	sp, #44	@ 0x2c
 80060c4:	001c      	movs	r4, r3
 80060c6:	9101      	str	r1, [sp, #4]
#else
	/* Variables */
	size_t ind_max, tmp_int;

	/* If not the same */
	if (A != LU) {
 80060c8:	000b      	movs	r3, r1
bool lup(float A[], float LU[], int P[], size_t row) {
 80060ca:	9202      	str	r2, [sp, #8]
	if (A != LU) {
 80060cc:	4288      	cmp	r0, r1
 80060ce:	d006      	beq.n	80060de <lup+0x1e>
		memcpy(LU, A, row * row * sizeof(float));
 80060d0:	0022      	movs	r2, r4
 80060d2:	4362      	muls	r2, r4
 80060d4:	0001      	movs	r1, r0
 80060d6:	0092      	lsls	r2, r2, #2
 80060d8:	0018      	movs	r0, r3
 80060da:	f005 fb77 	bl	800b7cc <memcpy>
bool lup(float A[], float LU[], int P[], size_t row) {
 80060de:	2300      	movs	r3, #0
	}

	/* Create the pivot vector */
	size_t i, j, k;
	for (i = 0; i < row; ++i) {
 80060e0:	42a3      	cmp	r3, r4
 80060e2:	d109      	bne.n	80060f8 <lup+0x38>
		P[i] = i;
	}

	for (i = 0; i < row - 1; ++i) {
 80060e4:	2700      	movs	r7, #0
 80060e6:	1e63      	subs	r3, r4, #1
 80060e8:	9e02      	ldr	r6, [sp, #8]
 80060ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80060ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060ee:	42bb      	cmp	r3, r7
 80060f0:	d807      	bhi.n	8006102 <lup+0x42>
			for (k = i + 1; k < row; ++k) {
				LU[row * P[j] + k] = LU[row * P[j] + k] - LU[row * P[i] + k] * LU[row * P[j] + i];
			}
		}
	}
	return true; /* Solved */
 80060f2:	2001      	movs	r0, #1
#endif
}
 80060f4:	b00b      	add	sp, #44	@ 0x2c
 80060f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		P[i] = i;
 80060f8:	9902      	ldr	r1, [sp, #8]
 80060fa:	009a      	lsls	r2, r3, #2
 80060fc:	508b      	str	r3, [r1, r2]
	for (i = 0; i < row; ++i) {
 80060fe:	3301      	adds	r3, #1
 8006100:	e7ee      	b.n	80060e0 <lup+0x20>
		for (j = i + 1; j < row; ++j) {
 8006102:	1c7b      	adds	r3, r7, #1
 8006104:	001d      	movs	r5, r3
 8006106:	9306      	str	r3, [sp, #24]
 8006108:	9703      	str	r7, [sp, #12]
			if (fabsf(LU[row * P[j] + i]) > fabsf(LU[row * P[ind_max] + i])) {
 800610a:	9b03      	ldr	r3, [sp, #12]
 800610c:	009a      	lsls	r2, r3, #2
 800610e:	9b02      	ldr	r3, [sp, #8]
 8006110:	189a      	adds	r2, r3, r2
 8006112:	6813      	ldr	r3, [r2, #0]
		for (j = i + 1; j < row; ++j) {
 8006114:	42a5      	cmp	r5, r4
 8006116:	d31d      	bcc.n	8006154 <lup+0x94>
		tmp_int = P[i];
 8006118:	6831      	ldr	r1, [r6, #0]
		P[i] = P[ind_max];
 800611a:	6033      	str	r3, [r6, #0]
		P[ind_max] = tmp_int;
 800611c:	6011      	str	r1, [r2, #0]
		if (fabsf(LU[row * P[i] + i]) < MIN_VALUE) {
 800611e:	6835      	ldr	r5, [r6, #0]
 8006120:	9a01      	ldr	r2, [sp, #4]
 8006122:	4365      	muls	r5, r4
 8006124:	19eb      	adds	r3, r5, r7
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	18d3      	adds	r3, r2, r3
 800612a:	6818      	ldr	r0, [r3, #0]
 800612c:	492c      	ldr	r1, [pc, #176]	@ (80061e0 <lup+0x120>)
 800612e:	0040      	lsls	r0, r0, #1
 8006130:	0840      	lsrs	r0, r0, #1
 8006132:	9307      	str	r3, [sp, #28]
 8006134:	f7fa f9e0 	bl	80004f8 <__aeabi_fcmplt>
 8006138:	2800      	cmp	r0, #0
 800613a:	d14e      	bne.n	80061da <lup+0x11a>
 800613c:	9b01      	ldr	r3, [sp, #4]
 800613e:	00ad      	lsls	r5, r5, #2
 8006140:	195b      	adds	r3, r3, r5
 8006142:	9308      	str	r3, [sp, #32]
		for (j = i + 1; j < row; ++j) {
 8006144:	9b06      	ldr	r3, [sp, #24]
 8006146:	9304      	str	r3, [sp, #16]
 8006148:	9b04      	ldr	r3, [sp, #16]
 800614a:	42a3      	cmp	r3, r4
 800614c:	d319      	bcc.n	8006182 <lup+0xc2>
	for (i = 0; i < row - 1; ++i) {
 800614e:	9f06      	ldr	r7, [sp, #24]
 8006150:	3604      	adds	r6, #4
 8006152:	e7cb      	b.n	80060ec <lup+0x2c>
			if (fabsf(LU[row * P[j] + i]) > fabsf(LU[row * P[ind_max] + i])) {
 8006154:	9902      	ldr	r1, [sp, #8]
 8006156:	00aa      	lsls	r2, r5, #2
 8006158:	588a      	ldr	r2, [r1, r2]
 800615a:	4363      	muls	r3, r4
 800615c:	4362      	muls	r2, r4
 800615e:	9901      	ldr	r1, [sp, #4]
 8006160:	19d2      	adds	r2, r2, r7
 8006162:	19db      	adds	r3, r3, r7
 8006164:	0092      	lsls	r2, r2, #2
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	5850      	ldr	r0, [r2, r1]
 800616a:	5859      	ldr	r1, [r3, r1]
 800616c:	0040      	lsls	r0, r0, #1
 800616e:	0049      	lsls	r1, r1, #1
 8006170:	0840      	lsrs	r0, r0, #1
 8006172:	0849      	lsrs	r1, r1, #1
 8006174:	f7fa f9d4 	bl	8000520 <__aeabi_fcmpgt>
 8006178:	2800      	cmp	r0, #0
 800617a:	d000      	beq.n	800617e <lup+0xbe>
 800617c:	9503      	str	r5, [sp, #12]
		for (j = i + 1; j < row; ++j) {
 800617e:	3501      	adds	r5, #1
 8006180:	e7c3      	b.n	800610a <lup+0x4a>
			LU[row * P[j] + i] = LU[row * P[j] + i] / LU[row * P[i] + i];
 8006182:	9b04      	ldr	r3, [sp, #16]
 8006184:	9a02      	ldr	r2, [sp, #8]
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	58d5      	ldr	r5, [r2, r3]
 800618a:	9b01      	ldr	r3, [sp, #4]
 800618c:	4365      	muls	r5, r4
 800618e:	19ed      	adds	r5, r5, r7
 8006190:	00ad      	lsls	r5, r5, #2
 8006192:	195d      	adds	r5, r3, r5
 8006194:	9b07      	ldr	r3, [sp, #28]
 8006196:	6828      	ldr	r0, [r5, #0]
 8006198:	6819      	ldr	r1, [r3, #0]
 800619a:	f7fa fb77 	bl	800088c <__aeabi_fdiv>
			for (k = i + 1; k < row; ++k) {
 800619e:	9b06      	ldr	r3, [sp, #24]
			LU[row * P[j] + i] = LU[row * P[j] + i] / LU[row * P[i] + i];
 80061a0:	6028      	str	r0, [r5, #0]
			for (k = i + 1; k < row; ++k) {
 80061a2:	9503      	str	r5, [sp, #12]
 80061a4:	9305      	str	r3, [sp, #20]
 80061a6:	9b03      	ldr	r3, [sp, #12]
 80061a8:	3304      	adds	r3, #4
 80061aa:	9303      	str	r3, [sp, #12]
 80061ac:	9b05      	ldr	r3, [sp, #20]
 80061ae:	42a3      	cmp	r3, r4
 80061b0:	d302      	bcc.n	80061b8 <lup+0xf8>
		for (j = i + 1; j < row; ++j) {
 80061b2:	9b04      	ldr	r3, [sp, #16]
 80061b4:	3301      	adds	r3, #1
 80061b6:	e7c6      	b.n	8006146 <lup+0x86>
				LU[row * P[j] + k] = LU[row * P[j] + k] - LU[row * P[i] + k] * LU[row * P[j] + i];
 80061b8:	9b05      	ldr	r3, [sp, #20]
 80061ba:	9a08      	ldr	r2, [sp, #32]
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	58d0      	ldr	r0, [r2, r3]
 80061c0:	6829      	ldr	r1, [r5, #0]
 80061c2:	f7fa fd49 	bl	8000c58 <__aeabi_fmul>
 80061c6:	9b03      	ldr	r3, [sp, #12]
 80061c8:	1c01      	adds	r1, r0, #0
 80061ca:	6818      	ldr	r0, [r3, #0]
 80061cc:	f7fa fe82 	bl	8000ed4 <__aeabi_fsub>
 80061d0:	9b03      	ldr	r3, [sp, #12]
 80061d2:	6018      	str	r0, [r3, #0]
			for (k = i + 1; k < row; ++k) {
 80061d4:	9b05      	ldr	r3, [sp, #20]
 80061d6:	3301      	adds	r3, #1
 80061d8:	e7e4      	b.n	80061a4 <lup+0xe4>
			return false; /* matrix is singular (up to tolerance) */
 80061da:	2000      	movs	r0, #0
 80061dc:	e78a      	b.n	80060f4 <lup+0x34>
 80061de:	46c0      	nop			@ (mov r8, r8)
 80061e0:	2d2febff 	.word	0x2d2febff

080061e4 <mul>:
 * C = A*B
 * A [row_a*column_a]
 * B [column_a*column_b]
 * C [row_a*column_b]
 */
void mul(const float A[], const float B[], float C[], const size_t row_a, const size_t column_a, const size_t column_b) {
 80061e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061e6:	b08b      	sub	sp, #44	@ 0x2c
 80061e8:	9309      	str	r3, [sp, #36]	@ 0x24
				data_a++;
				data_b += column_b;
			}
			C++; /* ;) */
		}
		A += column_a;
 80061ea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
void mul(const float A[], const float B[], float C[], const size_t row_a, const size_t column_a, const size_t column_b) {
 80061ec:	0014      	movs	r4, r2
		A += column_a;
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	9306      	str	r3, [sp, #24]
				data_b += column_b;
 80061f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
void mul(const float A[], const float B[], float C[], const size_t row_a, const size_t column_a, const size_t column_b) {
 80061f4:	9005      	str	r0, [sp, #20]
				data_b += column_b;
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	9301      	str	r3, [sp, #4]
	for (i = 0; i < row_a; i++) {
 80061fa:	2300      	movs	r3, #0
void mul(const float A[], const float B[], float C[], const size_t row_a, const size_t column_a, const size_t column_b) {
 80061fc:	9108      	str	r1, [sp, #32]
	for (i = 0; i < row_a; i++) {
 80061fe:	9302      	str	r3, [sp, #8]
 8006200:	9b02      	ldr	r3, [sp, #8]
 8006202:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006204:	4293      	cmp	r3, r2
 8006206:	d02f      	beq.n	8006268 <mul+0x84>
 8006208:	9b08      	ldr	r3, [sp, #32]
 800620a:	0027      	movs	r7, r4
 800620c:	9304      	str	r3, [sp, #16]
 800620e:	9b01      	ldr	r3, [sp, #4]
 8006210:	18e3      	adds	r3, r4, r3
 8006212:	9307      	str	r3, [sp, #28]
 8006214:	e00c      	b.n	8006230 <mul+0x4c>
			for (k = 0; k < column_a; k++) {
 8006216:	2300      	movs	r3, #0
 8006218:	2500      	movs	r5, #0
			data_b = &B[j];
 800621a:	9e04      	ldr	r6, [sp, #16]
			for (k = 0; k < column_a; k++) {
 800621c:	9303      	str	r3, [sp, #12]
			C[0] = 0.0f; /* Reset */
 800621e:	9b03      	ldr	r3, [sp, #12]
 8006220:	603b      	str	r3, [r7, #0]
			for (k = 0; k < column_a; k++) {
 8006222:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006224:	429d      	cmp	r5, r3
 8006226:	d110      	bne.n	800624a <mul+0x66>
			C++; /* ;) */
 8006228:	9b04      	ldr	r3, [sp, #16]
 800622a:	3704      	adds	r7, #4
		for (j = 0; j < column_b; j++) {
 800622c:	3304      	adds	r3, #4
 800622e:	9304      	str	r3, [sp, #16]
 8006230:	9b07      	ldr	r3, [sp, #28]
 8006232:	429f      	cmp	r7, r3
 8006234:	d1ef      	bne.n	8006216 <mul+0x32>
		A += column_a;
 8006236:	9a06      	ldr	r2, [sp, #24]
 8006238:	9b01      	ldr	r3, [sp, #4]
 800623a:	4694      	mov	ip, r2
 800623c:	18e4      	adds	r4, r4, r3
 800623e:	9b05      	ldr	r3, [sp, #20]
 8006240:	4463      	add	r3, ip
 8006242:	9305      	str	r3, [sp, #20]
	for (i = 0; i < row_a; i++) {
 8006244:	9b02      	ldr	r3, [sp, #8]
 8006246:	3301      	adds	r3, #1
 8006248:	e7d9      	b.n	80061fe <mul+0x1a>
				*C += data_a[0] * data_b[0];
 800624a:	9a05      	ldr	r2, [sp, #20]
 800624c:	00ab      	lsls	r3, r5, #2
 800624e:	6831      	ldr	r1, [r6, #0]
 8006250:	58d0      	ldr	r0, [r2, r3]
 8006252:	f7fa fd01 	bl	8000c58 <__aeabi_fmul>
 8006256:	1c01      	adds	r1, r0, #0
 8006258:	9803      	ldr	r0, [sp, #12]
 800625a:	f7fa f98d 	bl	8000578 <__aeabi_fadd>
				data_b += column_b;
 800625e:	9b01      	ldr	r3, [sp, #4]
				*C += data_a[0] * data_b[0];
 8006260:	9003      	str	r0, [sp, #12]
				data_b += column_b;
 8006262:	18f6      	adds	r6, r6, r3
			for (k = 0; k < column_a; k++) {
 8006264:	3501      	adds	r5, #1
 8006266:	e7da      	b.n	800621e <mul+0x3a>
	}
#endif
}
 8006268:	b00b      	add	sp, #44	@ 0x2c
 800626a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800626c <norm>:

/*
 * Find the norm of X. Use the NORM_METOD enum
 * A[m*n]
 */
float norm(const float X[], const size_t row, const size_t column, const NORM_METHOD norm_method){
 800626c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Create a new matrix A */
	float* A = (float*)malloc(row * column * sizeof(float));
 800626e:	000f      	movs	r7, r1
float norm(const float X[], const size_t row, const size_t column, const NORM_METHOD norm_method){
 8006270:	001d      	movs	r5, r3
 8006272:	0093      	lsls	r3, r2, #2
	float* A = (float*)malloc(row * column * sizeof(float));
 8006274:	435f      	muls	r7, r3
float norm(const float X[], const size_t row, const size_t column, const NORM_METHOD norm_method){
 8006276:	b085      	sub	sp, #20
 8006278:	0006      	movs	r6, r0
	float* A = (float*)malloc(row * column * sizeof(float));
 800627a:	0038      	movs	r0, r7
float norm(const float X[], const size_t row, const size_t column, const NORM_METHOD norm_method){
 800627c:	0014      	movs	r4, r2
 800627e:	9100      	str	r1, [sp, #0]
 8006280:	9302      	str	r3, [sp, #8]
	float* A = (float*)malloc(row * column * sizeof(float));
 8006282:	f004 fb9d 	bl	800a9c0 <malloc>
	memcpy(A, X, row * column * sizeof(float));
 8006286:	003a      	movs	r2, r7
 8006288:	0031      	movs	r1, r6
	float* A = (float*)malloc(row * column * sizeof(float));
 800628a:	9001      	str	r0, [sp, #4]
	memcpy(A, X, row * column * sizeof(float));
 800628c:	f005 fa9e 	bl	800b7cc <memcpy>
	/* Decleration */
	size_t i, j;
	float return_value = 0;
	float* A0 = A;

	if(NORM_METHOD_L1 == norm_method){
 8006290:	2d00      	cmp	r5, #0
 8006292:	d144      	bne.n	800631e <norm+0xb2>
		/* Vector */
		if((row == 1 && column > 0) || (row > 0 && column == 1)){
 8006294:	9b00      	ldr	r3, [sp, #0]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d103      	bne.n	80062a2 <norm+0x36>
 800629a:	2c00      	cmp	r4, #0
 800629c:	d112      	bne.n	80062c4 <norm+0x58>
	float return_value = 0;
 800629e:	2700      	movs	r7, #0
 80062a0:	e01b      	b.n	80062da <norm+0x6e>
		if((row == 1 && column > 0) || (row > 0 && column == 1)){
 80062a2:	9b00      	ldr	r3, [sp, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00b      	beq.n	80062c0 <norm+0x54>
 80062a8:	2c01      	cmp	r4, #1
 80062aa:	d00b      	beq.n	80062c4 <norm+0x58>
 80062ac:	2700      	movs	r7, #0
				return_value += fabsf(A[i]);
			}
		}else{
			/* Matrix */
			float max_value;
			for (j = 0; j < column; j++) {
 80062ae:	42a5      	cmp	r5, r4
 80062b0:	d013      	beq.n	80062da <norm+0x6e>
 80062b2:	9b01      	ldr	r3, [sp, #4]
 80062b4:	00ae      	lsls	r6, r5, #2
 80062b6:	199e      	adds	r6, r3, r6

				/* Remember */
				max_value = return_value;
				return_value = 0;

				for (i = 0; i < row; i++) {
 80062b8:	2300      	movs	r3, #0
				return_value = 0;
 80062ba:	2000      	movs	r0, #0
				for (i = 0; i < row; i++) {
 80062bc:	9303      	str	r3, [sp, #12]
 80062be:	e024      	b.n	800630a <norm+0x9e>
 80062c0:	9d00      	ldr	r5, [sp, #0]
 80062c2:	e7f3      	b.n	80062ac <norm+0x40>
			j = row > column ? row : column;
 80062c4:	9b00      	ldr	r3, [sp, #0]
 80062c6:	9d01      	ldr	r5, [sp, #4]
 80062c8:	42a3      	cmp	r3, r4
 80062ca:	d200      	bcs.n	80062ce <norm+0x62>
 80062cc:	0023      	movs	r3, r4
	float return_value = 0;
 80062ce:	2700      	movs	r7, #0
 80062d0:	009c      	lsls	r4, r3, #2
 80062d2:	9b01      	ldr	r3, [sp, #4]
 80062d4:	191c      	adds	r4, r3, r4
			for (i = 0; i < j; i++) {
 80062d6:	42a5      	cmp	r5, r4
 80062d8:	d105      	bne.n	80062e6 <norm+0x7a>

	/* Reset */
	A = A0;

	/* Free */
	free(A);
 80062da:	9801      	ldr	r0, [sp, #4]
 80062dc:	f004 fb7a 	bl	800a9d4 <free>

	return return_value;
}
 80062e0:	1c38      	adds	r0, r7, #0
 80062e2:	b005      	add	sp, #20
 80062e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				return_value += fabsf(A[i]);
 80062e6:	cd02      	ldmia	r5!, {r1}
 80062e8:	1c38      	adds	r0, r7, #0
 80062ea:	0049      	lsls	r1, r1, #1
 80062ec:	0849      	lsrs	r1, r1, #1
 80062ee:	f7fa f943 	bl	8000578 <__aeabi_fadd>
 80062f2:	1c07      	adds	r7, r0, #0
			for (i = 0; i < j; i++) {
 80062f4:	e7ef      	b.n	80062d6 <norm+0x6a>
					return_value += fabsf(A[j]);
 80062f6:	6831      	ldr	r1, [r6, #0]
 80062f8:	0049      	lsls	r1, r1, #1
 80062fa:	0849      	lsrs	r1, r1, #1
 80062fc:	f7fa f93c 	bl	8000578 <__aeabi_fadd>
				for (i = 0; i < row; i++) {
 8006300:	9b03      	ldr	r3, [sp, #12]
 8006302:	3301      	adds	r3, #1
 8006304:	9303      	str	r3, [sp, #12]
 8006306:	9b02      	ldr	r3, [sp, #8]
 8006308:	18f6      	adds	r6, r6, r3
 800630a:	9b03      	ldr	r3, [sp, #12]
 800630c:	9a00      	ldr	r2, [sp, #0]
 800630e:	4293      	cmp	r3, r2
 8006310:	d1f1      	bne.n	80062f6 <norm+0x8a>
				return_value = vmax(return_value, max_value);
 8006312:	1c39      	adds	r1, r7, #0
 8006314:	f000 f8f2 	bl	80064fc <vmax>
			for (j = 0; j < column; j++) {
 8006318:	3501      	adds	r5, #1
				return_value = vmax(return_value, max_value);
 800631a:	1c07      	adds	r7, r0, #0
			for (j = 0; j < column; j++) {
 800631c:	e7c7      	b.n	80062ae <norm+0x42>
	else if(NORM_METHOD_L2 == norm_method){
 800631e:	2d01      	cmp	r5, #1
 8006320:	d13e      	bne.n	80063a0 <norm+0x134>
		if((row == 1 && column > 0) || (row > 0 && column == 1)){
 8006322:	9b00      	ldr	r3, [sp, #0]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d111      	bne.n	800634c <norm+0xe0>
 8006328:	2c00      	cmp	r4, #0
 800632a:	d114      	bne.n	8006356 <norm+0xea>
			float* S = (float*)malloc(column * sizeof(float));
 800632c:	9802      	ldr	r0, [sp, #8]
 800632e:	f004 fb47 	bl	800a9c0 <malloc>
	float return_value = 0;
 8006332:	2700      	movs	r7, #0
			float* S = (float*)malloc(column * sizeof(float));
 8006334:	0004      	movs	r4, r0
			for (i = 0; i < column; i++) {
 8006336:	0005      	movs	r5, r0
 8006338:	9b02      	ldr	r3, [sp, #8]
 800633a:	181b      	adds	r3, r3, r0
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	9b00      	ldr	r3, [sp, #0]
 8006340:	429d      	cmp	r5, r3
 8006342:	d122      	bne.n	800638a <norm+0x11e>
			free(S);
 8006344:	0020      	movs	r0, r4
 8006346:	f004 fb45 	bl	800a9d4 <free>
			free(V);
 800634a:	e7c6      	b.n	80062da <norm+0x6e>
		if((row == 1 && column > 0) || (row > 0 && column == 1)){
 800634c:	9b00      	ldr	r3, [sp, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d0ec      	beq.n	800632c <norm+0xc0>
 8006352:	2c01      	cmp	r4, #1
 8006354:	d1ea      	bne.n	800632c <norm+0xc0>
			j = row > column ? row : column;
 8006356:	9b00      	ldr	r3, [sp, #0]
 8006358:	9d01      	ldr	r5, [sp, #4]
 800635a:	42a3      	cmp	r3, r4
 800635c:	d200      	bcs.n	8006360 <norm+0xf4>
 800635e:	0023      	movs	r3, r4
			float sqrt_sum = 0;
 8006360:	2400      	movs	r4, #0
 8006362:	9a01      	ldr	r2, [sp, #4]
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	18d6      	adds	r6, r2, r3
			for (i = 0; i < j; i++) {
 8006368:	42ae      	cmp	r6, r5
 800636a:	d104      	bne.n	8006376 <norm+0x10a>
		return_value = sqrtf(sum_sqrt);
 800636c:	1c20      	adds	r0, r4, #0
 800636e:	f007 f86b 	bl	800d448 <sqrtf>
 8006372:	1c07      	adds	r7, r0, #0
 8006374:	e7b1      	b.n	80062da <norm+0x6e>
				sqrt_sum += A[i] * A[i];
 8006376:	cd01      	ldmia	r5!, {r0}
 8006378:	1c01      	adds	r1, r0, #0
 800637a:	f7fa fc6d 	bl	8000c58 <__aeabi_fmul>
 800637e:	1c01      	adds	r1, r0, #0
 8006380:	1c20      	adds	r0, r4, #0
 8006382:	f7fa f8f9 	bl	8000578 <__aeabi_fadd>
 8006386:	1c04      	adds	r4, r0, #0
			for (i = 0; i < j; i++) {
 8006388:	e7ee      	b.n	8006368 <norm+0xfc>
				if (S[i] > return_value) {
 800638a:	682e      	ldr	r6, [r5, #0]
 800638c:	1c39      	adds	r1, r7, #0
 800638e:	1c30      	adds	r0, r6, #0
 8006390:	f7fa f8c6 	bl	8000520 <__aeabi_fcmpgt>
 8006394:	2800      	cmp	r0, #0
 8006396:	d100      	bne.n	800639a <norm+0x12e>
 8006398:	1c3e      	adds	r6, r7, #0
			for (i = 0; i < column; i++) {
 800639a:	3504      	adds	r5, #4
	float return_value = 0;
 800639c:	1c37      	adds	r7, r6, #0
 800639e:	e7ce      	b.n	800633e <norm+0xd2>
	else if (NORM_METHOD_FROBENIUS == norm_method) {
 80063a0:	2d02      	cmp	r5, #2
 80063a2:	d000      	beq.n	80063a6 <norm+0x13a>
 80063a4:	e77b      	b.n	800629e <norm+0x32>
		float sum_sqrt = 0;
 80063a6:	2400      	movs	r4, #0
		for (i = 0; i < row; i++) {
 80063a8:	2700      	movs	r7, #0
 80063aa:	9d01      	ldr	r5, [sp, #4]
 80063ac:	e00e      	b.n	80063cc <norm+0x160>
				sum_sqrt += A[j] * A[j];
 80063ae:	ce01      	ldmia	r6!, {r0}
 80063b0:	1c01      	adds	r1, r0, #0
 80063b2:	f7fa fc51 	bl	8000c58 <__aeabi_fmul>
 80063b6:	1c01      	adds	r1, r0, #0
 80063b8:	1c20      	adds	r0, r4, #0
 80063ba:	f7fa f8dd 	bl	8000578 <__aeabi_fadd>
 80063be:	1c04      	adds	r4, r0, #0
			for (j = 0; j < column; j++) {
 80063c0:	9b03      	ldr	r3, [sp, #12]
 80063c2:	429e      	cmp	r6, r3
 80063c4:	d1f3      	bne.n	80063ae <norm+0x142>
			A += column;
 80063c6:	9b02      	ldr	r3, [sp, #8]
		for (i = 0; i < row; i++) {
 80063c8:	3701      	adds	r7, #1
			A += column;
 80063ca:	18ed      	adds	r5, r5, r3
		for (i = 0; i < row; i++) {
 80063cc:	9b00      	ldr	r3, [sp, #0]
 80063ce:	429f      	cmp	r7, r3
 80063d0:	d0cc      	beq.n	800636c <norm+0x100>
 80063d2:	9b02      	ldr	r3, [sp, #8]
 80063d4:	002e      	movs	r6, r5
 80063d6:	195b      	adds	r3, r3, r5
 80063d8:	9303      	str	r3, [sp, #12]
 80063da:	e7f1      	b.n	80063c0 <norm+0x154>

080063dc <tran>:
 * A[m*n]
 */
void tran(float A[], const size_t row, const size_t column) {
	size_t start, next, i;
	float tmp;
	for (start = 0; start <= column * row - 1; start++) {
 80063dc:	000b      	movs	r3, r1
void tran(float A[], const size_t row, const size_t column) {
 80063de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063e0:	0006      	movs	r6, r0
 80063e2:	0017      	movs	r7, r2
	for (start = 0; start <= column * row - 1; start++) {
 80063e4:	2400      	movs	r4, #0
 80063e6:	4353      	muls	r3, r2
void tran(float A[], const size_t row, const size_t column) {
 80063e8:	b085      	sub	sp, #20
	for (start = 0; start <= column * row - 1; start++) {
 80063ea:	3b01      	subs	r3, #1
void tran(float A[], const size_t row, const size_t column) {
 80063ec:	9101      	str	r1, [sp, #4]
	for (start = 0; start <= column * row - 1; start++) {
 80063ee:	9303      	str	r3, [sp, #12]
 80063f0:	0020      	movs	r0, r4
		next = start;
		i = 0;
 80063f2:	2500      	movs	r5, #0
		do {
			i++;
 80063f4:	9901      	ldr	r1, [sp, #4]
 80063f6:	f7f9 ff33 	bl	8000260 <__aeabi_uidivmod>
			next = (next % row) * column + next / row;
 80063fa:	4379      	muls	r1, r7
 80063fc:	1808      	adds	r0, r1, r0
			i++;
 80063fe:	3501      	adds	r5, #1
		} while (next > start);
 8006400:	42a0      	cmp	r0, r4
 8006402:	d8f7      	bhi.n	80063f4 <tran+0x18>
		if (next < start || i == 1) {
 8006404:	d315      	bcc.n	8006432 <tran+0x56>
 8006406:	2d01      	cmp	r5, #1
 8006408:	d013      	beq.n	8006432 <tran+0x56>
			continue;
		}
		tmp = A[next = start];
 800640a:	0025      	movs	r5, r4
 800640c:	00a3      	lsls	r3, r4, #2
 800640e:	58f3      	ldr	r3, [r6, r3]
 8006410:	9302      	str	r3, [sp, #8]
		do {
			i = (next % row) * column + next / row;
 8006412:	0028      	movs	r0, r5
 8006414:	9901      	ldr	r1, [sp, #4]
 8006416:	f7f9 ff23 	bl	8000260 <__aeabi_uidivmod>
 800641a:	4379      	muls	r1, r7
 800641c:	002b      	movs	r3, r5
 800641e:	180d      	adds	r5, r1, r0
			A[next] = (i == start) ? tmp : A[i];
 8006420:	9a02      	ldr	r2, [sp, #8]
 8006422:	42a5      	cmp	r5, r4
 8006424:	d001      	beq.n	800642a <tran+0x4e>
 8006426:	00aa      	lsls	r2, r5, #2
 8006428:	5992      	ldr	r2, [r2, r6]
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	519a      	str	r2, [r3, r6]
			next = i;
		} while (next > start);
 800642e:	42a5      	cmp	r5, r4
 8006430:	d8ef      	bhi.n	8006412 <tran+0x36>
	for (start = 0; start <= column * row - 1; start++) {
 8006432:	9b03      	ldr	r3, [sp, #12]
 8006434:	3401      	adds	r4, #1
 8006436:	429c      	cmp	r4, r3
 8006438:	d9da      	bls.n	80063f0 <tran+0x14>
	}
}
 800643a:	b005      	add	sp, #20
 800643c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800643e <cut>:
 *
 * Example:
 * If you have a matrix A 5 x 6 and you want to cut the values from A to matrix B with size 3 x 3 and you want to start at 0,0 and end at 3,3
 * Code: cut(A, 5, B, 0, 2, 0, 2); // Because indexing from zero
 */
void cut(const float A[], const size_t column_a, float B[], const size_t start_row, const size_t stop_row, const size_t start_column, const size_t stop_column) {
 800643e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006440:	001c      	movs	r4, r3
	/* Create adata matrix */
	const float* data = A + start_row * column_a + start_column;
 8006442:	000b      	movs	r3, r1
 8006444:	4363      	muls	r3, r4
void cut(const float A[], const size_t column_a, float B[], const size_t start_row, const size_t stop_row, const size_t start_column, const size_t stop_column) {
 8006446:	0017      	movs	r7, r2
 8006448:	9a09      	ldr	r2, [sp, #36]	@ 0x24
	const float* data = A + start_row * column_a + start_column;
 800644a:	189b      	adds	r3, r3, r2
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	18c6      	adds	r6, r0, r3

	/* Create the output */
	const size_t out_columns = stop_column - start_column + 1;
 8006450:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006452:	3301      	adds	r3, #1
 8006454:	1a9b      	subs	r3, r3, r2
	const size_t out_columns_bytes = out_columns * sizeof(float);
 8006456:	009d      	lsls	r5, r3, #2
	/* Instead of having two for loops, we just copy the whole row at once. */
	size_t i;
	for (i = start_row; i < stop_row + 1; i++) {
		memcpy(B, data, out_columns_bytes);
		B += out_columns;
		data += column_a;
 8006458:	008b      	lsls	r3, r1, #2
 800645a:	9301      	str	r3, [sp, #4]
	for (i = start_row; i < stop_row + 1; i++) {
 800645c:	9b08      	ldr	r3, [sp, #32]
 800645e:	3301      	adds	r3, #1
 8006460:	42a3      	cmp	r3, r4
 8006462:	d800      	bhi.n	8006466 <cut+0x28>
	}
}
 8006464:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		memcpy(B, data, out_columns_bytes);
 8006466:	0031      	movs	r1, r6
 8006468:	0038      	movs	r0, r7
 800646a:	002a      	movs	r2, r5
 800646c:	f005 f9ae 	bl	800b7cc <memcpy>
		data += column_a;
 8006470:	9b01      	ldr	r3, [sp, #4]
		B += out_columns;
 8006472:	197f      	adds	r7, r7, r5
		data += column_a;
 8006474:	18f6      	adds	r6, r6, r3
	for (i = start_row; i < stop_row + 1; i++) {
 8006476:	3401      	adds	r4, #1
 8006478:	e7f0      	b.n	800645c <cut+0x1e>

0800647a <insert>:
/*
 * This will insert matrix A, size row x column inside matrix B, row x column.
 * The variables start_row_b and start_column_b describe which row and column we should to insert first element of A into B
 * Notice that start positions are indexed from zero
 */
void insert(const float A[], float B[], const size_t row_a, const size_t column_a, const size_t column_b, const size_t start_row_b, const size_t start_column_b){
 800647a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	B += start_row_b*column_b + start_column_b; /* Now we are standing on position start_row_b x start_column_b of row_b x column_b */

	/* We start at start_row_b and end at row_a, then we have inserted all rows from A into B */
	size_t i;
	const size_t column_a_bytes = column_a * sizeof(float);
	for(i = 0; i < row_a; i++){
 800647c:	2700      	movs	r7, #0
void insert(const float A[], float B[], const size_t row_a, const size_t column_a, const size_t column_b, const size_t start_row_b, const size_t start_column_b){
 800647e:	0005      	movs	r5, r0
 8006480:	9201      	str	r2, [sp, #4]
 8006482:	9808      	ldr	r0, [sp, #32]
	B += start_row_b*column_b + start_column_b; /* Now we are standing on position start_row_b x start_column_b of row_b x column_b */
 8006484:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006486:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006488:	4342      	muls	r2, r0
 800648a:	1912      	adds	r2, r2, r4
 800648c:	0092      	lsls	r2, r2, #2
	const size_t column_a_bytes = column_a * sizeof(float);
 800648e:	009e      	lsls	r6, r3, #2
		memcpy(B, A, column_a_bytes); /* Insert the complete row from A into B */
		A += column_a;
		B += column_b;
 8006490:	0083      	lsls	r3, r0, #2
	B += start_row_b*column_b + start_column_b; /* Now we are standing on position start_row_b x start_column_b of row_b x column_b */
 8006492:	188c      	adds	r4, r1, r2
		B += column_b;
 8006494:	9300      	str	r3, [sp, #0]
	for(i = 0; i < row_a; i++){
 8006496:	9b01      	ldr	r3, [sp, #4]
 8006498:	429f      	cmp	r7, r3
 800649a:	d100      	bne.n	800649e <insert+0x24>
	}
}
 800649c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		memcpy(B, A, column_a_bytes); /* Insert the complete row from A into B */
 800649e:	0029      	movs	r1, r5
 80064a0:	0020      	movs	r0, r4
 80064a2:	0032      	movs	r2, r6
 80064a4:	f005 f992 	bl	800b7cc <memcpy>
		B += column_b;
 80064a8:	9b00      	ldr	r3, [sp, #0]
		A += column_a;
 80064aa:	19ad      	adds	r5, r5, r6
		B += column_b;
 80064ac:	18e4      	adds	r4, r4, r3
	for(i = 0; i < row_a; i++){
 80064ae:	3701      	adds	r7, #1
 80064b0:	e7f1      	b.n	8006496 <insert+0x1c>

080064b2 <scalar>:

 /*
  * Scale a vector x
  * x[m]
  */
void scalar(float x[], const float k, const size_t row) {
 80064b2:	b570      	push	{r4, r5, r6, lr}
 80064b4:	0004      	movs	r4, r0
 80064b6:	0092      	lsls	r2, r2, #2
 80064b8:	1c0e      	adds	r6, r1, #0
 80064ba:	1885      	adds	r5, r0, r2
	size_t i;
	for (i = 0; i < row; i++) {
 80064bc:	42ac      	cmp	r4, r5
 80064be:	d100      	bne.n	80064c2 <scalar+0x10>
		x[i] *= k;
	}
 80064c0:	bd70      	pop	{r4, r5, r6, pc}
		x[i] *= k;
 80064c2:	6820      	ldr	r0, [r4, #0]
 80064c4:	1c31      	adds	r1, r6, #0
 80064c6:	f7fa fbc7 	bl	8000c58 <__aeabi_fmul>
 80064ca:	c401      	stmia	r4!, {r0}
	for (i = 0; i < row; i++) {
 80064cc:	e7f6      	b.n	80064bc <scalar+0xa>
	...

080064d0 <sign>:
#include "miscellaneous.h"

 /*
  * Sign function
  */
float sign(const float number) {
 80064d0:	b510      	push	{r4, lr}
	if (number > 0.0f) {
 80064d2:	2100      	movs	r1, #0
float sign(const float number) {
 80064d4:	1c04      	adds	r4, r0, #0
	if (number > 0.0f) {
 80064d6:	f7fa f823 	bl	8000520 <__aeabi_fcmpgt>
 80064da:	2800      	cmp	r0, #0
 80064dc:	d107      	bne.n	80064ee <sign+0x1e>
		return 1.0f; 
	}else if (number < 0.0f) {
 80064de:	2100      	movs	r1, #0
 80064e0:	1c20      	adds	r0, r4, #0
 80064e2:	f7fa f809 	bl	80004f8 <__aeabi_fcmplt>
 80064e6:	2800      	cmp	r0, #0
 80064e8:	d004      	beq.n	80064f4 <sign+0x24>
		return -1.0f; 
 80064ea:	4803      	ldr	r0, [pc, #12]	@ (80064f8 <sign+0x28>)
	}else{
		return 0.0f;
	}
}
 80064ec:	bd10      	pop	{r4, pc}
		return 1.0f; 
 80064ee:	20fe      	movs	r0, #254	@ 0xfe
 80064f0:	0580      	lsls	r0, r0, #22
 80064f2:	e7fb      	b.n	80064ec <sign+0x1c>
		return 0.0f;
 80064f4:	2000      	movs	r0, #0
 80064f6:	e7f9      	b.n	80064ec <sign+0x1c>
 80064f8:	bf800000 	.word	0xbf800000

080064fc <vmax>:
#include "miscellaneous.h"

/*
 * Return max value of a and b
 */
float vmax(const float a, const float b){
 80064fc:	b570      	push	{r4, r5, r6, lr}
 80064fe:	1c05      	adds	r5, r0, #0
 8006500:	1c0c      	adds	r4, r1, #0
	if (a > b) {
 8006502:	f7fa f80d 	bl	8000520 <__aeabi_fcmpgt>
 8006506:	2800      	cmp	r0, #0
 8006508:	d000      	beq.n	800650c <vmax+0x10>
		return a;
 800650a:	1c2c      	adds	r4, r5, #0
	}
	else {
		return b;
	}
}
 800650c:	1c20      	adds	r0, r4, #0
 800650e:	bd70      	pop	{r4, r5, r6, pc}

08006510 <vmin>:
#include "miscellaneous.h"

/*
 * Return min value of a and b
 */
float vmin(const float a, const float b){
 8006510:	b570      	push	{r4, r5, r6, lr}
 8006512:	1c05      	adds	r5, r0, #0
 8006514:	1c0c      	adds	r4, r1, #0
	if (a < b) {
 8006516:	f7f9 ffef 	bl	80004f8 <__aeabi_fcmplt>
 800651a:	2800      	cmp	r0, #0
 800651c:	d000      	beq.n	8006520 <vmin+0x10>
		return a;
 800651e:	1c2c      	adds	r4, r5, #0
	}
	else {
		return b;
	}
}
 8006520:	1c20      	adds	r0, r4, #0
 8006522:	bd70      	pop	{r4, r5, r6, pc}

08006524 <linsolve_upper_tran_triangular>:
	else {
		return optislim(Q, c, A, b, x, row_a, column_a);
	}
}

static void linsolve_upper_tran_triangular(const float A[], float x[], const float b[], const size_t row) {
 8006524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006526:	001c      	movs	r4, r3
 8006528:	b08b      	sub	sp, #44	@ 0x2c
	int32_t i, j;
	for (i = row - 1; i >= 0; i--) {
 800652a:	1e5d      	subs	r5, r3, #1
		for (j = i + 1; j < row; j++) {
			x[i] -= A[i + j * row] * x[j];
		}

		/* Divide with the element of the diangonal */
		x[i] /= A[i * row + i];
 800652c:	3301      	adds	r3, #1
static void linsolve_upper_tran_triangular(const float A[], float x[], const float b[], const size_t row) {
 800652e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006530:	009a      	lsls	r2, r3, #2
 8006532:	4252      	negs	r2, r2
 8006534:	9207      	str	r2, [sp, #28]
 8006536:	001a      	movs	r2, r3
 8006538:	436a      	muls	r2, r5
 800653a:	0092      	lsls	r2, r2, #2
 800653c:	1886      	adds	r6, r0, r2
 800653e:	43e2      	mvns	r2, r4
 8006540:	4363      	muls	r3, r4
 8006542:	3b01      	subs	r3, #1
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	18c3      	adds	r3, r0, r3
 8006548:	0092      	lsls	r2, r2, #2
 800654a:	9303      	str	r3, [sp, #12]
 800654c:	00a3      	lsls	r3, r4, #2
 800654e:	9104      	str	r1, [sp, #16]
 8006550:	9208      	str	r2, [sp, #32]
 8006552:	9306      	str	r3, [sp, #24]
	for (i = row - 1; i >= 0; i--) {
 8006554:	2d00      	cmp	r5, #0
 8006556:	da01      	bge.n	800655c <linsolve_upper_tran_triangular+0x38>
	}
}
 8006558:	b00b      	add	sp, #44	@ 0x2c
 800655a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		x[i] = b[i]; 
 800655c:	00ab      	lsls	r3, r5, #2
 800655e:	9305      	str	r3, [sp, #20]
 8006560:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006562:	00aa      	lsls	r2, r5, #2
 8006564:	589b      	ldr	r3, [r3, r2]
		for (j = i + 1; j < row; j++) {
 8006566:	9f03      	ldr	r7, [sp, #12]
		x[i] = b[i]; 
 8006568:	9302      	str	r3, [sp, #8]
		for (j = i + 1; j < row; j++) {
 800656a:	1c6b      	adds	r3, r5, #1
 800656c:	9301      	str	r3, [sp, #4]
		x[i] = b[i]; 
 800656e:	9b04      	ldr	r3, [sp, #16]
 8006570:	9a05      	ldr	r2, [sp, #20]
 8006572:	9902      	ldr	r1, [sp, #8]
 8006574:	5099      	str	r1, [r3, r2]
		for (j = i + 1; j < row; j++) {
 8006576:	9b01      	ldr	r3, [sp, #4]
 8006578:	429c      	cmp	r4, r3
 800657a:	d80f      	bhi.n	800659c <linsolve_upper_tran_triangular+0x78>
		x[i] /= A[i * row + i];
 800657c:	6831      	ldr	r1, [r6, #0]
 800657e:	9802      	ldr	r0, [sp, #8]
 8006580:	f7fa f984 	bl	800088c <__aeabi_fdiv>
 8006584:	9b04      	ldr	r3, [sp, #16]
 8006586:	9a05      	ldr	r2, [sp, #20]
	for (i = row - 1; i >= 0; i--) {
 8006588:	3d01      	subs	r5, #1
		x[i] /= A[i * row + i];
 800658a:	5098      	str	r0, [r3, r2]
	for (i = row - 1; i >= 0; i--) {
 800658c:	9a08      	ldr	r2, [sp, #32]
 800658e:	9b07      	ldr	r3, [sp, #28]
 8006590:	4694      	mov	ip, r2
 8006592:	18f6      	adds	r6, r6, r3
 8006594:	9b03      	ldr	r3, [sp, #12]
 8006596:	4463      	add	r3, ip
 8006598:	9303      	str	r3, [sp, #12]
 800659a:	e7db      	b.n	8006554 <linsolve_upper_tran_triangular+0x30>
			x[i] -= A[i + j * row] * x[j];
 800659c:	9b01      	ldr	r3, [sp, #4]
 800659e:	9a04      	ldr	r2, [sp, #16]
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	6839      	ldr	r1, [r7, #0]
 80065a4:	58d0      	ldr	r0, [r2, r3]
 80065a6:	f7fa fb57 	bl	8000c58 <__aeabi_fmul>
 80065aa:	1c01      	adds	r1, r0, #0
 80065ac:	9802      	ldr	r0, [sp, #8]
 80065ae:	f7fa fc91 	bl	8000ed4 <__aeabi_fsub>
		for (j = i + 1; j < row; j++) {
 80065b2:	9b01      	ldr	r3, [sp, #4]
			x[i] -= A[i + j * row] * x[j];
 80065b4:	9002      	str	r0, [sp, #8]
		for (j = i + 1; j < row; j++) {
 80065b6:	3301      	adds	r3, #1
 80065b8:	9301      	str	r3, [sp, #4]
 80065ba:	9b06      	ldr	r3, [sp, #24]
 80065bc:	18ff      	adds	r7, r7, r3
 80065be:	e7d6      	b.n	800656e <linsolve_upper_tran_triangular+0x4a>

080065c0 <optislim>:

static STATUS_CODES optislim(const float Q[], const float c[], const float A[], const float b[], float x[], const size_t row_a, const size_t column_a){
 80065c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065c2:	b091      	sub	sp, #68	@ 0x44
 80065c4:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 80065c6:	0006      	movs	r6, r0
	/* Declare */
	size_t i, j, k;

	/* Create the cholesky lower triangular matrix L from Q */
	float* L = (float*)malloc(column_a * column_a * sizeof(float));
 80065c8:	0038      	movs	r0, r7
 80065ca:	4378      	muls	r0, r7
 80065cc:	0080      	lsls	r0, r0, #2
static STATUS_CODES optislim(const float Q[], const float c[], const float A[], const float b[], float x[], const size_t row_a, const size_t column_a){
 80065ce:	000c      	movs	r4, r1
 80065d0:	920d      	str	r2, [sp, #52]	@ 0x34
 80065d2:	930f      	str	r3, [sp, #60]	@ 0x3c
	float* L = (float*)malloc(column_a * column_a * sizeof(float));
 80065d4:	f004 f9f4 	bl	800a9c0 <malloc>
	float* y = (float*)malloc(column_a * sizeof(float));
 80065d8:	00bb      	lsls	r3, r7, #2
	float* L = (float*)malloc(column_a * column_a * sizeof(float));
 80065da:	0005      	movs	r5, r0
	float* y = (float*)malloc(column_a * sizeof(float));
 80065dc:	0018      	movs	r0, r3
 80065de:	9304      	str	r3, [sp, #16]
 80065e0:	f004 f9ee 	bl	800a9c0 <malloc>
	if (!chol(Q, L, column_a)) {
 80065e4:	003a      	movs	r2, r7
	float* y = (float*)malloc(column_a * sizeof(float));
 80065e6:	9001      	str	r0, [sp, #4]
	if (!chol(Q, L, column_a)) {
 80065e8:	0029      	movs	r1, r5
 80065ea:	0030      	movs	r0, r6
 80065ec:	f7ff fb56 	bl	8005c9c <chol>
 80065f0:	2800      	cmp	r0, #0
 80065f2:	d106      	bne.n	8006602 <optislim+0x42>
		free(L);
 80065f4:	0028      	movs	r0, r5
 80065f6:	f004 f9ed 	bl	800a9d4 <free>
		free(y);
 80065fa:	9801      	ldr	r0, [sp, #4]
#else
		if (isnanf(v)) {
			free(L);
			free(y);
			free(P);
			free(lambda);
 80065fc:	f004 f9ea 	bl	800a9d4 <free>
			return STATUS_NAN;
 8006600:	e02c      	b.n	800665c <optislim+0x9c>
	linsolve_lower_triangular(L, y, c, column_a);
 8006602:	0022      	movs	r2, r4
	for (i = 0; i < column_a; i++) {
 8006604:	2400      	movs	r4, #0
	linsolve_lower_triangular(L, y, c, column_a);
 8006606:	003b      	movs	r3, r7
 8006608:	0028      	movs	r0, r5
 800660a:	9901      	ldr	r1, [sp, #4]
 800660c:	f7ff fd2c 	bl	8006068 <linsolve_lower_triangular>
	linsolve_upper_tran_triangular(L, x, y, column_a);
 8006610:	003b      	movs	r3, r7
 8006612:	0028      	movs	r0, r5
 8006614:	9a01      	ldr	r2, [sp, #4]
 8006616:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8006618:	f7ff ff84 	bl	8006524 <linsolve_upper_tran_triangular>
	for (i = 0; i < column_a; i++) {
 800661c:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 800661e:	42bc      	cmp	r4, r7
 8006620:	d112      	bne.n	8006648 <optislim+0x88>
	float* P = (float*)malloc(column_a * sizeof(float));
 8006622:	9804      	ldr	r0, [sp, #16]
 8006624:	f004 f9cc 	bl	800a9c0 <malloc>
	float* lambda = (float*)calloc(row_a, sizeof(float));
 8006628:	2104      	movs	r1, #4
	float* P = (float*)malloc(column_a * sizeof(float));
 800662a:	9003      	str	r0, [sp, #12]
	float* lambda = (float*)calloc(row_a, sizeof(float));
 800662c:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800662e:	f004 f98f 	bl	800a950 <calloc>
	for (i = 0; i < MAX_ITERATIONS; i++) {
 8006632:	2300      	movs	r3, #0
	float* lambda = (float*)calloc(row_a, sizeof(float));
 8006634:	9002      	str	r0, [sp, #8]
	for (i = 0; i < MAX_ITERATIONS; i++) {
 8006636:	9307      	str	r3, [sp, #28]
 8006638:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800663a:	930b      	str	r3, [sp, #44]	@ 0x2c
					Hii = H;
 800663c:	9308      	str	r3, [sp, #32]
		float v = 0.0f;
 800663e:	2300      	movs	r3, #0
 8006640:	9306      	str	r3, [sp, #24]
		for (j = 0; j < row_a; j++) {
 8006642:	2300      	movs	r3, #0
 8006644:	9305      	str	r3, [sp, #20]
 8006646:	e07d      	b.n	8006744 <optislim+0x184>
		x[i] = -x[i];
 8006648:	2380      	movs	r3, #128	@ 0x80
 800664a:	6830      	ldr	r0, [r6, #0]
 800664c:	061b      	lsls	r3, r3, #24
 800664e:	18c3      	adds	r3, r0, r3
 8006650:	c608      	stmia	r6!, {r3}
		if (isnanf(x[i])) {
 8006652:	1c01      	adds	r1, r0, #0
 8006654:	f7fa fde2 	bl	800121c <__aeabi_fcmpun>
 8006658:	2800      	cmp	r0, #0
 800665a:	d002      	beq.n	8006662 <optislim+0xa2>
		return STATUS_NAN;
 800665c:	2000      	movs	r0, #0
	free(L);
	free(y);

	/* If i equal to MAX_ITERATIONS, then it did not find a solution */
	return i < MAX_ITERATIONS ? STATUS_OK : STATUS_NOT_OPTIMAL_SOLUTION;
}
 800665e:	b011      	add	sp, #68	@ 0x44
 8006660:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < column_a; i++) {
 8006662:	3401      	adds	r4, #1
 8006664:	e7db      	b.n	800661e <optislim+0x5e>
			float K = dot(A + j * column_a, x, column_a);
 8006666:	003a      	movs	r2, r7
 8006668:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800666a:	9808      	ldr	r0, [sp, #32]
 800666c:	f7ff fb7a 	bl	8005d64 <dot>
 8006670:	9b05      	ldr	r3, [sp, #20]
 8006672:	1c01      	adds	r1, r0, #0
			K = b[j] - K;
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	930c      	str	r3, [sp, #48]	@ 0x30
 8006678:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800667a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800667c:	5898      	ldr	r0, [r3, r2]
 800667e:	f7fa fc29 	bl	8000ed4 <__aeabi_fsub>
			if (K >= 0.0f) {
 8006682:	2100      	movs	r1, #0
			K = b[j] - K;
 8006684:	900e      	str	r0, [sp, #56]	@ 0x38
			if (K >= 0.0f) {
 8006686:	f7f9 ff55 	bl	8000534 <__aeabi_fcmpge>
 800668a:	1e04      	subs	r4, r0, #0
 800668c:	d152      	bne.n	8006734 <optislim+0x174>
			linsolve_lower_triangular(L, y, A + j * column_a, column_a);
 800668e:	003b      	movs	r3, r7
 8006690:	0028      	movs	r0, r5
 8006692:	9a08      	ldr	r2, [sp, #32]
 8006694:	9901      	ldr	r1, [sp, #4]
 8006696:	f7ff fce7 	bl	8006068 <linsolve_lower_triangular>
			linsolve_upper_tran_triangular(L, P, y, column_a);
 800669a:	003b      	movs	r3, r7
 800669c:	0028      	movs	r0, r5
 800669e:	9a01      	ldr	r2, [sp, #4]
 80066a0:	9903      	ldr	r1, [sp, #12]
 80066a2:	f7ff ff3f 	bl	8006524 <linsolve_upper_tran_triangular>
			float w = 0.0f;
 80066a6:	2300      	movs	r3, #0
 80066a8:	930a      	str	r3, [sp, #40]	@ 0x28
			float Hii = 1.0f;
 80066aa:	23fe      	movs	r3, #254	@ 0xfe
			linsolve_upper_tran_triangular(L, P, y, column_a);
 80066ac:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
			float Hii = 1.0f;
 80066ae:	059b      	lsls	r3, r3, #22
 80066b0:	9309      	str	r3, [sp, #36]	@ 0x24
				const float H = dot(A + k * column_a, P, column_a);
 80066b2:	003a      	movs	r2, r7
 80066b4:	0030      	movs	r0, r6
 80066b6:	9903      	ldr	r1, [sp, #12]
 80066b8:	f7ff fb54 	bl	8005d64 <dot>
				if (j == k) {
 80066bc:	9b05      	ldr	r3, [sp, #20]
 80066be:	42a3      	cmp	r3, r4
 80066c0:	d100      	bne.n	80066c4 <optislim+0x104>
					Hii = H;
 80066c2:	9009      	str	r0, [sp, #36]	@ 0x24
				w += H * lambda[k];
 80066c4:	9a02      	ldr	r2, [sp, #8]
 80066c6:	00a3      	lsls	r3, r4, #2
 80066c8:	58d1      	ldr	r1, [r2, r3]
 80066ca:	f7fa fac5 	bl	8000c58 <__aeabi_fmul>
 80066ce:	1c01      	adds	r1, r0, #0
 80066d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80066d2:	f7f9 ff51 	bl	8000578 <__aeabi_fadd>
			for (k = 0; k < row_a; k++) {
 80066d6:	9b04      	ldr	r3, [sp, #16]
 80066d8:	3401      	adds	r4, #1
 80066da:	18f6      	adds	r6, r6, r3
 80066dc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
				w += H * lambda[k];
 80066de:	900a      	str	r0, [sp, #40]	@ 0x28
			for (k = 0; k < row_a; k++) {
 80066e0:	42a3      	cmp	r3, r4
 80066e2:	d1e6      	bne.n	80066b2 <optislim+0xf2>
			w = -1.0f / Hii * (K + w - Hii * lambda[j]);
 80066e4:	9b02      	ldr	r3, [sp, #8]
 80066e6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80066e8:	1c01      	adds	r1, r0, #0
 80066ea:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80066ec:	589c      	ldr	r4, [r3, r2]
 80066ee:	f7f9 ff43 	bl	8000578 <__aeabi_fadd>
 80066f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80066f4:	1c06      	adds	r6, r0, #0
 80066f6:	1c20      	adds	r0, r4, #0
 80066f8:	f7fa faae 	bl	8000c58 <__aeabi_fmul>
 80066fc:	1c01      	adds	r1, r0, #0
 80066fe:	1c30      	adds	r0, r6, #0
 8006700:	f7fa fbe8 	bl	8000ed4 <__aeabi_fsub>
 8006704:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006706:	1c06      	adds	r6, r0, #0
 8006708:	4842      	ldr	r0, [pc, #264]	@ (8006814 <optislim+0x254>)
 800670a:	f7fa f8bf 	bl	800088c <__aeabi_fdiv>
 800670e:	1c31      	adds	r1, r6, #0
 8006710:	f7fa faa2 	bl	8000c58 <__aeabi_fmul>
 8006714:	1c01      	adds	r1, r0, #0
			Hii = vmax(0.0f, w);
 8006716:	2000      	movs	r0, #0
 8006718:	f7ff fef0 	bl	80064fc <vmax>
			v += Hii - lambda[j];
 800671c:	1c21      	adds	r1, r4, #0
			Hii = vmax(0.0f, w);
 800671e:	1c06      	adds	r6, r0, #0
			v += Hii - lambda[j];
 8006720:	f7fa fbd8 	bl	8000ed4 <__aeabi_fsub>
 8006724:	1c01      	adds	r1, r0, #0
 8006726:	9806      	ldr	r0, [sp, #24]
 8006728:	f7f9 ff26 	bl	8000578 <__aeabi_fadd>
			lambda[j] = Hii;
 800672c:	9b02      	ldr	r3, [sp, #8]
 800672e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
			v += Hii - lambda[j];
 8006730:	9006      	str	r0, [sp, #24]
			lambda[j] = Hii;
 8006732:	509e      	str	r6, [r3, r2]
		for (j = 0; j < row_a; j++) {
 8006734:	9a04      	ldr	r2, [sp, #16]
 8006736:	9b05      	ldr	r3, [sp, #20]
 8006738:	4694      	mov	ip, r2
 800673a:	3301      	adds	r3, #1
 800673c:	9305      	str	r3, [sp, #20]
 800673e:	9b08      	ldr	r3, [sp, #32]
 8006740:	4463      	add	r3, ip
 8006742:	9308      	str	r3, [sp, #32]
 8006744:	9b05      	ldr	r3, [sp, #20]
 8006746:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006748:	4293      	cmp	r3, r2
 800674a:	d18c      	bne.n	8006666 <optislim+0xa6>
		v = v * v;
 800674c:	9906      	ldr	r1, [sp, #24]
 800674e:	1c08      	adds	r0, r1, #0
 8006750:	f7fa fa82 	bl	8000c58 <__aeabi_fmul>
		if (isnanf(v)) {
 8006754:	1c01      	adds	r1, r0, #0
		v = v * v;
 8006756:	1c04      	adds	r4, r0, #0
		if (isnanf(v)) {
 8006758:	f7fa fd60 	bl	800121c <__aeabi_fcmpun>
 800675c:	2800      	cmp	r0, #0
 800675e:	d00a      	beq.n	8006776 <optislim+0x1b6>
			free(L);
 8006760:	0028      	movs	r0, r5
 8006762:	f004 f937 	bl	800a9d4 <free>
			free(y);
 8006766:	9801      	ldr	r0, [sp, #4]
 8006768:	f004 f934 	bl	800a9d4 <free>
			free(P);
 800676c:	9803      	ldr	r0, [sp, #12]
 800676e:	f004 f931 	bl	800a9d4 <free>
			free(lambda);
 8006772:	9802      	ldr	r0, [sp, #8]
 8006774:	e742      	b.n	80065fc <optislim+0x3c>
		if (v < MIN_VALUE) {
 8006776:	4928      	ldr	r1, [pc, #160]	@ (8006818 <optislim+0x258>)
 8006778:	1c20      	adds	r0, r4, #0
 800677a:	f7f9 febd 	bl	80004f8 <__aeabi_fcmplt>
 800677e:	2800      	cmp	r0, #0
 8006780:	d107      	bne.n	8006792 <optislim+0x1d2>
	for (i = 0; i < MAX_ITERATIONS; i++) {
 8006782:	9b07      	ldr	r3, [sp, #28]
 8006784:	3301      	adds	r3, #1
 8006786:	9307      	str	r3, [sp, #28]
 8006788:	9a07      	ldr	r2, [sp, #28]
 800678a:	4b24      	ldr	r3, [pc, #144]	@ (800681c <optislim+0x25c>)
 800678c:	429a      	cmp	r2, r3
 800678e:	d000      	beq.n	8006792 <optislim+0x1d2>
 8006790:	e752      	b.n	8006638 <optislim+0x78>
	for (j = 0; j < row_a; j++) {
 8006792:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006794:	9c02      	ldr	r4, [sp, #8]
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	191b      	adds	r3, r3, r4
 800679a:	9305      	str	r3, [sp, #20]
 800679c:	9b05      	ldr	r3, [sp, #20]
 800679e:	429c      	cmp	r4, r3
 80067a0:	d113      	bne.n	80067ca <optislim+0x20a>
	free(lambda);
 80067a2:	9802      	ldr	r0, [sp, #8]
 80067a4:	f004 f916 	bl	800a9d4 <free>
	free(P);
 80067a8:	9803      	ldr	r0, [sp, #12]
 80067aa:	f004 f913 	bl	800a9d4 <free>
	free(L);
 80067ae:	0028      	movs	r0, r5
 80067b0:	f004 f910 	bl	800a9d4 <free>
	free(y);
 80067b4:	9801      	ldr	r0, [sp, #4]
 80067b6:	f004 f90d 	bl	800a9d4 <free>
	return i < MAX_ITERATIONS ? STATUS_OK : STATUS_NOT_OPTIMAL_SOLUTION;
 80067ba:	4b19      	ldr	r3, [pc, #100]	@ (8006820 <optislim+0x260>)
 80067bc:	9807      	ldr	r0, [sp, #28]
 80067be:	469c      	mov	ip, r3
 80067c0:	4460      	add	r0, ip
 80067c2:	4243      	negs	r3, r0
 80067c4:	4158      	adcs	r0, r3
 80067c6:	3002      	adds	r0, #2
 80067c8:	e749      	b.n	800665e <optislim+0x9e>
		linsolve_lower_triangular(L, y, A + j * column_a, column_a);
 80067ca:	003b      	movs	r3, r7
 80067cc:	0028      	movs	r0, r5
 80067ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80067d0:	9901      	ldr	r1, [sp, #4]
 80067d2:	f7ff fc49 	bl	8006068 <linsolve_lower_triangular>
		linsolve_upper_tran_triangular(L, P, y, column_a);
 80067d6:	003b      	movs	r3, r7
 80067d8:	0028      	movs	r0, r5
 80067da:	9a01      	ldr	r2, [sp, #4]
 80067dc:	9903      	ldr	r1, [sp, #12]
 80067de:	f7ff fea1 	bl	8006524 <linsolve_upper_tran_triangular>
		for (k = 0; k < column_a; k++) {
 80067e2:	2600      	movs	r6, #0
 80067e4:	9b04      	ldr	r3, [sp, #16]
 80067e6:	42b3      	cmp	r3, r6
 80067e8:	d106      	bne.n	80067f8 <optislim+0x238>
	for (j = 0; j < row_a; j++) {
 80067ea:	9a04      	ldr	r2, [sp, #16]
 80067ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067ee:	4694      	mov	ip, r2
 80067f0:	4463      	add	r3, ip
 80067f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80067f4:	3404      	adds	r4, #4
 80067f6:	e7d1      	b.n	800679c <optislim+0x1dc>
		  x[k] -= P[k] * lambda[j];
 80067f8:	9b03      	ldr	r3, [sp, #12]
 80067fa:	6821      	ldr	r1, [r4, #0]
 80067fc:	5998      	ldr	r0, [r3, r6]
 80067fe:	f7fa fa2b 	bl	8000c58 <__aeabi_fmul>
 8006802:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006804:	1c01      	adds	r1, r0, #0
 8006806:	5998      	ldr	r0, [r3, r6]
 8006808:	f7fa fb64 	bl	8000ed4 <__aeabi_fsub>
 800680c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800680e:	5198      	str	r0, [r3, r6]
		for (k = 0; k < column_a; k++) {
 8006810:	3604      	adds	r6, #4
 8006812:	e7e7      	b.n	80067e4 <optislim+0x224>
 8006814:	bf800000 	.word	0xbf800000
 8006818:	2d2febff 	.word	0x2d2febff
 800681c:	00002710 	.word	0x00002710
 8006820:	ffffd8f0 	.word	0xffffd8f0

08006824 <quadprogslim>:
STATUS_CODES quadprogslim(const float Q[], const float c[], const float A[], const float b[], const float G[], const float h[], float x[], const size_t row_a, const size_t row_g, const size_t column_a, const bool equality_constraints_are_used) {
 8006824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006826:	b08b      	sub	sp, #44	@ 0x2c
 8006828:	9309      	str	r3, [sp, #36]	@ 0x24
 800682a:	ab16      	add	r3, sp, #88	@ 0x58
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	0016      	movs	r6, r2
 8006830:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8006832:	9007      	str	r0, [sp, #28]
 8006834:	9108      	str	r1, [sp, #32]
	if (equality_constraints_are_used) {
 8006836:	2b00      	cmp	r3, #0
 8006838:	d05c      	beq.n	80068f4 <quadprogslim+0xd0>
		float* A_long = (float*)malloc((row_a + row_g + row_g) * column_a * sizeof(float));
 800683a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800683c:	005b      	lsls	r3, r3, #1
 800683e:	191b      	adds	r3, r3, r4
 8006840:	9306      	str	r3, [sp, #24]
 8006842:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006844:	9806      	ldr	r0, [sp, #24]
 8006846:	009d      	lsls	r5, r3, #2
 8006848:	4368      	muls	r0, r5
 800684a:	f004 f8b9 	bl	800a9c0 <malloc>
		float* b_long = (float*)malloc((row_a + row_g + row_g) * sizeof(float));
 800684e:	9b06      	ldr	r3, [sp, #24]
		float* A_long = (float*)malloc((row_a + row_g + row_g) * column_a * sizeof(float));
 8006850:	9005      	str	r0, [sp, #20]
		float* b_long = (float*)malloc((row_a + row_g + row_g) * sizeof(float));
 8006852:	0098      	lsls	r0, r3, #2
 8006854:	f004 f8b4 	bl	800a9c0 <malloc>
		memcpy(A_long, A, row_a * column_a * sizeof(float));
 8006858:	4365      	muls	r5, r4
 800685a:	0031      	movs	r1, r6
 800685c:	002a      	movs	r2, r5
		float* b_long = (float*)malloc((row_a + row_g + row_g) * sizeof(float));
 800685e:	0007      	movs	r7, r0
		memcpy(A_long, A, row_a * column_a * sizeof(float));
 8006860:	9805      	ldr	r0, [sp, #20]
 8006862:	f004 ffb3 	bl	800b7cc <memcpy>
		A_long += row_a * column_a;
 8006866:	9b05      	ldr	r3, [sp, #20]
		size_t row_g_column_a = row_g * column_a;
 8006868:	9e14      	ldr	r6, [sp, #80]	@ 0x50
		A_long += row_a * column_a;
 800686a:	195d      	adds	r5, r3, r5
		size_t row_g_column_a = row_g * column_a;
 800686c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
		memcpy(A_long, G, row_g_column_a * sizeof(float));
 800686e:	0028      	movs	r0, r5
		size_t row_g_column_a = row_g * column_a;
 8006870:	435e      	muls	r6, r3
		memcpy(A_long, G, row_g_column_a * sizeof(float));
 8006872:	00b6      	lsls	r6, r6, #2
 8006874:	0032      	movs	r2, r6
 8006876:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8006878:	f004 ffa8 	bl	800b7cc <memcpy>
		for (i = 0; i < row_g_column_a; i++) {
 800687c:	2300      	movs	r3, #0
 800687e:	19ad      	adds	r5, r5, r6
 8006880:	429e      	cmp	r6, r3
 8006882:	d127      	bne.n	80068d4 <quadprogslim+0xb0>
		memcpy(b_long, b, row_a * sizeof(float));
 8006884:	00a4      	lsls	r4, r4, #2
 8006886:	0022      	movs	r2, r4
 8006888:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800688a:	0038      	movs	r0, r7
 800688c:	f004 ff9e 	bl	800b7cc <memcpy>
		memcpy(b_long, h, row_g * sizeof(float));
 8006890:	9b14      	ldr	r3, [sp, #80]	@ 0x50
		b_long += row_a;
 8006892:	193c      	adds	r4, r7, r4
		memcpy(b_long, h, row_g * sizeof(float));
 8006894:	009e      	lsls	r6, r3, #2
 8006896:	0020      	movs	r0, r4
 8006898:	0032      	movs	r2, r6
 800689a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800689c:	f004 ff96 	bl	800b7cc <memcpy>
		for (i = 0; i < row_g; i++) {
 80068a0:	2300      	movs	r3, #0
 80068a2:	19a4      	adds	r4, r4, r6
 80068a4:	429e      	cmp	r6, r3
 80068a6:	d11d      	bne.n	80068e4 <quadprogslim+0xc0>
		const STATUS_CODES status = optislim(Q, c, A_long, b_long, x, row_a + row_g + row_g, column_a);
 80068a8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80068aa:	9a05      	ldr	r2, [sp, #20]
 80068ac:	9302      	str	r3, [sp, #8]
 80068ae:	9b06      	ldr	r3, [sp, #24]
 80068b0:	9908      	ldr	r1, [sp, #32]
 80068b2:	9301      	str	r3, [sp, #4]
 80068b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80068b6:	9807      	ldr	r0, [sp, #28]
 80068b8:	9300      	str	r3, [sp, #0]
 80068ba:	003b      	movs	r3, r7
 80068bc:	f7ff fe80 	bl	80065c0 <optislim>
 80068c0:	0004      	movs	r4, r0
		free(A_long);
 80068c2:	9805      	ldr	r0, [sp, #20]
 80068c4:	f004 f886 	bl	800a9d4 <free>
		free(b_long);
 80068c8:	0038      	movs	r0, r7
 80068ca:	f004 f883 	bl	800a9d4 <free>
}
 80068ce:	0020      	movs	r0, r4
 80068d0:	b00b      	add	sp, #44	@ 0x2c
 80068d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			A_long[i] = -G[i];
 80068d4:	2180      	movs	r1, #128	@ 0x80
 80068d6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80068d8:	0609      	lsls	r1, r1, #24
 80068da:	58d2      	ldr	r2, [r2, r3]
 80068dc:	1852      	adds	r2, r2, r1
 80068de:	50ea      	str	r2, [r5, r3]
		for (i = 0; i < row_g_column_a; i++) {
 80068e0:	3304      	adds	r3, #4
 80068e2:	e7cd      	b.n	8006880 <quadprogslim+0x5c>
			b_long[i] = -h[i];
 80068e4:	2180      	movs	r1, #128	@ 0x80
 80068e6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80068e8:	0609      	lsls	r1, r1, #24
 80068ea:	58d2      	ldr	r2, [r2, r3]
 80068ec:	1852      	adds	r2, r2, r1
 80068ee:	50e2      	str	r2, [r4, r3]
		for (i = 0; i < row_g; i++) {
 80068f0:	3304      	adds	r3, #4
 80068f2:	e7d7      	b.n	80068a4 <quadprogslim+0x80>
		return optislim(Q, c, A, b, x, row_a, column_a);
 80068f4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80068f6:	9401      	str	r4, [sp, #4]
 80068f8:	9302      	str	r3, [sp, #8]
 80068fa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80068fc:	9908      	ldr	r1, [sp, #32]
 80068fe:	9300      	str	r3, [sp, #0]
 8006900:	9807      	ldr	r0, [sp, #28]
 8006902:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006904:	f7ff fe5c 	bl	80065c0 <optislim>
 8006908:	0004      	movs	r4, r0
 800690a:	e7e0      	b.n	80068ce <quadprogslim+0xaa>

0800690c <uint16_to_float>:
	uint32_t i;
	float f;
} data;

float uint16_to_float(const uint16_t msb, const uint16_t lsb) {
	data.i = (((uint32_t)msb) << 16) | lsb;
 800690c:	4b02      	ldr	r3, [pc, #8]	@ (8006918 <uint16_to_float+0xc>)
 800690e:	0400      	lsls	r0, r0, #16
 8006910:	4308      	orrs	r0, r1
 8006912:	6018      	str	r0, [r3, #0]
	return data.f;
}
 8006914:	4770      	bx	lr
 8006916:	46c0      	nop			@ (mov r8, r8)
 8006918:	200004c4 	.word	0x200004c4

0800691c <float_to_uint16>:

void float_to_uint16(const float value, uint16_t* msb, uint16_t* lsb) {
	data.f = value;
 800691c:	4b03      	ldr	r3, [pc, #12]	@ (800692c <float_to_uint16+0x10>)
 800691e:	6018      	str	r0, [r3, #0]
	*msb = (data.i >> 16) & 0xFFFF;
 8006920:	0003      	movs	r3, r0
 8006922:	0c00      	lsrs	r0, r0, #16
 8006924:	8008      	strh	r0, [r1, #0]
	*lsb = data.i & 0xFFFF;
 8006926:	8013      	strh	r3, [r2, #0]
}
 8006928:	4770      	bx	lr
 800692a:	46c0      	nop			@ (mov r8, r8)
 800692c:	200004c4 	.word	0x200004c4

08006930 <calibrate_value>:

float calibrate_value(const uint16_t raw, const uint16_t min_raw, const uint16_t max_raw,
	const uint16_t min_real_lsb, const uint16_t min_real_msb,
	const uint16_t max_real_lsb, const uint16_t max_real_msb) {
 8006930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006932:	0016      	movs	r6, r2
 8006934:	aa08      	add	r2, sp, #32
 8006936:	000d      	movs	r5, r1
 8006938:	8814      	ldrh	r4, [r2, #0]
 800693a:	a90a      	add	r1, sp, #40	@ 0x28
 800693c:	9001      	str	r0, [sp, #4]
 800693e:	aa09      	add	r2, sp, #36	@ 0x24
 8006940:	8808      	ldrh	r0, [r1, #0]
 8006942:	8812      	ldrh	r2, [r2, #0]
	data.i = (((uint32_t)msb) << 16) | lsb;
 8006944:	0424      	lsls	r4, r4, #16
 8006946:	431c      	orrs	r4, r3
 8006948:	0400      	lsls	r0, r0, #16
 800694a:	4b15      	ldr	r3, [pc, #84]	@ (80069a0 <calibrate_value+0x70>)
 800694c:	4310      	orrs	r0, r2
 800694e:	6018      	str	r0, [r3, #0]
	/* Slope */
	uint16_t delta_x = max_raw - min_raw;
	if (delta_x == 0) {
		delta_x = 1;
	}
	const float delta_y = max_real - min_real;
 8006950:	1c21      	adds	r1, r4, #0
 8006952:	f7fa fabf 	bl	8000ed4 <__aeabi_fsub>
	uint16_t delta_x = max_raw - min_raw;
 8006956:	1b73      	subs	r3, r6, r5
	const float delta_y = max_real - min_real;
 8006958:	1c07      	adds	r7, r0, #0
	const float slope = delta_y / ((float)delta_x);
 800695a:	1c18      	adds	r0, r3, #0
 800695c:	b29b      	uxth	r3, r3
 800695e:	2b00      	cmp	r3, #0
 8006960:	d100      	bne.n	8006964 <calibrate_value+0x34>
 8006962:	2001      	movs	r0, #1
 8006964:	b280      	uxth	r0, r0
 8006966:	f7fa fcdb 	bl	8001320 <__aeabi_ui2f>
 800696a:	1c01      	adds	r1, r0, #0
 800696c:	1c38      	adds	r0, r7, #0
 800696e:	f7f9 ff8d 	bl	800088c <__aeabi_fdiv>
 8006972:	1c07      	adds	r7, r0, #0

	/* Bias */
	const float bias = min_real - slope * min_raw;
 8006974:	0028      	movs	r0, r5
 8006976:	f7fa fc87 	bl	8001288 <__aeabi_i2f>
 800697a:	1c39      	adds	r1, r7, #0
 800697c:	f7fa f96c 	bl	8000c58 <__aeabi_fmul>
 8006980:	1c01      	adds	r1, r0, #0
 8006982:	1c20      	adds	r0, r4, #0
 8006984:	f7fa faa6 	bl	8000ed4 <__aeabi_fsub>
 8006988:	1c04      	adds	r4, r0, #0

	/* Calibration */
	const float value = slope * ((float)raw) + bias;
 800698a:	9801      	ldr	r0, [sp, #4]
 800698c:	f7fa fcc8 	bl	8001320 <__aeabi_ui2f>
 8006990:	1c39      	adds	r1, r7, #0
 8006992:	f7fa f961 	bl	8000c58 <__aeabi_fmul>
 8006996:	1c01      	adds	r1, r0, #0
 8006998:	1c20      	adds	r0, r4, #0
 800699a:	f7f9 fded 	bl	8000578 <__aeabi_fadd>
	return value;
}
 800699e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80069a0:	200004c4 	.word	0x200004c4

080069a4 <Flash_Write_Data>:
#include "flash.h"
#include "main.h"

#define ADDR_FLASH_PAGE (uint32_t)0x0800FC00 /* Sector 15 */

int Flash_Write_Data(uint16_t data[], uint16_t length) {
 80069a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80069a6:	000d      	movs	r5, r1
 80069a8:	0006      	movs	r6, r0

	/* Unlock */
	HAL_FLASH_Unlock();
 80069aa:	f002 f955 	bl	8008c58 <HAL_FLASH_Unlock>

	/* Erase */
	FLASH_EraseInitTypeDef eraseInitStruct;
	eraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
	eraseInitStruct.PageAddress = ADDR_FLASH_PAGE;
 80069ae:	4b11      	ldr	r3, [pc, #68]	@ (80069f4 <Flash_Write_Data+0x50>)
	eraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80069b0:	2400      	movs	r4, #0
	eraseInitStruct.PageAddress = ADDR_FLASH_PAGE;
 80069b2:	9302      	str	r3, [sp, #8]
	eraseInitStruct.NbPages = 1;
 80069b4:	2301      	movs	r3, #1
	uint32_t PageError = 0;
	if (HAL_FLASHEx_Erase(&eraseInitStruct, &PageError) != HAL_OK) {
 80069b6:	4669      	mov	r1, sp
 80069b8:	a801      	add	r0, sp, #4
	eraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80069ba:	9401      	str	r4, [sp, #4]
	eraseInitStruct.NbPages = 1;
 80069bc:	9303      	str	r3, [sp, #12]
	uint32_t PageError = 0;
 80069be:	9400      	str	r4, [sp, #0]
	if (HAL_FLASHEx_Erase(&eraseInitStruct, &PageError) != HAL_OK) {
 80069c0:	f002 f9fc 	bl	8008dbc <HAL_FLASHEx_Erase>
 80069c4:	42a0      	cmp	r0, r4
 80069c6:	d00c      	beq.n	80069e2 <Flash_Write_Data+0x3e>
		return HAL_ERROR;
 80069c8:	2001      	movs	r0, #1

	/* Lock */
	HAL_FLASH_Lock();

	return 0;
}
 80069ca:	b004      	add	sp, #16
 80069cc:	bd70      	pop	{r4, r5, r6, pc}
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, ADDR_FLASH_PAGE + index, value) != HAL_OK) {
 80069ce:	5af2      	ldrh	r2, [r6, r3]
 80069d0:	4b08      	ldr	r3, [pc, #32]	@ (80069f4 <Flash_Write_Data+0x50>)
 80069d2:	2001      	movs	r0, #1
 80069d4:	18c9      	adds	r1, r1, r3
 80069d6:	2300      	movs	r3, #0
 80069d8:	f002 f986 	bl	8008ce8 <HAL_FLASH_Program>
 80069dc:	3401      	adds	r4, #1
 80069de:	2800      	cmp	r0, #0
 80069e0:	d1f2      	bne.n	80069c8 <Flash_Write_Data+0x24>
 80069e2:	0063      	lsls	r3, r4, #1
 80069e4:	b299      	uxth	r1, r3
	for (uint16_t i = 0; i < length; i++) {
 80069e6:	42ac      	cmp	r4, r5
 80069e8:	d1f1      	bne.n	80069ce <Flash_Write_Data+0x2a>
	HAL_FLASH_Lock();
 80069ea:	f002 f949 	bl	8008c80 <HAL_FLASH_Lock>
	return 0;
 80069ee:	2000      	movs	r0, #0
 80069f0:	e7eb      	b.n	80069ca <Flash_Write_Data+0x26>
 80069f2:	46c0      	nop			@ (mov r8, r8)
 80069f4:	0800fc00 	.word	0x0800fc00

080069f8 <Flash_Read_Data>:

void Flash_Read_Data(uint16_t data[], uint16_t length) {
	uint32_t address = ADDR_FLASH_PAGE;
	for (uint16_t i = 0; i < length; i++) {
 80069f8:	2300      	movs	r3, #0
void Flash_Read_Data(uint16_t data[], uint16_t length) {
 80069fa:	b510      	push	{r4, lr}
	for (uint16_t i = 0; i < length; i++) {
 80069fc:	b29a      	uxth	r2, r3
 80069fe:	4291      	cmp	r1, r2
 8006a00:	d800      	bhi.n	8006a04 <Flash_Read_Data+0xc>
		data[i] = *(__IO uint16_t*) address;
		address += 2;
	}
}
 8006a02:	bd10      	pop	{r4, pc}
		data[i] = *(__IO uint16_t*) address;
 8006a04:	4c03      	ldr	r4, [pc, #12]	@ (8006a14 <Flash_Read_Data+0x1c>)
 8006a06:	005a      	lsls	r2, r3, #1
 8006a08:	1914      	adds	r4, r2, r4
 8006a0a:	8824      	ldrh	r4, [r4, #0]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	5284      	strh	r4, [r0, r2]
	for (uint16_t i = 0; i < length; i++) {
 8006a10:	e7f4      	b.n	80069fc <Flash_Read_Data+0x4>
 8006a12:	46c0      	nop			@ (mov r8, r8)
 8006a14:	0800fc00 	.word	0x0800fc00

08006a18 <read_serial>:
int32_t (*serial_read_function)(const char port[], uint8_t*, uint16_t, int32_t) = NULL;
int32_t (*serial_write_function)(const char port[], const uint8_t*, uint16_t, int32_t) = NULL;
char port_[20];

/* Read via serial */
int32_t read_serial(uint8_t* buf, uint16_t count, int32_t byte_timeout_ms, void* arg) {
 8006a18:	b570      	push	{r4, r5, r6, lr}
 8006a1a:	0005      	movs	r5, r0
	if (serial_read_function) {
		return serial_read_function(port_, buf, count, byte_timeout_ms);
	}
    return 0;
 8006a1c:	2000      	movs	r0, #0
int32_t read_serial(uint8_t* buf, uint16_t count, int32_t byte_timeout_ms, void* arg) {
 8006a1e:	0013      	movs	r3, r2
	if (serial_read_function) {
 8006a20:	4a04      	ldr	r2, [pc, #16]	@ (8006a34 <read_serial+0x1c>)
 8006a22:	6814      	ldr	r4, [r2, #0]
 8006a24:	4284      	cmp	r4, r0
 8006a26:	d003      	beq.n	8006a30 <read_serial+0x18>
		return serial_read_function(port_, buf, count, byte_timeout_ms);
 8006a28:	000a      	movs	r2, r1
 8006a2a:	4803      	ldr	r0, [pc, #12]	@ (8006a38 <read_serial+0x20>)
 8006a2c:	0029      	movs	r1, r5
 8006a2e:	47a0      	blx	r4
}
 8006a30:	bd70      	pop	{r4, r5, r6, pc}
 8006a32:	46c0      	nop			@ (mov r8, r8)
 8006a34:	200004e0 	.word	0x200004e0
 8006a38:	200004c8 	.word	0x200004c8

08006a3c <write_serial>:

/* Write via serial */
int32_t write_serial(const uint8_t* buf, uint16_t count, int32_t byte_timeout_ms, void* arg) {
 8006a3c:	b570      	push	{r4, r5, r6, lr}
 8006a3e:	0005      	movs	r5, r0
	if (serial_write_function) {
		return serial_write_function(port_, buf, count, byte_timeout_ms);
	}
    return 0;
 8006a40:	2000      	movs	r0, #0
int32_t write_serial(const uint8_t* buf, uint16_t count, int32_t byte_timeout_ms, void* arg) {
 8006a42:	0013      	movs	r3, r2
	if (serial_write_function) {
 8006a44:	4a04      	ldr	r2, [pc, #16]	@ (8006a58 <write_serial+0x1c>)
 8006a46:	6814      	ldr	r4, [r2, #0]
 8006a48:	4284      	cmp	r4, r0
 8006a4a:	d003      	beq.n	8006a54 <write_serial+0x18>
		return serial_write_function(port_, buf, count, byte_timeout_ms);
 8006a4c:	000a      	movs	r2, r1
 8006a4e:	4803      	ldr	r0, [pc, #12]	@ (8006a5c <write_serial+0x20>)
 8006a50:	0029      	movs	r1, r5
 8006a52:	47a0      	blx	r4
}
 8006a54:	bd70      	pop	{r4, r5, r6, pc}
 8006a56:	46c0      	nop			@ (mov r8, r8)
 8006a58:	200004dc 	.word	0x200004dc
 8006a5c:	200004c8 	.word	0x200004c8

08006a60 <modbus_set_serial_write>:

void modbus_set_serial_write(int32_t (*serial_write)(const char port[], const uint8_t*, uint16_t, int32_t)){
	serial_write_function = serial_write;
 8006a60:	4b01      	ldr	r3, [pc, #4]	@ (8006a68 <modbus_set_serial_write+0x8>)
 8006a62:	6018      	str	r0, [r3, #0]
}
 8006a64:	4770      	bx	lr
 8006a66:	46c0      	nop			@ (mov r8, r8)
 8006a68:	200004dc 	.word	0x200004dc

08006a6c <modbus_set_serial_read>:

void modbus_set_serial_read(int32_t (*serial_read)(const char port[], uint8_t*, uint16_t, int32_t)){
	serial_read_function = serial_read;
 8006a6c:	4b01      	ldr	r3, [pc, #4]	@ (8006a74 <modbus_set_serial_read+0x8>)
 8006a6e:	6018      	str	r0, [r3, #0]
}
 8006a70:	4770      	bx	lr
 8006a72:	46c0      	nop			@ (mov r8, r8)
 8006a74:	200004e0 	.word	0x200004e0

08006a78 <modbus_set_serial_port>:

void modbus_set_serial_port(const char port[]) {
 8006a78:	b510      	push	{r4, lr}
	strcpy(port_, port);
 8006a7a:	4b03      	ldr	r3, [pc, #12]	@ (8006a88 <modbus_set_serial_port+0x10>)
void modbus_set_serial_port(const char port[]) {
 8006a7c:	0001      	movs	r1, r0
	strcpy(port_, port);
 8006a7e:	0018      	movs	r0, r3
 8006a80:	f004 fe91 	bl	800b7a6 <strcpy>
}
 8006a84:	bd10      	pop	{r4, pc}
 8006a86:	46c0      	nop			@ (mov r8, r8)
 8006a88:	200004c8 	.word	0x200004c8

08006a8c <modbus_server_create_RTU>:

#ifdef IS_MODBUS_SERVER

/* Server functions */
bool modbus_server_create_RTU(const uint8_t address) {
 8006a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a8e:	b095      	sub	sp, #84	@ 0x54
 8006a90:	0007      	movs	r7, r0

	/* Configuration */
	nmbs_platform_conf platform_conf;
	nmbs_platform_conf_create(&platform_conf);
 8006a92:	4668      	mov	r0, sp
 8006a94:	f000 fce4 	bl	8007460 <nmbs_platform_conf_create>
	platform_conf.transport = NMBS_TRANSPORT_RTU;
 8006a98:	2601      	movs	r6, #1
 8006a9a:	466b      	mov	r3, sp
	platform_conf.read = read_serial;
	platform_conf.write = write_serial;
	platform_conf.arg = NULL;
 8006a9c:	2400      	movs	r4, #0
	platform_conf.transport = NMBS_TRANSPORT_RTU;
 8006a9e:	701e      	strb	r6, [r3, #0]
	platform_conf.read = read_serial;
 8006aa0:	4b1c      	ldr	r3, [pc, #112]	@ (8006b14 <modbus_server_create_RTU+0x88>)

	/* Callbacks */
	nmbs_callbacks callbacks;
	nmbs_callbacks_create(&callbacks);
 8006aa2:	a806      	add	r0, sp, #24
	platform_conf.read = read_serial;
 8006aa4:	9301      	str	r3, [sp, #4]
	platform_conf.write = write_serial;
 8006aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8006b18 <modbus_server_create_RTU+0x8c>)
	platform_conf.arg = NULL;
 8006aa8:	9404      	str	r4, [sp, #16]
	platform_conf.write = write_serial;
 8006aaa:	9302      	str	r3, [sp, #8]
	nmbs_callbacks_create(&callbacks);
 8006aac:	f000 fe3c 	bl	8007728 <nmbs_callbacks_create>
	callbacks.read_coils = handle_read_coils;
 8006ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8006b1c <modbus_server_create_RTU+0x90>)
	callbacks.write_file_record = handle_write_file_record;
	callbacks.read_device_identification_map = handle_read_device_identification_map;
	callbacks.read_device_identification = handle_read_device_identification;

	/* Create the modbus server */
	nmbs_error err = nmbs_server_create(&nmbs_server, address, &platform_conf, &callbacks);
 8006ab2:	4d1b      	ldr	r5, [pc, #108]	@ (8006b20 <modbus_server_create_RTU+0x94>)
	callbacks.read_coils = handle_read_coils;
 8006ab4:	9306      	str	r3, [sp, #24]
	callbacks.read_discrete_inputs = handle_read_discrete_inputs;
 8006ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8006b24 <modbus_server_create_RTU+0x98>)
	nmbs_error err = nmbs_server_create(&nmbs_server, address, &platform_conf, &callbacks);
 8006ab8:	466a      	mov	r2, sp
	callbacks.read_discrete_inputs = handle_read_discrete_inputs;
 8006aba:	9307      	str	r3, [sp, #28]
	callbacks.read_holding_registers = handle_read_holding_registers;
 8006abc:	4b1a      	ldr	r3, [pc, #104]	@ (8006b28 <modbus_server_create_RTU+0x9c>)
	nmbs_error err = nmbs_server_create(&nmbs_server, address, &platform_conf, &callbacks);
 8006abe:	0039      	movs	r1, r7
	callbacks.read_holding_registers = handle_read_holding_registers;
 8006ac0:	9308      	str	r3, [sp, #32]
	callbacks.read_input_registers = handle_read_input_registers;
 8006ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8006b2c <modbus_server_create_RTU+0xa0>)
	nmbs_error err = nmbs_server_create(&nmbs_server, address, &platform_conf, &callbacks);
 8006ac4:	0028      	movs	r0, r5
	callbacks.read_input_registers = handle_read_input_registers;
 8006ac6:	9309      	str	r3, [sp, #36]	@ 0x24
	callbacks.write_single_coil = handle_write_single_coil;
 8006ac8:	4b19      	ldr	r3, [pc, #100]	@ (8006b30 <modbus_server_create_RTU+0xa4>)
 8006aca:	930a      	str	r3, [sp, #40]	@ 0x28
	callbacks.write_single_register = handle_write_single_register;
 8006acc:	4b19      	ldr	r3, [pc, #100]	@ (8006b34 <modbus_server_create_RTU+0xa8>)
 8006ace:	930b      	str	r3, [sp, #44]	@ 0x2c
	callbacks.write_multiple_coils = handle_write_multiple_coils;
 8006ad0:	4b19      	ldr	r3, [pc, #100]	@ (8006b38 <modbus_server_create_RTU+0xac>)
 8006ad2:	930c      	str	r3, [sp, #48]	@ 0x30
	callbacks.write_multiple_registers = handle_write_multiple_registers;
 8006ad4:	4b19      	ldr	r3, [pc, #100]	@ (8006b3c <modbus_server_create_RTU+0xb0>)
 8006ad6:	930d      	str	r3, [sp, #52]	@ 0x34
	callbacks.read_file_record = handle_read_file_record;
 8006ad8:	4b19      	ldr	r3, [pc, #100]	@ (8006b40 <modbus_server_create_RTU+0xb4>)
 8006ada:	930e      	str	r3, [sp, #56]	@ 0x38
	callbacks.write_file_record = handle_write_file_record;
 8006adc:	4b19      	ldr	r3, [pc, #100]	@ (8006b44 <modbus_server_create_RTU+0xb8>)
 8006ade:	930f      	str	r3, [sp, #60]	@ 0x3c
	callbacks.read_device_identification_map = handle_read_device_identification_map;
 8006ae0:	4b19      	ldr	r3, [pc, #100]	@ (8006b48 <modbus_server_create_RTU+0xbc>)
 8006ae2:	9311      	str	r3, [sp, #68]	@ 0x44
	callbacks.read_device_identification = handle_read_device_identification;
 8006ae4:	4b19      	ldr	r3, [pc, #100]	@ (8006b4c <modbus_server_create_RTU+0xc0>)
 8006ae6:	9310      	str	r3, [sp, #64]	@ 0x40
	nmbs_error err = nmbs_server_create(&nmbs_server, address, &platform_conf, &callbacks);
 8006ae8:	ab06      	add	r3, sp, #24
 8006aea:	f000 fe29 	bl	8007740 <nmbs_server_create>
	if (err != NMBS_ERROR_NONE) {
 8006aee:	42a0      	cmp	r0, r4
 8006af0:	d10d      	bne.n	8006b0e <modbus_server_create_RTU+0x82>
		return false;
	}

	/* Timeouts */
	nmbs_set_read_timeout(&nmbs_server, 1000);
 8006af2:	21fa      	movs	r1, #250	@ 0xfa
 8006af4:	0028      	movs	r0, r5
 8006af6:	0089      	lsls	r1, r1, #2
 8006af8:	f000 fcae 	bl	8007458 <nmbs_set_read_timeout>
	nmbs_set_byte_timeout(&nmbs_server, 1000);
 8006afc:	21fa      	movs	r1, #250	@ 0xfa
 8006afe:	0028      	movs	r0, r5
 8006b00:	0089      	lsls	r1, r1, #2
 8006b02:	f000 fcab 	bl	800745c <nmbs_set_byte_timeout>

	/* Set handle */
    modbus_set_server_handle(&nmbs_server);
 8006b06:	0028      	movs	r0, r5
 8006b08:	f000 f94e 	bl	8006da8 <modbus_set_server_handle>

	/* All went OK */
	return true;
 8006b0c:	0034      	movs	r4, r6
}
 8006b0e:	0020      	movs	r0, r4
 8006b10:	b015      	add	sp, #84	@ 0x54
 8006b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b14:	08006a19 	.word	0x08006a19
 8006b18:	08006a3d 	.word	0x08006a3d
 8006b1c:	08006d4d 	.word	0x08006d4d
 8006b20:	200004e4 	.word	0x200004e4
 8006b24:	08006d11 	.word	0x08006d11
 8006b28:	08006ce5 	.word	0x08006ce5
 8006b2c:	08006cb9 	.word	0x08006cb9
 8006b30:	08006c91 	.word	0x08006c91
 8006b34:	08006c79 	.word	0x08006c79
 8006b38:	08006c2d 	.word	0x08006c2d
 8006b3c:	08006c01 	.word	0x08006c01
 8006b40:	08006bed 	.word	0x08006bed
 8006b44:	08006bdb 	.word	0x08006bdb
 8006b48:	08006bc1 	.word	0x08006bc1
 8006b4c:	08006b79 	.word	0x08006b79

08006b50 <modbus_server_polling>:

bool modbus_server_polling(){
 8006b50:	b510      	push	{r4, lr}
	return modbus_polling();
 8006b52:	f000 f919 	bl	8006d88 <modbus_polling>
}
 8006b56:	bd10      	pop	{r4, pc}

08006b58 <modbus_server_set_digital_outputs>:

bool modbus_server_set_digital_outputs(const uint8_t outputs[], const uint16_t address, const uint16_t quantity){
 8006b58:	b510      	push	{r4, lr}
	return modbus_set_digital_outputs_on_server(outputs, address, quantity);
 8006b5a:	f000 f92b 	bl	8006db4 <modbus_set_digital_outputs_on_server>
}
 8006b5e:	bd10      	pop	{r4, pc}

08006b60 <modbus_server_set_digital_inputs>:

bool modbus_server_set_digital_inputs(const uint8_t inputs[], const uint16_t address, const uint16_t quantity){
 8006b60:	b510      	push	{r4, lr}
	return modbus_set_digital_inputs_on_server(inputs, address, quantity);
 8006b62:	f000 f94b 	bl	8006dfc <modbus_set_digital_inputs_on_server>
}
 8006b66:	bd10      	pop	{r4, pc}

08006b68 <modbus_server_get_analog_inputs>:

bool modbus_server_set_analog_inputs(const uint16_t inputs[], const uint16_t address, const uint16_t quantity){
	return modbus_set_analog_inputs_on_server(inputs, address, quantity);
}

uint16_t* modbus_server_get_analog_inputs(){
 8006b68:	b510      	push	{r4, lr}
	return modbus_get_analog_inputs_on_server();
 8006b6a:	f000 f96b 	bl	8006e44 <modbus_get_analog_inputs_on_server>
}
 8006b6e:	bd10      	pop	{r4, pc}

08006b70 <modbus_server_get_parameters_array>:

bool modbus_server_set_parameters(const uint16_t parameters[], const uint16_t address, const uint16_t quantity){
	return modbus_set_parameters_on_server(parameters, address, quantity);
}

uint16_t* modbus_server_get_parameters_array(){
 8006b70:	b510      	push	{r4, lr}
	return modbus_get_parameters_on_server();
 8006b72:	f000 f96b 	bl	8006e4c <modbus_get_parameters_on_server>
}
 8006b76:	bd10      	pop	{r4, pc}

08006b78 <handle_read_device_identification>:

/* Server handle */
static nmbs_t* nmbs_server = NULL;

/* (0x0E) Read Device Identification */
nmbs_error handle_read_device_identification(uint8_t object_id, char buffer[NMBS_DEVICE_IDENTIFICATION_STRING_LENGTH]) {
 8006b78:	0003      	movs	r3, r0
 8006b7a:	b510      	push	{r4, lr}
 8006b7c:	0008      	movs	r0, r1
    switch (object_id) {
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	d00f      	beq.n	8006ba2 <handle_read_device_identification+0x2a>
 8006b82:	d807      	bhi.n	8006b94 <handle_read_device_identification+0x1c>
        case 0x00:
            strcpy(buffer, "VendorName");
            break;
        case 0x01:
            strcpy(buffer, "ProductCode");
 8006b84:	4909      	ldr	r1, [pc, #36]	@ (8006bac <handle_read_device_identification+0x34>)
    switch (object_id) {
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d100      	bne.n	8006b8c <handle_read_device_identification+0x14>
            strcpy(buffer, "VendorName");
 8006b8a:	4909      	ldr	r1, [pc, #36]	@ (8006bb0 <handle_read_device_identification+0x38>)
 8006b8c:	f004 fe0b 	bl	800b7a6 <strcpy>
            break;
        default:
            return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
    }

    return NMBS_ERROR_NONE;
 8006b90:	2000      	movs	r0, #0
 8006b92:	e005      	b.n	8006ba0 <handle_read_device_identification+0x28>
    switch (object_id) {
 8006b94:	2b90      	cmp	r3, #144	@ 0x90
 8006b96:	d006      	beq.n	8006ba6 <handle_read_device_identification+0x2e>
            strcpy(buffer, "Extended 2");
 8006b98:	4906      	ldr	r1, [pc, #24]	@ (8006bb4 <handle_read_device_identification+0x3c>)
    switch (object_id) {
 8006b9a:	2ba0      	cmp	r3, #160	@ 0xa0
 8006b9c:	d0f6      	beq.n	8006b8c <handle_read_device_identification+0x14>
 8006b9e:	2002      	movs	r0, #2
}
 8006ba0:	bd10      	pop	{r4, pc}
            strcpy(buffer, "MajorMinorRevision");
 8006ba2:	4905      	ldr	r1, [pc, #20]	@ (8006bb8 <handle_read_device_identification+0x40>)
 8006ba4:	e7f2      	b.n	8006b8c <handle_read_device_identification+0x14>
            strcpy(buffer, "Extended 1");
 8006ba6:	4905      	ldr	r1, [pc, #20]	@ (8006bbc <handle_read_device_identification+0x44>)
 8006ba8:	e7f0      	b.n	8006b8c <handle_read_device_identification+0x14>
 8006baa:	46c0      	nop			@ (mov r8, r8)
 8006bac:	0800d66b 	.word	0x0800d66b
 8006bb0:	0800d660 	.word	0x0800d660
 8006bb4:	0800d695 	.word	0x0800d695
 8006bb8:	0800d677 	.word	0x0800d677
 8006bbc:	0800d68a 	.word	0x0800d68a

08006bc0 <handle_read_device_identification_map>:

/* (0x2B) Read device identification map */
nmbs_error handle_read_device_identification_map(nmbs_bitfield_256 map) {
    nmbs_bitfield_set(map, 0x00);
    nmbs_bitfield_set(map, 0x01);
    nmbs_bitfield_set(map, 0x02);
 8006bc0:	2307      	movs	r3, #7
 8006bc2:	7802      	ldrb	r2, [r0, #0]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	7003      	strb	r3, [r0, #0]
    nmbs_bitfield_set(map, 0x90);
 8006bc8:	2301      	movs	r3, #1
 8006bca:	7c82      	ldrb	r2, [r0, #18]
 8006bcc:	431a      	orrs	r2, r3
 8006bce:	7482      	strb	r2, [r0, #18]
    nmbs_bitfield_set(map, 0xA0);
 8006bd0:	7d02      	ldrb	r2, [r0, #20]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	7503      	strb	r3, [r0, #20]
    return NMBS_ERROR_NONE;
}
 8006bd6:	2000      	movs	r0, #0
 8006bd8:	4770      	bx	lr

08006bda <handle_write_file_record>:

/* (0x15) Write File Record */
nmbs_error handle_write_file_record(uint16_t file_number, uint16_t record_number, const uint16_t* registers, uint16_t count, uint8_t unit_id, void* arg) {
    if (file_number != 1) {
        return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 8006bda:	2202      	movs	r2, #2
    if (file_number != 1) {
 8006bdc:	2801      	cmp	r0, #1
 8006bde:	d103      	bne.n	8006be8 <handle_write_file_record+0xe>
    }

    if ((record_number + count) > FILE_SIZE_MAX) {
 8006be0:	18c9      	adds	r1, r1, r3
 8006be2:	1e4b      	subs	r3, r1, #1
 8006be4:	4199      	sbcs	r1, r3
 8006be6:	004a      	lsls	r2, r1, #1
    }

    memcpy(server_file + record_number, registers, count * sizeof(uint16_t));

    return NMBS_ERROR_NONE;
}
 8006be8:	0010      	movs	r0, r2
 8006bea:	4770      	bx	lr

08006bec <handle_read_file_record>:

/* (0x14) Read File Record */
nmbs_error handle_read_file_record(uint16_t file_number, uint16_t record_number, uint16_t* registers, uint16_t count, uint8_t unit_id, void* arg) {
 8006bec:	2202      	movs	r2, #2
 8006bee:	2801      	cmp	r0, #1
 8006bf0:	d103      	bne.n	8006bfa <handle_read_file_record+0xe>
 8006bf2:	18c9      	adds	r1, r1, r3
 8006bf4:	1e4b      	subs	r3, r1, #1
 8006bf6:	4199      	sbcs	r1, r3
 8006bf8:	004a      	lsls	r2, r1, #1
 8006bfa:	0010      	movs	r0, r2
 8006bfc:	4770      	bx	lr
	...

08006c00 <handle_write_multiple_registers>:

    return NMBS_ERROR_NONE;
}

/* (0x10) Write Multiple registers */
nmbs_error handle_write_multiple_registers(uint16_t address, uint16_t quantity, const uint16_t* registers, uint8_t unit_id, void* arg) {
 8006c00:	b510      	push	{r4, lr}
    if (address + quantity > HOLDING_REGISTERS_ADDR_MAX + 1)
 8006c02:	1844      	adds	r4, r0, r1
nmbs_error handle_write_multiple_registers(uint16_t address, uint16_t quantity, const uint16_t* registers, uint8_t unit_id, void* arg) {
 8006c04:	0003      	movs	r3, r0
        return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 8006c06:	2002      	movs	r0, #2
    if (address + quantity > HOLDING_REGISTERS_ADDR_MAX + 1)
 8006c08:	2c31      	cmp	r4, #49	@ 0x31
 8006c0a:	dc07      	bgt.n	8006c1c <handle_write_multiple_registers+0x1c>
 8006c0c:	4806      	ldr	r0, [pc, #24]	@ (8006c28 <handle_write_multiple_registers+0x28>)
 8006c0e:	005b      	lsls	r3, r3, #1
 8006c10:	181b      	adds	r3, r3, r0
 8006c12:	2000      	movs	r0, #0
 8006c14:	0049      	lsls	r1, r1, #1

    for (uint16_t i = 0; i < quantity; i++) {
 8006c16:	4288      	cmp	r0, r1
 8006c18:	d101      	bne.n	8006c1e <handle_write_multiple_registers+0x1e>
        server_holding_registers[address + i] = registers[i];
    }

    return NMBS_ERROR_NONE;
 8006c1a:	2000      	movs	r0, #0
}
 8006c1c:	bd10      	pop	{r4, pc}
        server_holding_registers[address + i] = registers[i];
 8006c1e:	5a14      	ldrh	r4, [r2, r0]
 8006c20:	521c      	strh	r4, [r3, r0]
    for (uint16_t i = 0; i < quantity; i++) {
 8006c22:	3002      	adds	r0, #2
 8006c24:	e7f7      	b.n	8006c16 <handle_write_multiple_registers+0x16>
 8006c26:	46c0      	nop			@ (mov r8, r8)
 8006c28:	2000059c 	.word	0x2000059c

08006c2c <handle_write_multiple_coils>:

/* (0x0F) Write Multiple Coils */
nmbs_error handle_write_multiple_coils(uint16_t address, uint16_t quantity, const nmbs_bitfield coils, uint8_t unit_id, void* arg) {
 8006c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (address + quantity > COILS_ADDR_MAX + 1) {
 8006c2e:	180c      	adds	r4, r1, r0
nmbs_error handle_write_multiple_coils(uint16_t address, uint16_t quantity, const nmbs_bitfield coils, uint8_t unit_id, void* arg) {
 8006c30:	0003      	movs	r3, r0
        return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 8006c32:	2002      	movs	r0, #2
    if (address + quantity > COILS_ADDR_MAX + 1) {
 8006c34:	2c01      	cmp	r4, #1
 8006c36:	dc10      	bgt.n	8006c5a <handle_write_multiple_coils+0x2e>
    }

    for (uint16_t i = 0; i < quantity; i++) {
        nmbs_bitfield_write(server_coils, address + i, nmbs_bitfield_read(coils, i));
 8006c38:	2601      	movs	r6, #1
 8006c3a:	0030      	movs	r0, r6
 8006c3c:	4098      	lsls	r0, r3
 8006c3e:	2400      	movs	r4, #0
 8006c40:	43c5      	mvns	r5, r0
 8006c42:	b2c0      	uxtb	r0, r0
 8006c44:	4684      	mov	ip, r0
    for (uint16_t i = 0; i < quantity; i++) {
 8006c46:	0020      	movs	r0, r4
 8006c48:	4f0a      	ldr	r7, [pc, #40]	@ (8006c74 <handle_write_multiple_coils+0x48>)
 8006c4a:	b2ed      	uxtb	r5, r5
 8006c4c:	783b      	ldrb	r3, [r7, #0]
 8006c4e:	4288      	cmp	r0, r1
 8006c50:	d104      	bne.n	8006c5c <handle_write_multiple_coils+0x30>
 8006c52:	2c00      	cmp	r4, #0
 8006c54:	d000      	beq.n	8006c58 <handle_write_multiple_coils+0x2c>
 8006c56:	703b      	strb	r3, [r7, #0]
    }

    return NMBS_ERROR_NONE;
 8006c58:	2000      	movs	r0, #0
}
 8006c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nmbs_bitfield_write(server_coils, address + i, nmbs_bitfield_read(coils, i));
 8006c5c:	7814      	ldrb	r4, [r2, #0]
 8006c5e:	4234      	tst	r4, r6
 8006c60:	d005      	beq.n	8006c6e <handle_write_multiple_coils+0x42>
 8006c62:	4664      	mov	r4, ip
 8006c64:	4323      	orrs	r3, r4
    for (uint16_t i = 0; i < quantity; i++) {
 8006c66:	3001      	adds	r0, #1
 8006c68:	0034      	movs	r4, r6
 8006c6a:	b280      	uxth	r0, r0
 8006c6c:	e7ef      	b.n	8006c4e <handle_write_multiple_coils+0x22>
        nmbs_bitfield_write(server_coils, address + i, nmbs_bitfield_read(coils, i));
 8006c6e:	402b      	ands	r3, r5
 8006c70:	e7f9      	b.n	8006c66 <handle_write_multiple_coils+0x3a>
 8006c72:	46c0      	nop			@ (mov r8, r8)
 8006c74:	200005ff 	.word	0x200005ff

08006c78 <handle_write_single_register>:

/* (0x06) Write Single Register */
nmbs_error handle_write_single_register(uint16_t address, uint16_t value, uint8_t unit_id, void* arg) {
 8006c78:	0003      	movs	r3, r0
	if (address > HOLDING_REGISTERS_ADDR_MAX + 1) {
		return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 8006c7a:	2002      	movs	r0, #2
	if (address > HOLDING_REGISTERS_ADDR_MAX + 1) {
 8006c7c:	2b31      	cmp	r3, #49	@ 0x31
 8006c7e:	d803      	bhi.n	8006c88 <handle_write_single_register+0x10>
	}

	server_holding_registers[address] = value;

	return NMBS_ERROR_NONE;
 8006c80:	2000      	movs	r0, #0
	server_holding_registers[address] = value;
 8006c82:	4a02      	ldr	r2, [pc, #8]	@ (8006c8c <handle_write_single_register+0x14>)
 8006c84:	005b      	lsls	r3, r3, #1
 8006c86:	5299      	strh	r1, [r3, r2]
}
 8006c88:	4770      	bx	lr
 8006c8a:	46c0      	nop			@ (mov r8, r8)
 8006c8c:	2000059c 	.word	0x2000059c

08006c90 <handle_write_single_coil>:

/* (0x05) Write Single Coil */
nmbs_error handle_write_single_coil(uint16_t address, bool value, uint8_t unit_id, void* arg) {
 8006c90:	b510      	push	{r4, lr}
 8006c92:	0004      	movs	r4, r0
    if (address > COILS_ADDR_MAX + 1) {
        return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 8006c94:	2002      	movs	r0, #2
    if (address > COILS_ADDR_MAX + 1) {
 8006c96:	2c01      	cmp	r4, #1
 8006c98:	d80b      	bhi.n	8006cb2 <handle_write_single_coil+0x22>
    }

	nmbs_bitfield_write(server_coils, address, nmbs_bitfield_read(&value, 0));
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	4805      	ldr	r0, [pc, #20]	@ (8006cb4 <handle_write_single_coil+0x24>)
 8006c9e:	40a2      	lsls	r2, r4
 8006ca0:	7803      	ldrb	r3, [r0, #0]
 8006ca2:	001c      	movs	r4, r3
 8006ca4:	4394      	bics	r4, r2
 8006ca6:	2900      	cmp	r1, #0
 8006ca8:	d001      	beq.n	8006cae <handle_write_single_coil+0x1e>
 8006caa:	4313      	orrs	r3, r2
 8006cac:	b2dc      	uxtb	r4, r3
 8006cae:	7004      	strb	r4, [r0, #0]

	return NMBS_ERROR_NONE;
 8006cb0:	2000      	movs	r0, #0
}
 8006cb2:	bd10      	pop	{r4, pc}
 8006cb4:	200005ff 	.word	0x200005ff

08006cb8 <handle_read_input_registers>:

/* (0x04) Read Input Registers */
nmbs_error handle_read_input_registers(uint16_t address, uint16_t quantity, uint16_t* registers_out, uint8_t unit_id, void* arg){
 8006cb8:	b510      	push	{r4, lr}
    if (address + quantity > INPUT_REGISTERS_ADDR_MAX + 1) {
 8006cba:	1844      	adds	r4, r0, r1
nmbs_error handle_read_input_registers(uint16_t address, uint16_t quantity, uint16_t* registers_out, uint8_t unit_id, void* arg){
 8006cbc:	0003      	movs	r3, r0
        return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 8006cbe:	2002      	movs	r0, #2
    if (address + quantity > INPUT_REGISTERS_ADDR_MAX + 1) {
 8006cc0:	2c0e      	cmp	r4, #14
 8006cc2:	dc07      	bgt.n	8006cd4 <handle_read_input_registers+0x1c>
 8006cc4:	4806      	ldr	r0, [pc, #24]	@ (8006ce0 <handle_read_input_registers+0x28>)
 8006cc6:	005b      	lsls	r3, r3, #1
 8006cc8:	181b      	adds	r3, r3, r0
 8006cca:	2000      	movs	r0, #0
 8006ccc:	0049      	lsls	r1, r1, #1
    }

    for (uint16_t i = 0; i < quantity; i++){
 8006cce:	4288      	cmp	r0, r1
 8006cd0:	d101      	bne.n	8006cd6 <handle_read_input_registers+0x1e>
        registers_out[i] = server_input_registers[address + i];
    }

    return NMBS_ERROR_NONE;
 8006cd2:	2000      	movs	r0, #0
}
 8006cd4:	bd10      	pop	{r4, pc}
        registers_out[i] = server_input_registers[address + i];
 8006cd6:	5a1c      	ldrh	r4, [r3, r0]
 8006cd8:	5214      	strh	r4, [r2, r0]
    for (uint16_t i = 0; i < quantity; i++){
 8006cda:	3002      	adds	r0, #2
 8006cdc:	e7f7      	b.n	8006cce <handle_read_input_registers+0x16>
 8006cde:	46c0      	nop			@ (mov r8, r8)
 8006ce0:	20000580 	.word	0x20000580

08006ce4 <handle_read_holding_registers>:

/* (0x03) Read Holding Registers */
nmbs_error handle_read_holding_registers(uint16_t address, uint16_t quantity, uint16_t* registers_out, uint8_t unit_id, void* arg) {
 8006ce4:	b510      	push	{r4, lr}
    if (address + quantity > HOLDING_REGISTERS_ADDR_MAX + 1) {
 8006ce6:	1844      	adds	r4, r0, r1
nmbs_error handle_read_holding_registers(uint16_t address, uint16_t quantity, uint16_t* registers_out, uint8_t unit_id, void* arg) {
 8006ce8:	0003      	movs	r3, r0
        return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 8006cea:	2002      	movs	r0, #2
    if (address + quantity > HOLDING_REGISTERS_ADDR_MAX + 1) {
 8006cec:	2c31      	cmp	r4, #49	@ 0x31
 8006cee:	dc07      	bgt.n	8006d00 <handle_read_holding_registers+0x1c>
 8006cf0:	4806      	ldr	r0, [pc, #24]	@ (8006d0c <handle_read_holding_registers+0x28>)
 8006cf2:	005b      	lsls	r3, r3, #1
 8006cf4:	181b      	adds	r3, r3, r0
 8006cf6:	2000      	movs	r0, #0
 8006cf8:	0049      	lsls	r1, r1, #1
    }

    for (uint16_t i = 0; i < quantity; i++){
 8006cfa:	4288      	cmp	r0, r1
 8006cfc:	d101      	bne.n	8006d02 <handle_read_holding_registers+0x1e>
        registers_out[i] = server_holding_registers[address + i];
    }

    return NMBS_ERROR_NONE;
 8006cfe:	2000      	movs	r0, #0
}
 8006d00:	bd10      	pop	{r4, pc}
        registers_out[i] = server_holding_registers[address + i];
 8006d02:	5a1c      	ldrh	r4, [r3, r0]
 8006d04:	5214      	strh	r4, [r2, r0]
    for (uint16_t i = 0; i < quantity; i++){
 8006d06:	3002      	adds	r0, #2
 8006d08:	e7f7      	b.n	8006cfa <handle_read_holding_registers+0x16>
 8006d0a:	46c0      	nop			@ (mov r8, r8)
 8006d0c:	2000059c 	.word	0x2000059c

08006d10 <handle_read_discrete_inputs>:

/* (0x02) Read Discrete Inputs */
nmbs_error handle_read_discrete_inputs(uint16_t address, uint16_t quantity, nmbs_bitfield inputs_out, uint8_t unit_id, void* arg){
 8006d10:	b570      	push	{r4, r5, r6, lr}
    if (address + quantity > INPUTS_ADDR_MAX + 1) {
 8006d12:	180c      	adds	r4, r1, r0
nmbs_error handle_read_discrete_inputs(uint16_t address, uint16_t quantity, nmbs_bitfield inputs_out, uint8_t unit_id, void* arg){
 8006d14:	0003      	movs	r3, r0
        return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 8006d16:	2002      	movs	r0, #2
    if (address + quantity > INPUTS_ADDR_MAX + 1) {
 8006d18:	2c01      	cmp	r4, #1
 8006d1a:	dc08      	bgt.n	8006d2e <handle_read_discrete_inputs+0x1e>
    }

    for (uint16_t i = 0; i < quantity; i++) {
        bool value = nmbs_bitfield_read(server_inputs, address + i);
 8006d1c:	480a      	ldr	r0, [pc, #40]	@ (8006d48 <handle_read_discrete_inputs+0x38>)
 8006d1e:	2401      	movs	r4, #1
 8006d20:	7800      	ldrb	r0, [r0, #0]
 8006d22:	4118      	asrs	r0, r3
    for (uint16_t i = 0; i < quantity; i++) {
 8006d24:	2300      	movs	r3, #0
        bool value = nmbs_bitfield_read(server_inputs, address + i);
 8006d26:	4020      	ands	r0, r4
    for (uint16_t i = 0; i < quantity; i++) {
 8006d28:	428b      	cmp	r3, r1
 8006d2a:	d101      	bne.n	8006d30 <handle_read_discrete_inputs+0x20>
        nmbs_bitfield_write(inputs_out, i, value);
    }

    return NMBS_ERROR_NONE;
 8006d2c:	2000      	movs	r0, #0
}
 8006d2e:	bd70      	pop	{r4, r5, r6, pc}
        nmbs_bitfield_write(inputs_out, i, value);
 8006d30:	7816      	ldrb	r6, [r2, #0]
 8006d32:	0035      	movs	r5, r6
 8006d34:	43a5      	bics	r5, r4
 8006d36:	2800      	cmp	r0, #0
 8006d38:	d001      	beq.n	8006d3e <handle_read_discrete_inputs+0x2e>
 8006d3a:	0035      	movs	r5, r6
 8006d3c:	4325      	orrs	r5, r4
 8006d3e:	08de      	lsrs	r6, r3, #3
    for (uint16_t i = 0; i < quantity; i++) {
 8006d40:	3301      	adds	r3, #1
        nmbs_bitfield_write(inputs_out, i, value);
 8006d42:	5595      	strb	r5, [r2, r6]
    for (uint16_t i = 0; i < quantity; i++) {
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	e7ef      	b.n	8006d28 <handle_read_discrete_inputs+0x18>
 8006d48:	200005fe 	.word	0x200005fe

08006d4c <handle_read_coils>:

/* (0x01) Read Coils */
nmbs_error handle_read_coils(uint16_t address, uint16_t quantity, nmbs_bitfield coils_out, uint8_t unit_id, void* arg) {
 8006d4c:	b570      	push	{r4, r5, r6, lr}
    if (address + quantity > COILS_ADDR_MAX + 1) {
 8006d4e:	180c      	adds	r4, r1, r0
nmbs_error handle_read_coils(uint16_t address, uint16_t quantity, nmbs_bitfield coils_out, uint8_t unit_id, void* arg) {
 8006d50:	0003      	movs	r3, r0
        return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 8006d52:	2002      	movs	r0, #2
    if (address + quantity > COILS_ADDR_MAX + 1) {
 8006d54:	2c01      	cmp	r4, #1
 8006d56:	dc08      	bgt.n	8006d6a <handle_read_coils+0x1e>
    }

    for (uint16_t i = 0; i < quantity; i++) {
        bool value = nmbs_bitfield_read(server_coils, address + i);
 8006d58:	480a      	ldr	r0, [pc, #40]	@ (8006d84 <handle_read_coils+0x38>)
 8006d5a:	2401      	movs	r4, #1
 8006d5c:	7800      	ldrb	r0, [r0, #0]
 8006d5e:	4118      	asrs	r0, r3
    for (uint16_t i = 0; i < quantity; i++) {
 8006d60:	2300      	movs	r3, #0
        bool value = nmbs_bitfield_read(server_coils, address + i);
 8006d62:	4020      	ands	r0, r4
    for (uint16_t i = 0; i < quantity; i++) {
 8006d64:	428b      	cmp	r3, r1
 8006d66:	d101      	bne.n	8006d6c <handle_read_coils+0x20>
        nmbs_bitfield_write(coils_out, i, value);
    }

    return NMBS_ERROR_NONE;
 8006d68:	2000      	movs	r0, #0
}
 8006d6a:	bd70      	pop	{r4, r5, r6, pc}
        nmbs_bitfield_write(coils_out, i, value);
 8006d6c:	7816      	ldrb	r6, [r2, #0]
 8006d6e:	0035      	movs	r5, r6
 8006d70:	43a5      	bics	r5, r4
 8006d72:	2800      	cmp	r0, #0
 8006d74:	d001      	beq.n	8006d7a <handle_read_coils+0x2e>
 8006d76:	0035      	movs	r5, r6
 8006d78:	4325      	orrs	r5, r4
 8006d7a:	08de      	lsrs	r6, r3, #3
    for (uint16_t i = 0; i < quantity; i++) {
 8006d7c:	3301      	adds	r3, #1
        nmbs_bitfield_write(coils_out, i, value);
 8006d7e:	5595      	strb	r5, [r2, r6]
    for (uint16_t i = 0; i < quantity; i++) {
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	e7ef      	b.n	8006d64 <handle_read_coils+0x18>
 8006d84:	200005ff 	.word	0x200005ff

08006d88 <modbus_polling>:

bool modbus_polling(){
	if(nmbs_server){
		nmbs_error err = nmbs_server_poll(nmbs_server);
		if (err != NMBS_ERROR_NONE) {
			return false;
 8006d88:	2000      	movs	r0, #0
	if(nmbs_server){
 8006d8a:	4b06      	ldr	r3, [pc, #24]	@ (8006da4 <modbus_polling+0x1c>)
bool modbus_polling(){
 8006d8c:	b510      	push	{r4, lr}
	if(nmbs_server){
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4283      	cmp	r3, r0
 8006d92:	d005      	beq.n	8006da0 <modbus_polling+0x18>
		nmbs_error err = nmbs_server_poll(nmbs_server);
 8006d94:	0018      	movs	r0, r3
 8006d96:	f000 fcf9 	bl	800778c <nmbs_server_poll>
		if (err != NMBS_ERROR_NONE) {
 8006d9a:	4243      	negs	r3, r0
 8006d9c:	4158      	adcs	r0, r3
 8006d9e:	b2c0      	uxtb	r0, r0
		}
		return true;
	}
	return false;
}
 8006da0:	bd10      	pop	{r4, pc}
 8006da2:	46c0      	nop			@ (mov r8, r8)
 8006da4:	2000057c 	.word	0x2000057c

08006da8 <modbus_set_server_handle>:

void modbus_set_server_handle(nmbs_t* handle){
	nmbs_server = handle;
 8006da8:	4b01      	ldr	r3, [pc, #4]	@ (8006db0 <modbus_set_server_handle+0x8>)
 8006daa:	6018      	str	r0, [r3, #0]
}
 8006dac:	4770      	bx	lr
 8006dae:	46c0      	nop			@ (mov r8, r8)
 8006db0:	2000057c 	.word	0x2000057c

08006db4 <modbus_set_digital_outputs_on_server>:

bool modbus_set_digital_outputs_on_server(const uint8_t outputs[], const uint16_t address, const uint16_t quantity){
    if (address + quantity > COILS_ADDR_MAX + 1) {
 8006db4:	1853      	adds	r3, r2, r1
bool modbus_set_digital_outputs_on_server(const uint8_t outputs[], const uint16_t address, const uint16_t quantity){
 8006db6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006db8:	0005      	movs	r5, r0
        return false;
 8006dba:	2000      	movs	r0, #0
    if (address + quantity > COILS_ADDR_MAX + 1) {
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	dc10      	bgt.n	8006de2 <modbus_set_digital_outputs_on_server+0x2e>
    }

    for (uint16_t i = 0; i < quantity; i++) {
        bool value = nmbs_bitfield_read(outputs, i);
        nmbs_bitfield_write(server_coils, address + i, value);
 8006dc0:	2701      	movs	r7, #1
 8006dc2:	003c      	movs	r4, r7
 8006dc4:	408c      	lsls	r4, r1
 8006dc6:	43e6      	mvns	r6, r4
    for (uint16_t i = 0; i < quantity; i++) {
 8006dc8:	0001      	movs	r1, r0
 8006dca:	4b0b      	ldr	r3, [pc, #44]	@ (8006df8 <modbus_set_digital_outputs_on_server+0x44>)
 8006dcc:	b2f6      	uxtb	r6, r6
 8006dce:	469c      	mov	ip, r3
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	b2e4      	uxtb	r4, r4
 8006dd4:	4291      	cmp	r1, r2
 8006dd6:	d105      	bne.n	8006de4 <modbus_set_digital_outputs_on_server+0x30>
 8006dd8:	2800      	cmp	r0, #0
 8006dda:	d001      	beq.n	8006de0 <modbus_set_digital_outputs_on_server+0x2c>
 8006ddc:	4662      	mov	r2, ip
 8006dde:	7013      	strb	r3, [r2, #0]
    }

    return true;
 8006de0:	2001      	movs	r0, #1
}
 8006de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nmbs_bitfield_write(server_coils, address + i, value);
 8006de4:	7828      	ldrb	r0, [r5, #0]
 8006de6:	4238      	tst	r0, r7
 8006de8:	d004      	beq.n	8006df4 <modbus_set_digital_outputs_on_server+0x40>
 8006dea:	4323      	orrs	r3, r4
    for (uint16_t i = 0; i < quantity; i++) {
 8006dec:	3101      	adds	r1, #1
 8006dee:	0038      	movs	r0, r7
 8006df0:	b289      	uxth	r1, r1
 8006df2:	e7ef      	b.n	8006dd4 <modbus_set_digital_outputs_on_server+0x20>
        nmbs_bitfield_write(server_coils, address + i, value);
 8006df4:	4033      	ands	r3, r6
 8006df6:	e7f9      	b.n	8006dec <modbus_set_digital_outputs_on_server+0x38>
 8006df8:	200005ff 	.word	0x200005ff

08006dfc <modbus_set_digital_inputs_on_server>:

bool modbus_set_digital_inputs_on_server(const uint8_t inputs[], const uint16_t address, const uint16_t quantity){
    if (address + quantity > INPUTS_ADDR_MAX + 1) {
 8006dfc:	1853      	adds	r3, r2, r1
bool modbus_set_digital_inputs_on_server(const uint8_t inputs[], const uint16_t address, const uint16_t quantity){
 8006dfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e00:	0005      	movs	r5, r0
        return false;
 8006e02:	2000      	movs	r0, #0
    if (address + quantity > INPUTS_ADDR_MAX + 1) {
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	dc10      	bgt.n	8006e2a <modbus_set_digital_inputs_on_server+0x2e>
    }

    for (uint16_t i = 0; i < quantity; i++) {
        bool value = nmbs_bitfield_read(inputs, i);
        nmbs_bitfield_write(server_inputs, address + i, value);
 8006e08:	2701      	movs	r7, #1
 8006e0a:	003c      	movs	r4, r7
 8006e0c:	408c      	lsls	r4, r1
 8006e0e:	43e6      	mvns	r6, r4
    for (uint16_t i = 0; i < quantity; i++) {
 8006e10:	0001      	movs	r1, r0
 8006e12:	4b0b      	ldr	r3, [pc, #44]	@ (8006e40 <modbus_set_digital_inputs_on_server+0x44>)
 8006e14:	b2f6      	uxtb	r6, r6
 8006e16:	469c      	mov	ip, r3
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	b2e4      	uxtb	r4, r4
 8006e1c:	4291      	cmp	r1, r2
 8006e1e:	d105      	bne.n	8006e2c <modbus_set_digital_inputs_on_server+0x30>
 8006e20:	2800      	cmp	r0, #0
 8006e22:	d001      	beq.n	8006e28 <modbus_set_digital_inputs_on_server+0x2c>
 8006e24:	4662      	mov	r2, ip
 8006e26:	7013      	strb	r3, [r2, #0]
    }

    return true;
 8006e28:	2001      	movs	r0, #1
}
 8006e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nmbs_bitfield_write(server_inputs, address + i, value);
 8006e2c:	7828      	ldrb	r0, [r5, #0]
 8006e2e:	4238      	tst	r0, r7
 8006e30:	d004      	beq.n	8006e3c <modbus_set_digital_inputs_on_server+0x40>
 8006e32:	4323      	orrs	r3, r4
    for (uint16_t i = 0; i < quantity; i++) {
 8006e34:	3101      	adds	r1, #1
 8006e36:	0038      	movs	r0, r7
 8006e38:	b289      	uxth	r1, r1
 8006e3a:	e7ef      	b.n	8006e1c <modbus_set_digital_inputs_on_server+0x20>
        nmbs_bitfield_write(server_inputs, address + i, value);
 8006e3c:	4033      	ands	r3, r6
 8006e3e:	e7f9      	b.n	8006e34 <modbus_set_digital_inputs_on_server+0x38>
 8006e40:	200005fe 	.word	0x200005fe

08006e44 <modbus_get_analog_inputs_on_server>:

    return true;
}

uint16_t* modbus_get_analog_inputs_on_server(){
	return server_input_registers;
 8006e44:	4800      	ldr	r0, [pc, #0]	@ (8006e48 <modbus_get_analog_inputs_on_server+0x4>)
}
 8006e46:	4770      	bx	lr
 8006e48:	20000580 	.word	0x20000580

08006e4c <modbus_get_parameters_on_server>:

    return true;
}

uint16_t* modbus_get_parameters_on_server(){
	return server_holding_registers;
 8006e4c:	4800      	ldr	r0, [pc, #0]	@ (8006e50 <modbus_get_parameters_on_server+0x4>)
}
 8006e4e:	4770      	bx	lr
 8006e50:	2000059c 	.word	0x2000059c

08006e54 <get_1>:
#else
#define NMBS_DEBUG_PRINT(...) (void) (0)
#endif


static uint8_t get_1(nmbs_t* nmbs) {
 8006e54:	0003      	movs	r3, r0
    uint8_t result = nmbs->msg.buf[nmbs->msg.buf_idx];
 8006e56:	8e42      	ldrh	r2, [r0, #50]	@ 0x32
 8006e58:	5c80      	ldrb	r0, [r0, r2]
    nmbs->msg.buf_idx++;
 8006e5a:	3201      	adds	r2, #1
 8006e5c:	865a      	strh	r2, [r3, #50]	@ 0x32
    return result;
}
 8006e5e:	4770      	bx	lr

08006e60 <put_1>:


static void put_1(nmbs_t* nmbs, uint8_t data) {
    nmbs->msg.buf[nmbs->msg.buf_idx] = data;
 8006e60:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 8006e62:	54c1      	strb	r1, [r0, r3]
    nmbs->msg.buf_idx++;
 8006e64:	3301      	adds	r3, #1
 8006e66:	8643      	strh	r3, [r0, #50]	@ 0x32
}
 8006e68:	4770      	bx	lr

08006e6a <get_2>:
}
#endif
#endif


static uint16_t get_2(nmbs_t* nmbs) {
 8006e6a:	0003      	movs	r3, r0
    const uint16_t result =
            ((uint16_t) nmbs->msg.buf[nmbs->msg.buf_idx]) << 8 | (uint16_t) nmbs->msg.buf[nmbs->msg.buf_idx + 1];
 8006e6c:	8e42      	ldrh	r2, [r0, #50]	@ 0x32
 8006e6e:	5c81      	ldrb	r1, [r0, r2]
 8006e70:	1880      	adds	r0, r0, r2
 8006e72:	7840      	ldrb	r0, [r0, #1]
 8006e74:	0209      	lsls	r1, r1, #8
    nmbs->msg.buf_idx += 2;
 8006e76:	3202      	adds	r2, #2
    const uint16_t result =
 8006e78:	4308      	orrs	r0, r1
    nmbs->msg.buf_idx += 2;
 8006e7a:	865a      	strh	r2, [r3, #50]	@ 0x32
    return result;
}
 8006e7c:	4770      	bx	lr

08006e7e <put_2>:


static void put_2(nmbs_t* nmbs, uint16_t data) {
    nmbs->msg.buf[nmbs->msg.buf_idx] = (uint8_t) ((data >> 8) & 0xFFU);
 8006e7e:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 8006e80:	0a0a      	lsrs	r2, r1, #8
 8006e82:	54c2      	strb	r2, [r0, r3]
    nmbs->msg.buf[nmbs->msg.buf_idx + 1] = (uint8_t) data;
 8006e84:	18c2      	adds	r2, r0, r3
    nmbs->msg.buf_idx += 2;
 8006e86:	3302      	adds	r3, #2
    nmbs->msg.buf[nmbs->msg.buf_idx + 1] = (uint8_t) data;
 8006e88:	7051      	strb	r1, [r2, #1]
    nmbs->msg.buf_idx += 2;
 8006e8a:	8643      	strh	r3, [r0, #50]	@ 0x32
}
 8006e8c:	4770      	bx	lr
	...

08006e90 <swap_regs>:
    }
}
#endif


static void swap_regs(uint16_t* data, uint16_t n) {
 8006e90:	b510      	push	{r4, lr}
    while (n--) {
 8006e92:	4c05      	ldr	r4, [pc, #20]	@ (8006ea8 <swap_regs+0x18>)
 8006e94:	3901      	subs	r1, #1
 8006e96:	b289      	uxth	r1, r1
 8006e98:	42a1      	cmp	r1, r4
 8006e9a:	d100      	bne.n	8006e9e <swap_regs+0xe>
        data[n] = (data[n] << 8) | ((data[n] >> 8) & 0xFF);
    }
}
 8006e9c:	bd10      	pop	{r4, pc}
        data[n] = (data[n] << 8) | ((data[n] >> 8) & 0xFF);
 8006e9e:	004a      	lsls	r2, r1, #1
 8006ea0:	5a83      	ldrh	r3, [r0, r2]
 8006ea2:	ba5b      	rev16	r3, r3
 8006ea4:	5283      	strh	r3, [r0, r2]
 8006ea6:	e7f5      	b.n	8006e94 <swap_regs+0x4>
 8006ea8:	0000ffff 	.word	0x0000ffff

08006eac <recv>:


static nmbs_error recv(nmbs_t* nmbs, uint16_t count) {
    if (nmbs->msg.complete) {
 8006eac:	0003      	movs	r3, r0
static nmbs_error recv(nmbs_t* nmbs, uint16_t count) {
 8006eae:	b570      	push	{r4, r5, r6, lr}
    if (nmbs->msg.complete) {
 8006eb0:	333a      	adds	r3, #58	@ 0x3a
 8006eb2:	781b      	ldrb	r3, [r3, #0]
static nmbs_error recv(nmbs_t* nmbs, uint16_t count) {
 8006eb4:	0002      	movs	r2, r0
 8006eb6:	000c      	movs	r4, r1
    if (nmbs->msg.complete) {
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d001      	beq.n	8006ec0 <recv+0x14>
        return NMBS_ERROR_NONE;
 8006ebc:	2000      	movs	r0, #0

        return NMBS_ERROR_TIMEOUT;
    }

    return NMBS_ERROR_TRANSPORT;
}
 8006ebe:	bd70      	pop	{r4, r5, r6, pc}
            nmbs->platform.read(nmbs->msg.buf + nmbs->msg.buf_idx, count, nmbs->byte_timeout_ms, nmbs->platform.arg);
 8006ec0:	0003      	movs	r3, r0
 8006ec2:	8e40      	ldrh	r0, [r0, #50]	@ 0x32
 8006ec4:	1d11      	adds	r1, r2, #4
 8006ec6:	338c      	adds	r3, #140	@ 0x8c
 8006ec8:	6fcd      	ldr	r5, [r1, #124]	@ 0x7c
 8006eca:	1810      	adds	r0, r2, r0
 8006ecc:	0021      	movs	r1, r4
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006ed2:	47a8      	blx	r5
    if (ret == count)
 8006ed4:	4284      	cmp	r4, r0
 8006ed6:	d0f1      	beq.n	8006ebc <recv+0x10>
            return NMBS_ERROR_TRANSPORT;
 8006ed8:	42a0      	cmp	r0, r4
 8006eda:	4180      	sbcs	r0, r0
 8006edc:	4240      	negs	r0, r0
 8006ede:	3804      	subs	r0, #4
 8006ee0:	e7ed      	b.n	8006ebe <recv+0x12>

08006ee2 <flush>:
    return NMBS_ERROR_TRANSPORT;
}


static void flush(nmbs_t* nmbs) {
    nmbs->platform.read(nmbs->msg.buf, sizeof(nmbs->msg.buf), 0, nmbs->platform.arg);
 8006ee2:	0003      	movs	r3, r0
static void flush(nmbs_t* nmbs) {
 8006ee4:	b510      	push	{r4, lr}
    nmbs->platform.read(nmbs->msg.buf, sizeof(nmbs->msg.buf), 0, nmbs->platform.arg);
 8006ee6:	1d02      	adds	r2, r0, #4
 8006ee8:	338c      	adds	r3, #140	@ 0x8c
 8006eea:	6fd4      	ldr	r4, [r2, #124]	@ 0x7c
 8006eec:	2132      	movs	r1, #50	@ 0x32
 8006eee:	2200      	movs	r2, #0
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	47a0      	blx	r4
}
 8006ef4:	bd10      	pop	{r4, pc}
	...

08006ef8 <nmbs_crc_calc>:
void nmbs_set_platform_arg(nmbs_t* nmbs, void* arg) {
    nmbs->platform.arg = arg;
}


uint16_t nmbs_crc_calc(const uint8_t* data, uint32_t length, void* arg) {
 8006ef8:	b570      	push	{r4, r5, r6, lr}
 8006efa:	2401      	movs	r4, #1
    NMBS_UNUSED_PARAM(arg);
    uint16_t crc = 0xFFFF;
 8006efc:	4b0a      	ldr	r3, [pc, #40]	@ (8006f28 <nmbs_crc_calc+0x30>)
    for (uint32_t i = 0; i < length; i++) {
        crc ^= (uint16_t) data[i];
        for (int j = 8; j != 0; j--) {
            if ((crc & 0x0001) != 0) {
                crc >>= 1;
                crc ^= 0xA001;
 8006efe:	4d0b      	ldr	r5, [pc, #44]	@ (8006f2c <nmbs_crc_calc+0x34>)
 8006f00:	1841      	adds	r1, r0, r1
    for (uint32_t i = 0; i < length; i++) {
 8006f02:	4288      	cmp	r0, r1
 8006f04:	d102      	bne.n	8006f0c <nmbs_crc_calc+0x14>
            else
                crc >>= 1;
        }
    }

    return (uint16_t) (crc << 8) | (uint16_t) (crc >> 8);
 8006f06:	ba58      	rev16	r0, r3
 8006f08:	b280      	uxth	r0, r0
}
 8006f0a:	bd70      	pop	{r4, r5, r6, pc}
        crc ^= (uint16_t) data[i];
 8006f0c:	7802      	ldrb	r2, [r0, #0]
 8006f0e:	4053      	eors	r3, r2
 8006f10:	2208      	movs	r2, #8
            if ((crc & 0x0001) != 0) {
 8006f12:	001e      	movs	r6, r3
                crc >>= 1;
 8006f14:	085b      	lsrs	r3, r3, #1
 8006f16:	4026      	ands	r6, r4
            if ((crc & 0x0001) != 0) {
 8006f18:	d001      	beq.n	8006f1e <nmbs_crc_calc+0x26>
                crc ^= 0xA001;
 8006f1a:	406b      	eors	r3, r5
 8006f1c:	b29b      	uxth	r3, r3
        for (int j = 8; j != 0; j--) {
 8006f1e:	3a01      	subs	r2, #1
 8006f20:	2a00      	cmp	r2, #0
 8006f22:	d1f6      	bne.n	8006f12 <nmbs_crc_calc+0x1a>
    for (uint32_t i = 0; i < length; i++) {
 8006f24:	3001      	adds	r0, #1
 8006f26:	e7ec      	b.n	8006f02 <nmbs_crc_calc+0xa>
 8006f28:	0000ffff 	.word	0x0000ffff
 8006f2c:	ffffa001 	.word	0xffffa001

08006f30 <recv_msg_footer>:

static nmbs_error recv_msg_footer(nmbs_t* nmbs) {
    NMBS_DEBUG_PRINT("\n");

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 8006f30:	0003      	movs	r3, r0
static nmbs_error recv_msg_footer(nmbs_t* nmbs) {
 8006f32:	b570      	push	{r4, r5, r6, lr}
    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 8006f34:	337c      	adds	r3, #124	@ 0x7c
 8006f36:	781b      	ldrb	r3, [r3, #0]
static nmbs_error recv_msg_footer(nmbs_t* nmbs) {
 8006f38:	0004      	movs	r4, r0
    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d111      	bne.n	8006f62 <recv_msg_footer+0x32>
        uint16_t crc = nmbs->platform.crc_calc(nmbs->msg.buf, nmbs->msg.buf_idx, nmbs->platform.arg);
 8006f3e:	0003      	movs	r3, r0
 8006f40:	3388      	adds	r3, #136	@ 0x88
 8006f42:	8e41      	ldrh	r1, [r0, #50]	@ 0x32
 8006f44:	681d      	ldr	r5, [r3, #0]
 8006f46:	685a      	ldr	r2, [r3, #4]
 8006f48:	47a8      	blx	r5

        nmbs_error err = recv(nmbs, 2);
 8006f4a:	2102      	movs	r1, #2
        uint16_t crc = nmbs->platform.crc_calc(nmbs->msg.buf, nmbs->msg.buf_idx, nmbs->platform.arg);
 8006f4c:	0005      	movs	r5, r0
        nmbs_error err = recv(nmbs, 2);
 8006f4e:	0020      	movs	r0, r4
 8006f50:	f7ff ffac 	bl	8006eac <recv>
        if (err != NMBS_ERROR_NONE)
 8006f54:	2800      	cmp	r0, #0
 8006f56:	d105      	bne.n	8006f64 <recv_msg_footer+0x34>
            return err;

        uint16_t recv_crc = get_2(nmbs);
 8006f58:	0020      	movs	r0, r4
 8006f5a:	f7ff ff86 	bl	8006e6a <get_2>

        if (recv_crc != crc)
 8006f5e:	4285      	cmp	r5, r0
 8006f60:	d101      	bne.n	8006f66 <recv_msg_footer+0x36>
            return NMBS_ERROR_CRC;
    }

    return NMBS_ERROR_NONE;
 8006f62:	2000      	movs	r0, #0
}
 8006f64:	bd70      	pop	{r4, r5, r6, pc}
            return NMBS_ERROR_CRC;
 8006f66:	2005      	movs	r0, #5
 8006f68:	4240      	negs	r0, r0
 8006f6a:	e7fb      	b.n	8006f64 <recv_msg_footer+0x34>

08006f6c <recv_msg_header>:


static nmbs_error recv_msg_header(nmbs_t* nmbs, bool* first_byte_received) {
    // We wait for the read timeout here, just for the first message byte
    int32_t old_byte_timeout = nmbs->byte_timeout_ms;
    nmbs->byte_timeout_ms = nmbs->read_timeout_ms;
 8006f6c:	6f83      	ldr	r3, [r0, #120]	@ 0x78
static nmbs_error recv_msg_header(nmbs_t* nmbs, bool* first_byte_received) {
 8006f6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    nmbs->msg.complete = false;
 8006f70:	0002      	movs	r2, r0
    int32_t old_byte_timeout = nmbs->byte_timeout_ms;
 8006f72:	6f47      	ldr	r7, [r0, #116]	@ 0x74
    nmbs->byte_timeout_ms = nmbs->read_timeout_ms;
 8006f74:	6743      	str	r3, [r0, #116]	@ 0x74
    nmbs->msg.buf_idx = 0;
 8006f76:	2300      	movs	r3, #0
    nmbs->msg.complete = false;
 8006f78:	323a      	adds	r2, #58	@ 0x3a
    nmbs->msg.buf_idx = 0;
 8006f7a:	8643      	strh	r3, [r0, #50]	@ 0x32
    nmbs->msg.unit_id = 0;
 8006f7c:	6343      	str	r3, [r0, #52]	@ 0x34
    nmbs->msg.broadcast = false;
 8006f7e:	8703      	strh	r3, [r0, #56]	@ 0x38
    nmbs->msg.complete = false;
 8006f80:	7013      	strb	r3, [r2, #0]

    msg_state_reset(nmbs);

    *first_byte_received = false;
 8006f82:	700b      	strb	r3, [r1, #0]

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 8006f84:	0003      	movs	r3, r0
    nmbs->msg.complete = false;
 8006f86:	9201      	str	r2, [sp, #4]
    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 8006f88:	337c      	adds	r3, #124	@ 0x7c
 8006f8a:	781e      	ldrb	r6, [r3, #0]
static nmbs_error recv_msg_header(nmbs_t* nmbs, bool* first_byte_received) {
 8006f8c:	0004      	movs	r4, r0
 8006f8e:	000d      	movs	r5, r1
    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 8006f90:	2e01      	cmp	r6, #1
 8006f92:	d119      	bne.n	8006fc8 <recv_msg_header+0x5c>
        nmbs_error err = recv(nmbs, 1);
 8006f94:	0031      	movs	r1, r6
 8006f96:	f7ff ff89 	bl	8006eac <recv>

        nmbs->byte_timeout_ms = old_byte_timeout;
 8006f9a:	6767      	str	r7, [r4, #116]	@ 0x74

        if (err != NMBS_ERROR_NONE)
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	d145      	bne.n	800702c <recv_msg_header+0xc0>
            return err;

        *first_byte_received = true;

        nmbs->msg.unit_id = get_1(nmbs);
 8006fa0:	0020      	movs	r0, r4
        *first_byte_received = true;
 8006fa2:	702e      	strb	r6, [r5, #0]
        nmbs->msg.unit_id = get_1(nmbs);
 8006fa4:	f7ff ff56 	bl	8006e54 <get_1>
 8006fa8:	0023      	movs	r3, r4
 8006faa:	3334      	adds	r3, #52	@ 0x34
 8006fac:	7018      	strb	r0, [r3, #0]

        err = recv(nmbs, 1);
 8006fae:	0031      	movs	r1, r6
 8006fb0:	0020      	movs	r0, r4
 8006fb2:	f7ff ff7b 	bl	8006eac <recv>
        if (err != NMBS_ERROR_NONE)
 8006fb6:	2800      	cmp	r0, #0
 8006fb8:	d138      	bne.n	800702c <recv_msg_header+0xc0>
            return err;

        nmbs->msg.fc = get_1(nmbs);
 8006fba:	0020      	movs	r0, r4
 8006fbc:	f7ff ff4a 	bl	8006e54 <get_1>
 8006fc0:	3435      	adds	r4, #53	@ 0x35
 8006fc2:	7020      	strb	r0, [r4, #0]
            return NMBS_ERROR_INVALID_TCP_MBAP;

        nmbs->msg.complete = true;
    }

    return NMBS_ERROR_NONE;
 8006fc4:	2000      	movs	r0, #0
 8006fc6:	e031      	b.n	800702c <recv_msg_header+0xc0>
    else if (nmbs->platform.transport == NMBS_TRANSPORT_TCP) {
 8006fc8:	2e02      	cmp	r6, #2
 8006fca:	d1fb      	bne.n	8006fc4 <recv_msg_header+0x58>
        nmbs_error err = recv(nmbs, 1);
 8006fcc:	2101      	movs	r1, #1
 8006fce:	f7ff ff6d 	bl	8006eac <recv>
        nmbs->byte_timeout_ms = old_byte_timeout;
 8006fd2:	6767      	str	r7, [r4, #116]	@ 0x74
        if (err != NMBS_ERROR_NONE)
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	d129      	bne.n	800702c <recv_msg_header+0xc0>
        *first_byte_received = true;
 8006fd8:	3e01      	subs	r6, #1
 8006fda:	702e      	strb	r6, [r5, #0]
    nmbs->msg.buf_idx++;
 8006fdc:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
        err = recv(nmbs, 7);
 8006fde:	2107      	movs	r1, #7
    nmbs->msg.buf_idx++;
 8006fe0:	199b      	adds	r3, r3, r6
        err = recv(nmbs, 7);
 8006fe2:	0020      	movs	r0, r4
    nmbs->msg.buf_idx++;
 8006fe4:	8663      	strh	r3, [r4, #50]	@ 0x32
        err = recv(nmbs, 7);
 8006fe6:	f7ff ff61 	bl	8006eac <recv>
        if (err != NMBS_ERROR_NONE)
 8006fea:	2800      	cmp	r0, #0
 8006fec:	d11e      	bne.n	800702c <recv_msg_header+0xc0>
    nmbs->msg.buf_idx = 0;
 8006fee:	8660      	strh	r0, [r4, #50]	@ 0x32
        nmbs->msg.transaction_id = get_2(nmbs);
 8006ff0:	0020      	movs	r0, r4
 8006ff2:	f7ff ff3a 	bl	8006e6a <get_2>
 8006ff6:	86e0      	strh	r0, [r4, #54]	@ 0x36
        uint16_t protocol_id = get_2(nmbs);
 8006ff8:	0020      	movs	r0, r4
 8006ffa:	f7ff ff36 	bl	8006e6a <get_2>
 8006ffe:	0007      	movs	r7, r0
        uint16_t length = get_2(nmbs);
 8007000:	0020      	movs	r0, r4
 8007002:	f7ff ff32 	bl	8006e6a <get_2>
 8007006:	0005      	movs	r5, r0
        nmbs->msg.unit_id = get_1(nmbs);
 8007008:	0020      	movs	r0, r4
 800700a:	f7ff ff23 	bl	8006e54 <get_1>
 800700e:	0023      	movs	r3, r4
 8007010:	3334      	adds	r3, #52	@ 0x34
 8007012:	7018      	strb	r0, [r3, #0]
        nmbs->msg.fc = get_1(nmbs);
 8007014:	0020      	movs	r0, r4
 8007016:	f7ff ff1d 	bl	8006e54 <get_1>
 800701a:	0023      	movs	r3, r4
        if (length < 2 || length > 255)
 800701c:	3d02      	subs	r5, #2
        nmbs->msg.fc = get_1(nmbs);
 800701e:	3335      	adds	r3, #53	@ 0x35
        if (length < 2 || length > 255)
 8007020:	b2a9      	uxth	r1, r5
        nmbs->msg.fc = get_1(nmbs);
 8007022:	7018      	strb	r0, [r3, #0]
        if (length < 2 || length > 255)
 8007024:	29fd      	cmp	r1, #253	@ 0xfd
 8007026:	d902      	bls.n	800702e <recv_msg_header+0xc2>
            return NMBS_ERROR_INVALID_TCP_MBAP;
 8007028:	2006      	movs	r0, #6
 800702a:	4240      	negs	r0, r0
}
 800702c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        err = recv(nmbs, length - 2);
 800702e:	0020      	movs	r0, r4
 8007030:	f7ff ff3c 	bl	8006eac <recv>
        if (err != NMBS_ERROR_NONE)
 8007034:	2800      	cmp	r0, #0
 8007036:	d1f9      	bne.n	800702c <recv_msg_header+0xc0>
        if (protocol_id != 0)
 8007038:	2f00      	cmp	r7, #0
 800703a:	d1f5      	bne.n	8007028 <recv_msg_header+0xbc>
        nmbs->msg.complete = true;
 800703c:	9b01      	ldr	r3, [sp, #4]
 800703e:	701e      	strb	r6, [r3, #0]
 8007040:	e7c0      	b.n	8006fc4 <recv_msg_header+0x58>

08007042 <send_msg>:
}
#endif
#endif


static nmbs_error send_msg(nmbs_t* nmbs) {
 8007042:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    NMBS_DEBUG_PRINT("\n");

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 8007044:	0003      	movs	r3, r0
 8007046:	0006      	movs	r6, r0
 8007048:	337c      	adds	r3, #124	@ 0x7c
 800704a:	781b      	ldrb	r3, [r3, #0]
static nmbs_error send_msg(nmbs_t* nmbs) {
 800704c:	0004      	movs	r4, r0
 800704e:	368c      	adds	r6, #140	@ 0x8c
    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 8007050:	2b01      	cmp	r3, #1
 8007052:	d109      	bne.n	8007068 <send_msg+0x26>
        uint16_t crc = nmbs->platform.crc_calc(nmbs->msg.buf, nmbs->msg.buf_idx, nmbs->platform.arg);
 8007054:	0003      	movs	r3, r0
 8007056:	3388      	adds	r3, #136	@ 0x88
 8007058:	8e41      	ldrh	r1, [r0, #50]	@ 0x32
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6832      	ldr	r2, [r6, #0]
 800705e:	4798      	blx	r3
 8007060:	0001      	movs	r1, r0
        put_2(nmbs, crc);
 8007062:	0020      	movs	r0, r4
 8007064:	f7ff ff0b 	bl	8006e7e <put_2>
    int32_t ret = nmbs->platform.write(nmbs->msg.buf, count, nmbs->byte_timeout_ms, nmbs->platform.arg);
 8007068:	0023      	movs	r3, r4
    }

    nmbs_error err = send(nmbs, nmbs->msg.buf_idx);
 800706a:	8e65      	ldrh	r5, [r4, #50]	@ 0x32
    int32_t ret = nmbs->platform.write(nmbs->msg.buf, count, nmbs->byte_timeout_ms, nmbs->platform.arg);
 800706c:	3308      	adds	r3, #8
 800706e:	6fdf      	ldr	r7, [r3, #124]	@ 0x7c
 8007070:	0029      	movs	r1, r5
 8007072:	6833      	ldr	r3, [r6, #0]
 8007074:	0020      	movs	r0, r4
 8007076:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 8007078:	47b8      	blx	r7
 800707a:	0003      	movs	r3, r0
        return NMBS_ERROR_NONE;
 800707c:	2000      	movs	r0, #0
    if (ret == count)
 800707e:	42ab      	cmp	r3, r5
 8007080:	d003      	beq.n	800708a <send_msg+0x48>
            return NMBS_ERROR_TRANSPORT;
 8007082:	42ab      	cmp	r3, r5
 8007084:	419b      	sbcs	r3, r3
 8007086:	4258      	negs	r0, r3
 8007088:	3804      	subs	r0, #4

    return err;
}
 800708a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800708c <recv_res_header>:
    return send_msg(nmbs);
}
#endif


static nmbs_error recv_res_header(nmbs_t* nmbs) {
 800708c:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint16_t req_transaction_id = nmbs->msg.transaction_id;
    uint8_t req_unit_id = nmbs->msg.unit_id;
 800708e:	0007      	movs	r7, r0
    uint8_t req_fc = nmbs->msg.fc;
 8007090:	0006      	movs	r6, r0
    uint16_t req_transaction_id = nmbs->msg.transaction_id;
 8007092:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
static nmbs_error recv_res_header(nmbs_t* nmbs) {
 8007094:	b085      	sub	sp, #20
    uint16_t req_transaction_id = nmbs->msg.transaction_id;
 8007096:	9300      	str	r3, [sp, #0]
    uint8_t req_unit_id = nmbs->msg.unit_id;
 8007098:	3734      	adds	r7, #52	@ 0x34
 800709a:	783b      	ldrb	r3, [r7, #0]
    uint8_t req_fc = nmbs->msg.fc;
 800709c:	3635      	adds	r6, #53	@ 0x35
    uint8_t req_unit_id = nmbs->msg.unit_id;
 800709e:	9301      	str	r3, [sp, #4]

    bool first_byte_received = false;
    nmbs_error err = recv_msg_header(nmbs, &first_byte_received);
 80070a0:	ab02      	add	r3, sp, #8
 80070a2:	1dd9      	adds	r1, r3, #7
static nmbs_error recv_res_header(nmbs_t* nmbs) {
 80070a4:	0004      	movs	r4, r0
    uint8_t req_fc = nmbs->msg.fc;
 80070a6:	7835      	ldrb	r5, [r6, #0]
    nmbs_error err = recv_msg_header(nmbs, &first_byte_received);
 80070a8:	f7ff ff60 	bl	8006f6c <recv_msg_header>
    if (err != NMBS_ERROR_NONE)
 80070ac:	2800      	cmp	r0, #0
 80070ae:	d12d      	bne.n	800710c <recv_res_header+0x80>
        return err;

    if (nmbs->platform.transport == NMBS_TRANSPORT_TCP) {
 80070b0:	0023      	movs	r3, r4
 80070b2:	337c      	adds	r3, #124	@ 0x7c
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d105      	bne.n	80070c6 <recv_res_header+0x3a>
        if (nmbs->msg.transaction_id != req_transaction_id)
 80070ba:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80070bc:	9a00      	ldr	r2, [sp, #0]
 80070be:	4293      	cmp	r3, r2
 80070c0:	d007      	beq.n	80070d2 <recv_res_header+0x46>
            return NMBS_ERROR_INVALID_TCP_MBAP;
 80070c2:	2006      	movs	r0, #6
 80070c4:	e00c      	b.n	80070e0 <recv_res_header+0x54>
    }

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU && nmbs->msg.unit_id != req_unit_id)
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d103      	bne.n	80070d2 <recv_res_header+0x46>
 80070ca:	783b      	ldrb	r3, [r7, #0]
 80070cc:	9a01      	ldr	r2, [sp, #4]
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d11e      	bne.n	8007110 <recv_res_header+0x84>
        return NMBS_ERROR_INVALID_UNIT_ID;

    if (nmbs->msg.fc != req_fc) {
 80070d2:	7833      	ldrb	r3, [r6, #0]
 80070d4:	42ab      	cmp	r3, r5
 80070d6:	d019      	beq.n	800710c <recv_res_header+0x80>
        if (nmbs->msg.fc - 0x80 == req_fc) {
 80070d8:	3b80      	subs	r3, #128	@ 0x80
 80070da:	42ab      	cmp	r3, r5
 80070dc:	d002      	beq.n	80070e4 <recv_res_header+0x58>
            err = recv_msg_footer(nmbs);
            if (err != NMBS_ERROR_NONE)
                return err;

            if (exception < 1 || exception > 4)
                return NMBS_ERROR_INVALID_RESPONSE;
 80070de:	2002      	movs	r0, #2
        return NMBS_ERROR_INVALID_UNIT_ID;
 80070e0:	4240      	negs	r0, r0
 80070e2:	e013      	b.n	800710c <recv_res_header+0x80>
            err = recv(nmbs, 1);
 80070e4:	2101      	movs	r1, #1
 80070e6:	0020      	movs	r0, r4
 80070e8:	f7ff fee0 	bl	8006eac <recv>
            if (err != NMBS_ERROR_NONE)
 80070ec:	2800      	cmp	r0, #0
 80070ee:	d10d      	bne.n	800710c <recv_res_header+0x80>
            uint8_t exception = get_1(nmbs);
 80070f0:	0020      	movs	r0, r4
 80070f2:	f7ff feaf 	bl	8006e54 <get_1>
 80070f6:	0005      	movs	r5, r0
            err = recv_msg_footer(nmbs);
 80070f8:	0020      	movs	r0, r4
 80070fa:	f7ff ff19 	bl	8006f30 <recv_msg_footer>
            if (err != NMBS_ERROR_NONE)
 80070fe:	2800      	cmp	r0, #0
 8007100:	d104      	bne.n	800710c <recv_res_header+0x80>
            if (exception < 1 || exception > 4)
 8007102:	1e6b      	subs	r3, r5, #1
 8007104:	b2db      	uxtb	r3, r3
 8007106:	2b03      	cmp	r3, #3
 8007108:	d8e9      	bhi.n	80070de <recv_res_header+0x52>

            NMBS_DEBUG_PRINT("%d NMBS res <- address_rtu %d\texception %d\n", nmbs->address_rtu, nmbs->msg.unit_id,
                             exception);
            return (nmbs_error) exception;
 800710a:	b268      	sxtb	r0, r5
    }

    NMBS_DEBUG_PRINT("%d NMBS res <- address_rtu %d\tfc %d\t", nmbs->address_rtu, nmbs->msg.unit_id, nmbs->msg.fc);

    return NMBS_ERROR_NONE;
}
 800710c:	b005      	add	sp, #20
 800710e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return NMBS_ERROR_INVALID_UNIT_ID;
 8007110:	2007      	movs	r0, #7
 8007112:	e7e5      	b.n	80070e0 <recv_res_header+0x54>

08007114 <recv_read_discrete_res>:


#if !defined(NMBS_CLIENT_DISABLED) ||                                                                                  \
        (!defined(NMBS_SERVER_DISABLED) &&                                                                             \
         (!defined(NMBS_SERVER_READ_COILS_DISABLED) || !defined(NMBS_SERVER_READ_DISCRETE_INPUTS_DISABLED)))
static nmbs_error recv_read_discrete_res(nmbs_t* nmbs, nmbs_bitfield values) {
 8007114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007116:	0004      	movs	r4, r0
 8007118:	000e      	movs	r6, r1
    nmbs_error err = recv_res_header(nmbs);
 800711a:	f7ff ffb7 	bl	800708c <recv_res_header>
    if (err != NMBS_ERROR_NONE)
 800711e:	2800      	cmp	r0, #0
 8007120:	d111      	bne.n	8007146 <recv_read_discrete_res+0x32>
        return err;

    err = recv(nmbs, 1);
 8007122:	2101      	movs	r1, #1
 8007124:	0020      	movs	r0, r4
 8007126:	f7ff fec1 	bl	8006eac <recv>
    if (err != NMBS_ERROR_NONE)
 800712a:	2800      	cmp	r0, #0
 800712c:	d10b      	bne.n	8007146 <recv_read_discrete_res+0x32>
        return err;

    uint8_t coils_bytes = get_1(nmbs);
 800712e:	0020      	movs	r0, r4
 8007130:	f7ff fe90 	bl	8006e54 <get_1>
 8007134:	0005      	movs	r5, r0
    NMBS_DEBUG_PRINT("b %d\t", coils_bytes);

    if (coils_bytes > 250) {
 8007136:	28fa      	cmp	r0, #250	@ 0xfa
 8007138:	d812      	bhi.n	8007160 <recv_read_discrete_res+0x4c>
        return NMBS_ERROR_INVALID_RESPONSE;
    }

    err = recv(nmbs, coils_bytes);
 800713a:	0001      	movs	r1, r0
 800713c:	0020      	movs	r0, r4
 800713e:	f7ff feb5 	bl	8006eac <recv>
    if (err != NMBS_ERROR_NONE)
        return err;

    NMBS_DEBUG_PRINT("coils ");
    for (int i = 0; i < coils_bytes; i++) {
 8007142:	1e07      	subs	r7, r0, #0
    if (err != NMBS_ERROR_NONE)
 8007144:	d006      	beq.n	8007154 <recv_read_discrete_res+0x40>
    err = recv_msg_footer(nmbs);
    if (err != NMBS_ERROR_NONE)
        return err;

    return NMBS_ERROR_NONE;
}
 8007146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t coil = get_1(nmbs);
 8007148:	f7ff fe84 	bl	8006e54 <get_1>
        if (values)
 800714c:	2e00      	cmp	r6, #0
 800714e:	d000      	beq.n	8007152 <recv_read_discrete_res+0x3e>
            values[i] = coil;
 8007150:	55f0      	strb	r0, [r6, r7]
    for (int i = 0; i < coils_bytes; i++) {
 8007152:	3701      	adds	r7, #1
        uint8_t coil = get_1(nmbs);
 8007154:	0020      	movs	r0, r4
    for (int i = 0; i < coils_bytes; i++) {
 8007156:	42af      	cmp	r7, r5
 8007158:	dbf6      	blt.n	8007148 <recv_read_discrete_res+0x34>
    err = recv_msg_footer(nmbs);
 800715a:	f7ff fee9 	bl	8006f30 <recv_msg_footer>
    if (err != NMBS_ERROR_NONE)
 800715e:	e7f2      	b.n	8007146 <recv_read_discrete_res+0x32>
        return NMBS_ERROR_INVALID_RESPONSE;
 8007160:	2002      	movs	r0, #2
 8007162:	4240      	negs	r0, r0
 8007164:	e7ef      	b.n	8007146 <recv_read_discrete_res+0x32>

08007166 <recv_read_registers_res>:


#if !defined(NMBS_CLIENT_DISABLED) ||                                                                                  \
        (!defined(NMBS_SERVER_DISABLED) && (!defined(NMBS_SERVER_READ_HOLDING_REGISTERS_DISABLED) ||                   \
                                            !defined(NMBS_SERVER_READ_INPUT_REGISTERS_DISABLED)))
static nmbs_error recv_read_registers_res(nmbs_t* nmbs, uint16_t quantity, uint16_t* registers) {
 8007166:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007168:	0005      	movs	r5, r0
 800716a:	0017      	movs	r7, r2
 800716c:	9101      	str	r1, [sp, #4]
    nmbs_error err = recv_res_header(nmbs);
 800716e:	f7ff ff8d 	bl	800708c <recv_res_header>
    if (err != NMBS_ERROR_NONE)
 8007172:	2800      	cmp	r0, #0
 8007174:	d10d      	bne.n	8007192 <recv_read_registers_res+0x2c>
        return err;

    err = recv(nmbs, 1);
 8007176:	2101      	movs	r1, #1
 8007178:	0028      	movs	r0, r5
 800717a:	f7ff fe97 	bl	8006eac <recv>
    if (err != NMBS_ERROR_NONE)
 800717e:	2800      	cmp	r0, #0
 8007180:	d107      	bne.n	8007192 <recv_read_registers_res+0x2c>
        return err;

    uint8_t registers_bytes = get_1(nmbs);
 8007182:	0028      	movs	r0, r5
 8007184:	f7ff fe66 	bl	8006e54 <get_1>
 8007188:	0006      	movs	r6, r0
    NMBS_DEBUG_PRINT("b %d\t", registers_bytes);

    if (registers_bytes > 250)
 800718a:	28fa      	cmp	r0, #250	@ 0xfa
 800718c:	d902      	bls.n	8007194 <recv_read_registers_res+0x2e>
        return NMBS_ERROR_INVALID_RESPONSE;
 800718e:	2002      	movs	r0, #2
 8007190:	4240      	negs	r0, r0

    if (registers_bytes != quantity * 2)
        return NMBS_ERROR_INVALID_RESPONSE;

    return NMBS_ERROR_NONE;
}
 8007192:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    err = recv(nmbs, registers_bytes);
 8007194:	0001      	movs	r1, r0
 8007196:	0028      	movs	r0, r5
 8007198:	f7ff fe88 	bl	8006eac <recv>
    if (err != NMBS_ERROR_NONE)
 800719c:	2800      	cmp	r0, #0
 800719e:	d1f8      	bne.n	8007192 <recv_read_registers_res+0x2c>
    for (int i = 0; i < registers_bytes / 2; i++) {
 80071a0:	0004      	movs	r4, r0
 80071a2:	0873      	lsrs	r3, r6, #1
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	9b00      	ldr	r3, [sp, #0]
        uint16_t reg = get_2(nmbs);
 80071aa:	0028      	movs	r0, r5
    for (int i = 0; i < registers_bytes / 2; i++) {
 80071ac:	429c      	cmp	r4, r3
 80071ae:	db08      	blt.n	80071c2 <recv_read_registers_res+0x5c>
    err = recv_msg_footer(nmbs);
 80071b0:	f7ff febe 	bl	8006f30 <recv_msg_footer>
    if (err != NMBS_ERROR_NONE)
 80071b4:	2800      	cmp	r0, #0
 80071b6:	d1ec      	bne.n	8007192 <recv_read_registers_res+0x2c>
    if (registers_bytes != quantity * 2)
 80071b8:	9b01      	ldr	r3, [sp, #4]
 80071ba:	005b      	lsls	r3, r3, #1
 80071bc:	429e      	cmp	r6, r3
 80071be:	d0e8      	beq.n	8007192 <recv_read_registers_res+0x2c>
 80071c0:	e7e5      	b.n	800718e <recv_read_registers_res+0x28>
        uint16_t reg = get_2(nmbs);
 80071c2:	f7ff fe52 	bl	8006e6a <get_2>
        if (registers)
 80071c6:	2f00      	cmp	r7, #0
 80071c8:	d001      	beq.n	80071ce <recv_read_registers_res+0x68>
            registers[i] = reg;
 80071ca:	0063      	lsls	r3, r4, #1
 80071cc:	52f8      	strh	r0, [r7, r3]
    for (int i = 0; i < registers_bytes / 2; i++) {
 80071ce:	3401      	adds	r4, #1
 80071d0:	e7ea      	b.n	80071a8 <recv_read_registers_res+0x42>

080071d2 <put_msg_header>:
static void put_msg_header(nmbs_t* nmbs, uint16_t data_length) {
 80071d2:	b570      	push	{r4, r5, r6, lr}
    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 80071d4:	0003      	movs	r3, r0
static void put_msg_header(nmbs_t* nmbs, uint16_t data_length) {
 80071d6:	000d      	movs	r5, r1
    nmbs->msg.buf_idx = 0;
 80071d8:	2100      	movs	r1, #0
    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 80071da:	337c      	adds	r3, #124	@ 0x7c
    nmbs->msg.buf_idx = 0;
 80071dc:	8641      	strh	r1, [r0, #50]	@ 0x32
    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 80071de:	781b      	ldrb	r3, [r3, #0]
static void put_msg_header(nmbs_t* nmbs, uint16_t data_length) {
 80071e0:	0004      	movs	r4, r0
    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d10b      	bne.n	80071fe <put_msg_header+0x2c>
        put_1(nmbs, nmbs->msg.unit_id);
 80071e6:	0002      	movs	r2, r0
 80071e8:	3234      	adds	r2, #52	@ 0x34
    nmbs->msg.buf[nmbs->msg.buf_idx] = data;
 80071ea:	7812      	ldrb	r2, [r2, #0]
    nmbs->msg.buf_idx++;
 80071ec:	8643      	strh	r3, [r0, #50]	@ 0x32
    nmbs->msg.buf[nmbs->msg.buf_idx] = data;
 80071ee:	7002      	strb	r2, [r0, #0]
    put_1(nmbs, nmbs->msg.fc);
 80071f0:	0023      	movs	r3, r4
 80071f2:	3335      	adds	r3, #53	@ 0x35
 80071f4:	0020      	movs	r0, r4
 80071f6:	7819      	ldrb	r1, [r3, #0]
 80071f8:	f7ff fe32 	bl	8006e60 <put_1>
}
 80071fc:	bd70      	pop	{r4, r5, r6, pc}
    else if (nmbs->platform.transport == NMBS_TRANSPORT_TCP) {
 80071fe:	2b02      	cmp	r3, #2
 8007200:	d1f6      	bne.n	80071f0 <put_msg_header+0x1e>
    nmbs->msg.buf[nmbs->msg.buf_idx] = (uint8_t) ((data >> 8) & 0xFFU);
 8007202:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
    nmbs->msg.buf_idx += 2;
 8007204:	8643      	strh	r3, [r0, #50]	@ 0x32
    nmbs->msg.buf[nmbs->msg.buf_idx] = (uint8_t) ((data >> 8) & 0xFFU);
 8007206:	ba52      	rev16	r2, r2
 8007208:	8002      	strh	r2, [r0, #0]
        put_2(nmbs, (uint16_t) (1 + 1 + data_length));
 800720a:	3502      	adds	r5, #2
        put_2(nmbs, 0);
 800720c:	f7ff fe37 	bl	8006e7e <put_2>
        put_2(nmbs, (uint16_t) (1 + 1 + data_length));
 8007210:	0020      	movs	r0, r4
 8007212:	b2a9      	uxth	r1, r5
 8007214:	f7ff fe33 	bl	8006e7e <put_2>
        put_1(nmbs, nmbs->msg.unit_id);
 8007218:	0023      	movs	r3, r4
 800721a:	3334      	adds	r3, #52	@ 0x34
 800721c:	0020      	movs	r0, r4
 800721e:	7819      	ldrb	r1, [r3, #0]
 8007220:	f7ff fe1e 	bl	8006e60 <put_1>
 8007224:	e7e4      	b.n	80071f0 <put_msg_header+0x1e>

08007226 <send_exception_msg>:
    nmbs->msg.fc += 0x80;
 8007226:	0002      	movs	r2, r0
static nmbs_error send_exception_msg(nmbs_t* nmbs, uint8_t exception) {
 8007228:	b570      	push	{r4, r5, r6, lr}
 800722a:	0004      	movs	r4, r0
 800722c:	000d      	movs	r5, r1
    nmbs->msg.fc += 0x80;
 800722e:	3235      	adds	r2, #53	@ 0x35
 8007230:	7813      	ldrb	r3, [r2, #0]
    put_msg_header(nmbs, 1);
 8007232:	2101      	movs	r1, #1
    nmbs->msg.fc += 0x80;
 8007234:	3b80      	subs	r3, #128	@ 0x80
 8007236:	7013      	strb	r3, [r2, #0]
    put_msg_header(nmbs, 1);
 8007238:	f7ff ffcb 	bl	80071d2 <put_msg_header>
    put_1(nmbs, exception);
 800723c:	0029      	movs	r1, r5
 800723e:	0020      	movs	r0, r4
 8007240:	f7ff fe0e 	bl	8006e60 <put_1>
    return send_msg(nmbs);
 8007244:	0020      	movs	r0, r4
 8007246:	f7ff fefc 	bl	8007042 <send_msg>
}
 800724a:	bd70      	pop	{r4, r5, r6, pc}

0800724c <handle_read_discrete>:


#ifndef NMBS_SERVER_DISABLED
#if !defined(NMBS_SERVER_READ_COILS_DISABLED) || !defined(NMBS_SERVER_READ_DISCRETE_INPUTS_DISABLED)
static nmbs_error handle_read_discrete(nmbs_t* nmbs,
                                       nmbs_error (*callback)(uint16_t, uint16_t, nmbs_bitfield, uint8_t, void*)) {
 800724c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800724e:	000f      	movs	r7, r1
 8007250:	b087      	sub	sp, #28
    nmbs_error err = recv(nmbs, 4);
 8007252:	2104      	movs	r1, #4
                                       nmbs_error (*callback)(uint16_t, uint16_t, nmbs_bitfield, uint8_t, void*)) {
 8007254:	0005      	movs	r5, r0
    nmbs_error err = recv(nmbs, 4);
 8007256:	f7ff fe29 	bl	8006eac <recv>
 800725a:	1e04      	subs	r4, r0, #0
    if (err != NMBS_ERROR_NONE)
 800725c:	d155      	bne.n	800730a <handle_read_discrete+0xbe>
        return err;

    uint16_t address = get_2(nmbs);
 800725e:	0028      	movs	r0, r5
 8007260:	f7ff fe03 	bl	8006e6a <get_2>
 8007264:	9003      	str	r0, [sp, #12]
    uint16_t quantity = get_2(nmbs);
 8007266:	0028      	movs	r0, r5
 8007268:	f7ff fdff 	bl	8006e6a <get_2>
 800726c:	0006      	movs	r6, r0

    NMBS_DEBUG_PRINT("a %d\tq %d", address, quantity);

    err = recv_msg_footer(nmbs);
 800726e:	0028      	movs	r0, r5
 8007270:	f7ff fe5e 	bl	8006f30 <recv_msg_footer>
 8007274:	1e04      	subs	r4, r0, #0
    if (err != NMBS_ERROR_NONE)
 8007276:	d148      	bne.n	800730a <handle_read_discrete+0xbe>
        return err;

    if (!nmbs->msg.ignored) {
 8007278:	002b      	movs	r3, r5
 800727a:	3339      	adds	r3, #57	@ 0x39
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d148      	bne.n	8007314 <handle_read_discrete+0xc8>
        if (quantity < 1 || quantity > 2000)
 8007282:	22fa      	movs	r2, #250	@ 0xfa
 8007284:	1e73      	subs	r3, r6, #1
 8007286:	b29b      	uxth	r3, r3
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8007288:	2103      	movs	r1, #3
        if (quantity < 1 || quantity > 2000)
 800728a:	00d2      	lsls	r2, r2, #3
 800728c:	4293      	cmp	r3, r2
 800728e:	d21b      	bcs.n	80072c8 <handle_read_discrete+0x7c>

        if ((uint32_t) address + (uint32_t) quantity > ((uint32_t) 0xFFFF) + 1)
 8007290:	2280      	movs	r2, #128	@ 0x80
 8007292:	9b03      	ldr	r3, [sp, #12]
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8007294:	2102      	movs	r1, #2
        if ((uint32_t) address + (uint32_t) quantity > ((uint32_t) 0xFFFF) + 1)
 8007296:	199b      	adds	r3, r3, r6
 8007298:	0252      	lsls	r2, r2, #9
 800729a:	4293      	cmp	r3, r2
 800729c:	d814      	bhi.n	80072c8 <handle_read_discrete+0x7c>

        if (callback) {
 800729e:	2f00      	cmp	r7, #0
 80072a0:	d036      	beq.n	8007310 <handle_read_discrete+0xc4>
            nmbs_bitfield bitfield = {0};
 80072a2:	4b1f      	ldr	r3, [pc, #124]	@ (8007320 <handle_read_discrete+0xd4>)
 80072a4:	aa02      	add	r2, sp, #8
 80072a6:	781b      	ldrb	r3, [r3, #0]
            err = callback(address, quantity, bitfield, nmbs->msg.unit_id, nmbs->callbacks.arg);
 80072a8:	0031      	movs	r1, r6
            nmbs_bitfield bitfield = {0};
 80072aa:	7313      	strb	r3, [r2, #12]
            err = callback(address, quantity, bitfield, nmbs->msg.unit_id, nmbs->callbacks.arg);
 80072ac:	002b      	movs	r3, r5
 80072ae:	6eea      	ldr	r2, [r5, #108]	@ 0x6c
 80072b0:	3334      	adds	r3, #52	@ 0x34
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	9803      	ldr	r0, [sp, #12]
 80072b6:	9200      	str	r2, [sp, #0]
 80072b8:	aa05      	add	r2, sp, #20
 80072ba:	47b8      	blx	r7
 80072bc:	1e04      	subs	r4, r0, #0
            if (err != NMBS_ERROR_NONE) {
 80072be:	d00a      	beq.n	80072d6 <handle_read_discrete+0x8a>
                if (nmbs_error_is_exception(err))
 80072c0:	b2c1      	uxtb	r1, r0
 80072c2:	1e4b      	subs	r3, r1, #1
 80072c4:	2b03      	cmp	r3, #3
 80072c6:	d804      	bhi.n	80072d2 <handle_read_discrete+0x86>
                    return send_exception_msg(nmbs, err);

                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 80072c8:	0028      	movs	r0, r5
 80072ca:	f7ff ffac 	bl	8007226 <send_exception_msg>
        else {
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
        }
    }
    else {
        return recv_read_discrete_res(nmbs, NULL);
 80072ce:	0004      	movs	r4, r0
 80072d0:	e01b      	b.n	800730a <handle_read_discrete+0xbe>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 80072d2:	2104      	movs	r1, #4
 80072d4:	e7f8      	b.n	80072c8 <handle_read_discrete+0x7c>
            if (!nmbs->msg.broadcast) {
 80072d6:	002b      	movs	r3, r5
 80072d8:	3338      	adds	r3, #56	@ 0x38
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d114      	bne.n	800730a <handle_read_discrete+0xbe>
                uint8_t discrete_bytes = (quantity + 7) / 8;
 80072e0:	3607      	adds	r6, #7
 80072e2:	b2b6      	uxth	r6, r6
 80072e4:	10f6      	asrs	r6, r6, #3
    put_msg_header(nmbs, data_length);
 80072e6:	0028      	movs	r0, r5
 80072e8:	1c71      	adds	r1, r6, #1
 80072ea:	f7ff ff72 	bl	80071d2 <put_msg_header>
                put_1(nmbs, discrete_bytes);
 80072ee:	0028      	movs	r0, r5
 80072f0:	b2f1      	uxtb	r1, r6
 80072f2:	f7ff fdb5 	bl	8006e60 <put_1>
                    put_1(nmbs, bitfield[i]);
 80072f6:	ab02      	add	r3, sp, #8
 80072f8:	0028      	movs	r0, r5
 80072fa:	7b19      	ldrb	r1, [r3, #12]
 80072fc:	f7ff fdb0 	bl	8006e60 <put_1>
                err = send_msg(nmbs);
 8007300:	0028      	movs	r0, r5
 8007302:	f7ff fe9e 	bl	8007042 <send_msg>
                if (err != NMBS_ERROR_NONE)
 8007306:	2800      	cmp	r0, #0
 8007308:	d1e1      	bne.n	80072ce <handle_read_discrete+0x82>
    }

    return NMBS_ERROR_NONE;
}
 800730a:	0020      	movs	r0, r4
 800730c:	b007      	add	sp, #28
 800730e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 8007310:	2101      	movs	r1, #1
 8007312:	e7d9      	b.n	80072c8 <handle_read_discrete+0x7c>
        return recv_read_discrete_res(nmbs, NULL);
 8007314:	0001      	movs	r1, r0
 8007316:	0028      	movs	r0, r5
 8007318:	f7ff fefc 	bl	8007114 <recv_read_discrete_res>
 800731c:	e7d7      	b.n	80072ce <handle_read_discrete+0x82>
 800731e:	46c0      	nop			@ (mov r8, r8)
 8007320:	0800d925 	.word	0x0800d925

08007324 <handle_read_registers>:
#endif


#if !defined(NMBS_SERVER_READ_HOLDING_REGISTERS_DISABLED) || !defined(NMBS_SERVER_READ_INPUT_REGISTERS_DISABLED)
static nmbs_error handle_read_registers(nmbs_t* nmbs,
                                        nmbs_error (*callback)(uint16_t, uint16_t, uint16_t*, uint8_t, void*)) {
 8007324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007326:	000f      	movs	r7, r1
 8007328:	b0c5      	sub	sp, #276	@ 0x114
    nmbs_error err = recv(nmbs, 4);
 800732a:	2104      	movs	r1, #4
                                        nmbs_error (*callback)(uint16_t, uint16_t, uint16_t*, uint8_t, void*)) {
 800732c:	0005      	movs	r5, r0
    nmbs_error err = recv(nmbs, 4);
 800732e:	f7ff fdbd 	bl	8006eac <recv>
 8007332:	1e04      	subs	r4, r0, #0
    if (err != NMBS_ERROR_NONE)
 8007334:	d15b      	bne.n	80073ee <handle_read_registers+0xca>
        return err;

    uint16_t address = get_2(nmbs);
 8007336:	0028      	movs	r0, r5
 8007338:	f7ff fd97 	bl	8006e6a <get_2>
 800733c:	9003      	str	r0, [sp, #12]
    uint16_t quantity = get_2(nmbs);
 800733e:	0028      	movs	r0, r5
 8007340:	f7ff fd93 	bl	8006e6a <get_2>
 8007344:	0006      	movs	r6, r0

    NMBS_DEBUG_PRINT("a %d\tq %d", address, quantity);

    err = recv_msg_footer(nmbs);
 8007346:	0028      	movs	r0, r5
 8007348:	f7ff fdf2 	bl	8006f30 <recv_msg_footer>
 800734c:	1e04      	subs	r4, r0, #0
    if (err != NMBS_ERROR_NONE)
 800734e:	d14e      	bne.n	80073ee <handle_read_registers+0xca>
        return err;

    if (!nmbs->msg.ignored) {
 8007350:	002b      	movs	r3, r5
 8007352:	3339      	adds	r3, #57	@ 0x39
 8007354:	7819      	ldrb	r1, [r3, #0]
 8007356:	2900      	cmp	r1, #0
 8007358:	d14e      	bne.n	80073f8 <handle_read_registers+0xd4>
        if (quantity < 1 || quantity > 125)
 800735a:	1e73      	subs	r3, r6, #1
 800735c:	b29b      	uxth	r3, r3
 800735e:	2b7c      	cmp	r3, #124	@ 0x7c
 8007360:	d905      	bls.n	800736e <handle_read_registers+0x4a>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8007362:	3103      	adds	r1, #3
            err = callback(address, quantity, regs, nmbs->msg.unit_id, nmbs->callbacks.arg);
            if (err != NMBS_ERROR_NONE) {
                if (nmbs_error_is_exception(err))
                    return send_exception_msg(nmbs, err);

                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 8007364:	0028      	movs	r0, r5
 8007366:	f7ff ff5e 	bl	8007226 <send_exception_msg>
        else {
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
        }
    }
    else {
        return recv_read_registers_res(nmbs, quantity, NULL);
 800736a:	0004      	movs	r4, r0
 800736c:	e03f      	b.n	80073ee <handle_read_registers+0xca>
        if ((uint32_t) address + (uint32_t) quantity > ((uint32_t) 0xFFFF) + 1)
 800736e:	2280      	movs	r2, #128	@ 0x80
 8007370:	9b03      	ldr	r3, [sp, #12]
 8007372:	0252      	lsls	r2, r2, #9
 8007374:	199b      	adds	r3, r3, r6
 8007376:	4293      	cmp	r3, r2
 8007378:	d901      	bls.n	800737e <handle_read_registers+0x5a>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 800737a:	2102      	movs	r1, #2
 800737c:	e7f2      	b.n	8007364 <handle_read_registers+0x40>
        if (callback) {
 800737e:	2f00      	cmp	r7, #0
 8007380:	d038      	beq.n	80073f4 <handle_read_registers+0xd0>
            uint16_t regs[125] = {0};
 8007382:	22fa      	movs	r2, #250	@ 0xfa
 8007384:	a805      	add	r0, sp, #20
 8007386:	f004 f961 	bl	800b64c <memset>
            err = callback(address, quantity, regs, nmbs->msg.unit_id, nmbs->callbacks.arg);
 800738a:	002b      	movs	r3, r5
 800738c:	6eea      	ldr	r2, [r5, #108]	@ 0x6c
 800738e:	3334      	adds	r3, #52	@ 0x34
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	0031      	movs	r1, r6
 8007394:	9200      	str	r2, [sp, #0]
 8007396:	9803      	ldr	r0, [sp, #12]
 8007398:	aa05      	add	r2, sp, #20
 800739a:	47b8      	blx	r7
 800739c:	1e04      	subs	r4, r0, #0
            if (err != NMBS_ERROR_NONE) {
 800739e:	d005      	beq.n	80073ac <handle_read_registers+0x88>
                if (nmbs_error_is_exception(err))
 80073a0:	b2c1      	uxtb	r1, r0
 80073a2:	1e4b      	subs	r3, r1, #1
 80073a4:	2b03      	cmp	r3, #3
 80073a6:	d9dd      	bls.n	8007364 <handle_read_registers+0x40>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 80073a8:	2104      	movs	r1, #4
 80073aa:	e7db      	b.n	8007364 <handle_read_registers+0x40>
            if (!nmbs->msg.broadcast) {
 80073ac:	002b      	movs	r3, r5
 80073ae:	3338      	adds	r3, #56	@ 0x38
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d11b      	bne.n	80073ee <handle_read_registers+0xca>
                const uint8_t regs_bytes = quantity * 2;
 80073b6:	0077      	lsls	r7, r6, #1
 80073b8:	b2ff      	uxtb	r7, r7
                put_res_header(nmbs, 1 + regs_bytes);
 80073ba:	1c79      	adds	r1, r7, #1
    put_msg_header(nmbs, data_length);
 80073bc:	0028      	movs	r0, r5
 80073be:	b2c9      	uxtb	r1, r1
 80073c0:	f7ff ff07 	bl	80071d2 <put_msg_header>
                put_1(nmbs, regs_bytes);
 80073c4:	0039      	movs	r1, r7
 80073c6:	0028      	movs	r0, r5
 80073c8:	f7ff fd4a 	bl	8006e60 <put_1>
                for (int i = 0; i < quantity; i++) {
 80073cc:	0027      	movs	r7, r4
                    put_2(nmbs, regs[i]);
 80073ce:	210c      	movs	r1, #12
 80073d0:	aa02      	add	r2, sp, #8
 80073d2:	007b      	lsls	r3, r7, #1
 80073d4:	1852      	adds	r2, r2, r1
 80073d6:	0028      	movs	r0, r5
 80073d8:	5ad1      	ldrh	r1, [r2, r3]
                for (int i = 0; i < quantity; i++) {
 80073da:	3701      	adds	r7, #1
                    put_2(nmbs, regs[i]);
 80073dc:	f7ff fd4f 	bl	8006e7e <put_2>
                for (int i = 0; i < quantity; i++) {
 80073e0:	42b7      	cmp	r7, r6
 80073e2:	dbf4      	blt.n	80073ce <handle_read_registers+0xaa>
                err = send_msg(nmbs);
 80073e4:	0028      	movs	r0, r5
 80073e6:	f7ff fe2c 	bl	8007042 <send_msg>
                if (err != NMBS_ERROR_NONE)
 80073ea:	2800      	cmp	r0, #0
 80073ec:	d1bd      	bne.n	800736a <handle_read_registers+0x46>
    }

    return NMBS_ERROR_NONE;
}
 80073ee:	0020      	movs	r0, r4
 80073f0:	b045      	add	sp, #276	@ 0x114
 80073f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 80073f4:	2101      	movs	r1, #1
 80073f6:	e7b5      	b.n	8007364 <handle_read_registers+0x40>
        return recv_read_registers_res(nmbs, quantity, NULL);
 80073f8:	0002      	movs	r2, r0
 80073fa:	0031      	movs	r1, r6
 80073fc:	0028      	movs	r0, r5
 80073fe:	f7ff feb2 	bl	8007166 <recv_read_registers_res>
 8007402:	e7b2      	b.n	800736a <handle_read_registers+0x46>

08007404 <nmbs_create>:
nmbs_error nmbs_create(nmbs_t* nmbs, const nmbs_platform_conf* platform_conf) {
 8007404:	b570      	push	{r4, r5, r6, lr}
 8007406:	0004      	movs	r4, r0
 8007408:	000d      	movs	r5, r1
    if (!nmbs)
 800740a:	2800      	cmp	r0, #0
 800740c:	d102      	bne.n	8007414 <nmbs_create+0x10>
        return NMBS_ERROR_INVALID_ARGUMENT;
 800740e:	2001      	movs	r0, #1
 8007410:	4240      	negs	r0, r0
}
 8007412:	bd70      	pop	{r4, r5, r6, pc}
    memset(nmbs, 0, sizeof(nmbs_t));
 8007414:	2298      	movs	r2, #152	@ 0x98
 8007416:	2100      	movs	r1, #0
 8007418:	f004 f918 	bl	800b64c <memset>
    nmbs->byte_timeout_ms = -1;
 800741c:	2301      	movs	r3, #1
 800741e:	425b      	negs	r3, r3
 8007420:	6763      	str	r3, [r4, #116]	@ 0x74
    nmbs->read_timeout_ms = -1;
 8007422:	67a3      	str	r3, [r4, #120]	@ 0x78
    if (!platform_conf || platform_conf->initialized != 0xFFFFDEBE)
 8007424:	2d00      	cmp	r5, #0
 8007426:	d0f2      	beq.n	800740e <nmbs_create+0xa>
 8007428:	4b0a      	ldr	r3, [pc, #40]	@ (8007454 <nmbs_create+0x50>)
 800742a:	696a      	ldr	r2, [r5, #20]
 800742c:	429a      	cmp	r2, r3
 800742e:	d1ee      	bne.n	800740e <nmbs_create+0xa>
    if (platform_conf->transport != NMBS_TRANSPORT_RTU && platform_conf->transport != NMBS_TRANSPORT_TCP)
 8007430:	782b      	ldrb	r3, [r5, #0]
 8007432:	3b01      	subs	r3, #1
 8007434:	2b01      	cmp	r3, #1
 8007436:	d8ea      	bhi.n	800740e <nmbs_create+0xa>
    if (!platform_conf->read || !platform_conf->write)
 8007438:	686b      	ldr	r3, [r5, #4]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d0e7      	beq.n	800740e <nmbs_create+0xa>
 800743e:	68ab      	ldr	r3, [r5, #8]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d0e4      	beq.n	800740e <nmbs_create+0xa>
    nmbs->platform = *platform_conf;
 8007444:	347c      	adds	r4, #124	@ 0x7c
 8007446:	cd0e      	ldmia	r5!, {r1, r2, r3}
 8007448:	c40e      	stmia	r4!, {r1, r2, r3}
    return NMBS_ERROR_NONE;
 800744a:	2000      	movs	r0, #0
    nmbs->platform = *platform_conf;
 800744c:	cd0e      	ldmia	r5!, {r1, r2, r3}
 800744e:	c40e      	stmia	r4!, {r1, r2, r3}
    return NMBS_ERROR_NONE;
 8007450:	e7df      	b.n	8007412 <nmbs_create+0xe>
 8007452:	46c0      	nop			@ (mov r8, r8)
 8007454:	ffffdebe 	.word	0xffffdebe

08007458 <nmbs_set_read_timeout>:
    nmbs->read_timeout_ms = timeout_ms;
 8007458:	6781      	str	r1, [r0, #120]	@ 0x78
}
 800745a:	4770      	bx	lr

0800745c <nmbs_set_byte_timeout>:
    nmbs->byte_timeout_ms = timeout_ms;
 800745c:	6741      	str	r1, [r0, #116]	@ 0x74
}
 800745e:	4770      	bx	lr

08007460 <nmbs_platform_conf_create>:
void nmbs_platform_conf_create(nmbs_platform_conf* platform_conf) {
 8007460:	b510      	push	{r4, lr}
 8007462:	0004      	movs	r4, r0
    memset(platform_conf, 0, sizeof(nmbs_platform_conf));
 8007464:	2218      	movs	r2, #24
 8007466:	2100      	movs	r1, #0
 8007468:	f004 f8f0 	bl	800b64c <memset>
    platform_conf->crc_calc = nmbs_crc_calc;
 800746c:	4b02      	ldr	r3, [pc, #8]	@ (8007478 <nmbs_platform_conf_create+0x18>)
 800746e:	60e3      	str	r3, [r4, #12]
    platform_conf->initialized = 0xFFFFDEBE;
 8007470:	4b02      	ldr	r3, [pc, #8]	@ (800747c <nmbs_platform_conf_create+0x1c>)
 8007472:	6163      	str	r3, [r4, #20]
}
 8007474:	bd10      	pop	{r4, pc}
 8007476:	46c0      	nop			@ (mov r8, r8)
 8007478:	08006ef9 	.word	0x08006ef9
 800747c:	ffffdebe 	.word	0xffffdebe

08007480 <recv_write_single_coil_res>:
nmbs_error recv_write_single_coil_res(nmbs_t* nmbs, uint16_t address, uint16_t value_req) {
 8007480:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007482:	0004      	movs	r4, r0
 8007484:	000f      	movs	r7, r1
 8007486:	0015      	movs	r5, r2
    nmbs_error err = recv_res_header(nmbs);
 8007488:	f7ff fe00 	bl	800708c <recv_res_header>
    if (err != NMBS_ERROR_NONE)
 800748c:	2800      	cmp	r0, #0
 800748e:	d118      	bne.n	80074c2 <recv_write_single_coil_res+0x42>
    err = recv(nmbs, 4);
 8007490:	2104      	movs	r1, #4
 8007492:	0020      	movs	r0, r4
 8007494:	f7ff fd0a 	bl	8006eac <recv>
    if (err != NMBS_ERROR_NONE)
 8007498:	2800      	cmp	r0, #0
 800749a:	d112      	bne.n	80074c2 <recv_write_single_coil_res+0x42>
    uint16_t address_res = get_2(nmbs);
 800749c:	0020      	movs	r0, r4
 800749e:	f7ff fce4 	bl	8006e6a <get_2>
 80074a2:	0006      	movs	r6, r0
    uint16_t value_res = get_2(nmbs);
 80074a4:	0020      	movs	r0, r4
 80074a6:	f7ff fce0 	bl	8006e6a <get_2>
 80074aa:	9001      	str	r0, [sp, #4]
    err = recv_msg_footer(nmbs);
 80074ac:	0020      	movs	r0, r4
 80074ae:	f7ff fd3f 	bl	8006f30 <recv_msg_footer>
    if (err != NMBS_ERROR_NONE)
 80074b2:	2800      	cmp	r0, #0
 80074b4:	d105      	bne.n	80074c2 <recv_write_single_coil_res+0x42>
    if (address_res != address)
 80074b6:	42b7      	cmp	r7, r6
 80074b8:	d104      	bne.n	80074c4 <recv_write_single_coil_res+0x44>
    if (value_res != value_req)
 80074ba:	9b01      	ldr	r3, [sp, #4]
 80074bc:	429d      	cmp	r5, r3
 80074be:	d000      	beq.n	80074c2 <recv_write_single_coil_res+0x42>
        return NMBS_ERROR_INVALID_RESPONSE;
 80074c0:	3802      	subs	r0, #2
}
 80074c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        return NMBS_ERROR_INVALID_RESPONSE;
 80074c4:	2002      	movs	r0, #2
 80074c6:	4240      	negs	r0, r0
 80074c8:	e7fb      	b.n	80074c2 <recv_write_single_coil_res+0x42>

080074ca <recv_read_file_record_res>:
nmbs_error recv_read_file_record_res(nmbs_t* nmbs, uint16_t* registers, uint16_t count) {
 80074ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074cc:	b085      	sub	sp, #20
 80074ce:	0005      	movs	r5, r0
 80074d0:	9101      	str	r1, [sp, #4]
 80074d2:	9202      	str	r2, [sp, #8]
    nmbs_error err = recv_res_header(nmbs);
 80074d4:	f7ff fdda 	bl	800708c <recv_res_header>
 80074d8:	1e04      	subs	r4, r0, #0
    if (err != NMBS_ERROR_NONE)
 80074da:	d10d      	bne.n	80074f8 <recv_read_file_record_res+0x2e>
    err = recv(nmbs, 1);
 80074dc:	2101      	movs	r1, #1
 80074de:	0028      	movs	r0, r5
 80074e0:	f7ff fce4 	bl	8006eac <recv>
 80074e4:	1e04      	subs	r4, r0, #0
    if (err != NMBS_ERROR_NONE)
 80074e6:	d107      	bne.n	80074f8 <recv_read_file_record_res+0x2e>
    uint8_t response_size = get_1(nmbs);
 80074e8:	0028      	movs	r0, r5
 80074ea:	f7ff fcb3 	bl	8006e54 <get_1>
 80074ee:	0001      	movs	r1, r0
    if (response_size > 250) {
 80074f0:	28fa      	cmp	r0, #250	@ 0xfa
 80074f2:	d904      	bls.n	80074fe <recv_read_file_record_res+0x34>
        return NMBS_ERROR_INVALID_RESPONSE;
 80074f4:	2402      	movs	r4, #2
 80074f6:	4264      	negs	r4, r4
}
 80074f8:	0020      	movs	r0, r4
 80074fa:	b005      	add	sp, #20
 80074fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    err = recv(nmbs, response_size);
 80074fe:	0028      	movs	r0, r5
 8007500:	f7ff fcd4 	bl	8006eac <recv>
 8007504:	1e04      	subs	r4, r0, #0
    if (err != NMBS_ERROR_NONE)
 8007506:	d1f7      	bne.n	80074f8 <recv_read_file_record_res+0x2e>
    uint8_t subreq_data_size = get_1(nmbs) - 1;
 8007508:	0028      	movs	r0, r5
 800750a:	f7ff fca3 	bl	8006e54 <get_1>
 800750e:	3801      	subs	r0, #1
 8007510:	b2c6      	uxtb	r6, r0
    uint8_t subreq_reference_type = get_1(nmbs);
 8007512:	0028      	movs	r0, r5
 8007514:	f7ff fc9e 	bl	8006e54 <get_1>
 8007518:	9003      	str	r0, [sp, #12]
    uint8_t* msg_buf_ptr = nmbs->msg.buf + nmbs->msg.buf_idx;
 800751a:	8e6f      	ldrh	r7, [r5, #50]	@ 0x32
    err = recv_msg_footer(nmbs);
 800751c:	0028      	movs	r0, r5
    nmbs->msg.buf_idx += n;
 800751e:	19f3      	adds	r3, r6, r7
 8007520:	866b      	strh	r3, [r5, #50]	@ 0x32
    err = recv_msg_footer(nmbs);
 8007522:	f7ff fd05 	bl	8006f30 <recv_msg_footer>
 8007526:	1e04      	subs	r4, r0, #0
    if (err != NMBS_ERROR_NONE)
 8007528:	d1e6      	bne.n	80074f8 <recv_read_file_record_res+0x2e>
    if (registers) {
 800752a:	9b01      	ldr	r3, [sp, #4]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d0e3      	beq.n	80074f8 <recv_read_file_record_res+0x2e>
        if (subreq_reference_type != 6)
 8007530:	9b03      	ldr	r3, [sp, #12]
 8007532:	2b06      	cmp	r3, #6
 8007534:	d1de      	bne.n	80074f4 <recv_read_file_record_res+0x2a>
        if (count != (subreq_data_size / 2))
 8007536:	9a02      	ldr	r2, [sp, #8]
 8007538:	0873      	lsrs	r3, r6, #1
 800753a:	429a      	cmp	r2, r3
 800753c:	d1da      	bne.n	80074f4 <recv_read_file_record_res+0x2a>
    uint8_t* msg_buf_ptr = nmbs->msg.buf + nmbs->msg.buf_idx;
 800753e:	19ed      	adds	r5, r5, r7
        swap_regs(subreq_record_data, subreq_data_size / 2);
 8007540:	0011      	movs	r1, r2
 8007542:	0028      	movs	r0, r5
 8007544:	f7ff fca4 	bl	8006e90 <swap_regs>
        memcpy(registers, subreq_record_data, subreq_data_size);
 8007548:	0032      	movs	r2, r6
 800754a:	0029      	movs	r1, r5
 800754c:	9801      	ldr	r0, [sp, #4]
 800754e:	f004 f93d 	bl	800b7cc <memcpy>
 8007552:	e7d1      	b.n	80074f8 <recv_read_file_record_res+0x2e>

08007554 <recv_write_file_record_res>:
                                      const uint16_t* registers, uint16_t count) {
 8007554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007556:	b089      	sub	sp, #36	@ 0x24
 8007558:	9301      	str	r3, [sp, #4]
 800755a:	ab0e      	add	r3, sp, #56	@ 0x38
 800755c:	881b      	ldrh	r3, [r3, #0]
 800755e:	0005      	movs	r5, r0
 8007560:	9102      	str	r1, [sp, #8]
 8007562:	9203      	str	r2, [sp, #12]
 8007564:	9304      	str	r3, [sp, #16]
    nmbs_error err = recv_res_header(nmbs);
 8007566:	f7ff fd91 	bl	800708c <recv_res_header>
 800756a:	1e04      	subs	r4, r0, #0
    if (err != NMBS_ERROR_NONE)
 800756c:	d10d      	bne.n	800758a <recv_write_file_record_res+0x36>
    err = recv(nmbs, 1);
 800756e:	2101      	movs	r1, #1
 8007570:	0028      	movs	r0, r5
 8007572:	f7ff fc9b 	bl	8006eac <recv>
 8007576:	1e04      	subs	r4, r0, #0
    if (err != NMBS_ERROR_NONE)
 8007578:	d107      	bne.n	800758a <recv_write_file_record_res+0x36>
    uint8_t response_size = get_1(nmbs);
 800757a:	0028      	movs	r0, r5
 800757c:	f7ff fc6a 	bl	8006e54 <get_1>
 8007580:	0001      	movs	r1, r0
    if (response_size > 251)
 8007582:	28fb      	cmp	r0, #251	@ 0xfb
 8007584:	d904      	bls.n	8007590 <recv_write_file_record_res+0x3c>
        return NMBS_ERROR_INVALID_RESPONSE;
 8007586:	2402      	movs	r4, #2
 8007588:	4264      	negs	r4, r4
}
 800758a:	0020      	movs	r0, r4
 800758c:	b009      	add	sp, #36	@ 0x24
 800758e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    err = recv(nmbs, response_size);
 8007590:	0028      	movs	r0, r5
 8007592:	f7ff fc8b 	bl	8006eac <recv>
 8007596:	1e04      	subs	r4, r0, #0
    if (err != NMBS_ERROR_NONE)
 8007598:	d1f7      	bne.n	800758a <recv_write_file_record_res+0x36>
    uint8_t subreq_reference_type = get_1(nmbs);
 800759a:	0028      	movs	r0, r5
 800759c:	f7ff fc5a 	bl	8006e54 <get_1>
 80075a0:	9005      	str	r0, [sp, #20]
    uint16_t subreq_file_number = get_2(nmbs);
 80075a2:	0028      	movs	r0, r5
 80075a4:	f7ff fc61 	bl	8006e6a <get_2>
 80075a8:	9006      	str	r0, [sp, #24]
    uint16_t subreq_record_number = get_2(nmbs);
 80075aa:	0028      	movs	r0, r5
 80075ac:	f7ff fc5d 	bl	8006e6a <get_2>
 80075b0:	9007      	str	r0, [sp, #28]
    uint16_t subreq_record_length = get_2(nmbs);
 80075b2:	0028      	movs	r0, r5
 80075b4:	f7ff fc59 	bl	8006e6a <get_2>
    uint16_t subreq_data_size = subreq_record_length * 2;
 80075b8:	0043      	lsls	r3, r0, #1
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	9300      	str	r3, [sp, #0]
    uint8_t* msg_buf_ptr = nmbs->msg.buf + nmbs->msg.buf_idx;
 80075be:	8e6f      	ldrh	r7, [r5, #50]	@ 0x32
    uint16_t subreq_record_length = get_2(nmbs);
 80075c0:	0006      	movs	r6, r0
    nmbs->msg.buf_idx += n;
 80075c2:	19db      	adds	r3, r3, r7
    err = recv_msg_footer(nmbs);
 80075c4:	0028      	movs	r0, r5
    nmbs->msg.buf_idx += n;
 80075c6:	866b      	strh	r3, [r5, #50]	@ 0x32
    err = recv_msg_footer(nmbs);
 80075c8:	f7ff fcb2 	bl	8006f30 <recv_msg_footer>
 80075cc:	1e04      	subs	r4, r0, #0
    if (err != NMBS_ERROR_NONE)
 80075ce:	d1dc      	bne.n	800758a <recv_write_file_record_res+0x36>
    if (registers) {
 80075d0:	9b01      	ldr	r3, [sp, #4]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d0d9      	beq.n	800758a <recv_write_file_record_res+0x36>
        if (subreq_reference_type != 6)
 80075d6:	9b05      	ldr	r3, [sp, #20]
 80075d8:	2b06      	cmp	r3, #6
 80075da:	d1d4      	bne.n	8007586 <recv_write_file_record_res+0x32>
        if (subreq_file_number != file_number)
 80075dc:	9b02      	ldr	r3, [sp, #8]
 80075de:	9a06      	ldr	r2, [sp, #24]
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d1d0      	bne.n	8007586 <recv_write_file_record_res+0x32>
        if (subreq_record_number != record_number)
 80075e4:	9b03      	ldr	r3, [sp, #12]
 80075e6:	9a07      	ldr	r2, [sp, #28]
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d1cc      	bne.n	8007586 <recv_write_file_record_res+0x32>
        if (subreq_record_length != count)
 80075ec:	9b04      	ldr	r3, [sp, #16]
 80075ee:	42b3      	cmp	r3, r6
 80075f0:	d1c9      	bne.n	8007586 <recv_write_file_record_res+0x32>
    uint8_t* msg_buf_ptr = nmbs->msg.buf + nmbs->msg.buf_idx;
 80075f2:	19ed      	adds	r5, r5, r7
        swap_regs(subreq_record_data, subreq_record_length);
 80075f4:	0031      	movs	r1, r6
 80075f6:	0028      	movs	r0, r5
 80075f8:	f7ff fc4a 	bl	8006e90 <swap_regs>
        if (memcmp(registers, subreq_record_data, subreq_data_size) != 0)
 80075fc:	0029      	movs	r1, r5
 80075fe:	9a00      	ldr	r2, [sp, #0]
 8007600:	9801      	ldr	r0, [sp, #4]
 8007602:	f004 f815 	bl	800b630 <memcmp>
 8007606:	2800      	cmp	r0, #0
 8007608:	d0bf      	beq.n	800758a <recv_write_file_record_res+0x36>
 800760a:	e7bc      	b.n	8007586 <recv_write_file_record_res+0x32>

0800760c <recv_read_device_identification_res>:
                                               uint8_t* next_object_id_out, uint8_t* objects_count_out) {
 800760c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800760e:	b085      	sub	sp, #20
 8007610:	0004      	movs	r4, r0
 8007612:	000f      	movs	r7, r1
 8007614:	9200      	str	r2, [sp, #0]
 8007616:	9303      	str	r3, [sp, #12]
    nmbs_error err = recv_res_header(nmbs);
 8007618:	f7ff fd38 	bl	800708c <recv_res_header>
    if (err != NMBS_ERROR_NONE)
 800761c:	2800      	cmp	r0, #0
 800761e:	d149      	bne.n	80076b4 <recv_read_device_identification_res+0xa8>
    err = recv(nmbs, 6);
 8007620:	2106      	movs	r1, #6
 8007622:	0020      	movs	r0, r4
 8007624:	f7ff fc42 	bl	8006eac <recv>
    if (err != NMBS_ERROR_NONE)
 8007628:	2800      	cmp	r0, #0
 800762a:	d143      	bne.n	80076b4 <recv_read_device_identification_res+0xa8>
    uint8_t mei_type = get_1(nmbs);
 800762c:	0020      	movs	r0, r4
 800762e:	f7ff fc11 	bl	8006e54 <get_1>
    if (mei_type != 0x0E)
 8007632:	280e      	cmp	r0, #14
 8007634:	d002      	beq.n	800763c <recv_read_device_identification_res+0x30>
        return NMBS_ERROR_INVALID_RESPONSE;
 8007636:	2002      	movs	r0, #2
        return NMBS_ERROR_INVALID_ARGUMENT;
 8007638:	4240      	negs	r0, r0
 800763a:	e03b      	b.n	80076b4 <recv_read_device_identification_res+0xa8>
    uint8_t read_device_id_code = get_1(nmbs);
 800763c:	0020      	movs	r0, r4
 800763e:	f7ff fc09 	bl	8006e54 <get_1>
    if (read_device_id_code < 1 || read_device_id_code > 4)
 8007642:	3801      	subs	r0, #1
 8007644:	b2c0      	uxtb	r0, r0
 8007646:	2803      	cmp	r0, #3
 8007648:	d8f5      	bhi.n	8007636 <recv_read_device_identification_res+0x2a>
    uint8_t conformity_level = get_1(nmbs);
 800764a:	0020      	movs	r0, r4
 800764c:	f7ff fc02 	bl	8006e54 <get_1>
    if (conformity_level < 1 || (conformity_level > 3 && conformity_level < 0x81) || conformity_level > 0x83)
 8007650:	1e43      	subs	r3, r0, #1
 8007652:	b2db      	uxtb	r3, r3
 8007654:	2b82      	cmp	r3, #130	@ 0x82
 8007656:	d8ee      	bhi.n	8007636 <recv_read_device_identification_res+0x2a>
 8007658:	3804      	subs	r0, #4
 800765a:	b2c0      	uxtb	r0, r0
 800765c:	287c      	cmp	r0, #124	@ 0x7c
 800765e:	d9ea      	bls.n	8007636 <recv_read_device_identification_res+0x2a>
    uint8_t more_follows = get_1(nmbs);
 8007660:	0020      	movs	r0, r4
 8007662:	f7ff fbf7 	bl	8006e54 <get_1>
    if (more_follows != 0 && more_follows != 0xFF)
 8007666:	1e43      	subs	r3, r0, #1
 8007668:	b2db      	uxtb	r3, r3
    uint8_t more_follows = get_1(nmbs);
 800766a:	0006      	movs	r6, r0
    if (more_follows != 0 && more_follows != 0xFF)
 800766c:	2bfd      	cmp	r3, #253	@ 0xfd
 800766e:	d9e2      	bls.n	8007636 <recv_read_device_identification_res+0x2a>
    uint8_t next_object_id = get_1(nmbs);
 8007670:	0020      	movs	r0, r4
 8007672:	f7ff fbef 	bl	8006e54 <get_1>
 8007676:	0005      	movs	r5, r0
    uint8_t objects_count = get_1(nmbs);
 8007678:	0020      	movs	r0, r4
 800767a:	f7ff fbeb 	bl	8006e54 <get_1>
    if (objects_count_out)
 800767e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
    uint8_t objects_count = get_1(nmbs);
 8007680:	9001      	str	r0, [sp, #4]
    if (objects_count_out)
 8007682:	2b00      	cmp	r3, #0
 8007684:	d000      	beq.n	8007688 <recv_read_device_identification_res+0x7c>
        *objects_count_out = objects_count;
 8007686:	7018      	strb	r0, [r3, #0]
    if (buffers_count == 0) {
 8007688:	2f00      	cmp	r7, #0
 800768a:	d004      	beq.n	8007696 <recv_read_device_identification_res+0x8a>
    else if (objects_count > buffers_count)
 800768c:	9b01      	ldr	r3, [sp, #4]
 800768e:	429f      	cmp	r7, r3
 8007690:	d202      	bcs.n	8007698 <recv_read_device_identification_res+0x8c>
        return NMBS_ERROR_INVALID_ARGUMENT;
 8007692:	2001      	movs	r0, #1
 8007694:	e7d0      	b.n	8007638 <recv_read_device_identification_res+0x2c>
        buffers_out = NULL;
 8007696:	9700      	str	r7, [sp, #0]
    if (more_follows == 0)
 8007698:	2e00      	cmp	r6, #0
 800769a:	d100      	bne.n	800769e <recv_read_device_identification_res+0x92>
        next_object_id = 0x7F;    // This value is reserved in the spec, we use it to signal stream is finished
 800769c:	257f      	movs	r5, #127	@ 0x7f
    if (next_object_id_out)
 800769e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d000      	beq.n	80076a6 <recv_read_device_identification_res+0x9a>
        *next_object_id_out = next_object_id;
 80076a4:	701d      	strb	r5, [r3, #0]
        next_object_id = 0x7F;    // This value is reserved in the spec, we use it to signal stream is finished
 80076a6:	2700      	movs	r7, #0
    for (int i = 0; i < objects_count; i++) {
 80076a8:	9b01      	ldr	r3, [sp, #4]
 80076aa:	429f      	cmp	r7, r3
 80076ac:	db04      	blt.n	80076b8 <recv_read_device_identification_res+0xac>
    return recv_msg_footer(nmbs);
 80076ae:	0020      	movs	r0, r4
 80076b0:	f7ff fc3e 	bl	8006f30 <recv_msg_footer>
}
 80076b4:	b005      	add	sp, #20
 80076b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        err = recv(nmbs, 2);
 80076b8:	2102      	movs	r1, #2
 80076ba:	0020      	movs	r0, r4
 80076bc:	f7ff fbf6 	bl	8006eac <recv>
        if (err != NMBS_ERROR_NONE)
 80076c0:	2800      	cmp	r0, #0
 80076c2:	d1f7      	bne.n	80076b4 <recv_read_device_identification_res+0xa8>
        uint8_t object_id = get_1(nmbs);
 80076c4:	0020      	movs	r0, r4
 80076c6:	f7ff fbc5 	bl	8006e54 <get_1>
 80076ca:	9002      	str	r0, [sp, #8]
        uint8_t object_length = get_1(nmbs);
 80076cc:	0020      	movs	r0, r4
 80076ce:	f7ff fbc1 	bl	8006e54 <get_1>
 80076d2:	b2fd      	uxtb	r5, r7
        if (object_length > res_size_left)
 80076d4:	006b      	lsls	r3, r5, #1
 80076d6:	425b      	negs	r3, r3
 80076d8:	3b0c      	subs	r3, #12
 80076da:	b2db      	uxtb	r3, r3
        uint8_t object_length = get_1(nmbs);
 80076dc:	0006      	movs	r6, r0
        if (object_length > res_size_left)
 80076de:	4298      	cmp	r0, r3
 80076e0:	d8a9      	bhi.n	8007636 <recv_read_device_identification_res+0x2a>
        err = recv(nmbs, object_length);
 80076e2:	0001      	movs	r1, r0
 80076e4:	0020      	movs	r0, r4
 80076e6:	f7ff fbe1 	bl	8006eac <recv>
        if (err != NMBS_ERROR_NONE)
 80076ea:	2800      	cmp	r0, #0
 80076ec:	d1e2      	bne.n	80076b4 <recv_read_device_identification_res+0xa8>
    uint8_t* msg_buf_ptr = nmbs->msg.buf + nmbs->msg.buf_idx;
 80076ee:	8e61      	ldrh	r1, [r4, #50]	@ 0x32
    nmbs->msg.buf_idx += n;
 80076f0:	1873      	adds	r3, r6, r1
 80076f2:	8663      	strh	r3, [r4, #50]	@ 0x32
        if (ids_out)
 80076f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d001      	beq.n	80076fe <recv_read_device_identification_res+0xf2>
            ids_out[i] = object_id;
 80076fa:	9a02      	ldr	r2, [sp, #8]
 80076fc:	55da      	strb	r2, [r3, r7]
        if (order)
 80076fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007700:	2b00      	cmp	r3, #0
 8007702:	d001      	beq.n	8007708 <recv_read_device_identification_res+0xfc>
            buf_index = order[object_id];
 8007704:	9a02      	ldr	r2, [sp, #8]
 8007706:	5c9d      	ldrb	r5, [r3, r2]
        if (buffers_out) {
 8007708:	9b00      	ldr	r3, [sp, #0]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d009      	beq.n	8007722 <recv_read_device_identification_res+0x116>
            strncpy(buffers_out[buf_index], str, buffers_length);
 800770e:	00ad      	lsls	r5, r5, #2
 8007710:	195d      	adds	r5, r3, r5
 8007712:	9a03      	ldr	r2, [sp, #12]
 8007714:	6828      	ldr	r0, [r5, #0]
    uint8_t* msg_buf_ptr = nmbs->msg.buf + nmbs->msg.buf_idx;
 8007716:	1861      	adds	r1, r4, r1
            strncpy(buffers_out[buf_index], str, buffers_length);
 8007718:	f003 ffa0 	bl	800b65c <strncpy>
            buffers_out[buf_index][object_length] = 0;
 800771c:	2200      	movs	r2, #0
 800771e:	682b      	ldr	r3, [r5, #0]
 8007720:	559a      	strb	r2, [r3, r6]
    for (int i = 0; i < objects_count; i++) {
 8007722:	3701      	adds	r7, #1
 8007724:	e7c0      	b.n	80076a8 <recv_read_device_identification_res+0x9c>
	...

08007728 <nmbs_callbacks_create>:

    return err;
}


void nmbs_callbacks_create(nmbs_callbacks* callbacks) {
 8007728:	b510      	push	{r4, lr}
 800772a:	0004      	movs	r4, r0
    memset(callbacks, 0, sizeof(nmbs_callbacks));
 800772c:	2238      	movs	r2, #56	@ 0x38
 800772e:	2100      	movs	r1, #0
 8007730:	f003 ff8c 	bl	800b64c <memset>
    callbacks->initialized = 0xFFFFDEBE;
 8007734:	4b01      	ldr	r3, [pc, #4]	@ (800773c <nmbs_callbacks_create+0x14>)
 8007736:	6363      	str	r3, [r4, #52]	@ 0x34
}
 8007738:	bd10      	pop	{r4, pc}
 800773a:	46c0      	nop			@ (mov r8, r8)
 800773c:	ffffdebe 	.word	0xffffdebe

08007740 <nmbs_server_create>:


nmbs_error nmbs_server_create(nmbs_t* nmbs, uint8_t address_rtu, const nmbs_platform_conf* platform_conf,
                              const nmbs_callbacks* callbacks) {
 8007740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007742:	001e      	movs	r6, r3
    if (platform_conf->transport == NMBS_TRANSPORT_RTU && address_rtu == 0)
 8007744:	7813      	ldrb	r3, [r2, #0]
                              const nmbs_callbacks* callbacks) {
 8007746:	000f      	movs	r7, r1
 8007748:	0005      	movs	r5, r0
 800774a:	0011      	movs	r1, r2
    if (platform_conf->transport == NMBS_TRANSPORT_RTU && address_rtu == 0)
 800774c:	2b01      	cmp	r3, #1
 800774e:	d101      	bne.n	8007754 <nmbs_server_create+0x14>
 8007750:	2f00      	cmp	r7, #0
 8007752:	d015      	beq.n	8007780 <nmbs_server_create+0x40>
        return NMBS_ERROR_INVALID_ARGUMENT;

    if (!callbacks || callbacks->initialized != 0xFFFFDEBE)
 8007754:	2e00      	cmp	r6, #0
 8007756:	d013      	beq.n	8007780 <nmbs_server_create+0x40>
 8007758:	4b0b      	ldr	r3, [pc, #44]	@ (8007788 <nmbs_server_create+0x48>)
 800775a:	6b72      	ldr	r2, [r6, #52]	@ 0x34
 800775c:	429a      	cmp	r2, r3
 800775e:	d10f      	bne.n	8007780 <nmbs_server_create+0x40>
        return NMBS_ERROR_INVALID_ARGUMENT;

    nmbs_error ret = nmbs_create(nmbs, platform_conf);
 8007760:	0028      	movs	r0, r5
 8007762:	f7ff fe4f 	bl	8007404 <nmbs_create>
 8007766:	1e04      	subs	r4, r0, #0
    if (ret != NMBS_ERROR_NONE)
 8007768:	d108      	bne.n	800777c <nmbs_server_create+0x3c>
        return ret;

    nmbs->address_rtu = address_rtu;
 800776a:	002b      	movs	r3, r5
    nmbs->callbacks = *callbacks;
 800776c:	0028      	movs	r0, r5
    nmbs->address_rtu = address_rtu;
 800776e:	3394      	adds	r3, #148	@ 0x94
    nmbs->callbacks = *callbacks;
 8007770:	2238      	movs	r2, #56	@ 0x38
 8007772:	0031      	movs	r1, r6
    nmbs->address_rtu = address_rtu;
 8007774:	701f      	strb	r7, [r3, #0]
    nmbs->callbacks = *callbacks;
 8007776:	303c      	adds	r0, #60	@ 0x3c
 8007778:	f004 f828 	bl	800b7cc <memcpy>

    return NMBS_ERROR_NONE;
}
 800777c:	0020      	movs	r0, r4
 800777e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NMBS_ERROR_INVALID_ARGUMENT;
 8007780:	2401      	movs	r4, #1
 8007782:	4264      	negs	r4, r4
 8007784:	e7fa      	b.n	800777c <nmbs_server_create+0x3c>
 8007786:	46c0      	nop			@ (mov r8, r8)
 8007788:	ffffdebe 	.word	0xffffdebe

0800778c <nmbs_server_poll>:
    nmbs->msg.complete = false;
 800778c:	0002      	movs	r2, r0
    nmbs->msg.buf_idx = 0;
 800778e:	2300      	movs	r3, #0


nmbs_error nmbs_server_poll(nmbs_t* nmbs) {
 8007790:	b5f0      	push	{r4, r5, r6, r7, lr}
    nmbs->msg.complete = false;
 8007792:	323a      	adds	r2, #58	@ 0x3a
nmbs_error nmbs_server_poll(nmbs_t* nmbs) {
 8007794:	b0d7      	sub	sp, #348	@ 0x15c
    nmbs->msg.buf_idx = 0;
 8007796:	8643      	strh	r3, [r0, #50]	@ 0x32
    nmbs->msg.unit_id = 0;
 8007798:	6343      	str	r3, [r0, #52]	@ 0x34
    nmbs->msg.broadcast = false;
 800779a:	8703      	strh	r3, [r0, #56]	@ 0x38
nmbs_error nmbs_server_poll(nmbs_t* nmbs) {
 800779c:	af04      	add	r7, sp, #16
    nmbs->msg.complete = false;
 800779e:	7013      	strb	r3, [r2, #0]
    const nmbs_error err = recv_msg_header(nmbs, first_byte_received);
 80077a0:	332f      	adds	r3, #47	@ 0x2f
 80077a2:	18f9      	adds	r1, r7, r3
nmbs_error nmbs_server_poll(nmbs_t* nmbs) {
 80077a4:	0006      	movs	r6, r0
    const nmbs_error err = recv_msg_header(nmbs, first_byte_received);
 80077a6:	f7ff fbe1 	bl	8006f6c <recv_msg_header>
 80077aa:	1e04      	subs	r4, r0, #0
    if (err != NMBS_ERROR_NONE)
 80077ac:	d008      	beq.n	80077c0 <nmbs_server_poll+0x34>
    msg_state_reset(nmbs);

    bool first_byte_received = false;
    nmbs_error err = recv_req_header(nmbs, &first_byte_received);
    if (err != NMBS_ERROR_NONE) {
        if (!first_byte_received && err == NMBS_ERROR_TIMEOUT)
 80077ae:	232f      	movs	r3, #47	@ 0x2f
 80077b0:	18fb      	adds	r3, r7, r3
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d03c      	beq.n	8007832 <nmbs_server_poll+0xa6>

        return err;
    }

    return NMBS_ERROR_NONE;
}
 80077b8:	0020      	movs	r0, r4
 80077ba:	46bd      	mov	sp, r7
 80077bc:	b053      	add	sp, #332	@ 0x14c
 80077be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 80077c0:	0033      	movs	r3, r6
 80077c2:	337c      	adds	r3, #124	@ 0x7c
 80077c4:	623b      	str	r3, [r7, #32]
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d105      	bne.n	80077d8 <nmbs_server_poll+0x4c>
        if (nmbs->msg.unit_id == NMBS_BROADCAST_ADDRESS)
 80077cc:	0032      	movs	r2, r6
 80077ce:	3234      	adds	r2, #52	@ 0x34
 80077d0:	7811      	ldrb	r1, [r2, #0]
 80077d2:	2900      	cmp	r1, #0
 80077d4:	d123      	bne.n	800781e <nmbs_server_poll+0x92>
            nmbs->msg.broadcast = true;
 80077d6:	7113      	strb	r3, [r2, #4]
    switch (nmbs->msg.fc) {
 80077d8:	0033      	movs	r3, r6
 80077da:	3335      	adds	r3, #53	@ 0x35
 80077dc:	7818      	ldrb	r0, [r3, #0]
 80077de:	2817      	cmp	r0, #23
 80077e0:	d82b      	bhi.n	800783a <nmbs_server_poll+0xae>
 80077e2:	2800      	cmp	r0, #0
 80077e4:	d02d      	beq.n	8007842 <nmbs_server_poll+0xb6>
 80077e6:	3801      	subs	r0, #1
 80077e8:	2816      	cmp	r0, #22
 80077ea:	d82a      	bhi.n	8007842 <nmbs_server_poll+0xb6>
 80077ec:	f7f8 fca8 	bl	8000140 <__gnu_thumb1_case_uhi>
 80077f0:	003e0038 	.word	0x003e0038
 80077f4:	00450040 	.word	0x00450040
 80077f8:	008c0047 	.word	0x008c0047
 80077fc:	00290029 	.word	0x00290029
 8007800:	00290029 	.word	0x00290029
 8007804:	00290029 	.word	0x00290029
 8007808:	00290029 	.word	0x00290029
 800780c:	013b00d1 	.word	0x013b00d1
 8007810:	00290029 	.word	0x00290029
 8007814:	01a60029 	.word	0x01a60029
 8007818:	0029028c 	.word	0x0029028c
 800781c:	0338      	.short	0x0338
        else if (nmbs->msg.unit_id != nmbs->address_rtu)
 800781e:	0032      	movs	r2, r6
 8007820:	3294      	adds	r2, #148	@ 0x94
 8007822:	7814      	ldrb	r4, [r2, #0]
 8007824:	3a5b      	subs	r2, #91	@ 0x5b
 8007826:	428c      	cmp	r4, r1
 8007828:	d001      	beq.n	800782e <nmbs_server_poll+0xa2>
            nmbs->msg.ignored = true;
 800782a:	7013      	strb	r3, [r2, #0]
    if (err != NMBS_ERROR_NONE) {
 800782c:	e7d4      	b.n	80077d8 <nmbs_server_poll+0x4c>
            nmbs->msg.ignored = false;
 800782e:	7010      	strb	r0, [r2, #0]
    if (err != NMBS_ERROR_NONE) {
 8007830:	e7d2      	b.n	80077d8 <nmbs_server_poll+0x4c>
        if (!first_byte_received && err == NMBS_ERROR_TIMEOUT)
 8007832:	1cc3      	adds	r3, r0, #3
 8007834:	d1c0      	bne.n	80077b8 <nmbs_server_poll+0x2c>
            return NMBS_ERROR_NONE;
 8007836:	2400      	movs	r4, #0
 8007838:	e7be      	b.n	80077b8 <nmbs_server_poll+0x2c>
    switch (nmbs->msg.fc) {
 800783a:	282b      	cmp	r0, #43	@ 0x2b
 800783c:	d101      	bne.n	8007842 <nmbs_server_poll+0xb6>
 800783e:	f000 fbe4 	bl	800800a <nmbs_server_poll+0x87e>
            flush(nmbs);
 8007842:	0030      	movs	r0, r6
 8007844:	f7ff fb4d 	bl	8006ee2 <flush>
            if (!nmbs->msg.ignored && !nmbs->msg.broadcast)
 8007848:	0033      	movs	r3, r6
 800784a:	3339      	adds	r3, #57	@ 0x39
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d1f1      	bne.n	8007836 <nmbs_server_poll+0xaa>
 8007852:	0033      	movs	r3, r6
 8007854:	3338      	adds	r3, #56	@ 0x38
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d1ec      	bne.n	8007836 <nmbs_server_poll+0xaa>
 800785c:	f000 fbfa 	bl	8008054 <nmbs_server_poll+0x8c8>
    return handle_read_discrete(nmbs, nmbs->callbacks.read_coils);
 8007860:	6bf1      	ldr	r1, [r6, #60]	@ 0x3c
    return handle_read_discrete(nmbs, nmbs->callbacks.read_discrete_inputs);
 8007862:	0030      	movs	r0, r6
 8007864:	f7ff fcf2 	bl	800724c <handle_read_discrete>
                err = send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 8007868:	0004      	movs	r4, r0
 800786a:	e1ca      	b.n	8007c02 <nmbs_server_poll+0x476>
    return handle_read_discrete(nmbs, nmbs->callbacks.read_discrete_inputs);
 800786c:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 800786e:	e7f8      	b.n	8007862 <nmbs_server_poll+0xd6>
    return handle_read_registers(nmbs, nmbs->callbacks.read_holding_registers);
 8007870:	6c71      	ldr	r1, [r6, #68]	@ 0x44
    return handle_read_registers(nmbs, nmbs->callbacks.read_input_registers);
 8007872:	0030      	movs	r0, r6
 8007874:	f7ff fd56 	bl	8007324 <handle_read_registers>
 8007878:	e7f6      	b.n	8007868 <nmbs_server_poll+0xdc>
 800787a:	6cb1      	ldr	r1, [r6, #72]	@ 0x48
 800787c:	e7f9      	b.n	8007872 <nmbs_server_poll+0xe6>
    nmbs_error err = recv(nmbs, 4);
 800787e:	2104      	movs	r1, #4
 8007880:	0030      	movs	r0, r6
 8007882:	f7ff fb13 	bl	8006eac <recv>
 8007886:	1e04      	subs	r4, r0, #0
    if (err != NMBS_ERROR_NONE)
 8007888:	d000      	beq.n	800788c <nmbs_server_poll+0x100>
 800788a:	e18f      	b.n	8007bac <nmbs_server_poll+0x420>
    uint16_t address = get_2(nmbs);
 800788c:	0030      	movs	r0, r6
 800788e:	f7ff faec 	bl	8006e6a <get_2>
 8007892:	6278      	str	r0, [r7, #36]	@ 0x24
    uint16_t value = get_2(nmbs);
 8007894:	0030      	movs	r0, r6
 8007896:	f7ff fae8 	bl	8006e6a <get_2>
 800789a:	0005      	movs	r5, r0
    err = recv_msg_footer(nmbs);
 800789c:	0030      	movs	r0, r6
 800789e:	f7ff fb47 	bl	8006f30 <recv_msg_footer>
 80078a2:	1e04      	subs	r4, r0, #0
    if (err != NMBS_ERROR_NONE)
 80078a4:	d000      	beq.n	80078a8 <nmbs_server_poll+0x11c>
 80078a6:	e181      	b.n	8007bac <nmbs_server_poll+0x420>
    if (!nmbs->msg.ignored) {
 80078a8:	0033      	movs	r3, r6
 80078aa:	3339      	adds	r3, #57	@ 0x39
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d000      	beq.n	80078b4 <nmbs_server_poll+0x128>
 80078b2:	e0d5      	b.n	8007a60 <nmbs_server_poll+0x2d4>
        if (nmbs->callbacks.write_single_coil) {
 80078b4:	6cf4      	ldr	r4, [r6, #76]	@ 0x4c
 80078b6:	2c00      	cmp	r4, #0
 80078b8:	d100      	bne.n	80078bc <nmbs_server_poll+0x130>
 80078ba:	e3cb      	b.n	8008054 <nmbs_server_poll+0x8c8>
            if (value != 0 && value != 0xFF00)
 80078bc:	2d00      	cmp	r5, #0
 80078be:	d008      	beq.n	80078d2 <nmbs_server_poll+0x146>
 80078c0:	23ff      	movs	r3, #255	@ 0xff
 80078c2:	021b      	lsls	r3, r3, #8
 80078c4:	429d      	cmp	r5, r3
 80078c6:	d004      	beq.n	80078d2 <nmbs_server_poll+0x146>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 80078c8:	2103      	movs	r1, #3
                err = send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 80078ca:	0030      	movs	r0, r6
 80078cc:	f7ff fcab 	bl	8007226 <send_exception_msg>
 80078d0:	e7ca      	b.n	8007868 <nmbs_server_poll+0xdc>
            err = nmbs->callbacks.write_single_coil(address, value == 0 ? false : true, nmbs->msg.unit_id,
 80078d2:	0033      	movs	r3, r6
 80078d4:	0029      	movs	r1, r5
 80078d6:	3334      	adds	r3, #52	@ 0x34
 80078d8:	781a      	ldrb	r2, [r3, #0]
 80078da:	1e4b      	subs	r3, r1, #1
 80078dc:	4199      	sbcs	r1, r3
 80078de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80078e0:	6ef3      	ldr	r3, [r6, #108]	@ 0x6c
 80078e2:	b2c9      	uxtb	r1, r1
 80078e4:	47a0      	blx	r4
            if (err != NMBS_ERROR_NONE) {
 80078e6:	2800      	cmp	r0, #0
 80078e8:	d135      	bne.n	8007956 <nmbs_server_poll+0x1ca>
            if (!nmbs->msg.broadcast) {
 80078ea:	0033      	movs	r3, r6
 80078ec:	3338      	adds	r3, #56	@ 0x38
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1a0      	bne.n	8007836 <nmbs_server_poll+0xaa>
    put_msg_header(nmbs, data_length);
 80078f4:	2104      	movs	r1, #4
 80078f6:	0030      	movs	r0, r6
 80078f8:	f7ff fc6b 	bl	80071d2 <put_msg_header>
                put_2(nmbs, address);
 80078fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
                put_2(nmbs, address);
 80078fe:	0030      	movs	r0, r6
 8007900:	f7ff fabd 	bl	8006e7e <put_2>
                put_2(nmbs, quantity);
 8007904:	0029      	movs	r1, r5
 8007906:	e037      	b.n	8007978 <nmbs_server_poll+0x1ec>
    nmbs_error err = recv(nmbs, 4);
 8007908:	2104      	movs	r1, #4
 800790a:	0030      	movs	r0, r6
 800790c:	f7ff face 	bl	8006eac <recv>
 8007910:	1e04      	subs	r4, r0, #0
    if (err != NMBS_ERROR_NONE)
 8007912:	d000      	beq.n	8007916 <nmbs_server_poll+0x18a>
 8007914:	e14a      	b.n	8007bac <nmbs_server_poll+0x420>
    uint16_t address = get_2(nmbs);
 8007916:	0030      	movs	r0, r6
 8007918:	f7ff faa7 	bl	8006e6a <get_2>
 800791c:	0005      	movs	r5, r0
    uint16_t value = get_2(nmbs);
 800791e:	0030      	movs	r0, r6
 8007920:	f7ff faa3 	bl	8006e6a <get_2>
 8007924:	6278      	str	r0, [r7, #36]	@ 0x24
    err = recv_msg_footer(nmbs);
 8007926:	0030      	movs	r0, r6
 8007928:	f7ff fb02 	bl	8006f30 <recv_msg_footer>
 800792c:	1e04      	subs	r4, r0, #0
    if (err != NMBS_ERROR_NONE)
 800792e:	d000      	beq.n	8007932 <nmbs_server_poll+0x1a6>
 8007930:	e13c      	b.n	8007bac <nmbs_server_poll+0x420>
    if (!nmbs->msg.ignored) {
 8007932:	0033      	movs	r3, r6
 8007934:	3339      	adds	r3, #57	@ 0x39
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d124      	bne.n	8007986 <nmbs_server_poll+0x1fa>
        if (nmbs->callbacks.write_single_register) {
 800793c:	6d34      	ldr	r4, [r6, #80]	@ 0x50
 800793e:	2c00      	cmp	r4, #0
 8007940:	d100      	bne.n	8007944 <nmbs_server_poll+0x1b8>
 8007942:	e387      	b.n	8008054 <nmbs_server_poll+0x8c8>
            err = nmbs->callbacks.write_single_register(address, value, nmbs->msg.unit_id, nmbs->callbacks.arg);
 8007944:	0033      	movs	r3, r6
 8007946:	3334      	adds	r3, #52	@ 0x34
 8007948:	781a      	ldrb	r2, [r3, #0]
 800794a:	0028      	movs	r0, r5
 800794c:	6ef3      	ldr	r3, [r6, #108]	@ 0x6c
 800794e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007950:	47a0      	blx	r4
            if (err != NMBS_ERROR_NONE) {
 8007952:	2800      	cmp	r0, #0
 8007954:	d001      	beq.n	800795a <nmbs_server_poll+0x1ce>
                    if (nmbs_error_is_exception(err))
 8007956:	b2c1      	uxtb	r1, r0
 8007958:	e3a2      	b.n	80080a0 <nmbs_server_poll+0x914>
            if (!nmbs->msg.broadcast) {
 800795a:	0033      	movs	r3, r6
 800795c:	3338      	adds	r3, #56	@ 0x38
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d000      	beq.n	8007966 <nmbs_server_poll+0x1da>
 8007964:	e767      	b.n	8007836 <nmbs_server_poll+0xaa>
    put_msg_header(nmbs, data_length);
 8007966:	2104      	movs	r1, #4
 8007968:	0030      	movs	r0, r6
 800796a:	f7ff fc32 	bl	80071d2 <put_msg_header>
                put_2(nmbs, address);
 800796e:	0029      	movs	r1, r5
 8007970:	0030      	movs	r0, r6
 8007972:	f7ff fa84 	bl	8006e7e <put_2>
                put_2(nmbs, value);
 8007976:	6a79      	ldr	r1, [r7, #36]	@ 0x24
                put_2(nmbs, quantity);
 8007978:	0030      	movs	r0, r6
 800797a:	f7ff fa80 	bl	8006e7e <put_2>
            return send_msg(nmbs);
 800797e:	0030      	movs	r0, r6
 8007980:	f7ff fb5f 	bl	8007042 <send_msg>
 8007984:	e770      	b.n	8007868 <nmbs_server_poll+0xdc>
        return recv_write_single_register_res(nmbs, address, value);
 8007986:	0029      	movs	r1, r5
 8007988:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
        return recv_write_multiple_registers_res(nmbs, address, quantity);
 800798a:	0030      	movs	r0, r6
 800798c:	f7ff fd78 	bl	8007480 <recv_write_single_coil_res>
 8007990:	e76a      	b.n	8007868 <nmbs_server_poll+0xdc>
    nmbs_error err = recv(nmbs, 5);
 8007992:	2105      	movs	r1, #5
 8007994:	0030      	movs	r0, r6
 8007996:	f7ff fa89 	bl	8006eac <recv>
 800799a:	1e04      	subs	r4, r0, #0
    if (err != NMBS_ERROR_NONE)
 800799c:	d000      	beq.n	80079a0 <nmbs_server_poll+0x214>
 800799e:	e105      	b.n	8007bac <nmbs_server_poll+0x420>
    uint16_t address = get_2(nmbs);
 80079a0:	0030      	movs	r0, r6
 80079a2:	f7ff fa62 	bl	8006e6a <get_2>
 80079a6:	6278      	str	r0, [r7, #36]	@ 0x24
    uint16_t quantity = get_2(nmbs);
 80079a8:	0030      	movs	r0, r6
 80079aa:	f7ff fa5e 	bl	8006e6a <get_2>
 80079ae:	0005      	movs	r5, r0
    uint8_t coils_bytes = get_1(nmbs);
 80079b0:	0030      	movs	r0, r6
 80079b2:	f7ff fa4f 	bl	8006e54 <get_1>
 80079b6:	6238      	str	r0, [r7, #32]
    if (coils_bytes > 246)
 80079b8:	28f6      	cmp	r0, #246	@ 0xf6
 80079ba:	d905      	bls.n	80079c8 <nmbs_server_poll+0x23c>
        return NMBS_ERROR_INVALID_REQUEST;
 80079bc:	2408      	movs	r4, #8
 80079be:	4264      	negs	r4, r4
            flush(nmbs);
 80079c0:	0030      	movs	r0, r6
 80079c2:	f7ff fa8e 	bl	8006ee2 <flush>
 80079c6:	e6f7      	b.n	80077b8 <nmbs_server_poll+0x2c>
    err = recv(nmbs, coils_bytes);
 80079c8:	0030      	movs	r0, r6
 80079ca:	6a39      	ldr	r1, [r7, #32]
 80079cc:	f7ff fa6e 	bl	8006eac <recv>
 80079d0:	1e04      	subs	r4, r0, #0
    if (err != NMBS_ERROR_NONE)
 80079d2:	d000      	beq.n	80079d6 <nmbs_server_poll+0x24a>
 80079d4:	e0ea      	b.n	8007bac <nmbs_server_poll+0x420>
    nmbs_bitfield coils = {0};
 80079d6:	2228      	movs	r2, #40	@ 0x28
 80079d8:	4bc9      	ldr	r3, [pc, #804]	@ (8007d00 <nmbs_server_poll+0x574>)
 80079da:	1892      	adds	r2, r2, r2
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	19d2      	adds	r2, r2, r7
 80079e0:	7013      	strb	r3, [r2, #0]
    for (int i = 0; i < coils_bytes; i++) {
 80079e2:	6a3b      	ldr	r3, [r7, #32]
        coils[i] = get_1(nmbs);
 80079e4:	0030      	movs	r0, r6
    for (int i = 0; i < coils_bytes; i++) {
 80079e6:	429c      	cmp	r4, r3
 80079e8:	db18      	blt.n	8007a1c <nmbs_server_poll+0x290>
    err = recv_msg_footer(nmbs);
 80079ea:	f7ff faa1 	bl	8006f30 <recv_msg_footer>
 80079ee:	1e04      	subs	r4, r0, #0
    if (err != NMBS_ERROR_NONE)
 80079f0:	d000      	beq.n	80079f4 <nmbs_server_poll+0x268>
 80079f2:	e0db      	b.n	8007bac <nmbs_server_poll+0x420>
    if (!nmbs->msg.ignored) {
 80079f4:	0033      	movs	r3, r6
 80079f6:	3339      	adds	r3, #57	@ 0x39
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d130      	bne.n	8007a60 <nmbs_server_poll+0x2d4>
        if (quantity < 1 || quantity > 0x07B0)
 80079fe:	22f6      	movs	r2, #246	@ 0xf6
 8007a00:	1e6b      	subs	r3, r5, #1
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	00d2      	lsls	r2, r2, #3
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d300      	bcc.n	8007a0c <nmbs_server_poll+0x280>
 8007a0a:	e75d      	b.n	80078c8 <nmbs_server_poll+0x13c>
        if ((uint32_t) address + (uint32_t) quantity > ((uint32_t) 0xFFFF) + 1)
 8007a0c:	2280      	movs	r2, #128	@ 0x80
 8007a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a10:	0252      	lsls	r2, r2, #9
 8007a12:	195b      	adds	r3, r3, r5
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d909      	bls.n	8007a2c <nmbs_server_poll+0x2a0>
                        return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8007a18:	2102      	movs	r1, #2
 8007a1a:	e756      	b.n	80078ca <nmbs_server_poll+0x13e>
        coils[i] = get_1(nmbs);
 8007a1c:	f7ff fa1a 	bl	8006e54 <get_1>
 8007a20:	2328      	movs	r3, #40	@ 0x28
 8007a22:	18db      	adds	r3, r3, r3
 8007a24:	19db      	adds	r3, r3, r7
 8007a26:	5518      	strb	r0, [r3, r4]
    for (int i = 0; i < coils_bytes; i++) {
 8007a28:	3401      	adds	r4, #1
 8007a2a:	e7da      	b.n	80079e2 <nmbs_server_poll+0x256>
        if (coils_bytes == 0)
 8007a2c:	6a3b      	ldr	r3, [r7, #32]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d100      	bne.n	8007a34 <nmbs_server_poll+0x2a8>
 8007a32:	e749      	b.n	80078c8 <nmbs_server_poll+0x13c>
        if ((quantity + 7) / 8 != coils_bytes)
 8007a34:	1de9      	adds	r1, r5, #7
 8007a36:	b289      	uxth	r1, r1
 8007a38:	10c9      	asrs	r1, r1, #3
 8007a3a:	2901      	cmp	r1, #1
 8007a3c:	d000      	beq.n	8007a40 <nmbs_server_poll+0x2b4>
 8007a3e:	e743      	b.n	80078c8 <nmbs_server_poll+0x13c>
        if (nmbs->callbacks.write_multiple_coils) {
 8007a40:	6d74      	ldr	r4, [r6, #84]	@ 0x54
 8007a42:	2c00      	cmp	r4, #0
 8007a44:	d100      	bne.n	8007a48 <nmbs_server_poll+0x2bc>
 8007a46:	e740      	b.n	80078ca <nmbs_server_poll+0x13e>
            err = nmbs->callbacks.write_multiple_coils(address, quantity, coils, nmbs->msg.unit_id,
 8007a48:	0033      	movs	r3, r6
 8007a4a:	6ef2      	ldr	r2, [r6, #108]	@ 0x6c
 8007a4c:	3334      	adds	r3, #52	@ 0x34
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	9200      	str	r2, [sp, #0]
 8007a52:	2228      	movs	r2, #40	@ 0x28
 8007a54:	1892      	adds	r2, r2, r2
 8007a56:	0029      	movs	r1, r5
 8007a58:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007a5a:	19d2      	adds	r2, r2, r7
 8007a5c:	47a0      	blx	r4
 8007a5e:	e742      	b.n	80078e6 <nmbs_server_poll+0x15a>
        return recv_write_multiple_coils_res(nmbs, address, quantity);
 8007a60:	002a      	movs	r2, r5
 8007a62:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007a64:	e791      	b.n	800798a <nmbs_server_poll+0x1fe>
    nmbs_error err = recv(nmbs, 5);
 8007a66:	2105      	movs	r1, #5
 8007a68:	0030      	movs	r0, r6
 8007a6a:	f7ff fa1f 	bl	8006eac <recv>
 8007a6e:	1e04      	subs	r4, r0, #0
    if (err != NMBS_ERROR_NONE)
 8007a70:	d000      	beq.n	8007a74 <nmbs_server_poll+0x2e8>
 8007a72:	e09b      	b.n	8007bac <nmbs_server_poll+0x420>
    uint16_t address = get_2(nmbs);
 8007a74:	0030      	movs	r0, r6
 8007a76:	f7ff f9f8 	bl	8006e6a <get_2>
 8007a7a:	6238      	str	r0, [r7, #32]
    uint16_t quantity = get_2(nmbs);
 8007a7c:	0030      	movs	r0, r6
 8007a7e:	f7ff f9f4 	bl	8006e6a <get_2>
 8007a82:	0005      	movs	r5, r0
    uint8_t registers_bytes = get_1(nmbs);
 8007a84:	0030      	movs	r0, r6
 8007a86:	f7ff f9e5 	bl	8006e54 <get_1>
    err = recv(nmbs, registers_bytes);
 8007a8a:	0001      	movs	r1, r0
    uint8_t registers_bytes = get_1(nmbs);
 8007a8c:	6278      	str	r0, [r7, #36]	@ 0x24
    err = recv(nmbs, registers_bytes);
 8007a8e:	0030      	movs	r0, r6
 8007a90:	f7ff fa0c 	bl	8006eac <recv>
 8007a94:	1e04      	subs	r4, r0, #0
    if (err != NMBS_ERROR_NONE)
 8007a96:	d000      	beq.n	8007a9a <nmbs_server_poll+0x30e>
 8007a98:	e088      	b.n	8007bac <nmbs_server_poll+0x420>
    if (registers_bytes > 246)
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a9c:	2bf6      	cmp	r3, #246	@ 0xf6
 8007a9e:	d88d      	bhi.n	80079bc <nmbs_server_poll+0x230>
    for (int i = 0; i < registers_bytes / 2; i++) {
 8007aa0:	085b      	lsrs	r3, r3, #1
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	61fb      	str	r3, [r7, #28]
 8007aa6:	69fb      	ldr	r3, [r7, #28]
        registers[i] = get_2(nmbs);
 8007aa8:	0030      	movs	r0, r6
    for (int i = 0; i < registers_bytes / 2; i++) {
 8007aaa:	429c      	cmp	r4, r3
 8007aac:	db3a      	blt.n	8007b24 <nmbs_server_poll+0x398>
    err = recv_msg_footer(nmbs);
 8007aae:	f7ff fa3f 	bl	8006f30 <recv_msg_footer>
 8007ab2:	1e04      	subs	r4, r0, #0
    if (err != NMBS_ERROR_NONE)
 8007ab4:	d17a      	bne.n	8007bac <nmbs_server_poll+0x420>
    if (!nmbs->msg.ignored) {
 8007ab6:	0033      	movs	r3, r6
 8007ab8:	3339      	adds	r3, #57	@ 0x39
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d13a      	bne.n	8007b36 <nmbs_server_poll+0x3aa>
        if (quantity < 1 || quantity > 0x007B)
 8007ac0:	1e6b      	subs	r3, r5, #1
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	2b7a      	cmp	r3, #122	@ 0x7a
 8007ac6:	d900      	bls.n	8007aca <nmbs_server_poll+0x33e>
 8007ac8:	e6fe      	b.n	80078c8 <nmbs_server_poll+0x13c>
        if ((uint32_t) address + (uint32_t) quantity > ((uint32_t) 0xFFFF) + 1)
 8007aca:	2280      	movs	r2, #128	@ 0x80
 8007acc:	6a3b      	ldr	r3, [r7, #32]
 8007ace:	0252      	lsls	r2, r2, #9
 8007ad0:	195b      	adds	r3, r3, r5
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d8a0      	bhi.n	8007a18 <nmbs_server_poll+0x28c>
        if (registers_bytes == 0)
 8007ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d100      	bne.n	8007ade <nmbs_server_poll+0x352>
 8007adc:	e6f4      	b.n	80078c8 <nmbs_server_poll+0x13c>
        if (registers_bytes != quantity * 2)
 8007ade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ae0:	006b      	lsls	r3, r5, #1
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d000      	beq.n	8007ae8 <nmbs_server_poll+0x35c>
 8007ae6:	e6ef      	b.n	80078c8 <nmbs_server_poll+0x13c>
        if (nmbs->callbacks.write_multiple_registers) {
 8007ae8:	6db4      	ldr	r4, [r6, #88]	@ 0x58
 8007aea:	2c00      	cmp	r4, #0
 8007aec:	d100      	bne.n	8007af0 <nmbs_server_poll+0x364>
 8007aee:	e2b1      	b.n	8008054 <nmbs_server_poll+0x8c8>
            err = nmbs->callbacks.write_multiple_registers(address, quantity, registers, nmbs->msg.unit_id,
 8007af0:	0033      	movs	r3, r6
 8007af2:	6ef2      	ldr	r2, [r6, #108]	@ 0x6c
 8007af4:	3334      	adds	r3, #52	@ 0x34
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	9200      	str	r2, [sp, #0]
 8007afa:	2228      	movs	r2, #40	@ 0x28
 8007afc:	1892      	adds	r2, r2, r2
 8007afe:	0029      	movs	r1, r5
 8007b00:	6a38      	ldr	r0, [r7, #32]
 8007b02:	19d2      	adds	r2, r2, r7
 8007b04:	47a0      	blx	r4
            if (err != NMBS_ERROR_NONE) {
 8007b06:	2800      	cmp	r0, #0
 8007b08:	d000      	beq.n	8007b0c <nmbs_server_poll+0x380>
 8007b0a:	e724      	b.n	8007956 <nmbs_server_poll+0x1ca>
            if (!nmbs->msg.broadcast) {
 8007b0c:	0033      	movs	r3, r6
 8007b0e:	3338      	adds	r3, #56	@ 0x38
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d000      	beq.n	8007b18 <nmbs_server_poll+0x38c>
 8007b16:	e68e      	b.n	8007836 <nmbs_server_poll+0xaa>
    put_msg_header(nmbs, data_length);
 8007b18:	2104      	movs	r1, #4
 8007b1a:	0030      	movs	r0, r6
 8007b1c:	f7ff fb59 	bl	80071d2 <put_msg_header>
                put_2(nmbs, address);
 8007b20:	6a39      	ldr	r1, [r7, #32]
 8007b22:	e6ec      	b.n	80078fe <nmbs_server_poll+0x172>
        registers[i] = get_2(nmbs);
 8007b24:	f7ff f9a1 	bl	8006e6a <get_2>
 8007b28:	2228      	movs	r2, #40	@ 0x28
 8007b2a:	1892      	adds	r2, r2, r2
 8007b2c:	0063      	lsls	r3, r4, #1
 8007b2e:	19d2      	adds	r2, r2, r7
 8007b30:	52d0      	strh	r0, [r2, r3]
    for (int i = 0; i < registers_bytes / 2; i++) {
 8007b32:	3401      	adds	r4, #1
 8007b34:	e7b7      	b.n	8007aa6 <nmbs_server_poll+0x31a>
        return recv_write_multiple_registers_res(nmbs, address, quantity);
 8007b36:	002a      	movs	r2, r5
 8007b38:	6a39      	ldr	r1, [r7, #32]
 8007b3a:	e726      	b.n	800798a <nmbs_server_poll+0x1fe>
static nmbs_error handle_read_file_record(nmbs_t* nmbs) {
 8007b3c:	466b      	mov	r3, sp
    nmbs_error err = recv(nmbs, 1);
 8007b3e:	2101      	movs	r1, #1
 8007b40:	0030      	movs	r0, r6
static nmbs_error handle_read_file_record(nmbs_t* nmbs) {
 8007b42:	623b      	str	r3, [r7, #32]
    nmbs_error err = recv(nmbs, 1);
 8007b44:	f7ff f9b2 	bl	8006eac <recv>
 8007b48:	1e04      	subs	r4, r0, #0
    if (err != NMBS_ERROR_NONE)
 8007b4a:	d12f      	bne.n	8007bac <nmbs_server_poll+0x420>
    uint8_t request_size = get_1(nmbs);
 8007b4c:	0030      	movs	r0, r6
 8007b4e:	f7ff f981 	bl	8006e54 <get_1>
 8007b52:	61f8      	str	r0, [r7, #28]
    if (request_size > 245)
 8007b54:	28f5      	cmp	r0, #245	@ 0xf5
 8007b56:	d900      	bls.n	8007b5a <nmbs_server_poll+0x3ce>
 8007b58:	e730      	b.n	80079bc <nmbs_server_poll+0x230>
    err = recv(nmbs, request_size);
 8007b5a:	0001      	movs	r1, r0
 8007b5c:	0030      	movs	r0, r6
 8007b5e:	f7ff f9a5 	bl	8006eac <recv>
 8007b62:	1e04      	subs	r4, r0, #0
    if (err != NMBS_ERROR_NONE)
 8007b64:	d122      	bne.n	8007bac <nmbs_server_poll+0x420>
    const uint8_t subreq_count = request_size / subreq_header_size;
 8007b66:	2107      	movs	r1, #7
 8007b68:	69f8      	ldr	r0, [r7, #28]
 8007b6a:	f7f8 faf3 	bl	8000154 <__udivsi3>
    subreq[subreq_count];
 8007b6e:	4669      	mov	r1, sp
    const uint8_t subreq_count = request_size / subreq_header_size;
 8007b70:	b2c3      	uxtb	r3, r0
 8007b72:	61bb      	str	r3, [r7, #24]
    subreq[subreq_count];
 8007b74:	00db      	lsls	r3, r3, #3
 8007b76:	1aca      	subs	r2, r1, r3
 8007b78:	4695      	mov	sp, r2
 8007b7a:	aa04      	add	r2, sp, #16
    for (uint8_t i = 0; i < subreq_count; i++) {
 8007b7c:	0015      	movs	r5, r2
 8007b7e:	189b      	adds	r3, r3, r2
    subreq[subreq_count];
 8007b80:	617a      	str	r2, [r7, #20]
    for (uint8_t i = 0; i < subreq_count; i++) {
 8007b82:	627a      	str	r2, [r7, #36]	@ 0x24
 8007b84:	60fb      	str	r3, [r7, #12]
    uint8_t response_data_size = 0;
 8007b86:	613c      	str	r4, [r7, #16]
    for (uint8_t i = 0; i < subreq_count; i++) {
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	429d      	cmp	r5, r3
 8007b8c:	d112      	bne.n	8007bb4 <nmbs_server_poll+0x428>
    discard_n(nmbs, request_size % subreq_header_size);
 8007b8e:	69f8      	ldr	r0, [r7, #28]
 8007b90:	2107      	movs	r1, #7
 8007b92:	f7f8 fb65 	bl	8000260 <__aeabi_uidivmod>
    nmbs->msg.buf_idx += n;
 8007b96:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
    discard_n(nmbs, request_size % subreq_header_size);
 8007b98:	b2cd      	uxtb	r5, r1
    nmbs->msg.buf_idx += n;
 8007b9a:	18eb      	adds	r3, r5, r3
    err = recv_msg_footer(nmbs);
 8007b9c:	0030      	movs	r0, r6
    nmbs->msg.buf_idx += n;
 8007b9e:	8673      	strh	r3, [r6, #50]	@ 0x32
    err = recv_msg_footer(nmbs);
 8007ba0:	f7ff f9c6 	bl	8006f30 <recv_msg_footer>
 8007ba4:	1e04      	subs	r4, r0, #0
    if (err != NMBS_ERROR_NONE)
 8007ba6:	d01d      	beq.n	8007be4 <nmbs_server_poll+0x458>
 8007ba8:	6a3b      	ldr	r3, [r7, #32]
 8007baa:	469d      	mov	sp, r3
        if (err != NMBS_ERROR_TIMEOUT)
 8007bac:	1ce3      	adds	r3, r4, #3
 8007bae:	d100      	bne.n	8007bb2 <nmbs_server_poll+0x426>
 8007bb0:	e602      	b.n	80077b8 <nmbs_server_poll+0x2c>
 8007bb2:	e705      	b.n	80079c0 <nmbs_server_poll+0x234>
        subreq[i].reference_type = get_1(nmbs);
 8007bb4:	0030      	movs	r0, r6
 8007bb6:	f7ff f94d 	bl	8006e54 <get_1>
 8007bba:	7028      	strb	r0, [r5, #0]
        subreq[i].file_number = get_2(nmbs);
 8007bbc:	0030      	movs	r0, r6
 8007bbe:	f7ff f954 	bl	8006e6a <get_2>
 8007bc2:	8068      	strh	r0, [r5, #2]
        subreq[i].record_number = get_2(nmbs);
 8007bc4:	0030      	movs	r0, r6
 8007bc6:	f7ff f950 	bl	8006e6a <get_2>
 8007bca:	80a8      	strh	r0, [r5, #4]
        subreq[i].record_length = get_2(nmbs);
 8007bcc:	0030      	movs	r0, r6
 8007bce:	f7ff f94c 	bl	8006e6a <get_2>
        response_data_size += 2 + subreq[i].record_length * 2;
 8007bd2:	693b      	ldr	r3, [r7, #16]
        subreq[i].record_length = get_2(nmbs);
 8007bd4:	80e8      	strh	r0, [r5, #6]
        response_data_size += 2 + subreq[i].record_length * 2;
 8007bd6:	3001      	adds	r0, #1
 8007bd8:	0040      	lsls	r0, r0, #1
 8007bda:	1818      	adds	r0, r3, r0
 8007bdc:	b2c3      	uxtb	r3, r0
 8007bde:	613b      	str	r3, [r7, #16]
    for (uint8_t i = 0; i < subreq_count; i++) {
 8007be0:	3508      	adds	r5, #8
 8007be2:	e7d1      	b.n	8007b88 <nmbs_server_poll+0x3fc>
    if (!nmbs->msg.ignored) {
 8007be4:	0033      	movs	r3, r6
 8007be6:	3339      	adds	r3, #57	@ 0x39
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d000      	beq.n	8007bf0 <nmbs_server_poll+0x464>
 8007bee:	e081      	b.n	8007cf4 <nmbs_server_poll+0x568>
        if (request_size % subreq_header_size)
 8007bf0:	2d00      	cmp	r5, #0
 8007bf2:	d00a      	beq.n	8007c0a <nmbs_server_poll+0x47e>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8007bf4:	2103      	movs	r1, #3
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 8007bf6:	0030      	movs	r0, r6
 8007bf8:	f7ff fb15 	bl	8007226 <send_exception_msg>
 8007bfc:	6a3b      	ldr	r3, [r7, #32]
        return recv_read_file_record_res(nmbs, NULL, 0);
 8007bfe:	0004      	movs	r4, r0
 8007c00:	469d      	mov	sp, r3
    if (err != NMBS_ERROR_NONE) {
 8007c02:	2c00      	cmp	r4, #0
 8007c04:	d100      	bne.n	8007c08 <nmbs_server_poll+0x47c>
 8007c06:	e616      	b.n	8007836 <nmbs_server_poll+0xaa>
 8007c08:	e7d0      	b.n	8007bac <nmbs_server_poll+0x420>
        if (request_size < 0x07 || request_size > 0xF5)
 8007c0a:	69fb      	ldr	r3, [r7, #28]
 8007c0c:	3b07      	subs	r3, #7
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	2bee      	cmp	r3, #238	@ 0xee
 8007c12:	d8ef      	bhi.n	8007bf4 <nmbs_server_poll+0x468>
        for (uint8_t i = 0; i < subreq_count; i++) {
 8007c14:	002b      	movs	r3, r5
            if (subreq[i].record_number > 0x270F)
 8007c16:	4a3b      	ldr	r2, [pc, #236]	@ (8007d04 <nmbs_server_poll+0x578>)
            if (subreq[i].reference_type != 0x06)
 8007c18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007c1a:	7809      	ldrb	r1, [r1, #0]
 8007c1c:	2906      	cmp	r1, #6
 8007c1e:	d001      	beq.n	8007c24 <nmbs_server_poll+0x498>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8007c20:	2102      	movs	r1, #2
 8007c22:	e7e8      	b.n	8007bf6 <nmbs_server_poll+0x46a>
            if (subreq[i].file_number == 0x0000)
 8007c24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007c26:	8849      	ldrh	r1, [r1, #2]
 8007c28:	2900      	cmp	r1, #0
 8007c2a:	d0f9      	beq.n	8007c20 <nmbs_server_poll+0x494>
            if (subreq[i].record_number > 0x270F)
 8007c2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007c2e:	8889      	ldrh	r1, [r1, #4]
 8007c30:	4291      	cmp	r1, r2
 8007c32:	d8f5      	bhi.n	8007c20 <nmbs_server_poll+0x494>
            if (subreq[i].record_length > 124)
 8007c34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007c36:	88c9      	ldrh	r1, [r1, #6]
 8007c38:	297c      	cmp	r1, #124	@ 0x7c
 8007c3a:	d8f1      	bhi.n	8007c20 <nmbs_server_poll+0x494>
        for (uint8_t i = 0; i < subreq_count; i++) {
 8007c3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007c3e:	3301      	adds	r3, #1
 8007c40:	3108      	adds	r1, #8
 8007c42:	6279      	str	r1, [r7, #36]	@ 0x24
 8007c44:	69b9      	ldr	r1, [r7, #24]
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	4299      	cmp	r1, r3
 8007c4a:	d8e5      	bhi.n	8007c18 <nmbs_server_poll+0x48c>
    put_msg_header(nmbs, data_length);
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	0030      	movs	r0, r6
 8007c50:	1c59      	adds	r1, r3, #1
 8007c52:	f7ff fabe 	bl	80071d2 <put_msg_header>
        put_1(nmbs, response_data_size);
 8007c56:	0030      	movs	r0, r6
 8007c58:	6939      	ldr	r1, [r7, #16]
 8007c5a:	f7ff f901 	bl	8006e60 <put_1>
        if (nmbs->callbacks.read_file_record) {
 8007c5e:	6df3      	ldr	r3, [r6, #92]	@ 0x5c
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d03e      	beq.n	8007ce2 <nmbs_server_poll+0x556>
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	3302      	adds	r3, #2
 8007c68:	627b      	str	r3, [r7, #36]	@ 0x24
                uint16_t subreq_data_size = subreq[i].record_length * 2;
 8007c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                put_1(nmbs, subreq_data_size + 1);
 8007c6c:	0030      	movs	r0, r6
                uint16_t subreq_data_size = subreq[i].record_length * 2;
 8007c6e:	889b      	ldrh	r3, [r3, #4]
 8007c70:	005c      	lsls	r4, r3, #1
 8007c72:	b2a4      	uxth	r4, r4
                put_1(nmbs, subreq_data_size + 1);
 8007c74:	1c61      	adds	r1, r4, #1
 8007c76:	b2c9      	uxtb	r1, r1
                uint16_t subreq_data_size = subreq[i].record_length * 2;
 8007c78:	61fb      	str	r3, [r7, #28]
                put_1(nmbs, subreq_data_size + 1);
 8007c7a:	f7ff f8f1 	bl	8006e60 <put_1>
                put_1(nmbs, 0x06);    // add Reference Type const
 8007c7e:	2106      	movs	r1, #6
 8007c80:	0030      	movs	r0, r6
 8007c82:	f7ff f8ed 	bl	8006e60 <put_1>
    uint8_t* msg_buf_ptr = nmbs->msg.buf + nmbs->msg.buf_idx;
 8007c86:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8007c88:	18f2      	adds	r2, r6, r3
    nmbs->msg.buf_idx += n;
 8007c8a:	18e4      	adds	r4, r4, r3
                err = nmbs->callbacks.read_file_record(subreq[i].file_number, subreq[i].record_number, subreq_data,
 8007c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    uint8_t* msg_buf_ptr = nmbs->msg.buf + nmbs->msg.buf_idx;
 8007c8e:	617a      	str	r2, [r7, #20]
                err = nmbs->callbacks.read_file_record(subreq[i].file_number, subreq[i].record_number, subreq_data,
 8007c90:	8859      	ldrh	r1, [r3, #2]
 8007c92:	8818      	ldrh	r0, [r3, #0]
 8007c94:	6ef3      	ldr	r3, [r6, #108]	@ 0x6c
    nmbs->msg.buf_idx += n;
 8007c96:	8674      	strh	r4, [r6, #50]	@ 0x32
                err = nmbs->callbacks.read_file_record(subreq[i].file_number, subreq[i].record_number, subreq_data,
 8007c98:	9301      	str	r3, [sp, #4]
 8007c9a:	0033      	movs	r3, r6
 8007c9c:	3334      	adds	r3, #52	@ 0x34
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	9300      	str	r3, [sp, #0]
 8007ca2:	6df4      	ldr	r4, [r6, #92]	@ 0x5c
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	697a      	ldr	r2, [r7, #20]
 8007ca8:	47a0      	blx	r4
                if (err != NMBS_ERROR_NONE) {
 8007caa:	2800      	cmp	r0, #0
 8007cac:	d005      	beq.n	8007cba <nmbs_server_poll+0x52e>
                    if (nmbs_error_is_exception(err))
 8007cae:	b2c1      	uxtb	r1, r0
 8007cb0:	1e4b      	subs	r3, r1, #1
 8007cb2:	2b03      	cmp	r3, #3
 8007cb4:	d99f      	bls.n	8007bf6 <nmbs_server_poll+0x46a>
                    return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 8007cb6:	2104      	movs	r1, #4
 8007cb8:	e79d      	b.n	8007bf6 <nmbs_server_poll+0x46a>
                swap_regs(subreq_data, subreq[i].record_length);
 8007cba:	69f9      	ldr	r1, [r7, #28]
 8007cbc:	6978      	ldr	r0, [r7, #20]
 8007cbe:	f7ff f8e7 	bl	8006e90 <swap_regs>
            for (uint8_t i = 0; i < subreq_count; i++) {
 8007cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc4:	3501      	adds	r5, #1
 8007cc6:	3308      	adds	r3, #8
 8007cc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cca:	69bb      	ldr	r3, [r7, #24]
 8007ccc:	b2ed      	uxtb	r5, r5
 8007cce:	42ab      	cmp	r3, r5
 8007cd0:	d8cb      	bhi.n	8007c6a <nmbs_server_poll+0x4de>
        if (!nmbs->msg.broadcast) {
 8007cd2:	0033      	movs	r3, r6
 8007cd4:	3338      	adds	r3, #56	@ 0x38
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d004      	beq.n	8007ce6 <nmbs_server_poll+0x55a>
 8007cdc:	6a3b      	ldr	r3, [r7, #32]
 8007cde:	469d      	mov	sp, r3
    if (err != NMBS_ERROR_NONE) {
 8007ce0:	e5a9      	b.n	8007836 <nmbs_server_poll+0xaa>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 8007ce2:	2101      	movs	r1, #1
 8007ce4:	e787      	b.n	8007bf6 <nmbs_server_poll+0x46a>
            err = send_msg(nmbs);
 8007ce6:	0030      	movs	r0, r6
 8007ce8:	f7ff f9ab 	bl	8007042 <send_msg>
 8007cec:	1e04      	subs	r4, r0, #0
            if (err != NMBS_ERROR_NONE)
 8007cee:	6a3b      	ldr	r3, [r7, #32]
 8007cf0:	d0f5      	beq.n	8007cde <nmbs_server_poll+0x552>
 8007cf2:	e75a      	b.n	8007baa <nmbs_server_poll+0x41e>
        return recv_read_file_record_res(nmbs, NULL, 0);
 8007cf4:	0002      	movs	r2, r0
 8007cf6:	0001      	movs	r1, r0
 8007cf8:	0030      	movs	r0, r6
 8007cfa:	f7ff fbe6 	bl	80074ca <recv_read_file_record_res>
 8007cfe:	e77d      	b.n	8007bfc <nmbs_server_poll+0x470>
 8007d00:	0800d925 	.word	0x0800d925
 8007d04:	0000270f 	.word	0x0000270f
    nmbs_error err = recv(nmbs, 1);
 8007d08:	2101      	movs	r1, #1
 8007d0a:	0030      	movs	r0, r6
 8007d0c:	f7ff f8ce 	bl	8006eac <recv>
 8007d10:	1e04      	subs	r4, r0, #0
    if (err != NMBS_ERROR_NONE)
 8007d12:	d000      	beq.n	8007d16 <nmbs_server_poll+0x58a>
 8007d14:	e74a      	b.n	8007bac <nmbs_server_poll+0x420>
    uint8_t request_size = get_1(nmbs);
 8007d16:	0030      	movs	r0, r6
 8007d18:	f7ff f89c 	bl	8006e54 <get_1>
 8007d1c:	0005      	movs	r5, r0
    if (request_size > 251) {
 8007d1e:	28fb      	cmp	r0, #251	@ 0xfb
 8007d20:	d900      	bls.n	8007d24 <nmbs_server_poll+0x598>
 8007d22:	e64b      	b.n	80079bc <nmbs_server_poll+0x230>
    err = recv(nmbs, request_size);
 8007d24:	0001      	movs	r1, r0
 8007d26:	6238      	str	r0, [r7, #32]
 8007d28:	0030      	movs	r0, r6
 8007d2a:	f7ff f8bf 	bl	8006eac <recv>
 8007d2e:	1e04      	subs	r4, r0, #0
    if (err != NMBS_ERROR_NONE)
 8007d30:	d000      	beq.n	8007d34 <nmbs_server_poll+0x5a8>
 8007d32:	e73b      	b.n	8007bac <nmbs_server_poll+0x420>
    uint16_t msg_buf_idx = nmbs->msg.buf_idx;
 8007d34:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
    err = recv_msg_footer(nmbs);
 8007d36:	0030      	movs	r0, r6
    uint16_t msg_buf_idx = nmbs->msg.buf_idx;
 8007d38:	627b      	str	r3, [r7, #36]	@ 0x24
    nmbs->msg.buf_idx += n;
 8007d3a:	18eb      	adds	r3, r5, r3
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	8673      	strh	r3, [r6, #50]	@ 0x32
 8007d40:	61fb      	str	r3, [r7, #28]
    err = recv_msg_footer(nmbs);
 8007d42:	f7ff f8f5 	bl	8006f30 <recv_msg_footer>
 8007d46:	1e04      	subs	r4, r0, #0
    if (err != NMBS_ERROR_NONE)
 8007d48:	d000      	beq.n	8007d4c <nmbs_server_poll+0x5c0>
 8007d4a:	e72f      	b.n	8007bac <nmbs_server_poll+0x420>
    if (!nmbs->msg.ignored) {
 8007d4c:	0033      	movs	r3, r6
 8007d4e:	3339      	adds	r3, #57	@ 0x39
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d000      	beq.n	8007d58 <nmbs_server_poll+0x5cc>
 8007d56:	e07b      	b.n	8007e50 <nmbs_server_poll+0x6c4>
        nmbs->msg.buf_idx = msg_buf_idx;    // restore context
 8007d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d5a:	8673      	strh	r3, [r6, #50]	@ 0x32
        if (request_size < 7)
 8007d5c:	2d06      	cmp	r5, #6
 8007d5e:	d800      	bhi.n	8007d62 <nmbs_server_poll+0x5d6>
 8007d60:	e5b2      	b.n	80078c8 <nmbs_server_poll+0x13c>
            uint8_t subreq_reference_type = get_1(nmbs);
 8007d62:	0030      	movs	r0, r6
 8007d64:	f7ff f876 	bl	8006e54 <get_1>
 8007d68:	0004      	movs	r4, r0
            uint16_t subreq_file_number_c = get_2(nmbs);
 8007d6a:	0030      	movs	r0, r6
 8007d6c:	f7ff f87d 	bl	8006e6a <get_2>
 8007d70:	61b8      	str	r0, [r7, #24]
            uint16_t subreq_record_number_c = get_2(nmbs);
 8007d72:	0030      	movs	r0, r6
 8007d74:	f7ff f879 	bl	8006e6a <get_2>
 8007d78:	6178      	str	r0, [r7, #20]
            uint16_t subreq_record_length_c = get_2(nmbs);
 8007d7a:	0030      	movs	r0, r6
 8007d7c:	f7ff f875 	bl	8006e6a <get_2>
    nmbs->msg.buf_idx += n;
 8007d80:	8e72      	ldrh	r2, [r6, #50]	@ 0x32
            discard_n(nmbs, subreq_record_length_c * 2);
 8007d82:	0043      	lsls	r3, r0, #1
 8007d84:	b29b      	uxth	r3, r3
    nmbs->msg.buf_idx += n;
 8007d86:	189a      	adds	r2, r3, r2
 8007d88:	8672      	strh	r2, [r6, #50]	@ 0x32
            if (subreq_reference_type != 0x06)
 8007d8a:	2c06      	cmp	r4, #6
 8007d8c:	d000      	beq.n	8007d90 <nmbs_server_poll+0x604>
 8007d8e:	e643      	b.n	8007a18 <nmbs_server_poll+0x28c>
            if (subreq_file_number_c == 0x0000)
 8007d90:	69ba      	ldr	r2, [r7, #24]
 8007d92:	2a00      	cmp	r2, #0
 8007d94:	d100      	bne.n	8007d98 <nmbs_server_poll+0x60c>
 8007d96:	e63f      	b.n	8007a18 <nmbs_server_poll+0x28c>
            if (subreq_record_number_c > 0x270F)
 8007d98:	4ac5      	ldr	r2, [pc, #788]	@ (80080b0 <nmbs_server_poll+0x924>)
 8007d9a:	6979      	ldr	r1, [r7, #20]
 8007d9c:	4291      	cmp	r1, r2
 8007d9e:	d900      	bls.n	8007da2 <nmbs_server_poll+0x616>
 8007da0:	e63a      	b.n	8007a18 <nmbs_server_poll+0x28c>
            if (subreq_record_length_c > 122)
 8007da2:	287a      	cmp	r0, #122	@ 0x7a
 8007da4:	d900      	bls.n	8007da8 <nmbs_server_poll+0x61c>
 8007da6:	e637      	b.n	8007a18 <nmbs_server_poll+0x28c>
            size -= (subreq_header_size + subreq_record_length_c * 2);
 8007da8:	2207      	movs	r2, #7
 8007daa:	4252      	negs	r2, r2
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	18ed      	adds	r5, r5, r3
 8007db0:	b2ad      	uxth	r5, r5
        } while (size >= subreq_header_size);
 8007db2:	2d06      	cmp	r5, #6
 8007db4:	d8d5      	bhi.n	8007d62 <nmbs_server_poll+0x5d6>
        if (size)
 8007db6:	2d00      	cmp	r5, #0
 8007db8:	d000      	beq.n	8007dbc <nmbs_server_poll+0x630>
 8007dba:	e585      	b.n	80078c8 <nmbs_server_poll+0x13c>
        nmbs->msg.buf_idx = msg_buf_idx;    // restore context
 8007dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dbe:	8673      	strh	r3, [r6, #50]	@ 0x32
    nmbs->msg.buf_idx++;
 8007dc0:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
            uint16_t subreq_file_number = get_2(nmbs);
 8007dc2:	0030      	movs	r0, r6
    nmbs->msg.buf_idx++;
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	8673      	strh	r3, [r6, #50]	@ 0x32
            uint16_t subreq_file_number = get_2(nmbs);
 8007dc8:	f7ff f84f 	bl	8006e6a <get_2>
 8007dcc:	6178      	str	r0, [r7, #20]
            uint16_t subreq_record_number = get_2(nmbs);
 8007dce:	0030      	movs	r0, r6
 8007dd0:	f7ff f84b 	bl	8006e6a <get_2>
 8007dd4:	6138      	str	r0, [r7, #16]
            uint16_t subreq_record_length = get_2(nmbs);
 8007dd6:	0030      	movs	r0, r6
 8007dd8:	f7ff f847 	bl	8006e6a <get_2>
 8007ddc:	6278      	str	r0, [r7, #36]	@ 0x24
    uint16_t* msg_buf_ptr = (uint16_t*) (nmbs->msg.buf + nmbs->msg.buf_idx);
 8007dde:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
    nmbs->msg.buf_idx += n * 2;
 8007de0:	0042      	lsls	r2, r0, #1
 8007de2:	b292      	uxth	r2, r2
    uint16_t* msg_buf_ptr = (uint16_t*) (nmbs->msg.buf + nmbs->msg.buf_idx);
 8007de4:	18f5      	adds	r5, r6, r3
    nmbs->msg.buf_idx += n * 2;
 8007de6:	189b      	adds	r3, r3, r2
 8007de8:	8673      	strh	r3, [r6, #50]	@ 0x32
    while (n--) {
 8007dea:	0003      	movs	r3, r0
 8007dec:	49b1      	ldr	r1, [pc, #708]	@ (80080b4 <nmbs_server_poll+0x928>)
    nmbs->msg.buf_idx += n * 2;
 8007dee:	61ba      	str	r2, [r7, #24]
    while (n--) {
 8007df0:	3b01      	subs	r3, #1
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	428b      	cmp	r3, r1
 8007df6:	d126      	bne.n	8007e46 <nmbs_server_poll+0x6ba>
            if (nmbs->callbacks.write_file_record) {
 8007df8:	6e33      	ldr	r3, [r6, #96]	@ 0x60
 8007dfa:	1e1c      	subs	r4, r3, #0
 8007dfc:	d100      	bne.n	8007e00 <nmbs_server_poll+0x674>
 8007dfe:	e129      	b.n	8008054 <nmbs_server_poll+0x8c8>
                err = nmbs->callbacks.write_file_record(subreq_file_number, subreq_record_number, subreq_data,
 8007e00:	6ef3      	ldr	r3, [r6, #108]	@ 0x6c
 8007e02:	002a      	movs	r2, r5
 8007e04:	9301      	str	r3, [sp, #4]
 8007e06:	0033      	movs	r3, r6
 8007e08:	3334      	adds	r3, #52	@ 0x34
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	9300      	str	r3, [sp, #0]
 8007e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e10:	6939      	ldr	r1, [r7, #16]
 8007e12:	6978      	ldr	r0, [r7, #20]
 8007e14:	47a0      	blx	r4
                if (err != NMBS_ERROR_NONE) {
 8007e16:	2800      	cmp	r0, #0
 8007e18:	d000      	beq.n	8007e1c <nmbs_server_poll+0x690>
 8007e1a:	e59c      	b.n	8007956 <nmbs_server_poll+0x1ca>
                swap_regs(subreq_data, subreq_record_length);    // restore swapping
 8007e1c:	0028      	movs	r0, r5
 8007e1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007e20:	f7ff f836 	bl	8006e90 <swap_regs>
            size -= (subreq_header_size + subreq_record_length * 2);
 8007e24:	6a3b      	ldr	r3, [r7, #32]
 8007e26:	69ba      	ldr	r2, [r7, #24]
 8007e28:	3b07      	subs	r3, #7
 8007e2a:	1a9b      	subs	r3, r3, r2
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	623b      	str	r3, [r7, #32]
        } while (size >= subreq_header_size);
 8007e30:	2b06      	cmp	r3, #6
 8007e32:	d8c5      	bhi.n	8007dc0 <nmbs_server_poll+0x634>
        if (!nmbs->msg.broadcast) {
 8007e34:	0033      	movs	r3, r6
 8007e36:	3338      	adds	r3, #56	@ 0x38
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d000      	beq.n	8007e40 <nmbs_server_poll+0x6b4>
 8007e3e:	e4fa      	b.n	8007836 <nmbs_server_poll+0xaa>
    nmbs->msg.buf_idx += n;
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	8673      	strh	r3, [r6, #50]	@ 0x32
            err = send_msg(nmbs);
 8007e44:	e59b      	b.n	800797e <nmbs_server_poll+0x1f2>
        msg_buf_ptr[n] = (msg_buf_ptr[n] << 8) | ((msg_buf_ptr[n] >> 8) & 0xFF);
 8007e46:	0058      	lsls	r0, r3, #1
 8007e48:	5a2a      	ldrh	r2, [r5, r0]
 8007e4a:	ba52      	rev16	r2, r2
 8007e4c:	522a      	strh	r2, [r5, r0]
 8007e4e:	e7cf      	b.n	8007df0 <nmbs_server_poll+0x664>
        return recv_write_file_record_res(nmbs, 0, 0, NULL, 0);
 8007e50:	0003      	movs	r3, r0
 8007e52:	0002      	movs	r2, r0
 8007e54:	0001      	movs	r1, r0
 8007e56:	9000      	str	r0, [sp, #0]
 8007e58:	0030      	movs	r0, r6
 8007e5a:	f7ff fb7b 	bl	8007554 <recv_write_file_record_res>
 8007e5e:	e503      	b.n	8007868 <nmbs_server_poll+0xdc>
    nmbs_error err = recv(nmbs, 9);
 8007e60:	2109      	movs	r1, #9
 8007e62:	0030      	movs	r0, r6
 8007e64:	f7ff f822 	bl	8006eac <recv>
static nmbs_error handle_read_write_registers(nmbs_t* nmbs) {
 8007e68:	466d      	mov	r5, sp
    nmbs_error err = recv(nmbs, 9);
 8007e6a:	1e04      	subs	r4, r0, #0
    if (err != NMBS_ERROR_NONE)
 8007e6c:	d000      	beq.n	8007e70 <nmbs_server_poll+0x6e4>
 8007e6e:	e69d      	b.n	8007bac <nmbs_server_poll+0x420>
    uint16_t read_address = get_2(nmbs);
 8007e70:	0030      	movs	r0, r6
 8007e72:	f7fe fffa 	bl	8006e6a <get_2>
 8007e76:	60f8      	str	r0, [r7, #12]
    uint16_t read_quantity = get_2(nmbs);
 8007e78:	0030      	movs	r0, r6
 8007e7a:	f7fe fff6 	bl	8006e6a <get_2>
 8007e7e:	6278      	str	r0, [r7, #36]	@ 0x24
    uint16_t write_address = get_2(nmbs);
 8007e80:	0030      	movs	r0, r6
 8007e82:	f7fe fff2 	bl	8006e6a <get_2>
 8007e86:	6138      	str	r0, [r7, #16]
    uint16_t write_quantity = get_2(nmbs);
 8007e88:	0030      	movs	r0, r6
 8007e8a:	f7fe ffee 	bl	8006e6a <get_2>
 8007e8e:	6238      	str	r0, [r7, #32]
    uint8_t byte_count_write = get_1(nmbs);
 8007e90:	0030      	movs	r0, r6
 8007e92:	f7fe ffdf 	bl	8006e54 <get_1>
 8007e96:	61b8      	str	r0, [r7, #24]
    if (byte_count_write > 242)
 8007e98:	28f2      	cmp	r0, #242	@ 0xf2
 8007e9a:	d900      	bls.n	8007e9e <nmbs_server_poll+0x712>
 8007e9c:	e58e      	b.n	80079bc <nmbs_server_poll+0x230>
    err = recv(nmbs, byte_count_write);
 8007e9e:	0001      	movs	r1, r0
 8007ea0:	0030      	movs	r0, r6
 8007ea2:	f7ff f803 	bl	8006eac <recv>
 8007ea6:	1e04      	subs	r4, r0, #0
    if (err != NMBS_ERROR_NONE)
 8007ea8:	d000      	beq.n	8007eac <nmbs_server_poll+0x720>
 8007eaa:	e67f      	b.n	8007bac <nmbs_server_poll+0x420>
    uint16_t registers[byte_count_write / 2];
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	085c      	lsrs	r4, r3, #1
 8007eb0:	b2e4      	uxtb	r4, r4
 8007eb2:	0064      	lsls	r4, r4, #1
 8007eb4:	1de3      	adds	r3, r4, #7
 8007eb6:	08db      	lsrs	r3, r3, #3
 8007eb8:	00db      	lsls	r3, r3, #3
 8007eba:	1aeb      	subs	r3, r5, r3
 8007ebc:	469d      	mov	sp, r3
 8007ebe:	ab04      	add	r3, sp, #16
 8007ec0:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < byte_count_write / 2; i++) {
 8007ec2:	61fb      	str	r3, [r7, #28]
 8007ec4:	18e4      	adds	r4, r4, r3
 8007ec6:	69fb      	ldr	r3, [r7, #28]
        registers[i] = get_2(nmbs);
 8007ec8:	0030      	movs	r0, r6
    for (int i = 0; i < byte_count_write / 2; i++) {
 8007eca:	429c      	cmp	r4, r3
 8007ecc:	d105      	bne.n	8007eda <nmbs_server_poll+0x74e>
    err = recv_msg_footer(nmbs);
 8007ece:	f7ff f82f 	bl	8006f30 <recv_msg_footer>
 8007ed2:	1e04      	subs	r4, r0, #0
    if (err != NMBS_ERROR_NONE)
 8007ed4:	d008      	beq.n	8007ee8 <nmbs_server_poll+0x75c>
 8007ed6:	46ad      	mov	sp, r5
    if (err != NMBS_ERROR_NONE) {
 8007ed8:	e668      	b.n	8007bac <nmbs_server_poll+0x420>
        registers[i] = get_2(nmbs);
 8007eda:	f7fe ffc6 	bl	8006e6a <get_2>
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	8018      	strh	r0, [r3, #0]
    for (int i = 0; i < byte_count_write / 2; i++) {
 8007ee2:	3302      	adds	r3, #2
 8007ee4:	61fb      	str	r3, [r7, #28]
 8007ee6:	e7ee      	b.n	8007ec6 <nmbs_server_poll+0x73a>
    if (!nmbs->msg.ignored) {
 8007ee8:	0033      	movs	r3, r6
 8007eea:	3339      	adds	r3, #57	@ 0x39
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d000      	beq.n	8007ef4 <nmbs_server_poll+0x768>
 8007ef2:	e084      	b.n	8007ffe <nmbs_server_poll+0x872>
        if (read_quantity < 1 || read_quantity > 0x007D)
 8007ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef6:	3b01      	subs	r3, #1
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	2b7c      	cmp	r3, #124	@ 0x7c
 8007efc:	d905      	bls.n	8007f0a <nmbs_server_poll+0x77e>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8007efe:	2103      	movs	r1, #3
            return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 8007f00:	0030      	movs	r0, r6
 8007f02:	f7ff f990 	bl	8007226 <send_exception_msg>
        return recv_write_multiple_registers_res(nmbs, write_address, write_quantity);
 8007f06:	0004      	movs	r4, r0
 8007f08:	e05a      	b.n	8007fc0 <nmbs_server_poll+0x834>
        if (write_quantity < 1 || write_quantity > 0x007B)
 8007f0a:	6a3b      	ldr	r3, [r7, #32]
 8007f0c:	3b01      	subs	r3, #1
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	2b7a      	cmp	r3, #122	@ 0x7a
 8007f12:	d8f4      	bhi.n	8007efe <nmbs_server_poll+0x772>
        if (byte_count_write != write_quantity * 2)
 8007f14:	6a3b      	ldr	r3, [r7, #32]
 8007f16:	69ba      	ldr	r2, [r7, #24]
 8007f18:	005b      	lsls	r3, r3, #1
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d1ef      	bne.n	8007efe <nmbs_server_poll+0x772>
        if ((uint32_t) read_address + (uint32_t) read_quantity > ((uint32_t) 0xFFFF) + 1)
 8007f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	189b      	adds	r3, r3, r2
 8007f24:	2280      	movs	r2, #128	@ 0x80
 8007f26:	0252      	lsls	r2, r2, #9
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d901      	bls.n	8007f30 <nmbs_server_poll+0x7a4>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8007f2c:	2102      	movs	r1, #2
 8007f2e:	e7e7      	b.n	8007f00 <nmbs_server_poll+0x774>
        if ((uint32_t) write_address + (uint32_t) write_quantity > ((uint32_t) 0xFFFF) + 1)
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	6a39      	ldr	r1, [r7, #32]
 8007f34:	185b      	adds	r3, r3, r1
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d8f8      	bhi.n	8007f2c <nmbs_server_poll+0x7a0>
        if (!nmbs->callbacks.write_multiple_registers || !nmbs->callbacks.read_holding_registers)
 8007f3a:	6db4      	ldr	r4, [r6, #88]	@ 0x58
 8007f3c:	2c00      	cmp	r4, #0
 8007f3e:	d002      	beq.n	8007f46 <nmbs_server_poll+0x7ba>
 8007f40:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d101      	bne.n	8007f4a <nmbs_server_poll+0x7be>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 8007f46:	2101      	movs	r1, #1
 8007f48:	e7da      	b.n	8007f00 <nmbs_server_poll+0x774>
        err = nmbs->callbacks.write_multiple_registers(write_address, write_quantity, registers, nmbs->msg.unit_id,
 8007f4a:	0033      	movs	r3, r6
 8007f4c:	6ef2      	ldr	r2, [r6, #108]	@ 0x6c
 8007f4e:	3334      	adds	r3, #52	@ 0x34
 8007f50:	61fb      	str	r3, [r7, #28]
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	9200      	str	r2, [sp, #0]
 8007f56:	697a      	ldr	r2, [r7, #20]
 8007f58:	6a39      	ldr	r1, [r7, #32]
 8007f5a:	6938      	ldr	r0, [r7, #16]
 8007f5c:	47a0      	blx	r4
        if (err != NMBS_ERROR_NONE) {
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	d005      	beq.n	8007f6e <nmbs_server_poll+0x7e2>
            if (nmbs_error_is_exception(err))
 8007f62:	b2c1      	uxtb	r1, r0
 8007f64:	1e4b      	subs	r3, r1, #1
 8007f66:	2b03      	cmp	r3, #3
 8007f68:	d9ca      	bls.n	8007f00 <nmbs_server_poll+0x774>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 8007f6a:	2104      	movs	r1, #4
 8007f6c:	e7c8      	b.n	8007f00 <nmbs_server_poll+0x774>
        if (!nmbs->msg.broadcast) {
 8007f6e:	0033      	movs	r3, r6
 8007f70:	3338      	adds	r3, #56	@ 0x38
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d001      	beq.n	8007f7c <nmbs_server_poll+0x7f0>
 8007f78:	46ad      	mov	sp, r5
    if (err != NMBS_ERROR_NONE) {
 8007f7a:	e45c      	b.n	8007836 <nmbs_server_poll+0xaa>
        if (!nmbs->msg.broadcast) {
 8007f7c:	466b      	mov	r3, sp
            uint16_t regs[read_quantity];
 8007f7e:	466a      	mov	r2, sp
        if (!nmbs->msg.broadcast) {
 8007f80:	617b      	str	r3, [r7, #20]
            uint16_t regs[read_quantity];
 8007f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f84:	005b      	lsls	r3, r3, #1
 8007f86:	61bb      	str	r3, [r7, #24]
 8007f88:	3307      	adds	r3, #7
 8007f8a:	08db      	lsrs	r3, r3, #3
 8007f8c:	00db      	lsls	r3, r3, #3
 8007f8e:	1ad3      	subs	r3, r2, r3
 8007f90:	469d      	mov	sp, r3
 8007f92:	ab04      	add	r3, sp, #16
 8007f94:	623b      	str	r3, [r7, #32]
            err = nmbs->callbacks.read_holding_registers(read_address, read_quantity, regs, nmbs->msg.unit_id,
 8007f96:	6ef2      	ldr	r2, [r6, #108]	@ 0x6c
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	9200      	str	r2, [sp, #0]
 8007f9e:	6c74      	ldr	r4, [r6, #68]	@ 0x44
 8007fa0:	6a3a      	ldr	r2, [r7, #32]
 8007fa2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007fa4:	68f8      	ldr	r0, [r7, #12]
 8007fa6:	47a0      	blx	r4
 8007fa8:	1e04      	subs	r4, r0, #0
            if (err != NMBS_ERROR_NONE) {
 8007faa:	d00d      	beq.n	8007fc8 <nmbs_server_poll+0x83c>
                if (nmbs_error_is_exception(err))
 8007fac:	b2c1      	uxtb	r1, r0
 8007fae:	1e4b      	subs	r3, r1, #1
 8007fb0:	2b03      	cmp	r3, #3
 8007fb2:	d807      	bhi.n	8007fc4 <nmbs_server_poll+0x838>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 8007fb4:	0030      	movs	r0, r6
 8007fb6:	f7ff f936 	bl	8007226 <send_exception_msg>
                    return send_exception_msg(nmbs, err);
 8007fba:	697b      	ldr	r3, [r7, #20]
                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 8007fbc:	0004      	movs	r4, r0
                    return send_exception_msg(nmbs, err);
 8007fbe:	469d      	mov	sp, r3
 8007fc0:	46ad      	mov	sp, r5
            break;
 8007fc2:	e61e      	b.n	8007c02 <nmbs_server_poll+0x476>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 8007fc4:	2104      	movs	r1, #4
 8007fc6:	e7f5      	b.n	8007fb4 <nmbs_server_poll+0x828>
            uint8_t regs_bytes = read_quantity * 2;
 8007fc8:	7e3b      	ldrb	r3, [r7, #24]
    put_msg_header(nmbs, data_length);
 8007fca:	0030      	movs	r0, r6
            put_res_header(nmbs, 1 + regs_bytes);
 8007fcc:	1c59      	adds	r1, r3, #1
    put_msg_header(nmbs, data_length);
 8007fce:	b2c9      	uxtb	r1, r1
            uint8_t regs_bytes = read_quantity * 2;
 8007fd0:	61fb      	str	r3, [r7, #28]
    put_msg_header(nmbs, data_length);
 8007fd2:	f7ff f8fe 	bl	80071d2 <put_msg_header>
            put_1(nmbs, regs_bytes);
 8007fd6:	0030      	movs	r0, r6
 8007fd8:	69f9      	ldr	r1, [r7, #28]
 8007fda:	f7fe ff41 	bl	8006e60 <put_1>
                put_2(nmbs, regs[i]);
 8007fde:	6a3a      	ldr	r2, [r7, #32]
 8007fe0:	0063      	lsls	r3, r4, #1
 8007fe2:	5ad1      	ldrh	r1, [r2, r3]
 8007fe4:	0030      	movs	r0, r6
 8007fe6:	f7fe ff4a 	bl	8006e7e <put_2>
            for (int i = 0; i < read_quantity; i++) {
 8007fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fec:	3401      	adds	r4, #1
 8007fee:	42a3      	cmp	r3, r4
 8007ff0:	dcf5      	bgt.n	8007fde <nmbs_server_poll+0x852>
            err = send_msg(nmbs);
 8007ff2:	0030      	movs	r0, r6
 8007ff4:	f7ff f825 	bl	8007042 <send_msg>
 8007ff8:	1e04      	subs	r4, r0, #0
            if (err != NMBS_ERROR_NONE)
 8007ffa:	d0bd      	beq.n	8007f78 <nmbs_server_poll+0x7ec>
 8007ffc:	e76b      	b.n	8007ed6 <nmbs_server_poll+0x74a>
        return recv_write_multiple_registers_res(nmbs, write_address, write_quantity);
 8007ffe:	0030      	movs	r0, r6
 8008000:	6a3a      	ldr	r2, [r7, #32]
 8008002:	6939      	ldr	r1, [r7, #16]
 8008004:	f7ff fa3c 	bl	8007480 <recv_write_single_coil_res>
 8008008:	e77d      	b.n	8007f06 <nmbs_server_poll+0x77a>
    nmbs_error err = recv(nmbs, 3);
 800800a:	2103      	movs	r1, #3
 800800c:	0030      	movs	r0, r6
 800800e:	f7fe ff4d 	bl	8006eac <recv>
 8008012:	1e04      	subs	r4, r0, #0
    if (err != NMBS_ERROR_NONE)
 8008014:	d000      	beq.n	8008018 <nmbs_server_poll+0x88c>
 8008016:	e5c9      	b.n	8007bac <nmbs_server_poll+0x420>
    uint8_t mei_type = get_1(nmbs);
 8008018:	0030      	movs	r0, r6
 800801a:	f7fe ff1b 	bl	8006e54 <get_1>
 800801e:	61f8      	str	r0, [r7, #28]
    uint8_t read_device_id_code = get_1(nmbs);
 8008020:	0030      	movs	r0, r6
 8008022:	f7fe ff17 	bl	8006e54 <get_1>
 8008026:	6278      	str	r0, [r7, #36]	@ 0x24
    uint8_t object_id = get_1(nmbs);
 8008028:	0030      	movs	r0, r6
 800802a:	f7fe ff13 	bl	8006e54 <get_1>
 800802e:	0005      	movs	r5, r0
    err = recv_msg_footer(nmbs);
 8008030:	0030      	movs	r0, r6
 8008032:	f7fe ff7d 	bl	8006f30 <recv_msg_footer>
 8008036:	1e04      	subs	r4, r0, #0
    if (err != NMBS_ERROR_NONE)
 8008038:	d000      	beq.n	800803c <nmbs_server_poll+0x8b0>
 800803a:	e5b7      	b.n	8007bac <nmbs_server_poll+0x420>
    if (!nmbs->msg.ignored) {
 800803c:	0033      	movs	r3, r6
 800803e:	3339      	adds	r3, #57	@ 0x39
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d000      	beq.n	8008048 <nmbs_server_poll+0x8bc>
 8008046:	e138      	b.n	80082ba <nmbs_server_poll+0xb2e>
        if (!nmbs->callbacks.read_device_identification_map || !nmbs->callbacks.read_device_identification)
 8008048:	6eb4      	ldr	r4, [r6, #104]	@ 0x68
 800804a:	2c00      	cmp	r4, #0
 800804c:	d002      	beq.n	8008054 <nmbs_server_poll+0x8c8>
 800804e:	6e73      	ldr	r3, [r6, #100]	@ 0x64
 8008050:	2b00      	cmp	r3, #0
 8008052:	d101      	bne.n	8008058 <nmbs_server_poll+0x8cc>
                err = send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 8008054:	2101      	movs	r1, #1
 8008056:	e438      	b.n	80078ca <nmbs_server_poll+0x13e>
        if (mei_type != 0x0E)
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	2b0e      	cmp	r3, #14
 800805c:	d1fa      	bne.n	8008054 <nmbs_server_poll+0x8c8>
        if (read_device_id_code < 1 || read_device_id_code > 4)
 800805e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008060:	3b01      	subs	r3, #1
 8008062:	b2db      	uxtb	r3, r3
 8008064:	2b03      	cmp	r3, #3
 8008066:	d900      	bls.n	800806a <nmbs_server_poll+0x8de>
 8008068:	e42e      	b.n	80078c8 <nmbs_server_poll+0x13c>
        if (object_id > 6 && object_id < 0x80)
 800806a:	1feb      	subs	r3, r5, #7
 800806c:	b2db      	uxtb	r3, r3
 800806e:	2b78      	cmp	r3, #120	@ 0x78
 8008070:	d800      	bhi.n	8008074 <nmbs_server_poll+0x8e8>
 8008072:	e4d1      	b.n	8007a18 <nmbs_server_poll+0x28c>
        if (!nmbs->msg.broadcast) {
 8008074:	0033      	movs	r3, r6
 8008076:	3338      	adds	r3, #56	@ 0x38
 8008078:	7819      	ldrb	r1, [r3, #0]
 800807a:	2900      	cmp	r1, #0
 800807c:	d001      	beq.n	8008082 <nmbs_server_poll+0x8f6>
 800807e:	f7ff fbda 	bl	8007836 <nmbs_server_poll+0xaa>
            nmbs_bitfield_reset(map);
 8008082:	2028      	movs	r0, #40	@ 0x28
 8008084:	2308      	movs	r3, #8
 8008086:	181b      	adds	r3, r3, r0
 8008088:	2220      	movs	r2, #32
 800808a:	19d8      	adds	r0, r3, r7
 800808c:	f003 fade 	bl	800b64c <memset>
            err = nmbs->callbacks.read_device_identification_map(map);
 8008090:	2228      	movs	r2, #40	@ 0x28
 8008092:	2308      	movs	r3, #8
 8008094:	189b      	adds	r3, r3, r2
 8008096:	19d8      	adds	r0, r3, r7
 8008098:	47a0      	blx	r4
 800809a:	1e04      	subs	r4, r0, #0
            if (err != NMBS_ERROR_NONE) {
 800809c:	d00c      	beq.n	80080b8 <nmbs_server_poll+0x92c>
                    if (nmbs_error_is_exception(err))
 800809e:	b2e1      	uxtb	r1, r4
                    if (nmbs_error_is_exception(err))
 80080a0:	1e4b      	subs	r3, r1, #1
 80080a2:	2b03      	cmp	r3, #3
 80080a4:	d801      	bhi.n	80080aa <nmbs_server_poll+0x91e>
 80080a6:	f7ff fc10 	bl	80078ca <nmbs_server_poll+0x13e>
                    return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 80080aa:	2104      	movs	r1, #4
 80080ac:	f7ff fc0d 	bl	80078ca <nmbs_server_poll+0x13e>
 80080b0:	0000270f 	.word	0x0000270f
 80080b4:	0000ffff 	.word	0x0000ffff
    put_msg_header(nmbs, data_length);
 80080b8:	0001      	movs	r1, r0
 80080ba:	0030      	movs	r0, r6
 80080bc:	f7ff f889 	bl	80071d2 <put_msg_header>
            put_1(nmbs, 0x0E);
 80080c0:	210e      	movs	r1, #14
 80080c2:	0030      	movs	r0, r6
 80080c4:	f7fe fecc 	bl	8006e60 <put_1>
            put_1(nmbs, read_device_id_code);
 80080c8:	0030      	movs	r0, r6
 80080ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80080cc:	f7fe fec8 	bl	8006e60 <put_1>
            put_1(nmbs, 0x83);
 80080d0:	2183      	movs	r1, #131	@ 0x83
 80080d2:	0030      	movs	r0, r6
 80080d4:	f7fe fec4 	bl	8006e60 <put_1>
            if (read_device_id_code == 4) {
 80080d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080da:	2b04      	cmp	r3, #4
 80080dc:	d14d      	bne.n	800817a <nmbs_server_poll+0x9ee>
                if (!nmbs_bitfield_read(map, object_id))
 80080de:	2128      	movs	r1, #40	@ 0x28
 80080e0:	2208      	movs	r2, #8
 80080e2:	08eb      	lsrs	r3, r5, #3
 80080e4:	1852      	adds	r2, r2, r1
 80080e6:	19d2      	adds	r2, r2, r7
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	5cd3      	ldrb	r3, [r2, r3]
 80080ec:	2207      	movs	r2, #7
 80080ee:	402a      	ands	r2, r5
 80080f0:	4113      	asrs	r3, r2
 80080f2:	2201      	movs	r2, #1
                    return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 80080f4:	3926      	subs	r1, #38	@ 0x26
                if (!nmbs_bitfield_read(map, object_id))
 80080f6:	4213      	tst	r3, r2
 80080f8:	d101      	bne.n	80080fe <nmbs_server_poll+0x972>
 80080fa:	f7ff fbe6 	bl	80078ca <nmbs_server_poll+0x13e>
                put_1(nmbs, 0);    // More follows
 80080fe:	0021      	movs	r1, r4
 8008100:	0030      	movs	r0, r6
 8008102:	f7fe fead 	bl	8006e60 <put_1>
                put_1(nmbs, 0);    // Next Object Id
 8008106:	0021      	movs	r1, r4
 8008108:	0030      	movs	r0, r6
 800810a:	f7fe fea9 	bl	8006e60 <put_1>
                put_1(nmbs, 1);    // Number of objects
 800810e:	2101      	movs	r1, #1
 8008110:	0030      	movs	r0, r6
 8008112:	f7fe fea5 	bl	8006e60 <put_1>
                str[0] = 0;
 8008116:	2228      	movs	r2, #40	@ 0x28
 8008118:	1893      	adds	r3, r2, r2
 800811a:	19db      	adds	r3, r3, r7
                err = nmbs->callbacks.read_device_identification(object_id, str);
 800811c:	1892      	adds	r2, r2, r2
                str[0] = 0;
 800811e:	701c      	strb	r4, [r3, #0]
                err = nmbs->callbacks.read_device_identification(object_id, str);
 8008120:	0028      	movs	r0, r5
 8008122:	6e73      	ldr	r3, [r6, #100]	@ 0x64
 8008124:	19d1      	adds	r1, r2, r7
 8008126:	4798      	blx	r3
 8008128:	1e04      	subs	r4, r0, #0
                if (err != NMBS_ERROR_NONE) {
 800812a:	d1b8      	bne.n	800809e <nmbs_server_poll+0x912>
                size_t str_len = strlen(str);
 800812c:	2328      	movs	r3, #40	@ 0x28
 800812e:	18db      	adds	r3, r3, r3
 8008130:	19d8      	adds	r0, r3, r7
 8008132:	f7f7 ffe9 	bl	8000108 <strlen>
                put_1(nmbs, object_id);    // Object id
 8008136:	0029      	movs	r1, r5
                size_t str_len = strlen(str);
 8008138:	6278      	str	r0, [r7, #36]	@ 0x24
                put_1(nmbs, object_id);    // Object id
 800813a:	0030      	movs	r0, r6
 800813c:	f7fe fe90 	bl	8006e60 <put_1>
                put_1(nmbs, str_len);      // Object length
 8008140:	2324      	movs	r3, #36	@ 0x24
 8008142:	18fb      	adds	r3, r7, r3
 8008144:	7819      	ldrb	r1, [r3, #0]
 8008146:	0030      	movs	r0, r6
 8008148:	f7fe fe8a 	bl	8006e60 <put_1>
    memcpy(&nmbs->msg.buf[nmbs->msg.buf_idx], data, size);
 800814c:	2328      	movs	r3, #40	@ 0x28
 800814e:	8e70      	ldrh	r0, [r6, #50]	@ 0x32
 8008150:	18db      	adds	r3, r3, r3
 8008152:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008154:	19d9      	adds	r1, r3, r7
 8008156:	1830      	adds	r0, r6, r0
 8008158:	f003 fb38 	bl	800b7cc <memcpy>
    nmbs->msg.buf_idx += size;
 800815c:	8e72      	ldrh	r2, [r6, #50]	@ 0x32
 800815e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008160:	189a      	adds	r2, r3, r2
 8008162:	8672      	strh	r2, [r6, #50]	@ 0x32
    if (nmbs->platform.transport == NMBS_TRANSPORT_TCP) {
 8008164:	6a3a      	ldr	r2, [r7, #32]
 8008166:	7812      	ldrb	r2, [r2, #0]
 8008168:	2a02      	cmp	r2, #2
 800816a:	d001      	beq.n	8008170 <nmbs_server_poll+0x9e4>
 800816c:	f7ff fc07 	bl	800797e <nmbs_server_poll+0x1f2>
        data_length += 2;
 8008170:	330a      	adds	r3, #10
    nmbs->msg.buf[index] = (uint8_t) ((data >> 8) & 0xFFU);
 8008172:	7134      	strb	r4, [r6, #4]
    nmbs->msg.buf[index + 1] = (uint8_t) data;
 8008174:	7173      	strb	r3, [r6, #5]
}
 8008176:	f7ff fc02 	bl	800797e <nmbs_server_poll+0x1f2>
            uint8_t more_follows_idx = nmbs->msg.buf_idx;
 800817a:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
            put_1(nmbs, 0);
 800817c:	0021      	movs	r1, r4
 800817e:	0030      	movs	r0, r6
            uint8_t more_follows_idx = nmbs->msg.buf_idx;
 8008180:	60fb      	str	r3, [r7, #12]
            put_1(nmbs, 0);
 8008182:	f7fe fe6d 	bl	8006e60 <put_1>
            uint8_t next_object_id_idx = nmbs->msg.buf_idx;
 8008186:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
            put_1(nmbs, 0);
 8008188:	0021      	movs	r1, r4
 800818a:	0030      	movs	r0, r6
            uint8_t next_object_id_idx = nmbs->msg.buf_idx;
 800818c:	60bb      	str	r3, [r7, #8]
            put_1(nmbs, 0);
 800818e:	f7fe fe67 	bl	8006e60 <put_1>
            uint8_t number_of_objects_idx = nmbs->msg.buf_idx;
 8008192:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
            put_1(nmbs, 0);
 8008194:	0021      	movs	r1, r4
 8008196:	0030      	movs	r0, r6
            uint8_t number_of_objects_idx = nmbs->msg.buf_idx;
 8008198:	607b      	str	r3, [r7, #4]
            put_1(nmbs, 0);
 800819a:	f7fe fe61 	bl	8006e60 <put_1>
            switch (read_device_id_code) {
 800819e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a0:	2b02      	cmp	r3, #2
 80081a2:	d026      	beq.n	80081f2 <nmbs_server_poll+0xa66>
 80081a4:	2b03      	cmp	r3, #3
 80081a6:	d02d      	beq.n	8008204 <nmbs_server_poll+0xa78>
                    last_id = 0x02;
 80081a8:	2302      	movs	r3, #2
 80081aa:	61fb      	str	r3, [r7, #28]
                    if (object_id > 0x02)
 80081ac:	429d      	cmp	r5, r3
 80081ae:	d900      	bls.n	80081b2 <nmbs_server_poll+0xa26>
 80081b0:	e432      	b.n	8007a18 <nmbs_server_poll+0x28c>
            uint8_t res_number_of_objects = 0;
 80081b2:	2300      	movs	r3, #0
 80081b4:	623b      	str	r3, [r7, #32]
            uint8_t msg_size = 6;
 80081b6:	3306      	adds	r3, #6
 80081b8:	627b      	str	r3, [r7, #36]	@ 0x24
            int16_t res_size_left = 253 - 7;
 80081ba:	33f0      	adds	r3, #240	@ 0xf0
 80081bc:	617b      	str	r3, [r7, #20]
            for (uint16_t id = object_id; id <= last_id; id++) {
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	429d      	cmp	r5, r3
 80081c2:	d925      	bls.n	8008210 <nmbs_server_poll+0xa84>
            uint8_t res_next_object_id = 0;
 80081c4:	2400      	movs	r4, #0
            uint8_t res_more_follows = 0;
 80081c6:	0022      	movs	r2, r4
    nmbs->msg.buf[index] = data;
 80081c8:	7b3b      	ldrb	r3, [r7, #12]
 80081ca:	54f2      	strb	r2, [r6, r3]
 80081cc:	7a3b      	ldrb	r3, [r7, #8]
 80081ce:	6a3a      	ldr	r2, [r7, #32]
 80081d0:	54f4      	strb	r4, [r6, r3]
 80081d2:	793b      	ldrb	r3, [r7, #4]
 80081d4:	54f2      	strb	r2, [r6, r3]
    if (nmbs->platform.transport == NMBS_TRANSPORT_TCP) {
 80081d6:	0033      	movs	r3, r6
 80081d8:	337c      	adds	r3, #124	@ 0x7c
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	2b02      	cmp	r3, #2
 80081de:	d001      	beq.n	80081e4 <nmbs_server_poll+0xa58>
 80081e0:	f7ff fbcd 	bl	800797e <nmbs_server_poll+0x1f2>
        data_length += 2;
 80081e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e6:	1c9a      	adds	r2, r3, #2
    nmbs->msg.buf[index] = (uint8_t) ((data >> 8) & 0xFFU);
 80081e8:	0a13      	lsrs	r3, r2, #8
 80081ea:	7133      	strb	r3, [r6, #4]
    nmbs->msg.buf[index + 1] = (uint8_t) data;
 80081ec:	7172      	strb	r2, [r6, #5]
}
 80081ee:	f7ff fbc6 	bl	800797e <nmbs_server_poll+0x1f2>
                    if (object_id < 0x03 || object_id > 0x07)
 80081f2:	1eeb      	subs	r3, r5, #3
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	2b04      	cmp	r3, #4
 80081f8:	d901      	bls.n	80081fe <nmbs_server_poll+0xa72>
 80081fa:	f7ff fc0d 	bl	8007a18 <nmbs_server_poll+0x28c>
                    last_id = 0x07;
 80081fe:	2307      	movs	r3, #7
                    last_id = 0xFF;
 8008200:	61fb      	str	r3, [r7, #28]
 8008202:	e7d6      	b.n	80081b2 <nmbs_server_poll+0xa26>
                    if (object_id < 0x80)
 8008204:	062b      	lsls	r3, r5, #24
 8008206:	d401      	bmi.n	800820c <nmbs_server_poll+0xa80>
 8008208:	f7ff fc06 	bl	8007a18 <nmbs_server_poll+0x28c>
                    last_id = 0xFF;
 800820c:	23ff      	movs	r3, #255	@ 0xff
 800820e:	e7f7      	b.n	8008200 <nmbs_server_poll+0xa74>
                if (!nmbs_bitfield_read(map, id)) {
 8008210:	2208      	movs	r2, #8
 8008212:	2128      	movs	r1, #40	@ 0x28
 8008214:	08eb      	lsrs	r3, r5, #3
 8008216:	1852      	adds	r2, r2, r1
 8008218:	19d2      	adds	r2, r2, r7
 800821a:	b29b      	uxth	r3, r3
 800821c:	5cd3      	ldrb	r3, [r2, r3]
 800821e:	2207      	movs	r2, #7
 8008220:	402a      	ands	r2, r5
 8008222:	4113      	asrs	r3, r2
 8008224:	2201      	movs	r2, #1
 8008226:	4213      	tst	r3, r2
 8008228:	d104      	bne.n	8008234 <nmbs_server_poll+0xaa8>
                    if (id < 0x03)
 800822a:	2d02      	cmp	r5, #2
 800822c:	d840      	bhi.n	80082b0 <nmbs_server_poll+0xb24>
                        return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 800822e:	3924      	subs	r1, #36	@ 0x24
 8008230:	f7ff fb4b 	bl	80078ca <nmbs_server_poll+0x13e>
                str[0] = 0;
 8008234:	2228      	movs	r2, #40	@ 0x28
 8008236:	2300      	movs	r3, #0
 8008238:	1891      	adds	r1, r2, r2
 800823a:	19c9      	adds	r1, r1, r7
 800823c:	b2ec      	uxtb	r4, r5
                err = nmbs->callbacks.read_device_identification((uint8_t) id, str);
 800823e:	1892      	adds	r2, r2, r2
                str[0] = 0;
 8008240:	700b      	strb	r3, [r1, #0]
                err = nmbs->callbacks.read_device_identification((uint8_t) id, str);
 8008242:	0020      	movs	r0, r4
 8008244:	6e73      	ldr	r3, [r6, #100]	@ 0x64
 8008246:	19d1      	adds	r1, r2, r7
 8008248:	4798      	blx	r3
                if (err != NMBS_ERROR_NONE) {
 800824a:	2800      	cmp	r0, #0
 800824c:	d001      	beq.n	8008252 <nmbs_server_poll+0xac6>
 800824e:	f7ff fb82 	bl	8007956 <nmbs_server_poll+0x1ca>
                int16_t str_len = (int16_t) strlen(str);
 8008252:	2328      	movs	r3, #40	@ 0x28
 8008254:	18db      	adds	r3, r3, r3
 8008256:	19d8      	adds	r0, r3, r7
 8008258:	f7f7 ff56 	bl	8000108 <strlen>
 800825c:	61b8      	str	r0, [r7, #24]
                res_size_left = (int16_t) (res_size_left - 2 - str_len);
 800825e:	8b3a      	ldrh	r2, [r7, #24]
 8008260:	613a      	str	r2, [r7, #16]
 8008262:	697a      	ldr	r2, [r7, #20]
 8008264:	3a02      	subs	r2, #2
 8008266:	0013      	movs	r3, r2
 8008268:	693a      	ldr	r2, [r7, #16]
 800826a:	1a9b      	subs	r3, r3, r2
 800826c:	b21a      	sxth	r2, r3
 800826e:	617a      	str	r2, [r7, #20]
                if (res_size_left < 0) {
 8008270:	041b      	lsls	r3, r3, #16
 8008272:	d420      	bmi.n	80082b6 <nmbs_server_poll+0xb2a>
                put_1(nmbs, (uint8_t) id);    // Object id
 8008274:	0021      	movs	r1, r4
 8008276:	0030      	movs	r0, r6
 8008278:	f7fe fdf2 	bl	8006e60 <put_1>
                put_1(nmbs, str_len);         // Object length
 800827c:	7e3c      	ldrb	r4, [r7, #24]
 800827e:	0030      	movs	r0, r6
 8008280:	0021      	movs	r1, r4
 8008282:	f7fe fded 	bl	8006e60 <put_1>
    memcpy(&nmbs->msg.buf[nmbs->msg.buf_idx], data, size);
 8008286:	2328      	movs	r3, #40	@ 0x28
 8008288:	8e70      	ldrh	r0, [r6, #50]	@ 0x32
 800828a:	18db      	adds	r3, r3, r3
 800828c:	69ba      	ldr	r2, [r7, #24]
 800828e:	19d9      	adds	r1, r3, r7
 8008290:	1830      	adds	r0, r6, r0
 8008292:	f003 fa9b 	bl	800b7cc <memcpy>
    nmbs->msg.buf_idx += size;
 8008296:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8008298:	693a      	ldr	r2, [r7, #16]
 800829a:	18d3      	adds	r3, r2, r3
 800829c:	8673      	strh	r3, [r6, #50]	@ 0x32
                msg_size += (2 + str_len);
 800829e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a0:	3302      	adds	r3, #2
 80082a2:	191b      	adds	r3, r3, r4
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	627b      	str	r3, [r7, #36]	@ 0x24
                res_number_of_objects++;
 80082a8:	6a3b      	ldr	r3, [r7, #32]
 80082aa:	3301      	adds	r3, #1
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	623b      	str	r3, [r7, #32]
            for (uint16_t id = object_id; id <= last_id; id++) {
 80082b0:	3501      	adds	r5, #1
 80082b2:	b2ad      	uxth	r5, r5
 80082b4:	e783      	b.n	80081be <nmbs_server_poll+0xa32>
                    res_more_follows = 0xFF;
 80082b6:	22ff      	movs	r2, #255	@ 0xff
 80082b8:	e786      	b.n	80081c8 <nmbs_server_poll+0xa3c>
        return recv_read_device_identification_res(nmbs, 0, NULL, 0, NULL, NULL, NULL, NULL);
 80082ba:	0003      	movs	r3, r0
 80082bc:	0002      	movs	r2, r0
 80082be:	0001      	movs	r1, r0
 80082c0:	9003      	str	r0, [sp, #12]
 80082c2:	9002      	str	r0, [sp, #8]
 80082c4:	9001      	str	r0, [sp, #4]
 80082c6:	9000      	str	r0, [sp, #0]
 80082c8:	0030      	movs	r0, r6
 80082ca:	f7ff f99f 	bl	800760c <recv_read_device_identification_res>
 80082ce:	f7ff facb 	bl	8007868 <nmbs_server_poll+0xdc>
 80082d2:	46c0      	nop			@ (mov r8, r8)

080082d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80082d4:	480d      	ldr	r0, [pc, #52]	@ (800830c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80082d6:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 80082d8:	f7fb fd74 	bl	8003dc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80082dc:	480c      	ldr	r0, [pc, #48]	@ (8008310 <LoopForever+0x6>)
  ldr r1, =_edata
 80082de:	490d      	ldr	r1, [pc, #52]	@ (8008314 <LoopForever+0xa>)
  ldr r2, =_sidata
 80082e0:	4a0d      	ldr	r2, [pc, #52]	@ (8008318 <LoopForever+0xe>)
  movs r3, #0
 80082e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80082e4:	e002      	b.n	80082ec <LoopCopyDataInit>

080082e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80082e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80082e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80082ea:	3304      	adds	r3, #4

080082ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80082ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80082ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80082f0:	d3f9      	bcc.n	80082e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80082f2:	4a0a      	ldr	r2, [pc, #40]	@ (800831c <LoopForever+0x12>)
  ldr r4, =_ebss
 80082f4:	4c0a      	ldr	r4, [pc, #40]	@ (8008320 <LoopForever+0x16>)
  movs r3, #0
 80082f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80082f8:	e001      	b.n	80082fe <LoopFillZerobss>

080082fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80082fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80082fc:	3204      	adds	r2, #4

080082fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80082fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008300:	d3fb      	bcc.n	80082fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8008302:	f003 fa29 	bl	800b758 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008306:	f7fb f9a1 	bl	800364c <main>

0800830a <LoopForever>:

LoopForever:
    b LoopForever
 800830a:	e7fe      	b.n	800830a <LoopForever>
  ldr   r0, =_estack
 800830c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8008310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008314:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8008318:	0800da40 	.word	0x0800da40
  ldr r2, =_sbss
 800831c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8008320:	20000774 	.word	0x20000774

08008324 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008324:	e7fe      	b.n	8008324 <ADC1_COMP_IRQHandler>
	...

08008328 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008328:	b570      	push	{r4, r5, r6, lr}
 800832a:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800832c:	20fa      	movs	r0, #250	@ 0xfa
 800832e:	4b0d      	ldr	r3, [pc, #52]	@ (8008364 <HAL_InitTick+0x3c>)
 8008330:	0080      	lsls	r0, r0, #2
 8008332:	7819      	ldrb	r1, [r3, #0]
 8008334:	f7f7 ff0e 	bl	8000154 <__udivsi3>
 8008338:	4c0b      	ldr	r4, [pc, #44]	@ (8008368 <HAL_InitTick+0x40>)
 800833a:	0001      	movs	r1, r0
 800833c:	6820      	ldr	r0, [r4, #0]
 800833e:	f7f7 ff09 	bl	8000154 <__udivsi3>
 8008342:	f000 fb5b 	bl	80089fc <HAL_SYSTICK_Config>
 8008346:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8008348:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800834a:	2c00      	cmp	r4, #0
 800834c:	d109      	bne.n	8008362 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800834e:	2d03      	cmp	r5, #3
 8008350:	d807      	bhi.n	8008362 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008352:	3802      	subs	r0, #2
 8008354:	0022      	movs	r2, r4
 8008356:	0029      	movs	r1, r5
 8008358:	f000 fb1a 	bl	8008990 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800835c:	0020      	movs	r0, r4
 800835e:	4b03      	ldr	r3, [pc, #12]	@ (800836c <HAL_InitTick+0x44>)
 8008360:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8008362:	bd70      	pop	{r4, r5, r6, pc}
 8008364:	20000004 	.word	0x20000004
 8008368:	20000000 	.word	0x20000000
 800836c:	20000008 	.word	0x20000008

08008370 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008370:	2310      	movs	r3, #16
 8008372:	4a06      	ldr	r2, [pc, #24]	@ (800838c <HAL_Init+0x1c>)
{
 8008374:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008376:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8008378:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800837a:	430b      	orrs	r3, r1
 800837c:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800837e:	f7ff ffd3 	bl	8008328 <HAL_InitTick>
  HAL_MspInit();
 8008382:	f7fb fb7d 	bl	8003a80 <HAL_MspInit>
}
 8008386:	2000      	movs	r0, #0
 8008388:	bd10      	pop	{r4, pc}
 800838a:	46c0      	nop			@ (mov r8, r8)
 800838c:	40022000 	.word	0x40022000

08008390 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8008390:	4a03      	ldr	r2, [pc, #12]	@ (80083a0 <HAL_IncTick+0x10>)
 8008392:	4b04      	ldr	r3, [pc, #16]	@ (80083a4 <HAL_IncTick+0x14>)
 8008394:	6811      	ldr	r1, [r2, #0]
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	185b      	adds	r3, r3, r1
 800839a:	6013      	str	r3, [r2, #0]
}
 800839c:	4770      	bx	lr
 800839e:	46c0      	nop			@ (mov r8, r8)
 80083a0:	20000600 	.word	0x20000600
 80083a4:	20000004 	.word	0x20000004

080083a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80083a8:	4b01      	ldr	r3, [pc, #4]	@ (80083b0 <HAL_GetTick+0x8>)
 80083aa:	6818      	ldr	r0, [r3, #0]
}
 80083ac:	4770      	bx	lr
 80083ae:	46c0      	nop			@ (mov r8, r8)
 80083b0:	20000600 	.word	0x20000600

080083b4 <ADC_ConversionStop>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80083b4:	2204      	movs	r2, #4
 80083b6:	6803      	ldr	r3, [r0, #0]
{
 80083b8:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80083ba:	6899      	ldr	r1, [r3, #8]
{
 80083bc:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80083be:	4211      	tst	r1, r2
 80083c0:	d101      	bne.n	80083c6 <ADC_ConversionStop+0x12>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80083c2:	2000      	movs	r0, #0
}
 80083c4:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80083c6:	6899      	ldr	r1, [r3, #8]
 80083c8:	4211      	tst	r1, r2
 80083ca:	d006      	beq.n	80083da <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80083cc:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80083ce:	0792      	lsls	r2, r2, #30
 80083d0:	d403      	bmi.n	80083da <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80083d2:	2210      	movs	r2, #16
 80083d4:	6899      	ldr	r1, [r3, #8]
 80083d6:	430a      	orrs	r2, r1
 80083d8:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80083da:	f7ff ffe5 	bl	80083a8 <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80083de:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 80083e0:	0005      	movs	r5, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80083e2:	6823      	ldr	r3, [r4, #0]
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	4233      	tst	r3, r6
 80083e8:	d0eb      	beq.n	80083c2 <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80083ea:	f7ff ffdd 	bl	80083a8 <HAL_GetTick>
 80083ee:	1b40      	subs	r0, r0, r5
 80083f0:	2802      	cmp	r0, #2
 80083f2:	d9f6      	bls.n	80083e2 <ADC_ConversionStop+0x2e>
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80083f4:	6823      	ldr	r3, [r4, #0]
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	4233      	tst	r3, r6
 80083fa:	d0f2      	beq.n	80083e2 <ADC_ConversionStop+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80083fc:	2310      	movs	r3, #16
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80083fe:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008400:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008402:	4313      	orrs	r3, r2
 8008404:	63a3      	str	r3, [r4, #56]	@ 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008406:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008408:	4303      	orrs	r3, r0
 800840a:	63e3      	str	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 800840c:	e7da      	b.n	80083c4 <ADC_ConversionStop+0x10>

0800840e <ADC_Disable>:
  if (ADC_IS_ENABLE(hadc) != RESET)
 800840e:	2103      	movs	r1, #3
 8008410:	6803      	ldr	r3, [r0, #0]
{
 8008412:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8008414:	689a      	ldr	r2, [r3, #8]
{
 8008416:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8008418:	400a      	ands	r2, r1
 800841a:	2a01      	cmp	r2, #1
 800841c:	d001      	beq.n	8008422 <ADC_Disable+0x14>
  return HAL_OK;
 800841e:	2000      	movs	r0, #0
}
 8008420:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8008422:	6819      	ldr	r1, [r3, #0]
 8008424:	4211      	tst	r1, r2
 8008426:	d102      	bne.n	800842e <ADC_Disable+0x20>
 8008428:	68da      	ldr	r2, [r3, #12]
 800842a:	0412      	lsls	r2, r2, #16
 800842c:	d5f7      	bpl.n	800841e <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800842e:	2205      	movs	r2, #5
 8008430:	689d      	ldr	r5, [r3, #8]
 8008432:	4015      	ands	r5, r2
 8008434:	2d01      	cmp	r5, #1
 8008436:	d11c      	bne.n	8008472 <ADC_Disable+0x64>
      __HAL_ADC_DISABLE(hadc);
 8008438:	6899      	ldr	r1, [r3, #8]
 800843a:	3a03      	subs	r2, #3
 800843c:	430a      	orrs	r2, r1
 800843e:	609a      	str	r2, [r3, #8]
 8008440:	2203      	movs	r2, #3
 8008442:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8008444:	f7ff ffb0 	bl	80083a8 <HAL_GetTick>
 8008448:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800844a:	6823      	ldr	r3, [r4, #0]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	422b      	tst	r3, r5
 8008450:	d0e5      	beq.n	800841e <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008452:	f7ff ffa9 	bl	80083a8 <HAL_GetTick>
 8008456:	1b80      	subs	r0, r0, r6
 8008458:	2802      	cmp	r0, #2
 800845a:	d9f6      	bls.n	800844a <ADC_Disable+0x3c>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800845c:	6823      	ldr	r3, [r4, #0]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	422b      	tst	r3, r5
 8008462:	d0f2      	beq.n	800844a <ADC_Disable+0x3c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008464:	2310      	movs	r3, #16
 8008466:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008468:	4313      	orrs	r3, r2
 800846a:	63a3      	str	r3, [r4, #56]	@ 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800846c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800846e:	432b      	orrs	r3, r5
 8008470:	e006      	b.n	8008480 <ADC_Disable+0x72>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008472:	2310      	movs	r3, #16
 8008474:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008476:	4313      	orrs	r3, r2
 8008478:	63a3      	str	r3, [r4, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800847a:	2301      	movs	r3, #1
 800847c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800847e:	4313      	orrs	r3, r2
      return HAL_ERROR;
 8008480:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008482:	63e3      	str	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8008484:	e7cc      	b.n	8008420 <ADC_Disable+0x12>
	...

08008488 <ADC_Enable.constprop.0>:
  __IO uint32_t wait_loop_index = 0U;
 8008488:	2300      	movs	r3, #0
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
 800848a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800848c:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 800848e:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8008490:	6803      	ldr	r3, [r0, #0]
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
 8008492:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8008494:	689a      	ldr	r2, [r3, #8]
 8008496:	400a      	ands	r2, r1
 8008498:	2a01      	cmp	r2, #1
 800849a:	d107      	bne.n	80084ac <ADC_Enable.constprop.0+0x24>
 800849c:	6819      	ldr	r1, [r3, #0]
 800849e:	4211      	tst	r1, r2
 80084a0:	d001      	beq.n	80084a6 <ADC_Enable.constprop.0+0x1e>
  return HAL_OK;
 80084a2:	2000      	movs	r0, #0
}
 80084a4:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80084a6:	68da      	ldr	r2, [r3, #12]
 80084a8:	0412      	lsls	r2, r2, #16
 80084aa:	d4fa      	bmi.n	80084a2 <ADC_Enable.constprop.0+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80084ac:	6899      	ldr	r1, [r3, #8]
 80084ae:	4a1b      	ldr	r2, [pc, #108]	@ (800851c <ADC_Enable.constprop.0+0x94>)
 80084b0:	4211      	tst	r1, r2
 80084b2:	d009      	beq.n	80084c8 <ADC_Enable.constprop.0+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80084b4:	2310      	movs	r3, #16
 80084b6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80084b8:	4313      	orrs	r3, r2
 80084ba:	63a3      	str	r3, [r4, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80084bc:	2301      	movs	r3, #1
 80084be:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80084c0:	4313      	orrs	r3, r2
      return HAL_ERROR;
 80084c2:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80084c4:	63e3      	str	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 80084c6:	e7ed      	b.n	80084a4 <ADC_Enable.constprop.0+0x1c>
    __HAL_ADC_ENABLE(hadc);
 80084c8:	2201      	movs	r2, #1
 80084ca:	6899      	ldr	r1, [r3, #8]
 80084cc:	430a      	orrs	r2, r1
 80084ce:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80084d0:	4b13      	ldr	r3, [pc, #76]	@ (8008520 <ADC_Enable.constprop.0+0x98>)
 80084d2:	4914      	ldr	r1, [pc, #80]	@ (8008524 <ADC_Enable.constprop.0+0x9c>)
 80084d4:	6818      	ldr	r0, [r3, #0]
 80084d6:	f7f7 fe3d 	bl	8000154 <__udivsi3>
 80084da:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 80084dc:	9b01      	ldr	r3, [sp, #4]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d117      	bne.n	8008512 <ADC_Enable.constprop.0+0x8a>
    tickstart = HAL_GetTick();
 80084e2:	f7ff ff61 	bl	80083a8 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80084e6:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 80084e8:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80084ea:	6823      	ldr	r3, [r4, #0]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	422b      	tst	r3, r5
 80084f0:	d1d7      	bne.n	80084a2 <ADC_Enable.constprop.0+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80084f2:	f7ff ff59 	bl	80083a8 <HAL_GetTick>
 80084f6:	1b80      	subs	r0, r0, r6
 80084f8:	2802      	cmp	r0, #2
 80084fa:	d9f6      	bls.n	80084ea <ADC_Enable.constprop.0+0x62>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80084fc:	6823      	ldr	r3, [r4, #0]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	422b      	tst	r3, r5
 8008502:	d1f2      	bne.n	80084ea <ADC_Enable.constprop.0+0x62>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008504:	2310      	movs	r3, #16
 8008506:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008508:	4313      	orrs	r3, r2
 800850a:	63a3      	str	r3, [r4, #56]	@ 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800850c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800850e:	432b      	orrs	r3, r5
 8008510:	e7d7      	b.n	80084c2 <ADC_Enable.constprop.0+0x3a>
      wait_loop_index--;
 8008512:	9b01      	ldr	r3, [sp, #4]
 8008514:	3b01      	subs	r3, #1
 8008516:	9301      	str	r3, [sp, #4]
 8008518:	e7e0      	b.n	80084dc <ADC_Enable.constprop.0+0x54>
 800851a:	46c0      	nop			@ (mov r8, r8)
 800851c:	80000017 	.word	0x80000017
 8008520:	20000000 	.word	0x20000000
 8008524:	000f4240 	.word	0x000f4240

08008528 <HAL_ADC_Init>:
{
 8008528:	b570      	push	{r4, r5, r6, lr}
 800852a:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 800852c:	d100      	bne.n	8008530 <HAL_ADC_Init+0x8>
 800852e:	e090      	b.n	8008652 <HAL_ADC_Init+0x12a>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008530:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8008532:	2b00      	cmp	r3, #0
 8008534:	d105      	bne.n	8008542 <HAL_ADC_Init+0x1a>
    hadc->Lock = HAL_UNLOCKED;
 8008536:	0002      	movs	r2, r0
 8008538:	3234      	adds	r2, #52	@ 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 800853a:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hadc->Lock = HAL_UNLOCKED;
 800853c:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 800853e:	f7fb fab7 	bl	8003ab0 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8008542:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008544:	06db      	lsls	r3, r3, #27
 8008546:	d500      	bpl.n	800854a <HAL_ADC_Init+0x22>
 8008548:	e085      	b.n	8008656 <HAL_ADC_Init+0x12e>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800854a:	6822      	ldr	r2, [r4, #0]
 800854c:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 800854e:	075b      	lsls	r3, r3, #29
 8008550:	d500      	bpl.n	8008554 <HAL_ADC_Init+0x2c>
 8008552:	e080      	b.n	8008656 <HAL_ADC_Init+0x12e>
    ADC_STATE_CLR_SET(hadc->State,
 8008554:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008556:	4b42      	ldr	r3, [pc, #264]	@ (8008660 <HAL_ADC_Init+0x138>)
 8008558:	4019      	ands	r1, r3
 800855a:	3306      	adds	r3, #6
 800855c:	33ff      	adds	r3, #255	@ 0xff
 800855e:	430b      	orrs	r3, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 8008560:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 8008562:	63a3      	str	r3, [r4, #56]	@ 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 8008564:	6893      	ldr	r3, [r2, #8]
 8008566:	400b      	ands	r3, r1
 8008568:	2b01      	cmp	r3, #1
 800856a:	d105      	bne.n	8008578 <HAL_ADC_Init+0x50>
 800856c:	6811      	ldr	r1, [r2, #0]
 800856e:	4219      	tst	r1, r3
 8008570:	d10e      	bne.n	8008590 <HAL_ADC_Init+0x68>
 8008572:	68d3      	ldr	r3, [r2, #12]
 8008574:	041b      	lsls	r3, r3, #16
 8008576:	d40b      	bmi.n	8008590 <HAL_ADC_Init+0x68>
      MODIFY_REG(hadc->Instance->CFGR1,
 8008578:	2118      	movs	r1, #24
 800857a:	68d3      	ldr	r3, [r2, #12]
 800857c:	438b      	bics	r3, r1
 800857e:	68a1      	ldr	r1, [r4, #8]
 8008580:	430b      	orrs	r3, r1
 8008582:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8008584:	6913      	ldr	r3, [r2, #16]
 8008586:	6861      	ldr	r1, [r4, #4]
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	089b      	lsrs	r3, r3, #2
 800858c:	430b      	orrs	r3, r1
 800858e:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8008590:	68d3      	ldr	r3, [r2, #12]
 8008592:	4934      	ldr	r1, [pc, #208]	@ (8008664 <HAL_ADC_Init+0x13c>)
 8008594:	400b      	ands	r3, r1
 8008596:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008598:	7e23      	ldrb	r3, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800859a:	7e60      	ldrb	r0, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800859c:	039b      	lsls	r3, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800859e:	03c0      	lsls	r0, r0, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80085a0:	4303      	orrs	r3, r0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80085a2:	7ea1      	ldrb	r1, [r4, #26]
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80085a4:	68e0      	ldr	r0, [r4, #12]
 80085a6:	4303      	orrs	r3, r0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80085a8:	0348      	lsls	r0, r1, #13
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80085aa:	4303      	orrs	r3, r0
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80085ac:	1d60      	adds	r0, r4, #5
 80085ae:	7fc0      	ldrb	r0, [r0, #31]
 80085b0:	0040      	lsls	r0, r0, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80085b2:	4303      	orrs	r3, r0
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80085b4:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80085b6:	3801      	subs	r0, #1
 80085b8:	1e45      	subs	r5, r0, #1
 80085ba:	41a8      	sbcs	r0, r5
 80085bc:	0300      	lsls	r0, r0, #12
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80085be:	4303      	orrs	r3, r0
 80085c0:	6920      	ldr	r0, [r4, #16]
 80085c2:	3802      	subs	r0, #2
 80085c4:	4245      	negs	r5, r0
 80085c6:	4168      	adcs	r0, r5
 80085c8:	0080      	lsls	r0, r0, #2
 80085ca:	4303      	orrs	r3, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80085cc:	7ee0      	ldrb	r0, [r4, #27]
 80085ce:	2801      	cmp	r0, #1
 80085d0:	d104      	bne.n	80085dc <HAL_ADC_Init+0xb4>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80085d2:	2900      	cmp	r1, #0
 80085d4:	d12b      	bne.n	800862e <HAL_ADC_Init+0x106>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80085d6:	2180      	movs	r1, #128	@ 0x80
 80085d8:	0249      	lsls	r1, r1, #9
 80085da:	430b      	orrs	r3, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80085dc:	20c2      	movs	r0, #194	@ 0xc2
 80085de:	69e1      	ldr	r1, [r4, #28]
 80085e0:	30ff      	adds	r0, #255	@ 0xff
 80085e2:	4281      	cmp	r1, r0
 80085e4:	d002      	beq.n	80085ec <HAL_ADC_Init+0xc4>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80085e6:	6a20      	ldr	r0, [r4, #32]
 80085e8:	4301      	orrs	r1, r0
 80085ea:	430b      	orrs	r3, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80085ec:	2080      	movs	r0, #128	@ 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80085ee:	68d1      	ldr	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80085f0:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80085f2:	4319      	orrs	r1, r3
 80085f4:	60d1      	str	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80085f6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80085f8:	4281      	cmp	r1, r0
 80085fa:	d002      	beq.n	8008602 <HAL_ADC_Init+0xda>
 80085fc:	1e48      	subs	r0, r1, #1
 80085fe:	2806      	cmp	r0, #6
 8008600:	d807      	bhi.n	8008612 <HAL_ADC_Init+0xea>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8008602:	2507      	movs	r5, #7
 8008604:	6950      	ldr	r0, [r2, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8008606:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8008608:	43a8      	bics	r0, r5
 800860a:	6150      	str	r0, [r2, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800860c:	6950      	ldr	r0, [r2, #20]
 800860e:	4301      	orrs	r1, r0
 8008610:	6151      	str	r1, [r2, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8008612:	68d2      	ldr	r2, [r2, #12]
 8008614:	4914      	ldr	r1, [pc, #80]	@ (8008668 <HAL_ADC_Init+0x140>)
 8008616:	400a      	ands	r2, r1
 8008618:	429a      	cmp	r2, r3
 800861a:	d110      	bne.n	800863e <HAL_ADC_Init+0x116>
      ADC_CLEAR_ERRORCODE(hadc);
 800861c:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800861e:	2303      	movs	r3, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8008620:	63e0      	str	r0, [r4, #60]	@ 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 8008622:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008624:	439a      	bics	r2, r3
 8008626:	3b02      	subs	r3, #2
 8008628:	4313      	orrs	r3, r2
 800862a:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 800862c:	bd70      	pop	{r4, r5, r6, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800862e:	2120      	movs	r1, #32
 8008630:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8008632:	4329      	orrs	r1, r5
 8008634:	63a1      	str	r1, [r4, #56]	@ 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008636:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8008638:	4308      	orrs	r0, r1
 800863a:	63e0      	str	r0, [r4, #60]	@ 0x3c
 800863c:	e7ce      	b.n	80085dc <HAL_ADC_Init+0xb4>
      ADC_STATE_CLR_SET(hadc->State,
 800863e:	2312      	movs	r3, #18
 8008640:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008642:	439a      	bics	r2, r3
 8008644:	3b02      	subs	r3, #2
 8008646:	4313      	orrs	r3, r2
 8008648:	63a3      	str	r3, [r4, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800864a:	2301      	movs	r3, #1
 800864c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800864e:	4313      	orrs	r3, r2
 8008650:	63e3      	str	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 8008652:	2001      	movs	r0, #1
 8008654:	e7ea      	b.n	800862c <HAL_ADC_Init+0x104>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008656:	2310      	movs	r3, #16
 8008658:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800865a:	4313      	orrs	r3, r2
 800865c:	63a3      	str	r3, [r4, #56]	@ 0x38
    tmp_hal_status = HAL_ERROR;
 800865e:	e7f8      	b.n	8008652 <HAL_ADC_Init+0x12a>
 8008660:	fffffefd 	.word	0xfffffefd
 8008664:	fffe0219 	.word	0xfffe0219
 8008668:	833fffe7 	.word	0x833fffe7

0800866c <HAL_ADC_Stop>:
{ 
 800866c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 800866e:	0006      	movs	r6, r0
 8008670:	3634      	adds	r6, #52	@ 0x34
 8008672:	7833      	ldrb	r3, [r6, #0]
{ 
 8008674:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8008676:	2002      	movs	r0, #2
 8008678:	2b01      	cmp	r3, #1
 800867a:	d012      	beq.n	80086a2 <HAL_ADC_Stop+0x36>
 800867c:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 800867e:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 8008680:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8008682:	f7ff fe97 	bl	80083b4 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8008686:	2800      	cmp	r0, #0
 8008688:	d109      	bne.n	800869e <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 800868a:	0020      	movs	r0, r4
 800868c:	f7ff febf 	bl	800840e <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8008690:	2800      	cmp	r0, #0
 8008692:	d104      	bne.n	800869e <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8008694:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008696:	4a03      	ldr	r2, [pc, #12]	@ (80086a4 <HAL_ADC_Stop+0x38>)
 8008698:	4013      	ands	r3, r2
 800869a:	431d      	orrs	r5, r3
 800869c:	63a5      	str	r5, [r4, #56]	@ 0x38
  __HAL_UNLOCK(hadc);
 800869e:	2300      	movs	r3, #0
 80086a0:	7033      	strb	r3, [r6, #0]
}
 80086a2:	bd70      	pop	{r4, r5, r6, pc}
 80086a4:	fffffefe 	.word	0xfffffefe

080086a8 <HAL_ADC_Start_DMA>:
{
 80086a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80086aa:	6803      	ldr	r3, [r0, #0]
{
 80086ac:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80086ae:	689b      	ldr	r3, [r3, #8]
{
 80086b0:	000e      	movs	r6, r1
    __HAL_LOCK(hadc);
 80086b2:	2002      	movs	r0, #2
{
 80086b4:	9201      	str	r2, [sp, #4]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80086b6:	075b      	lsls	r3, r3, #29
 80086b8:	d430      	bmi.n	800871c <HAL_ADC_Start_DMA+0x74>
    __HAL_LOCK(hadc);
 80086ba:	0027      	movs	r7, r4
 80086bc:	3734      	adds	r7, #52	@ 0x34
 80086be:	783b      	ldrb	r3, [r7, #0]
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d02b      	beq.n	800871c <HAL_ADC_Start_DMA+0x74>
 80086c4:	2301      	movs	r3, #1
 80086c6:	703b      	strb	r3, [r7, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80086c8:	7e63      	ldrb	r3, [r4, #25]
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d127      	bne.n	800871e <HAL_ADC_Start_DMA+0x76>
      ADC_STATE_CLR_SET(hadc->State,
 80086ce:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80086d0:	4b16      	ldr	r3, [pc, #88]	@ (800872c <HAL_ADC_Start_DMA+0x84>)
      ADC_CLEAR_ERRORCODE(hadc);
 80086d2:	2500      	movs	r5, #0
      ADC_STATE_CLR_SET(hadc->State,
 80086d4:	401a      	ands	r2, r3
 80086d6:	2380      	movs	r3, #128	@ 0x80
 80086d8:	005b      	lsls	r3, r3, #1
 80086da:	4313      	orrs	r3, r2
 80086dc:	63a3      	str	r3, [r4, #56]	@ 0x38
      ADC_CLEAR_ERRORCODE(hadc);
 80086de:	63e5      	str	r5, [r4, #60]	@ 0x3c
      __HAL_UNLOCK(hadc);
 80086e0:	703d      	strb	r5, [r7, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80086e2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80086e4:	4b12      	ldr	r3, [pc, #72]	@ (8008730 <HAL_ADC_Start_DMA+0x88>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80086e6:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80086e8:	6283      	str	r3, [r0, #40]	@ 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80086ea:	4b12      	ldr	r3, [pc, #72]	@ (8008734 <HAL_ADC_Start_DMA+0x8c>)
 80086ec:	62c3      	str	r3, [r0, #44]	@ 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80086ee:	4b12      	ldr	r3, [pc, #72]	@ (8008738 <HAL_ADC_Start_DMA+0x90>)
 80086f0:	6303      	str	r3, [r0, #48]	@ 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80086f2:	231c      	movs	r3, #28
 80086f4:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80086f6:	684a      	ldr	r2, [r1, #4]
 80086f8:	3b0c      	subs	r3, #12
 80086fa:	4313      	orrs	r3, r2
 80086fc:	604b      	str	r3, [r1, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80086fe:	2301      	movs	r3, #1
 8008700:	68ca      	ldr	r2, [r1, #12]
 8008702:	4313      	orrs	r3, r2
 8008704:	60cb      	str	r3, [r1, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008706:	0032      	movs	r2, r6
 8008708:	9b01      	ldr	r3, [sp, #4]
 800870a:	3140      	adds	r1, #64	@ 0x40
 800870c:	f000 f9c2 	bl	8008a94 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8008710:	2304      	movs	r3, #4
 8008712:	0028      	movs	r0, r5
 8008714:	6822      	ldr	r2, [r4, #0]
 8008716:	6891      	ldr	r1, [r2, #8]
 8008718:	430b      	orrs	r3, r1
 800871a:	6093      	str	r3, [r2, #8]
}
 800871c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800871e:	0020      	movs	r0, r4
 8008720:	f7ff feb2 	bl	8008488 <ADC_Enable.constprop.0>
    if (tmp_hal_status == HAL_OK)
 8008724:	2800      	cmp	r0, #0
 8008726:	d0d2      	beq.n	80086ce <HAL_ADC_Start_DMA+0x26>
 8008728:	e7f8      	b.n	800871c <HAL_ADC_Start_DMA+0x74>
 800872a:	46c0      	nop			@ (mov r8, r8)
 800872c:	fffff0fe 	.word	0xfffff0fe
 8008730:	08008741 	.word	0x08008741
 8008734:	080087b3 	.word	0x080087b3
 8008738:	080087bf 	.word	0x080087bf

0800873c <HAL_ADC_ConvCpltCallback>:
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
 800873c:	4770      	bx	lr
	...

08008740 <ADC_DMAConvCplt>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8008740:	2250      	movs	r2, #80	@ 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008742:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 8008744:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8008746:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8008748:	4211      	tst	r1, r2
 800874a:	d12b      	bne.n	80087a4 <ADC_DMAConvCplt+0x64>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800874c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800874e:	32b1      	adds	r2, #177	@ 0xb1
 8008750:	32ff      	adds	r2, #255	@ 0xff
 8008752:	430a      	orrs	r2, r1
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8008754:	21c0      	movs	r1, #192	@ 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8008756:	639a      	str	r2, [r3, #56]	@ 0x38
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	0109      	lsls	r1, r1, #4
 800875c:	68d0      	ldr	r0, [r2, #12]
 800875e:	4208      	tst	r0, r1
 8008760:	d113      	bne.n	800878a <ADC_DMAConvCplt+0x4a>
 8008762:	7e99      	ldrb	r1, [r3, #26]
 8008764:	2900      	cmp	r1, #0
 8008766:	d110      	bne.n	800878a <ADC_DMAConvCplt+0x4a>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8008768:	6811      	ldr	r1, [r2, #0]
 800876a:	0709      	lsls	r1, r1, #28
 800876c:	d50d      	bpl.n	800878a <ADC_DMAConvCplt+0x4a>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800876e:	6891      	ldr	r1, [r2, #8]
 8008770:	0749      	lsls	r1, r1, #29
 8008772:	d40e      	bmi.n	8008792 <ADC_DMAConvCplt+0x52>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8008774:	200c      	movs	r0, #12
 8008776:	6851      	ldr	r1, [r2, #4]
 8008778:	4381      	bics	r1, r0
 800877a:	6051      	str	r1, [r2, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800877c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800877e:	4a0b      	ldr	r2, [pc, #44]	@ (80087ac <ADC_DMAConvCplt+0x6c>)
 8008780:	4011      	ands	r1, r2
 8008782:	3204      	adds	r2, #4
 8008784:	32ff      	adds	r2, #255	@ 0xff
 8008786:	430a      	orrs	r2, r1
 8008788:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800878a:	0018      	movs	r0, r3
 800878c:	f7ff ffd6 	bl	800873c <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8008790:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008792:	2220      	movs	r2, #32
 8008794:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8008796:	430a      	orrs	r2, r1
 8008798:	639a      	str	r2, [r3, #56]	@ 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800879a:	2201      	movs	r2, #1
 800879c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800879e:	430a      	orrs	r2, r1
 80087a0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80087a2:	e7f2      	b.n	800878a <ADC_DMAConvCplt+0x4a>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80087a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087a8:	4798      	blx	r3
}
 80087aa:	e7f1      	b.n	8008790 <ADC_DMAConvCplt+0x50>
 80087ac:	fffffefe 	.word	0xfffffefe

080087b0 <HAL_ADC_ConvHalfCpltCallback>:
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
 80087b0:	4770      	bx	lr

080087b2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80087b2:	b510      	push	{r4, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80087b4:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80087b6:	f7ff fffb 	bl	80087b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80087ba:	bd10      	pop	{r4, pc}

080087bc <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 80087bc:	4770      	bx	lr

080087be <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80087be:	2340      	movs	r3, #64	@ 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80087c0:	6a40      	ldr	r0, [r0, #36]	@ 0x24
{
 80087c2:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80087c4:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 80087c6:	4313      	orrs	r3, r2
 80087c8:	6383      	str	r3, [r0, #56]	@ 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80087ca:	2304      	movs	r3, #4
 80087cc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80087ce:	4313      	orrs	r3, r2
 80087d0:	63c3      	str	r3, [r0, #60]	@ 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80087d2:	f7ff fff3 	bl	80087bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80087d6:	bd10      	pop	{r4, pc}

080087d8 <HAL_ADC_ConfigChannel>:
{
 80087d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 80087da:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80087dc:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 80087de:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80087e0:	3434      	adds	r4, #52	@ 0x34
 80087e2:	7822      	ldrb	r2, [r4, #0]
{
 80087e4:	0003      	movs	r3, r0
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80087e6:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
  __HAL_LOCK(hadc);
 80087e8:	2002      	movs	r0, #2
 80087ea:	2a01      	cmp	r2, #1
 80087ec:	d02a      	beq.n	8008844 <HAL_ADC_ConfigChannel+0x6c>
 80087ee:	3801      	subs	r0, #1
 80087f0:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	6896      	ldr	r6, [r2, #8]
 80087f6:	0776      	lsls	r6, r6, #29
 80087f8:	d45e      	bmi.n	80088b8 <HAL_ADC_ConfigChannel+0xe0>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80087fa:	680b      	ldr	r3, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 80087fc:	684f      	ldr	r7, [r1, #4]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80087fe:	001e      	movs	r6, r3
    if (sConfig->Rank != ADC_RANK_NONE)
 8008800:	46bc      	mov	ip, r7
 8008802:	4f30      	ldr	r7, [pc, #192]	@ (80088c4 <HAL_ADC_ConfigChannel+0xec>)
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8008804:	4098      	lsls	r0, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008806:	3e10      	subs	r6, #16
    if (sConfig->Rank != ADC_RANK_NONE)
 8008808:	45bc      	cmp	ip, r7
 800880a:	d03f      	beq.n	800888c <HAL_ADC_ConfigChannel+0xb4>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800880c:	6a97      	ldr	r7, [r2, #40]	@ 0x28
 800880e:	4338      	orrs	r0, r7
 8008810:	6290      	str	r0, [r2, #40]	@ 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8008812:	2080      	movs	r0, #128	@ 0x80
 8008814:	0540      	lsls	r0, r0, #21
 8008816:	4285      	cmp	r5, r0
 8008818:	d00f      	beq.n	800883a <HAL_ADC_ConfigChannel+0x62>
 800881a:	3d01      	subs	r5, #1
 800881c:	2d06      	cmp	r5, #6
 800881e:	d90c      	bls.n	800883a <HAL_ADC_ConfigChannel+0x62>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8008820:	2007      	movs	r0, #7
 8008822:	6955      	ldr	r5, [r2, #20]
 8008824:	6889      	ldr	r1, [r1, #8]
 8008826:	4005      	ands	r5, r0
 8008828:	42a9      	cmp	r1, r5
 800882a:	d006      	beq.n	800883a <HAL_ADC_ConfigChannel+0x62>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800882c:	6955      	ldr	r5, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800882e:	4001      	ands	r1, r0
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8008830:	4385      	bics	r5, r0
 8008832:	6155      	str	r5, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8008834:	6955      	ldr	r5, [r2, #20]
 8008836:	4329      	orrs	r1, r5
 8008838:	6151      	str	r1, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800883a:	2e02      	cmp	r6, #2
 800883c:	d903      	bls.n	8008846 <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800883e:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8008840:	2300      	movs	r3, #0
 8008842:	7023      	strb	r3, [r4, #0]
}
 8008844:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8008846:	4820      	ldr	r0, [pc, #128]	@ (80088c8 <HAL_ADC_ConfigChannel+0xf0>)
 8008848:	6801      	ldr	r1, [r0, #0]
 800884a:	2b10      	cmp	r3, #16
 800884c:	d01b      	beq.n	8008886 <HAL_ADC_ConfigChannel+0xae>
 800884e:	001a      	movs	r2, r3
 8008850:	3a11      	subs	r2, #17
 8008852:	4255      	negs	r5, r2
 8008854:	416a      	adcs	r2, r5
 8008856:	4d1d      	ldr	r5, [pc, #116]	@ (80088cc <HAL_ADC_ConfigChannel+0xf4>)
 8008858:	4252      	negs	r2, r2
 800885a:	402a      	ands	r2, r5
 800885c:	2580      	movs	r5, #128	@ 0x80
 800885e:	046d      	lsls	r5, r5, #17
 8008860:	1952      	adds	r2, r2, r5
 8008862:	430a      	orrs	r2, r1
 8008864:	6002      	str	r2, [r0, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008866:	2b10      	cmp	r3, #16
 8008868:	d1e9      	bne.n	800883e <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800886a:	4b19      	ldr	r3, [pc, #100]	@ (80088d0 <HAL_ADC_ConfigChannel+0xf8>)
 800886c:	4919      	ldr	r1, [pc, #100]	@ (80088d4 <HAL_ADC_ConfigChannel+0xfc>)
 800886e:	6818      	ldr	r0, [r3, #0]
 8008870:	f7f7 fc70 	bl	8000154 <__udivsi3>
 8008874:	230a      	movs	r3, #10
 8008876:	4343      	muls	r3, r0
            wait_loop_index--;
 8008878:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800887a:	9b01      	ldr	r3, [sp, #4]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d0de      	beq.n	800883e <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 8008880:	9b01      	ldr	r3, [sp, #4]
 8008882:	3b01      	subs	r3, #1
 8008884:	e7f8      	b.n	8008878 <HAL_ADC_ConfigChannel+0xa0>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8008886:	2280      	movs	r2, #128	@ 0x80
 8008888:	0412      	lsls	r2, r2, #16
 800888a:	e7ea      	b.n	8008862 <HAL_ADC_ConfigChannel+0x8a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800888c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800888e:	4381      	bics	r1, r0
 8008890:	6291      	str	r1, [r2, #40]	@ 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008892:	2e02      	cmp	r6, #2
 8008894:	d8d3      	bhi.n	800883e <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8008896:	4a0c      	ldr	r2, [pc, #48]	@ (80088c8 <HAL_ADC_ConfigChannel+0xf0>)
 8008898:	6811      	ldr	r1, [r2, #0]
 800889a:	2b10      	cmp	r3, #16
 800889c:	d00a      	beq.n	80088b4 <HAL_ADC_ConfigChannel+0xdc>
 800889e:	3b11      	subs	r3, #17
 80088a0:	1e58      	subs	r0, r3, #1
 80088a2:	4183      	sbcs	r3, r0
 80088a4:	4809      	ldr	r0, [pc, #36]	@ (80088cc <HAL_ADC_ConfigChannel+0xf4>)
 80088a6:	425b      	negs	r3, r3
 80088a8:	4003      	ands	r3, r0
 80088aa:	480b      	ldr	r0, [pc, #44]	@ (80088d8 <HAL_ADC_ConfigChannel+0x100>)
 80088ac:	181b      	adds	r3, r3, r0
 80088ae:	400b      	ands	r3, r1
 80088b0:	6013      	str	r3, [r2, #0]
 80088b2:	e7c4      	b.n	800883e <HAL_ADC_ConfigChannel+0x66>
 80088b4:	4b09      	ldr	r3, [pc, #36]	@ (80088dc <HAL_ADC_ConfigChannel+0x104>)
 80088b6:	e7fa      	b.n	80088ae <HAL_ADC_ConfigChannel+0xd6>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80088b8:	2220      	movs	r2, #32
 80088ba:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80088bc:	430a      	orrs	r2, r1
 80088be:	639a      	str	r2, [r3, #56]	@ 0x38
    tmp_hal_status = HAL_ERROR;
 80088c0:	e7be      	b.n	8008840 <HAL_ADC_ConfigChannel+0x68>
 80088c2:	46c0      	nop			@ (mov r8, r8)
 80088c4:	00001001 	.word	0x00001001
 80088c8:	40012708 	.word	0x40012708
 80088cc:	ff400000 	.word	0xff400000
 80088d0:	20000000 	.word	0x20000000
 80088d4:	000f4240 	.word	0x000f4240
 80088d8:	ffbfffff 	.word	0xffbfffff
 80088dc:	ff7fffff 	.word	0xff7fffff

080088e0 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80088e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80088e2:	0006      	movs	r6, r0
 80088e4:	3634      	adds	r6, #52	@ 0x34
 80088e6:	7833      	ldrb	r3, [r6, #0]
{
 80088e8:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80088ea:	2002      	movs	r0, #2
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d045      	beq.n	800897c <HAL_ADCEx_Calibration_Start+0x9c>
 80088f0:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80088f2:	2103      	movs	r1, #3
  __HAL_LOCK(hadc);
 80088f4:	7033      	strb	r3, [r6, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80088f6:	6823      	ldr	r3, [r4, #0]
 80088f8:	689a      	ldr	r2, [r3, #8]
 80088fa:	400a      	ands	r2, r1
 80088fc:	2a01      	cmp	r2, #1
 80088fe:	d105      	bne.n	800890c <HAL_ADCEx_Calibration_Start+0x2c>
 8008900:	6819      	ldr	r1, [r3, #0]
 8008902:	4211      	tst	r1, r2
 8008904:	d13b      	bne.n	800897e <HAL_ADCEx_Calibration_Start+0x9e>
 8008906:	68da      	ldr	r2, [r3, #12]
 8008908:	0412      	lsls	r2, r2, #16
 800890a:	d438      	bmi.n	800897e <HAL_ADCEx_Calibration_Start+0x9e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 800890c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800890e:	4a1f      	ldr	r2, [pc, #124]	@ (800898c <HAL_ADCEx_Calibration_Start+0xac>)
 8008910:	4011      	ands	r1, r2
 8008912:	3206      	adds	r2, #6
 8008914:	32ff      	adds	r2, #255	@ 0xff
 8008916:	430a      	orrs	r2, r1
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8008918:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 800891a:	63a2      	str	r2, [r4, #56]	@ 0x38
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800891c:	68dd      	ldr	r5, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800891e:	68da      	ldr	r2, [r3, #12]
 8008920:	438a      	bics	r2, r1
 8008922:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8008924:	2280      	movs	r2, #128	@ 0x80
 8008926:	6899      	ldr	r1, [r3, #8]
 8008928:	0612      	lsls	r2, r2, #24
 800892a:	430a      	orrs	r2, r1
 800892c:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800892e:	f7ff fd3b 	bl	80083a8 <HAL_GetTick>
 8008932:	0007      	movs	r7, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8008934:	6823      	ldr	r3, [r4, #0]
 8008936:	689a      	ldr	r2, [r3, #8]
 8008938:	2a00      	cmp	r2, #0
 800893a:	db0d      	blt.n	8008958 <HAL_ADCEx_Calibration_Start+0x78>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800893c:	2103      	movs	r1, #3
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800893e:	68da      	ldr	r2, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8008940:	400d      	ands	r5, r1
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8008942:	4315      	orrs	r5, r2
 8008944:	60dd      	str	r5, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008946:	2301      	movs	r3, #1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008948:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 800894a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800894c:	438a      	bics	r2, r1
 800894e:	4313      	orrs	r3, r2
 8008950:	63a3      	str	r3, [r4, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008952:	2300      	movs	r3, #0
 8008954:	7033      	strb	r3, [r6, #0]
  
  /* Return function status */
  return tmp_hal_status;
 8008956:	e011      	b.n	800897c <HAL_ADCEx_Calibration_Start+0x9c>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8008958:	f7ff fd26 	bl	80083a8 <HAL_GetTick>
 800895c:	1bc0      	subs	r0, r0, r7
 800895e:	2802      	cmp	r0, #2
 8008960:	d9e8      	bls.n	8008934 <HAL_ADCEx_Calibration_Start+0x54>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8008962:	6823      	ldr	r3, [r4, #0]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	2b00      	cmp	r3, #0
 8008968:	dae4      	bge.n	8008934 <HAL_ADCEx_Calibration_Start+0x54>
          ADC_STATE_CLR_SET(hadc->State,
 800896a:	2312      	movs	r3, #18
 800896c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
          return HAL_ERROR;
 800896e:	2001      	movs	r0, #1
          ADC_STATE_CLR_SET(hadc->State,
 8008970:	439a      	bics	r2, r3
 8008972:	3b02      	subs	r3, #2
 8008974:	4313      	orrs	r3, r2
 8008976:	63a3      	str	r3, [r4, #56]	@ 0x38
          __HAL_UNLOCK(hadc);
 8008978:	2300      	movs	r3, #0
 800897a:	7033      	strb	r3, [r6, #0]
}
 800897c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800897e:	2320      	movs	r3, #32
 8008980:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
    tmp_hal_status = HAL_ERROR;
 8008982:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008984:	4313      	orrs	r3, r2
 8008986:	63a3      	str	r3, [r4, #56]	@ 0x38
    tmp_hal_status = HAL_ERROR;
 8008988:	e7e3      	b.n	8008952 <HAL_ADCEx_Calibration_Start+0x72>
 800898a:	46c0      	nop			@ (mov r8, r8)
 800898c:	fffffefd 	.word	0xfffffefd

08008990 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008990:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008992:	24ff      	movs	r4, #255	@ 0xff
 8008994:	2203      	movs	r2, #3
 8008996:	000b      	movs	r3, r1
 8008998:	0021      	movs	r1, r4
 800899a:	4002      	ands	r2, r0
 800899c:	00d2      	lsls	r2, r2, #3
 800899e:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80089a0:	019b      	lsls	r3, r3, #6
 80089a2:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80089a4:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80089a6:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 80089a8:	2800      	cmp	r0, #0
 80089aa:	db0a      	blt.n	80089c2 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80089ac:	24c0      	movs	r4, #192	@ 0xc0
 80089ae:	4a0b      	ldr	r2, [pc, #44]	@ (80089dc <HAL_NVIC_SetPriority+0x4c>)
 80089b0:	0880      	lsrs	r0, r0, #2
 80089b2:	0080      	lsls	r0, r0, #2
 80089b4:	1880      	adds	r0, r0, r2
 80089b6:	00a4      	lsls	r4, r4, #2
 80089b8:	5902      	ldr	r2, [r0, r4]
 80089ba:	400a      	ands	r2, r1
 80089bc:	4313      	orrs	r3, r2
 80089be:	5103      	str	r3, [r0, r4]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80089c0:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80089c2:	220f      	movs	r2, #15
 80089c4:	4010      	ands	r0, r2
 80089c6:	3808      	subs	r0, #8
 80089c8:	4a05      	ldr	r2, [pc, #20]	@ (80089e0 <HAL_NVIC_SetPriority+0x50>)
 80089ca:	0880      	lsrs	r0, r0, #2
 80089cc:	0080      	lsls	r0, r0, #2
 80089ce:	1880      	adds	r0, r0, r2
 80089d0:	69c2      	ldr	r2, [r0, #28]
 80089d2:	4011      	ands	r1, r2
 80089d4:	4319      	orrs	r1, r3
 80089d6:	61c1      	str	r1, [r0, #28]
 80089d8:	e7f2      	b.n	80089c0 <HAL_NVIC_SetPriority+0x30>
 80089da:	46c0      	nop			@ (mov r8, r8)
 80089dc:	e000e100 	.word	0xe000e100
 80089e0:	e000ed00 	.word	0xe000ed00

080089e4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80089e4:	2800      	cmp	r0, #0
 80089e6:	db05      	blt.n	80089f4 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80089e8:	231f      	movs	r3, #31
 80089ea:	4018      	ands	r0, r3
 80089ec:	3b1e      	subs	r3, #30
 80089ee:	4083      	lsls	r3, r0
 80089f0:	4a01      	ldr	r2, [pc, #4]	@ (80089f8 <HAL_NVIC_EnableIRQ+0x14>)
 80089f2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80089f4:	4770      	bx	lr
 80089f6:	46c0      	nop			@ (mov r8, r8)
 80089f8:	e000e100 	.word	0xe000e100

080089fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80089fc:	2280      	movs	r2, #128	@ 0x80
 80089fe:	1e43      	subs	r3, r0, #1
 8008a00:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8008a02:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d20d      	bcs.n	8008a24 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008a08:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008a0a:	4a07      	ldr	r2, [pc, #28]	@ (8008a28 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008a0c:	4807      	ldr	r0, [pc, #28]	@ (8008a2c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008a0e:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008a10:	6a03      	ldr	r3, [r0, #32]
 8008a12:	0609      	lsls	r1, r1, #24
 8008a14:	021b      	lsls	r3, r3, #8
 8008a16:	0a1b      	lsrs	r3, r3, #8
 8008a18:	430b      	orrs	r3, r1
 8008a1a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008a1c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008a1e:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008a20:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008a22:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8008a24:	4770      	bx	lr
 8008a26:	46c0      	nop			@ (mov r8, r8)
 8008a28:	e000e010 	.word	0xe000e010
 8008a2c:	e000ed00 	.word	0xe000ed00

08008a30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008a30:	b570      	push	{r4, r5, r6, lr}
 8008a32:	0004      	movs	r4, r0
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if (NULL == hdma)
  {
    return HAL_ERROR;
 8008a34:	2001      	movs	r0, #1
  if (NULL == hdma)
 8008a36:	2c00      	cmp	r4, #0
 8008a38:	d024      	beq.n	8008a84 <HAL_DMA_Init+0x54>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008a3a:	2302      	movs	r3, #2
 8008a3c:	1ca5      	adds	r5, r4, #2
 8008a3e:	77eb      	strb	r3, [r5, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008a40:	6820      	ldr	r0, [r4, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8008a42:	4b11      	ldr	r3, [pc, #68]	@ (8008a88 <HAL_DMA_Init+0x58>)
  tmp = hdma->Instance->CCR;
 8008a44:	6802      	ldr	r2, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008a46:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8008a48:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8008a4a:	6863      	ldr	r3, [r4, #4]
 8008a4c:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008a4e:	68e1      	ldr	r1, [r4, #12]
 8008a50:	430b      	orrs	r3, r1
 8008a52:	6921      	ldr	r1, [r4, #16]
 8008a54:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008a56:	6961      	ldr	r1, [r4, #20]
 8008a58:	430b      	orrs	r3, r1
 8008a5a:	69a1      	ldr	r1, [r4, #24]
 8008a5c:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8008a5e:	69e1      	ldr	r1, [r4, #28]
 8008a60:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8008a62:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008a64:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008a66:	4b09      	ldr	r3, [pc, #36]	@ (8008a8c <HAL_DMA_Init+0x5c>)
 8008a68:	2114      	movs	r1, #20
 8008a6a:	18c0      	adds	r0, r0, r3
 8008a6c:	f7f7 fb72 	bl	8000154 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8008a70:	4b07      	ldr	r3, [pc, #28]	@ (8008a90 <HAL_DMA_Init+0x60>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008a72:	0080      	lsls	r0, r0, #2
 8008a74:	6420      	str	r0, [r4, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8008a76:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008a78:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8008a7a:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008a7c:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->Lock = HAL_UNLOCKED;
 8008a7e:	18e4      	adds	r4, r4, r3
  hdma->State = HAL_DMA_STATE_READY;
 8008a80:	77eb      	strb	r3, [r5, #31]
  hdma->Lock = HAL_UNLOCKED;
 8008a82:	77e0      	strb	r0, [r4, #31]
}
 8008a84:	bd70      	pop	{r4, r5, r6, pc}
 8008a86:	46c0      	nop			@ (mov r8, r8)
 8008a88:	ffffc00f 	.word	0xffffc00f
 8008a8c:	bffdfff8 	.word	0xbffdfff8
 8008a90:	40020000 	.word	0x40020000

08008a94 <HAL_DMA_Start_IT>:
{
 8008a94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8008a96:	1c44      	adds	r4, r0, #1
{
 8008a98:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 8008a9a:	7fe5      	ldrb	r5, [r4, #31]
 8008a9c:	2d01      	cmp	r5, #1
 8008a9e:	d033      	beq.n	8008b08 <HAL_DMA_Start_IT+0x74>
 8008aa0:	2501      	movs	r5, #1
  if (HAL_DMA_STATE_READY == hdma->State)
 8008aa2:	1c87      	adds	r7, r0, #2
  __HAL_LOCK(hdma);
 8008aa4:	77e5      	strb	r5, [r4, #31]
  if (HAL_DMA_STATE_READY == hdma->State)
 8008aa6:	7ffd      	ldrb	r5, [r7, #31]
 8008aa8:	2600      	movs	r6, #0
 8008aaa:	46ac      	mov	ip, r5
 8008aac:	4663      	mov	r3, ip
 8008aae:	b2ed      	uxtb	r5, r5
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d128      	bne.n	8008b06 <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 8008ab4:	2402      	movs	r4, #2
 8008ab6:	77fc      	strb	r4, [r7, #31]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8008ab8:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008aba:	6386      	str	r6, [r0, #56]	@ 0x38
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8008abc:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8008abe:	6c07      	ldr	r7, [r0, #64]	@ 0x40
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8008ac0:	43ae      	bics	r6, r5
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8008ac2:	40bd      	lsls	r5, r7
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8008ac4:	6026      	str	r6, [r4, #0]
  hdma->Instance->CNDTR = DataLength;
 8008ac6:	9b01      	ldr	r3, [sp, #4]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8008ac8:	6bc6      	ldr	r6, [r0, #60]	@ 0x3c
 8008aca:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8008acc:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008ace:	6843      	ldr	r3, [r0, #4]
 8008ad0:	2b10      	cmp	r3, #16
 8008ad2:	d10e      	bne.n	8008af2 <HAL_DMA_Start_IT+0x5e>
    hdma->Instance->CPAR = DstAddress;
 8008ad4:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8008ad6:	60e1      	str	r1, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8008ad8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8008ada:	6822      	ldr	r2, [r4, #0]
    if (NULL != hdma->XferHalfCpltCallback)
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00b      	beq.n	8008af8 <HAL_DMA_Start_IT+0x64>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8008ae0:	230e      	movs	r3, #14
 8008ae2:	4313      	orrs	r3, r2
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8008ae4:	6023      	str	r3, [r4, #0]
    hdma->Instance->CCR |= DMA_CCR_EN;
 8008ae6:	2301      	movs	r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8008ae8:	2000      	movs	r0, #0
    hdma->Instance->CCR |= DMA_CCR_EN;
 8008aea:	6822      	ldr	r2, [r4, #0]
 8008aec:	4313      	orrs	r3, r2
 8008aee:	6023      	str	r3, [r4, #0]
}
 8008af0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 8008af2:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8008af4:	60e2      	str	r2, [r4, #12]
 8008af6:	e7ef      	b.n	8008ad8 <HAL_DMA_Start_IT+0x44>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8008af8:	230a      	movs	r3, #10
 8008afa:	4313      	orrs	r3, r2
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8008afc:	2204      	movs	r2, #4
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8008afe:	6023      	str	r3, [r4, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8008b00:	6823      	ldr	r3, [r4, #0]
 8008b02:	4393      	bics	r3, r2
 8008b04:	e7ee      	b.n	8008ae4 <HAL_DMA_Start_IT+0x50>
    __HAL_UNLOCK(hdma);
 8008b06:	77e6      	strb	r6, [r4, #31]
  __HAL_LOCK(hdma);
 8008b08:	2002      	movs	r0, #2
 8008b0a:	e7f1      	b.n	8008af0 <HAL_DMA_Start_IT+0x5c>

08008b0c <HAL_DMA_Abort>:
{
 8008b0c:	b530      	push	{r4, r5, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8008b0e:	1c84      	adds	r4, r0, #2
 8008b10:	7fe2      	ldrb	r2, [r4, #31]
{
 8008b12:	0003      	movs	r3, r0
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8008b14:	2a02      	cmp	r2, #2
 8008b16:	d006      	beq.n	8008b26 <HAL_DMA_Abort+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008b18:	2204      	movs	r2, #4
 8008b1a:	6382      	str	r2, [r0, #56]	@ 0x38
    return HAL_ERROR;
 8008b1c:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8008b1e:	2200      	movs	r2, #0
 8008b20:	3301      	adds	r3, #1
 8008b22:	77da      	strb	r2, [r3, #31]
}
 8008b24:	bd30      	pop	{r4, r5, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8008b26:	6802      	ldr	r2, [r0, #0]
 8008b28:	200e      	movs	r0, #14
 8008b2a:	6811      	ldr	r1, [r2, #0]
 8008b2c:	4381      	bics	r1, r0
 8008b2e:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8008b30:	2101      	movs	r1, #1
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8008b32:	000d      	movs	r5, r1
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8008b34:	6810      	ldr	r0, [r2, #0]
 8008b36:	4388      	bics	r0, r1
 8008b38:	6010      	str	r0, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8008b3a:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8008b3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b3e:	4085      	lsls	r5, r0
  return HAL_OK;
 8008b40:	2000      	movs	r0, #0
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8008b42:	6055      	str	r5, [r2, #4]
  hdma->State = HAL_DMA_STATE_READY;
 8008b44:	77e1      	strb	r1, [r4, #31]
  return HAL_OK;
 8008b46:	e7ea      	b.n	8008b1e <HAL_DMA_Abort+0x12>

08008b48 <HAL_DMA_Abort_IT>:
{
 8008b48:	b570      	push	{r4, r5, r6, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8008b4a:	1c84      	adds	r4, r0, #2
 8008b4c:	7fe3      	ldrb	r3, [r4, #31]
 8008b4e:	2b02      	cmp	r3, #2
 8008b50:	d003      	beq.n	8008b5a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008b52:	2304      	movs	r3, #4
 8008b54:	6383      	str	r3, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 8008b56:	2001      	movs	r0, #1
}
 8008b58:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8008b5a:	210e      	movs	r1, #14
 8008b5c:	6803      	ldr	r3, [r0, #0]
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	438a      	bics	r2, r1
 8008b62:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8008b64:	2201      	movs	r2, #1
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8008b66:	0015      	movs	r5, r2
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8008b68:	6819      	ldr	r1, [r3, #0]
 8008b6a:	4391      	bics	r1, r2
 8008b6c:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8008b6e:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8008b70:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8008b72:	408d      	lsls	r5, r1
 8008b74:	605d      	str	r5, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8008b76:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8008b78:	1883      	adds	r3, r0, r2
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	77da      	strb	r2, [r3, #31]
    if (hdma->XferAbortCallback != NULL)
 8008b7e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d000      	beq.n	8008b86 <HAL_DMA_Abort_IT+0x3e>
      hdma->XferAbortCallback(hdma);
 8008b84:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8008b86:	2000      	movs	r0, #0
 8008b88:	e7e6      	b.n	8008b58 <HAL_DMA_Abort_IT+0x10>

08008b8a <HAL_DMA_IRQHandler>:
{
 8008b8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8008b8c:	2704      	movs	r7, #4
 8008b8e:	003e      	movs	r6, r7
 8008b90:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008b92:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8008b94:	408e      	lsls	r6, r1
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008b96:	6815      	ldr	r5, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8008b98:	6803      	ldr	r3, [r0, #0]
 8008b9a:	681c      	ldr	r4, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8008b9c:	4235      	tst	r5, r6
 8008b9e:	d00d      	beq.n	8008bbc <HAL_DMA_IRQHandler+0x32>
 8008ba0:	423c      	tst	r4, r7
 8008ba2:	d00b      	beq.n	8008bbc <HAL_DMA_IRQHandler+0x32>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008ba4:	6819      	ldr	r1, [r3, #0]
 8008ba6:	0689      	lsls	r1, r1, #26
 8008ba8:	d402      	bmi.n	8008bb0 <HAL_DMA_IRQHandler+0x26>
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8008baa:	6819      	ldr	r1, [r3, #0]
 8008bac:	43b9      	bics	r1, r7
 8008bae:	6019      	str	r1, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8008bb0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8008bb2:	6056      	str	r6, [r2, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d019      	beq.n	8008bec <HAL_DMA_IRQHandler+0x62>
      hdma->XferErrorCallback(hdma);
 8008bb8:	4798      	blx	r3
}
 8008bba:	e017      	b.n	8008bec <HAL_DMA_IRQHandler+0x62>
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8008bbc:	2702      	movs	r7, #2
 8008bbe:	003e      	movs	r6, r7
 8008bc0:	408e      	lsls	r6, r1
 8008bc2:	4235      	tst	r5, r6
 8008bc4:	d013      	beq.n	8008bee <HAL_DMA_IRQHandler+0x64>
 8008bc6:	423c      	tst	r4, r7
 8008bc8:	d011      	beq.n	8008bee <HAL_DMA_IRQHandler+0x64>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008bca:	6819      	ldr	r1, [r3, #0]
 8008bcc:	0689      	lsls	r1, r1, #26
 8008bce:	d406      	bmi.n	8008bde <HAL_DMA_IRQHandler+0x54>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8008bd0:	240a      	movs	r4, #10
 8008bd2:	6819      	ldr	r1, [r3, #0]
 8008bd4:	43a1      	bics	r1, r4
 8008bd6:	6019      	str	r1, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8008bd8:	2101      	movs	r1, #1
 8008bda:	19c3      	adds	r3, r0, r7
 8008bdc:	77d9      	strb	r1, [r3, #31]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8008bde:	6056      	str	r6, [r2, #4]
    __HAL_UNLOCK(hdma);
 8008be0:	2200      	movs	r2, #0
 8008be2:	1c43      	adds	r3, r0, #1
 8008be4:	77da      	strb	r2, [r3, #31]
    if (hdma->XferCpltCallback != NULL)
 8008be6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
    if (hdma->XferErrorCallback != NULL)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d1e5      	bne.n	8008bb8 <HAL_DMA_IRQHandler+0x2e>
}
 8008bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8008bee:	2608      	movs	r6, #8
 8008bf0:	0037      	movs	r7, r6
 8008bf2:	408f      	lsls	r7, r1
 8008bf4:	423d      	tst	r5, r7
 8008bf6:	d0f9      	beq.n	8008bec <HAL_DMA_IRQHandler+0x62>
 8008bf8:	4234      	tst	r4, r6
 8008bfa:	d0f7      	beq.n	8008bec <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8008bfc:	250e      	movs	r5, #14
 8008bfe:	681c      	ldr	r4, [r3, #0]
 8008c00:	43ac      	bics	r4, r5
 8008c02:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8008c04:	2301      	movs	r3, #1
 8008c06:	001c      	movs	r4, r3
 8008c08:	408c      	lsls	r4, r1
 8008c0a:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8008c0c:	1c82      	adds	r2, r0, #2
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008c0e:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8008c10:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8008c12:	2200      	movs	r2, #0
 8008c14:	18c3      	adds	r3, r0, r3
 8008c16:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8008c18:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8008c1a:	e7e5      	b.n	8008be8 <HAL_DMA_IRQHandler+0x5e>

08008c1c <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8008c1c:	4a0c      	ldr	r2, [pc, #48]	@ (8008c50 <FLASH_SetErrorCode+0x34>)
 8008c1e:	2110      	movs	r1, #16
 8008c20:	68d0      	ldr	r0, [r2, #12]
{
 8008c22:	b530      	push	{r4, r5, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8008c24:	0003      	movs	r3, r0
 8008c26:	400b      	ands	r3, r1
 8008c28:	4208      	tst	r0, r1
 8008c2a:	d005      	beq.n	8008c38 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8008c2c:	2302      	movs	r3, #2
 8008c2e:	4809      	ldr	r0, [pc, #36]	@ (8008c54 <FLASH_SetErrorCode+0x38>)
 8008c30:	69c4      	ldr	r4, [r0, #28]
 8008c32:	4323      	orrs	r3, r4
 8008c34:	61c3      	str	r3, [r0, #28]
    flags |= FLASH_FLAG_WRPERR;
 8008c36:	000b      	movs	r3, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8008c38:	2004      	movs	r0, #4
 8008c3a:	68d1      	ldr	r1, [r2, #12]
 8008c3c:	4201      	tst	r1, r0
 8008c3e:	d005      	beq.n	8008c4c <FLASH_SetErrorCode+0x30>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8008c40:	2101      	movs	r1, #1
 8008c42:	4c04      	ldr	r4, [pc, #16]	@ (8008c54 <FLASH_SetErrorCode+0x38>)
    flags |= FLASH_FLAG_PGERR;
 8008c44:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8008c46:	69e5      	ldr	r5, [r4, #28]
 8008c48:	4329      	orrs	r1, r5
 8008c4a:	61e1      	str	r1, [r4, #28]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8008c4c:	60d3      	str	r3, [r2, #12]
}  
 8008c4e:	bd30      	pop	{r4, r5, pc}
 8008c50:	40022000 	.word	0x40022000
 8008c54:	20000608 	.word	0x20000608

08008c58 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8008c58:	4b06      	ldr	r3, [pc, #24]	@ (8008c74 <HAL_FLASH_Unlock+0x1c>)
  HAL_StatusTypeDef status = HAL_OK;
 8008c5a:	2000      	movs	r0, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8008c5c:	691a      	ldr	r2, [r3, #16]
 8008c5e:	0612      	lsls	r2, r2, #24
 8008c60:	d506      	bpl.n	8008c70 <HAL_FLASH_Unlock+0x18>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8008c62:	4a05      	ldr	r2, [pc, #20]	@ (8008c78 <HAL_FLASH_Unlock+0x20>)
 8008c64:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8008c66:	4a05      	ldr	r2, [pc, #20]	@ (8008c7c <HAL_FLASH_Unlock+0x24>)
 8008c68:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8008c6a:	6918      	ldr	r0, [r3, #16]
 8008c6c:	0600      	lsls	r0, r0, #24
 8008c6e:	0fc0      	lsrs	r0, r0, #31
}
 8008c70:	4770      	bx	lr
 8008c72:	46c0      	nop			@ (mov r8, r8)
 8008c74:	40022000 	.word	0x40022000
 8008c78:	45670123 	.word	0x45670123
 8008c7c:	cdef89ab 	.word	0xcdef89ab

08008c80 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8008c80:	2380      	movs	r3, #128	@ 0x80
 8008c82:	4a03      	ldr	r2, [pc, #12]	@ (8008c90 <HAL_FLASH_Lock+0x10>)
}
 8008c84:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8008c86:	6911      	ldr	r1, [r2, #16]
 8008c88:	430b      	orrs	r3, r1
 8008c8a:	6113      	str	r3, [r2, #16]
}
 8008c8c:	4770      	bx	lr
 8008c8e:	46c0      	nop			@ (mov r8, r8)
 8008c90:	40022000 	.word	0x40022000

08008c94 <FLASH_WaitForLastOperation>:
{
 8008c94:	b570      	push	{r4, r5, r6, lr}
 8008c96:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008c98:	f7ff fb86 	bl	80083a8 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8008c9c:	2601      	movs	r6, #1
  uint32_t tickstart = HAL_GetTick();
 8008c9e:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8008ca0:	4b10      	ldr	r3, [pc, #64]	@ (8008ce4 <FLASH_WaitForLastOperation+0x50>)
 8008ca2:	68da      	ldr	r2, [r3, #12]
 8008ca4:	4232      	tst	r2, r6
 8008ca6:	d111      	bne.n	8008ccc <FLASH_WaitForLastOperation+0x38>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8008ca8:	2220      	movs	r2, #32
 8008caa:	68d9      	ldr	r1, [r3, #12]
 8008cac:	4211      	tst	r1, r2
 8008cae:	d000      	beq.n	8008cb2 <FLASH_WaitForLastOperation+0x1e>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8008cb0:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8008cb2:	68d9      	ldr	r1, [r3, #12]
 8008cb4:	2210      	movs	r2, #16
 8008cb6:	0008      	movs	r0, r1
 8008cb8:	4010      	ands	r0, r2
 8008cba:	4211      	tst	r1, r2
 8008cbc:	d102      	bne.n	8008cc4 <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8008cbe:	68db      	ldr	r3, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8008cc0:	075b      	lsls	r3, r3, #29
 8008cc2:	d508      	bpl.n	8008cd6 <FLASH_WaitForLastOperation+0x42>
    FLASH_SetErrorCode();
 8008cc4:	f7ff ffaa 	bl	8008c1c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8008cc8:	2001      	movs	r0, #1
 8008cca:	e004      	b.n	8008cd6 <FLASH_WaitForLastOperation+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8008ccc:	1c62      	adds	r2, r4, #1
 8008cce:	d0e8      	beq.n	8008ca2 <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8008cd0:	2c00      	cmp	r4, #0
 8008cd2:	d101      	bne.n	8008cd8 <FLASH_WaitForLastOperation+0x44>
        return HAL_TIMEOUT;
 8008cd4:	2003      	movs	r0, #3
}
 8008cd6:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8008cd8:	f7ff fb66 	bl	80083a8 <HAL_GetTick>
 8008cdc:	1b40      	subs	r0, r0, r5
 8008cde:	42a0      	cmp	r0, r4
 8008ce0:	d9de      	bls.n	8008ca0 <FLASH_WaitForLastOperation+0xc>
 8008ce2:	e7f7      	b.n	8008cd4 <FLASH_WaitForLastOperation+0x40>
 8008ce4:	40022000 	.word	0x40022000

08008ce8 <HAL_FLASH_Program>:
{
 8008ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cea:	b085      	sub	sp, #20
 8008cec:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(&pFlash);
 8008cee:	4b1e      	ldr	r3, [pc, #120]	@ (8008d68 <HAL_FLASH_Program+0x80>)
{
 8008cf0:	9100      	str	r1, [sp, #0]
 8008cf2:	9202      	str	r2, [sp, #8]
  __HAL_LOCK(&pFlash);
 8008cf4:	7e1a      	ldrb	r2, [r3, #24]
{
 8008cf6:	0004      	movs	r4, r0
  __HAL_LOCK(&pFlash);
 8008cf8:	2002      	movs	r0, #2
 8008cfa:	2a01      	cmp	r2, #1
 8008cfc:	d031      	beq.n	8008d62 <HAL_FLASH_Program+0x7a>
 8008cfe:	2201      	movs	r2, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008d00:	481a      	ldr	r0, [pc, #104]	@ (8008d6c <HAL_FLASH_Program+0x84>)
  __HAL_LOCK(&pFlash);
 8008d02:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008d04:	f7ff ffc6 	bl	8008c94 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	d127      	bne.n	8008d5c <HAL_FLASH_Program+0x74>
      nbiterations = 1U;
 8008d0c:	0026      	movs	r6, r4
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8008d0e:	2c01      	cmp	r4, #1
 8008d10:	d003      	beq.n	8008d1a <HAL_FLASH_Program+0x32>
      nbiterations = 4U;
 8008d12:	2604      	movs	r6, #4
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8008d14:	2c02      	cmp	r4, #2
 8008d16:	d100      	bne.n	8008d1a <HAL_FLASH_Program+0x32>
      nbiterations = 2U;
 8008d18:	0026      	movs	r6, r4
      nbiterations = 4U;
 8008d1a:	2400      	movs	r4, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008d1c:	4b12      	ldr	r3, [pc, #72]	@ (8008d68 <HAL_FLASH_Program+0x80>)
 8008d1e:	9301      	str	r3, [sp, #4]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8008d20:	9802      	ldr	r0, [sp, #8]
 8008d22:	9903      	ldr	r1, [sp, #12]
 8008d24:	0122      	lsls	r2, r4, #4
 8008d26:	f7f7 fb8b 	bl	8000440 <__aeabi_llsr>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008d2a:	2200      	movs	r2, #0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8008d2c:	2701      	movs	r7, #1
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008d2e:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8008d30:	4d0f      	ldr	r5, [pc, #60]	@ (8008d70 <HAL_FLASH_Program+0x88>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008d32:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8008d34:	692b      	ldr	r3, [r5, #16]
  *(__IO uint16_t*)Address = Data;
 8008d36:	9a00      	ldr	r2, [sp, #0]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8008d38:	433b      	orrs	r3, r7
 8008d3a:	612b      	str	r3, [r5, #16]
  *(__IO uint16_t*)Address = Data;
 8008d3c:	0063      	lsls	r3, r4, #1
 8008d3e:	189b      	adds	r3, r3, r2
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8008d40:	b280      	uxth	r0, r0
  *(__IO uint16_t*)Address = Data;
 8008d42:	8018      	strh	r0, [r3, #0]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008d44:	4809      	ldr	r0, [pc, #36]	@ (8008d6c <HAL_FLASH_Program+0x84>)
 8008d46:	f7ff ffa5 	bl	8008c94 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8008d4a:	692b      	ldr	r3, [r5, #16]
 8008d4c:	43bb      	bics	r3, r7
 8008d4e:	612b      	str	r3, [r5, #16]
      if (status != HAL_OK)
 8008d50:	2800      	cmp	r0, #0
 8008d52:	d103      	bne.n	8008d5c <HAL_FLASH_Program+0x74>
    for (index = 0U; index < nbiterations; index++)
 8008d54:	19e4      	adds	r4, r4, r7
 8008d56:	b2e3      	uxtb	r3, r4
 8008d58:	429e      	cmp	r6, r3
 8008d5a:	d8e1      	bhi.n	8008d20 <HAL_FLASH_Program+0x38>
  __HAL_UNLOCK(&pFlash);
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	4b02      	ldr	r3, [pc, #8]	@ (8008d68 <HAL_FLASH_Program+0x80>)
 8008d60:	761a      	strb	r2, [r3, #24]
}
 8008d62:	b005      	add	sp, #20
 8008d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d66:	46c0      	nop			@ (mov r8, r8)
 8008d68:	20000608 	.word	0x20000608
 8008d6c:	0000c350 	.word	0x0000c350
 8008d70:	40022000 	.word	0x40022000

08008d74 <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008d74:	2200      	movs	r2, #0
 8008d76:	4b06      	ldr	r3, [pc, #24]	@ (8008d90 <FLASH_MassErase+0x1c>)
 8008d78:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8008d7a:	4b06      	ldr	r3, [pc, #24]	@ (8008d94 <FLASH_MassErase+0x20>)
 8008d7c:	3204      	adds	r2, #4
 8008d7e:	6919      	ldr	r1, [r3, #16]
 8008d80:	430a      	orrs	r2, r1
 8008d82:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8008d84:	2240      	movs	r2, #64	@ 0x40
 8008d86:	6919      	ldr	r1, [r3, #16]
 8008d88:	430a      	orrs	r2, r1
 8008d8a:	611a      	str	r2, [r3, #16]
}
 8008d8c:	4770      	bx	lr
 8008d8e:	46c0      	nop			@ (mov r8, r8)
 8008d90:	20000608 	.word	0x20000608
 8008d94:	40022000 	.word	0x40022000

08008d98 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008d98:	2200      	movs	r2, #0
 8008d9a:	4b06      	ldr	r3, [pc, #24]	@ (8008db4 <FLASH_PageErase+0x1c>)
 8008d9c:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8008d9e:	4b06      	ldr	r3, [pc, #24]	@ (8008db8 <FLASH_PageErase+0x20>)
 8008da0:	3202      	adds	r2, #2
 8008da2:	6919      	ldr	r1, [r3, #16]
 8008da4:	430a      	orrs	r2, r1
 8008da6:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8008da8:	2240      	movs	r2, #64	@ 0x40
    WRITE_REG(FLASH->AR, PageAddress);
 8008daa:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8008dac:	6919      	ldr	r1, [r3, #16]
 8008dae:	430a      	orrs	r2, r1
 8008db0:	611a      	str	r2, [r3, #16]
}
 8008db2:	4770      	bx	lr
 8008db4:	20000608 	.word	0x20000608
 8008db8:	40022000 	.word	0x40022000

08008dbc <HAL_FLASHEx_Erase>:
{
 8008dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8008dbe:	4f21      	ldr	r7, [pc, #132]	@ (8008e44 <HAL_FLASHEx_Erase+0x88>)
{
 8008dc0:	0004      	movs	r4, r0
  __HAL_LOCK(&pFlash);
 8008dc2:	7e3b      	ldrb	r3, [r7, #24]
{
 8008dc4:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 8008dc6:	2002      	movs	r0, #2
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d00c      	beq.n	8008de6 <HAL_FLASHEx_Erase+0x2a>
 8008dcc:	2301      	movs	r3, #1
 8008dce:	763b      	strb	r3, [r7, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8008dd0:	6823      	ldr	r3, [r4, #0]
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8008dd2:	481d      	ldr	r0, [pc, #116]	@ (8008e48 <HAL_FLASHEx_Erase+0x8c>)
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d112      	bne.n	8008dfe <HAL_FLASHEx_Erase+0x42>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8008dd8:	f7ff ff5c 	bl	8008c94 <FLASH_WaitForLastOperation>
 8008ddc:	2800      	cmp	r0, #0
 8008dde:	d003      	beq.n	8008de8 <HAL_FLASHEx_Erase+0x2c>
  HAL_StatusTypeDef status = HAL_ERROR;
 8008de0:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8008de2:	2300      	movs	r3, #0
 8008de4:	763b      	strb	r3, [r7, #24]
}
 8008de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        FLASH_MassErase();
 8008de8:	f7ff ffc4 	bl	8008d74 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008dec:	4816      	ldr	r0, [pc, #88]	@ (8008e48 <HAL_FLASHEx_Erase+0x8c>)
 8008dee:	f7ff ff51 	bl	8008c94 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8008df2:	2104      	movs	r1, #4
 8008df4:	4a15      	ldr	r2, [pc, #84]	@ (8008e4c <HAL_FLASHEx_Erase+0x90>)
 8008df6:	6913      	ldr	r3, [r2, #16]
 8008df8:	438b      	bics	r3, r1
 8008dfa:	6113      	str	r3, [r2, #16]
 8008dfc:	e7f1      	b.n	8008de2 <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8008dfe:	f7ff ff49 	bl	8008c94 <FLASH_WaitForLastOperation>
 8008e02:	2800      	cmp	r0, #0
 8008e04:	d1ec      	bne.n	8008de0 <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 8008e06:	2301      	movs	r3, #1
 8008e08:	425b      	negs	r3, r3
 8008e0a:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 8008e0c:	6865      	ldr	r5, [r4, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008e0e:	3001      	adds	r0, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8008e10:	68a3      	ldr	r3, [r4, #8]
 8008e12:	6862      	ldr	r2, [r4, #4]
 8008e14:	029b      	lsls	r3, r3, #10
 8008e16:	189b      	adds	r3, r3, r2
 8008e18:	42ab      	cmp	r3, r5
 8008e1a:	d9e2      	bls.n	8008de2 <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 8008e1c:	0028      	movs	r0, r5
 8008e1e:	f7ff ffbb 	bl	8008d98 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008e22:	4809      	ldr	r0, [pc, #36]	@ (8008e48 <HAL_FLASHEx_Erase+0x8c>)
 8008e24:	f7ff ff36 	bl	8008c94 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8008e28:	2102      	movs	r1, #2
 8008e2a:	4a08      	ldr	r2, [pc, #32]	@ (8008e4c <HAL_FLASHEx_Erase+0x90>)
 8008e2c:	6913      	ldr	r3, [r2, #16]
 8008e2e:	438b      	bics	r3, r1
 8008e30:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 8008e32:	2800      	cmp	r0, #0
 8008e34:	d001      	beq.n	8008e3a <HAL_FLASHEx_Erase+0x7e>
            *PageError = address;
 8008e36:	6035      	str	r5, [r6, #0]
            break;
 8008e38:	e7d3      	b.n	8008de2 <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 8008e3a:	2380      	movs	r3, #128	@ 0x80
 8008e3c:	00db      	lsls	r3, r3, #3
 8008e3e:	18ed      	adds	r5, r5, r3
 8008e40:	e7e6      	b.n	8008e10 <HAL_FLASHEx_Erase+0x54>
 8008e42:	46c0      	nop			@ (mov r8, r8)
 8008e44:	20000608 	.word	0x20000608
 8008e48:	0000c350 	.word	0x0000c350
 8008e4c:	40022000 	.word	0x40022000

08008e50 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8008e50:	2300      	movs	r3, #0
{
 8008e52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e54:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008e56:	680a      	ldr	r2, [r1, #0]
 8008e58:	0014      	movs	r4, r2
 8008e5a:	40dc      	lsrs	r4, r3
 8008e5c:	d101      	bne.n	8008e62 <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 8008e5e:	b007      	add	sp, #28
 8008e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008e62:	2501      	movs	r5, #1
 8008e64:	0014      	movs	r4, r2
 8008e66:	409d      	lsls	r5, r3
 8008e68:	402c      	ands	r4, r5
 8008e6a:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 8008e6c:	422a      	tst	r2, r5
 8008e6e:	d100      	bne.n	8008e72 <HAL_GPIO_Init+0x22>
 8008e70:	e098      	b.n	8008fa4 <HAL_GPIO_Init+0x154>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008e72:	684a      	ldr	r2, [r1, #4]
 8008e74:	005f      	lsls	r7, r3, #1
 8008e76:	4694      	mov	ip, r2
 8008e78:	2203      	movs	r2, #3
 8008e7a:	4664      	mov	r4, ip
 8008e7c:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8008e7e:	2403      	movs	r4, #3
 8008e80:	40bc      	lsls	r4, r7
 8008e82:	43e4      	mvns	r4, r4
 8008e84:	9401      	str	r4, [sp, #4]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008e86:	1e54      	subs	r4, r2, #1
 8008e88:	2c01      	cmp	r4, #1
 8008e8a:	d82e      	bhi.n	8008eea <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 8008e8c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8008e8e:	9c01      	ldr	r4, [sp, #4]
 8008e90:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008e92:	68cc      	ldr	r4, [r1, #12]
 8008e94:	40bc      	lsls	r4, r7
 8008e96:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8008e98:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8008e9a:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008e9c:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008e9e:	43ac      	bics	r4, r5
 8008ea0:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008ea2:	4664      	mov	r4, ip
 8008ea4:	0924      	lsrs	r4, r4, #4
 8008ea6:	4034      	ands	r4, r6
 8008ea8:	409c      	lsls	r4, r3
 8008eaa:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8008eac:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8008eae:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8008eb0:	9c01      	ldr	r4, [sp, #4]
 8008eb2:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008eb4:	688c      	ldr	r4, [r1, #8]
 8008eb6:	40bc      	lsls	r4, r7
 8008eb8:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8008eba:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008ebc:	2a02      	cmp	r2, #2
 8008ebe:	d116      	bne.n	8008eee <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008ec0:	2507      	movs	r5, #7
 8008ec2:	260f      	movs	r6, #15
 8008ec4:	401d      	ands	r5, r3
 8008ec6:	00ad      	lsls	r5, r5, #2
 8008ec8:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 8008eca:	08dc      	lsrs	r4, r3, #3
 8008ecc:	00a4      	lsls	r4, r4, #2
 8008ece:	1904      	adds	r4, r0, r4
 8008ed0:	9402      	str	r4, [sp, #8]
 8008ed2:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008ed4:	9603      	str	r6, [sp, #12]
 8008ed6:	0026      	movs	r6, r4
 8008ed8:	9c03      	ldr	r4, [sp, #12]
 8008eda:	43a6      	bics	r6, r4
 8008edc:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008ede:	690e      	ldr	r6, [r1, #16]
 8008ee0:	40ae      	lsls	r6, r5
 8008ee2:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 8008ee4:	9c02      	ldr	r4, [sp, #8]
 8008ee6:	6226      	str	r6, [r4, #32]
 8008ee8:	e001      	b.n	8008eee <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008eea:	2a03      	cmp	r2, #3
 8008eec:	d1df      	bne.n	8008eae <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008eee:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8008ef0:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8008ef2:	9d01      	ldr	r5, [sp, #4]
 8008ef4:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008ef6:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008ef8:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 8008efa:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008efc:	4662      	mov	r2, ip
 8008efe:	02a4      	lsls	r4, r4, #10
 8008f00:	4222      	tst	r2, r4
 8008f02:	d04f      	beq.n	8008fa4 <HAL_GPIO_Init+0x154>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008f04:	2501      	movs	r5, #1
 8008f06:	4a28      	ldr	r2, [pc, #160]	@ (8008fa8 <HAL_GPIO_Init+0x158>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008f08:	2790      	movs	r7, #144	@ 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008f0a:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008f0c:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008f0e:	432c      	orrs	r4, r5
 8008f10:	6194      	str	r4, [r2, #24]
 8008f12:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8008f14:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008f16:	402a      	ands	r2, r5
 8008f18:	9205      	str	r2, [sp, #20]
 8008f1a:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8008f1c:	4a23      	ldr	r2, [pc, #140]	@ (8008fac <HAL_GPIO_Init+0x15c>)
 8008f1e:	00a4      	lsls	r4, r4, #2
 8008f20:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008f22:	220f      	movs	r2, #15
 8008f24:	3502      	adds	r5, #2
 8008f26:	401d      	ands	r5, r3
 8008f28:	00ad      	lsls	r5, r5, #2
 8008f2a:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 8008f2c:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008f2e:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008f30:	2200      	movs	r2, #0
 8008f32:	42b8      	cmp	r0, r7
 8008f34:	d00c      	beq.n	8008f50 <HAL_GPIO_Init+0x100>
 8008f36:	4f1e      	ldr	r7, [pc, #120]	@ (8008fb0 <HAL_GPIO_Init+0x160>)
 8008f38:	3201      	adds	r2, #1
 8008f3a:	42b8      	cmp	r0, r7
 8008f3c:	d008      	beq.n	8008f50 <HAL_GPIO_Init+0x100>
 8008f3e:	4f1d      	ldr	r7, [pc, #116]	@ (8008fb4 <HAL_GPIO_Init+0x164>)
 8008f40:	3201      	adds	r2, #1
 8008f42:	42b8      	cmp	r0, r7
 8008f44:	d004      	beq.n	8008f50 <HAL_GPIO_Init+0x100>
 8008f46:	4f1c      	ldr	r7, [pc, #112]	@ (8008fb8 <HAL_GPIO_Init+0x168>)
 8008f48:	3203      	adds	r2, #3
 8008f4a:	42b8      	cmp	r0, r7
 8008f4c:	d100      	bne.n	8008f50 <HAL_GPIO_Init+0x100>
 8008f4e:	3a02      	subs	r2, #2
 8008f50:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008f52:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008f54:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008f56:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 8008f58:	4a18      	ldr	r2, [pc, #96]	@ (8008fbc <HAL_GPIO_Init+0x16c>)
        temp &= ~(iocurrent);
 8008f5a:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 8008f5c:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8008f5e:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 8008f60:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8008f62:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008f64:	02ff      	lsls	r7, r7, #11
 8008f66:	d401      	bmi.n	8008f6c <HAL_GPIO_Init+0x11c>
        temp &= ~(iocurrent);
 8008f68:	0035      	movs	r5, r6
 8008f6a:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008f6c:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8008f6e:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8008f70:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 8008f72:	9d00      	ldr	r5, [sp, #0]
 8008f74:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008f76:	02bf      	lsls	r7, r7, #10
 8008f78:	d401      	bmi.n	8008f7e <HAL_GPIO_Init+0x12e>
        temp &= ~(iocurrent);
 8008f7a:	0035      	movs	r5, r6
 8008f7c:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008f7e:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 8008f80:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 8008f82:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8008f84:	9d00      	ldr	r5, [sp, #0]
 8008f86:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008f88:	03bf      	lsls	r7, r7, #14
 8008f8a:	d401      	bmi.n	8008f90 <HAL_GPIO_Init+0x140>
        temp &= ~(iocurrent);
 8008f8c:	0035      	movs	r5, r6
 8008f8e:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008f90:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8008f92:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 8008f94:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 8008f96:	9e00      	ldr	r6, [sp, #0]
 8008f98:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008f9a:	03ff      	lsls	r7, r7, #15
 8008f9c:	d401      	bmi.n	8008fa2 <HAL_GPIO_Init+0x152>
        temp &= ~(iocurrent);
 8008f9e:	4025      	ands	r5, r4
 8008fa0:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 8008fa2:	6016      	str	r6, [r2, #0]
    position++;
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	e756      	b.n	8008e56 <HAL_GPIO_Init+0x6>
 8008fa8:	40021000 	.word	0x40021000
 8008fac:	40010000 	.word	0x40010000
 8008fb0:	48000400 	.word	0x48000400
 8008fb4:	48000800 	.word	0x48000800
 8008fb8:	48000c00 	.word	0x48000c00
 8008fbc:	40010400 	.word	0x40010400

08008fc0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008fc0:	6900      	ldr	r0, [r0, #16]
 8008fc2:	4008      	ands	r0, r1
 8008fc4:	1e43      	subs	r3, r0, #1
 8008fc6:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8008fc8:	b2c0      	uxtb	r0, r0
  }
 8008fca:	4770      	bx	lr

08008fcc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008fcc:	2a00      	cmp	r2, #0
 8008fce:	d001      	beq.n	8008fd4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008fd0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008fd2:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008fd4:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8008fd6:	e7fc      	b.n	8008fd2 <HAL_GPIO_WritePin+0x6>

08008fd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008fd8:	4b04      	ldr	r3, [pc, #16]	@ (8008fec <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8008fda:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008fdc:	695a      	ldr	r2, [r3, #20]
 8008fde:	4210      	tst	r0, r2
 8008fe0:	d002      	beq.n	8008fe8 <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008fe2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008fe4:	f7fa faf9 	bl	80035da <HAL_GPIO_EXTI_Callback>
  }
}
 8008fe8:	bd10      	pop	{r4, pc}
 8008fea:	46c0      	nop			@ (mov r8, r8)
 8008fec:	40010400 	.word	0x40010400

08008ff0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ff2:	0004      	movs	r4, r0
 8008ff4:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008ff6:	2800      	cmp	r0, #0
 8008ff8:	d045      	beq.n	8009086 <HAL_RCC_OscConfig+0x96>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008ffa:	6803      	ldr	r3, [r0, #0]
 8008ffc:	07db      	lsls	r3, r3, #31
 8008ffe:	d42f      	bmi.n	8009060 <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009000:	6823      	ldr	r3, [r4, #0]
 8009002:	079b      	lsls	r3, r3, #30
 8009004:	d500      	bpl.n	8009008 <HAL_RCC_OscConfig+0x18>
 8009006:	e081      	b.n	800910c <HAL_RCC_OscConfig+0x11c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009008:	6823      	ldr	r3, [r4, #0]
 800900a:	071b      	lsls	r3, r3, #28
 800900c:	d500      	bpl.n	8009010 <HAL_RCC_OscConfig+0x20>
 800900e:	e0bc      	b.n	800918a <HAL_RCC_OscConfig+0x19a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009010:	6823      	ldr	r3, [r4, #0]
 8009012:	075b      	lsls	r3, r3, #29
 8009014:	d500      	bpl.n	8009018 <HAL_RCC_OscConfig+0x28>
 8009016:	e0df      	b.n	80091d8 <HAL_RCC_OscConfig+0x1e8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8009018:	6823      	ldr	r3, [r4, #0]
 800901a:	06db      	lsls	r3, r3, #27
 800901c:	d51a      	bpl.n	8009054 <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800901e:	6962      	ldr	r2, [r4, #20]
 8009020:	2304      	movs	r3, #4
 8009022:	4db4      	ldr	r5, [pc, #720]	@ (80092f4 <HAL_RCC_OscConfig+0x304>)
 8009024:	2a01      	cmp	r2, #1
 8009026:	d000      	beq.n	800902a <HAL_RCC_OscConfig+0x3a>
 8009028:	e148      	b.n	80092bc <HAL_RCC_OscConfig+0x2cc>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800902a:	6b69      	ldr	r1, [r5, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800902c:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800902e:	430b      	orrs	r3, r1
 8009030:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_ENABLE();
 8009032:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8009034:	431a      	orrs	r2, r3
 8009036:	636a      	str	r2, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8009038:	f7ff f9b6 	bl	80083a8 <HAL_GetTick>
 800903c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800903e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8009040:	423b      	tst	r3, r7
 8009042:	d100      	bne.n	8009046 <HAL_RCC_OscConfig+0x56>
 8009044:	e133      	b.n	80092ae <HAL_RCC_OscConfig+0x2be>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8009046:	21f8      	movs	r1, #248	@ 0xf8
 8009048:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 800904a:	69a3      	ldr	r3, [r4, #24]
 800904c:	438a      	bics	r2, r1
 800904e:	00db      	lsls	r3, r3, #3
 8009050:	4313      	orrs	r3, r2
 8009052:	636b      	str	r3, [r5, #52]	@ 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009054:	6a23      	ldr	r3, [r4, #32]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d000      	beq.n	800905c <HAL_RCC_OscConfig+0x6c>
 800905a:	e157      	b.n	800930c <HAL_RCC_OscConfig+0x31c>
        }
      }
    }
  }

  return HAL_OK;
 800905c:	2000      	movs	r0, #0
 800905e:	e02a      	b.n	80090b6 <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8009060:	220c      	movs	r2, #12
 8009062:	4da4      	ldr	r5, [pc, #656]	@ (80092f4 <HAL_RCC_OscConfig+0x304>)
 8009064:	686b      	ldr	r3, [r5, #4]
 8009066:	4013      	ands	r3, r2
 8009068:	2b04      	cmp	r3, #4
 800906a:	d006      	beq.n	800907a <HAL_RCC_OscConfig+0x8a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800906c:	686b      	ldr	r3, [r5, #4]
 800906e:	4013      	ands	r3, r2
 8009070:	2b08      	cmp	r3, #8
 8009072:	d10a      	bne.n	800908a <HAL_RCC_OscConfig+0x9a>
 8009074:	686b      	ldr	r3, [r5, #4]
 8009076:	03db      	lsls	r3, r3, #15
 8009078:	d507      	bpl.n	800908a <HAL_RCC_OscConfig+0x9a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800907a:	682b      	ldr	r3, [r5, #0]
 800907c:	039b      	lsls	r3, r3, #14
 800907e:	d5bf      	bpl.n	8009000 <HAL_RCC_OscConfig+0x10>
 8009080:	6863      	ldr	r3, [r4, #4]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d1bc      	bne.n	8009000 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8009086:	2001      	movs	r0, #1
 8009088:	e015      	b.n	80090b6 <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800908a:	6863      	ldr	r3, [r4, #4]
 800908c:	2b01      	cmp	r3, #1
 800908e:	d114      	bne.n	80090ba <HAL_RCC_OscConfig+0xca>
 8009090:	2380      	movs	r3, #128	@ 0x80
 8009092:	682a      	ldr	r2, [r5, #0]
 8009094:	025b      	lsls	r3, r3, #9
 8009096:	4313      	orrs	r3, r2
 8009098:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800909a:	f7ff f985 	bl	80083a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800909e:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 80090a0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090a2:	02bf      	lsls	r7, r7, #10
 80090a4:	682b      	ldr	r3, [r5, #0]
 80090a6:	423b      	tst	r3, r7
 80090a8:	d1aa      	bne.n	8009000 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80090aa:	f7ff f97d 	bl	80083a8 <HAL_GetTick>
 80090ae:	1b80      	subs	r0, r0, r6
 80090b0:	2864      	cmp	r0, #100	@ 0x64
 80090b2:	d9f7      	bls.n	80090a4 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
 80090b4:	2003      	movs	r0, #3
}
 80090b6:	b005      	add	sp, #20
 80090b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d116      	bne.n	80090ec <HAL_RCC_OscConfig+0xfc>
 80090be:	682b      	ldr	r3, [r5, #0]
 80090c0:	4a8d      	ldr	r2, [pc, #564]	@ (80092f8 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80090c2:	2780      	movs	r7, #128	@ 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80090c4:	4013      	ands	r3, r2
 80090c6:	602b      	str	r3, [r5, #0]
 80090c8:	682b      	ldr	r3, [r5, #0]
 80090ca:	4a8c      	ldr	r2, [pc, #560]	@ (80092fc <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80090cc:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80090ce:	4013      	ands	r3, r2
 80090d0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80090d2:	f7ff f969 	bl	80083a8 <HAL_GetTick>
 80090d6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80090d8:	682b      	ldr	r3, [r5, #0]
 80090da:	423b      	tst	r3, r7
 80090dc:	d100      	bne.n	80090e0 <HAL_RCC_OscConfig+0xf0>
 80090de:	e78f      	b.n	8009000 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80090e0:	f7ff f962 	bl	80083a8 <HAL_GetTick>
 80090e4:	1b80      	subs	r0, r0, r6
 80090e6:	2864      	cmp	r0, #100	@ 0x64
 80090e8:	d9f6      	bls.n	80090d8 <HAL_RCC_OscConfig+0xe8>
 80090ea:	e7e3      	b.n	80090b4 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80090ec:	2b05      	cmp	r3, #5
 80090ee:	d105      	bne.n	80090fc <HAL_RCC_OscConfig+0x10c>
 80090f0:	2380      	movs	r3, #128	@ 0x80
 80090f2:	682a      	ldr	r2, [r5, #0]
 80090f4:	02db      	lsls	r3, r3, #11
 80090f6:	4313      	orrs	r3, r2
 80090f8:	602b      	str	r3, [r5, #0]
 80090fa:	e7c9      	b.n	8009090 <HAL_RCC_OscConfig+0xa0>
 80090fc:	682b      	ldr	r3, [r5, #0]
 80090fe:	4a7e      	ldr	r2, [pc, #504]	@ (80092f8 <HAL_RCC_OscConfig+0x308>)
 8009100:	4013      	ands	r3, r2
 8009102:	602b      	str	r3, [r5, #0]
 8009104:	682b      	ldr	r3, [r5, #0]
 8009106:	4a7d      	ldr	r2, [pc, #500]	@ (80092fc <HAL_RCC_OscConfig+0x30c>)
 8009108:	4013      	ands	r3, r2
 800910a:	e7c5      	b.n	8009098 <HAL_RCC_OscConfig+0xa8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800910c:	220c      	movs	r2, #12
 800910e:	4d79      	ldr	r5, [pc, #484]	@ (80092f4 <HAL_RCC_OscConfig+0x304>)
 8009110:	686b      	ldr	r3, [r5, #4]
 8009112:	4213      	tst	r3, r2
 8009114:	d006      	beq.n	8009124 <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8009116:	686b      	ldr	r3, [r5, #4]
 8009118:	4013      	ands	r3, r2
 800911a:	2b08      	cmp	r3, #8
 800911c:	d110      	bne.n	8009140 <HAL_RCC_OscConfig+0x150>
 800911e:	686b      	ldr	r3, [r5, #4]
 8009120:	03db      	lsls	r3, r3, #15
 8009122:	d40d      	bmi.n	8009140 <HAL_RCC_OscConfig+0x150>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009124:	682b      	ldr	r3, [r5, #0]
 8009126:	079b      	lsls	r3, r3, #30
 8009128:	d502      	bpl.n	8009130 <HAL_RCC_OscConfig+0x140>
 800912a:	68e3      	ldr	r3, [r4, #12]
 800912c:	2b01      	cmp	r3, #1
 800912e:	d1aa      	bne.n	8009086 <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009130:	21f8      	movs	r1, #248	@ 0xf8
 8009132:	682a      	ldr	r2, [r5, #0]
 8009134:	6923      	ldr	r3, [r4, #16]
 8009136:	438a      	bics	r2, r1
 8009138:	00db      	lsls	r3, r3, #3
 800913a:	4313      	orrs	r3, r2
 800913c:	602b      	str	r3, [r5, #0]
 800913e:	e763      	b.n	8009008 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009140:	68e2      	ldr	r2, [r4, #12]
 8009142:	2301      	movs	r3, #1
 8009144:	2a00      	cmp	r2, #0
 8009146:	d00f      	beq.n	8009168 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_ENABLE();
 8009148:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800914a:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 800914c:	4313      	orrs	r3, r2
 800914e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009150:	f7ff f92a 	bl	80083a8 <HAL_GetTick>
 8009154:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009156:	682b      	ldr	r3, [r5, #0]
 8009158:	423b      	tst	r3, r7
 800915a:	d1e9      	bne.n	8009130 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800915c:	f7ff f924 	bl	80083a8 <HAL_GetTick>
 8009160:	1b80      	subs	r0, r0, r6
 8009162:	2802      	cmp	r0, #2
 8009164:	d9f7      	bls.n	8009156 <HAL_RCC_OscConfig+0x166>
 8009166:	e7a5      	b.n	80090b4 <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_HSI_DISABLE();
 8009168:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800916a:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 800916c:	439a      	bics	r2, r3
 800916e:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8009170:	f7ff f91a 	bl	80083a8 <HAL_GetTick>
 8009174:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009176:	682b      	ldr	r3, [r5, #0]
 8009178:	423b      	tst	r3, r7
 800917a:	d100      	bne.n	800917e <HAL_RCC_OscConfig+0x18e>
 800917c:	e744      	b.n	8009008 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800917e:	f7ff f913 	bl	80083a8 <HAL_GetTick>
 8009182:	1b80      	subs	r0, r0, r6
 8009184:	2802      	cmp	r0, #2
 8009186:	d9f6      	bls.n	8009176 <HAL_RCC_OscConfig+0x186>
 8009188:	e794      	b.n	80090b4 <HAL_RCC_OscConfig+0xc4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800918a:	69e2      	ldr	r2, [r4, #28]
 800918c:	2301      	movs	r3, #1
 800918e:	4d59      	ldr	r5, [pc, #356]	@ (80092f4 <HAL_RCC_OscConfig+0x304>)
 8009190:	2a00      	cmp	r2, #0
 8009192:	d010      	beq.n	80091b6 <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_LSI_ENABLE();
 8009194:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009196:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8009198:	4313      	orrs	r3, r2
 800919a:	626b      	str	r3, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 800919c:	f7ff f904 	bl	80083a8 <HAL_GetTick>
 80091a0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80091a2:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80091a4:	423b      	tst	r3, r7
 80091a6:	d000      	beq.n	80091aa <HAL_RCC_OscConfig+0x1ba>
 80091a8:	e732      	b.n	8009010 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80091aa:	f7ff f8fd 	bl	80083a8 <HAL_GetTick>
 80091ae:	1b80      	subs	r0, r0, r6
 80091b0:	2802      	cmp	r0, #2
 80091b2:	d9f6      	bls.n	80091a2 <HAL_RCC_OscConfig+0x1b2>
 80091b4:	e77e      	b.n	80090b4 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_LSI_DISABLE();
 80091b6:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091b8:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 80091ba:	439a      	bics	r2, r3
 80091bc:	626a      	str	r2, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 80091be:	f7ff f8f3 	bl	80083a8 <HAL_GetTick>
 80091c2:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091c4:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80091c6:	423b      	tst	r3, r7
 80091c8:	d100      	bne.n	80091cc <HAL_RCC_OscConfig+0x1dc>
 80091ca:	e721      	b.n	8009010 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80091cc:	f7ff f8ec 	bl	80083a8 <HAL_GetTick>
 80091d0:	1b80      	subs	r0, r0, r6
 80091d2:	2802      	cmp	r0, #2
 80091d4:	d9f6      	bls.n	80091c4 <HAL_RCC_OscConfig+0x1d4>
 80091d6:	e76d      	b.n	80090b4 <HAL_RCC_OscConfig+0xc4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80091d8:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 80091da:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80091dc:	4d45      	ldr	r5, [pc, #276]	@ (80092f4 <HAL_RCC_OscConfig+0x304>)
 80091de:	0552      	lsls	r2, r2, #21
 80091e0:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 80091e2:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80091e4:	4213      	tst	r3, r2
 80091e6:	d108      	bne.n	80091fa <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 80091e8:	69eb      	ldr	r3, [r5, #28]
 80091ea:	4313      	orrs	r3, r2
 80091ec:	61eb      	str	r3, [r5, #28]
 80091ee:	69eb      	ldr	r3, [r5, #28]
 80091f0:	4013      	ands	r3, r2
 80091f2:	9303      	str	r3, [sp, #12]
 80091f4:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80091f6:	2301      	movs	r3, #1
 80091f8:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80091fa:	2780      	movs	r7, #128	@ 0x80
 80091fc:	4e40      	ldr	r6, [pc, #256]	@ (8009300 <HAL_RCC_OscConfig+0x310>)
 80091fe:	007f      	lsls	r7, r7, #1
 8009200:	6833      	ldr	r3, [r6, #0]
 8009202:	423b      	tst	r3, r7
 8009204:	d015      	beq.n	8009232 <HAL_RCC_OscConfig+0x242>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009206:	68a3      	ldr	r3, [r4, #8]
 8009208:	2b01      	cmp	r3, #1
 800920a:	d122      	bne.n	8009252 <HAL_RCC_OscConfig+0x262>
 800920c:	6a2a      	ldr	r2, [r5, #32]
 800920e:	4313      	orrs	r3, r2
 8009210:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8009212:	f7ff f8c9 	bl	80083a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009216:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8009218:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800921a:	6a2b      	ldr	r3, [r5, #32]
 800921c:	423b      	tst	r3, r7
 800921e:	d03f      	beq.n	80092a0 <HAL_RCC_OscConfig+0x2b0>
    if(pwrclkchanged == SET)
 8009220:	9b00      	ldr	r3, [sp, #0]
 8009222:	2b01      	cmp	r3, #1
 8009224:	d000      	beq.n	8009228 <HAL_RCC_OscConfig+0x238>
 8009226:	e6f7      	b.n	8009018 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009228:	69eb      	ldr	r3, [r5, #28]
 800922a:	4a36      	ldr	r2, [pc, #216]	@ (8009304 <HAL_RCC_OscConfig+0x314>)
 800922c:	4013      	ands	r3, r2
 800922e:	61eb      	str	r3, [r5, #28]
 8009230:	e6f2      	b.n	8009018 <HAL_RCC_OscConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009232:	6833      	ldr	r3, [r6, #0]
 8009234:	433b      	orrs	r3, r7
 8009236:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8009238:	f7ff f8b6 	bl	80083a8 <HAL_GetTick>
 800923c:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800923e:	6833      	ldr	r3, [r6, #0]
 8009240:	423b      	tst	r3, r7
 8009242:	d1e0      	bne.n	8009206 <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009244:	f7ff f8b0 	bl	80083a8 <HAL_GetTick>
 8009248:	9b01      	ldr	r3, [sp, #4]
 800924a:	1ac0      	subs	r0, r0, r3
 800924c:	2864      	cmp	r0, #100	@ 0x64
 800924e:	d9f6      	bls.n	800923e <HAL_RCC_OscConfig+0x24e>
 8009250:	e730      	b.n	80090b4 <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009252:	2201      	movs	r2, #1
 8009254:	2b00      	cmp	r3, #0
 8009256:	d114      	bne.n	8009282 <HAL_RCC_OscConfig+0x292>
 8009258:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800925a:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800925c:	4393      	bics	r3, r2
 800925e:	622b      	str	r3, [r5, #32]
 8009260:	6a2b      	ldr	r3, [r5, #32]
 8009262:	3203      	adds	r2, #3
 8009264:	4393      	bics	r3, r2
 8009266:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8009268:	f7ff f89e 	bl	80083a8 <HAL_GetTick>
 800926c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800926e:	6a2b      	ldr	r3, [r5, #32]
 8009270:	423b      	tst	r3, r7
 8009272:	d0d5      	beq.n	8009220 <HAL_RCC_OscConfig+0x230>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009274:	f7ff f898 	bl	80083a8 <HAL_GetTick>
 8009278:	4b23      	ldr	r3, [pc, #140]	@ (8009308 <HAL_RCC_OscConfig+0x318>)
 800927a:	1b80      	subs	r0, r0, r6
 800927c:	4298      	cmp	r0, r3
 800927e:	d9f6      	bls.n	800926e <HAL_RCC_OscConfig+0x27e>
 8009280:	e718      	b.n	80090b4 <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009282:	2b05      	cmp	r3, #5
 8009284:	d105      	bne.n	8009292 <HAL_RCC_OscConfig+0x2a2>
 8009286:	6a29      	ldr	r1, [r5, #32]
 8009288:	3b01      	subs	r3, #1
 800928a:	430b      	orrs	r3, r1
 800928c:	622b      	str	r3, [r5, #32]
 800928e:	6a2b      	ldr	r3, [r5, #32]
 8009290:	e7bd      	b.n	800920e <HAL_RCC_OscConfig+0x21e>
 8009292:	6a2b      	ldr	r3, [r5, #32]
 8009294:	4393      	bics	r3, r2
 8009296:	2204      	movs	r2, #4
 8009298:	622b      	str	r3, [r5, #32]
 800929a:	6a2b      	ldr	r3, [r5, #32]
 800929c:	4393      	bics	r3, r2
 800929e:	e7b7      	b.n	8009210 <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092a0:	f7ff f882 	bl	80083a8 <HAL_GetTick>
 80092a4:	4b18      	ldr	r3, [pc, #96]	@ (8009308 <HAL_RCC_OscConfig+0x318>)
 80092a6:	1b80      	subs	r0, r0, r6
 80092a8:	4298      	cmp	r0, r3
 80092aa:	d9b6      	bls.n	800921a <HAL_RCC_OscConfig+0x22a>
 80092ac:	e702      	b.n	80090b4 <HAL_RCC_OscConfig+0xc4>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80092ae:	f7ff f87b 	bl	80083a8 <HAL_GetTick>
 80092b2:	1b80      	subs	r0, r0, r6
 80092b4:	2802      	cmp	r0, #2
 80092b6:	d800      	bhi.n	80092ba <HAL_RCC_OscConfig+0x2ca>
 80092b8:	e6c1      	b.n	800903e <HAL_RCC_OscConfig+0x4e>
 80092ba:	e6fb      	b.n	80090b4 <HAL_RCC_OscConfig+0xc4>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80092bc:	3205      	adds	r2, #5
 80092be:	d103      	bne.n	80092c8 <HAL_RCC_OscConfig+0x2d8>
      __HAL_RCC_HSI14ADC_ENABLE();
 80092c0:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 80092c2:	439a      	bics	r2, r3
 80092c4:	636a      	str	r2, [r5, #52]	@ 0x34
 80092c6:	e6be      	b.n	8009046 <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_HSI14ADC_DISABLE();
 80092c8:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80092ca:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80092cc:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 80092ce:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 80092d0:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_DISABLE();
 80092d2:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80092d4:	4393      	bics	r3, r2
 80092d6:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 80092d8:	f7ff f866 	bl	80083a8 <HAL_GetTick>
 80092dc:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80092de:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80092e0:	423b      	tst	r3, r7
 80092e2:	d100      	bne.n	80092e6 <HAL_RCC_OscConfig+0x2f6>
 80092e4:	e6b6      	b.n	8009054 <HAL_RCC_OscConfig+0x64>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80092e6:	f7ff f85f 	bl	80083a8 <HAL_GetTick>
 80092ea:	1b80      	subs	r0, r0, r6
 80092ec:	2802      	cmp	r0, #2
 80092ee:	d9f6      	bls.n	80092de <HAL_RCC_OscConfig+0x2ee>
 80092f0:	e6e0      	b.n	80090b4 <HAL_RCC_OscConfig+0xc4>
 80092f2:	46c0      	nop			@ (mov r8, r8)
 80092f4:	40021000 	.word	0x40021000
 80092f8:	fffeffff 	.word	0xfffeffff
 80092fc:	fffbffff 	.word	0xfffbffff
 8009300:	40007000 	.word	0x40007000
 8009304:	efffffff 	.word	0xefffffff
 8009308:	00001388 	.word	0x00001388
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800930c:	210c      	movs	r1, #12
 800930e:	4d34      	ldr	r5, [pc, #208]	@ (80093e0 <HAL_RCC_OscConfig+0x3f0>)
 8009310:	686a      	ldr	r2, [r5, #4]
 8009312:	400a      	ands	r2, r1
 8009314:	2a08      	cmp	r2, #8
 8009316:	d047      	beq.n	80093a8 <HAL_RCC_OscConfig+0x3b8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009318:	4a32      	ldr	r2, [pc, #200]	@ (80093e4 <HAL_RCC_OscConfig+0x3f4>)
 800931a:	2b02      	cmp	r3, #2
 800931c:	d132      	bne.n	8009384 <HAL_RCC_OscConfig+0x394>
        __HAL_RCC_PLL_DISABLE();
 800931e:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009320:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8009322:	4013      	ands	r3, r2
 8009324:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009326:	f7ff f83f 	bl	80083a8 <HAL_GetTick>
 800932a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800932c:	04bf      	lsls	r7, r7, #18
 800932e:	682b      	ldr	r3, [r5, #0]
 8009330:	423b      	tst	r3, r7
 8009332:	d121      	bne.n	8009378 <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009334:	220f      	movs	r2, #15
 8009336:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009338:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800933a:	4393      	bics	r3, r2
 800933c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800933e:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009340:	4313      	orrs	r3, r2
 8009342:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8009344:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8009346:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009348:	686a      	ldr	r2, [r5, #4]
 800934a:	430b      	orrs	r3, r1
 800934c:	4926      	ldr	r1, [pc, #152]	@ (80093e8 <HAL_RCC_OscConfig+0x3f8>)
 800934e:	400a      	ands	r2, r1
 8009350:	4313      	orrs	r3, r2
 8009352:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8009354:	2380      	movs	r3, #128	@ 0x80
 8009356:	682a      	ldr	r2, [r5, #0]
 8009358:	045b      	lsls	r3, r3, #17
 800935a:	4313      	orrs	r3, r2
 800935c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800935e:	f7ff f823 	bl	80083a8 <HAL_GetTick>
 8009362:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009364:	682b      	ldr	r3, [r5, #0]
 8009366:	4233      	tst	r3, r6
 8009368:	d000      	beq.n	800936c <HAL_RCC_OscConfig+0x37c>
 800936a:	e677      	b.n	800905c <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800936c:	f7ff f81c 	bl	80083a8 <HAL_GetTick>
 8009370:	1b00      	subs	r0, r0, r4
 8009372:	2802      	cmp	r0, #2
 8009374:	d9f6      	bls.n	8009364 <HAL_RCC_OscConfig+0x374>
 8009376:	e69d      	b.n	80090b4 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009378:	f7ff f816 	bl	80083a8 <HAL_GetTick>
 800937c:	1b80      	subs	r0, r0, r6
 800937e:	2802      	cmp	r0, #2
 8009380:	d9d5      	bls.n	800932e <HAL_RCC_OscConfig+0x33e>
 8009382:	e697      	b.n	80090b4 <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_PLL_DISABLE();
 8009384:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009386:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8009388:	4013      	ands	r3, r2
 800938a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800938c:	f7ff f80c 	bl	80083a8 <HAL_GetTick>
 8009390:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009392:	04b6      	lsls	r6, r6, #18
 8009394:	682b      	ldr	r3, [r5, #0]
 8009396:	4233      	tst	r3, r6
 8009398:	d100      	bne.n	800939c <HAL_RCC_OscConfig+0x3ac>
 800939a:	e65f      	b.n	800905c <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800939c:	f7ff f804 	bl	80083a8 <HAL_GetTick>
 80093a0:	1b00      	subs	r0, r0, r4
 80093a2:	2802      	cmp	r0, #2
 80093a4:	d9f6      	bls.n	8009394 <HAL_RCC_OscConfig+0x3a4>
 80093a6:	e685      	b.n	80090b4 <HAL_RCC_OscConfig+0xc4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d100      	bne.n	80093ae <HAL_RCC_OscConfig+0x3be>
 80093ac:	e66b      	b.n	8009086 <HAL_RCC_OscConfig+0x96>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80093ae:	2280      	movs	r2, #128	@ 0x80
        pll_config  = RCC->CFGR;
 80093b0:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80093b2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80093b4:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 80093b6:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80093b8:	4002      	ands	r2, r0
 80093ba:	428a      	cmp	r2, r1
 80093bc:	d000      	beq.n	80093c0 <HAL_RCC_OscConfig+0x3d0>
 80093be:	e662      	b.n	8009086 <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80093c0:	220f      	movs	r2, #15
 80093c2:	4013      	ands	r3, r2
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80093c4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d000      	beq.n	80093cc <HAL_RCC_OscConfig+0x3dc>
 80093ca:	e65c      	b.n	8009086 <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80093cc:	23f0      	movs	r3, #240	@ 0xf0
 80093ce:	039b      	lsls	r3, r3, #14
 80093d0:	4018      	ands	r0, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80093d2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80093d4:	1ac0      	subs	r0, r0, r3
 80093d6:	1e43      	subs	r3, r0, #1
 80093d8:	4198      	sbcs	r0, r3
 80093da:	b2c0      	uxtb	r0, r0
 80093dc:	e66b      	b.n	80090b6 <HAL_RCC_OscConfig+0xc6>
 80093de:	46c0      	nop			@ (mov r8, r8)
 80093e0:	40021000 	.word	0x40021000
 80093e4:	feffffff 	.word	0xfeffffff
 80093e8:	ffc2ffff 	.word	0xffc2ffff

080093ec <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80093ec:	220c      	movs	r2, #12
{
 80093ee:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 80093f0:	4d0c      	ldr	r5, [pc, #48]	@ (8009424 <HAL_RCC_GetSysClockFreq+0x38>)
 80093f2:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80093f4:	401a      	ands	r2, r3
 80093f6:	2a08      	cmp	r2, #8
 80093f8:	d111      	bne.n	800941e <HAL_RCC_GetSysClockFreq+0x32>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80093fa:	200f      	movs	r0, #15
 80093fc:	490a      	ldr	r1, [pc, #40]	@ (8009428 <HAL_RCC_GetSysClockFreq+0x3c>)
 80093fe:	0c9a      	lsrs	r2, r3, #18
 8009400:	4002      	ands	r2, r0
 8009402:	5c8c      	ldrb	r4, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8009404:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8009406:	03db      	lsls	r3, r3, #15
 8009408:	d507      	bpl.n	800941a <HAL_RCC_GetSysClockFreq+0x2e>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800940a:	4908      	ldr	r1, [pc, #32]	@ (800942c <HAL_RCC_GetSysClockFreq+0x40>)
 800940c:	4002      	ands	r2, r0
 800940e:	5c89      	ldrb	r1, [r1, r2]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8009410:	4807      	ldr	r0, [pc, #28]	@ (8009430 <HAL_RCC_GetSysClockFreq+0x44>)
 8009412:	f7f6 fe9f 	bl	8000154 <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8009416:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8009418:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800941a:	4806      	ldr	r0, [pc, #24]	@ (8009434 <HAL_RCC_GetSysClockFreq+0x48>)
 800941c:	e7fb      	b.n	8009416 <HAL_RCC_GetSysClockFreq+0x2a>
      sysclockfreq = HSE_VALUE;
 800941e:	4804      	ldr	r0, [pc, #16]	@ (8009430 <HAL_RCC_GetSysClockFreq+0x44>)
  return sysclockfreq;
 8009420:	e7fa      	b.n	8009418 <HAL_RCC_GetSysClockFreq+0x2c>
 8009422:	46c0      	nop			@ (mov r8, r8)
 8009424:	40021000 	.word	0x40021000
 8009428:	0800d6b0 	.word	0x0800d6b0
 800942c:	0800d6a0 	.word	0x0800d6a0
 8009430:	007a1200 	.word	0x007a1200
 8009434:	003d0900 	.word	0x003d0900

08009438 <HAL_RCC_ClockConfig>:
{
 8009438:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800943a:	0004      	movs	r4, r0
 800943c:	000e      	movs	r6, r1
  if(RCC_ClkInitStruct == NULL)
 800943e:	2800      	cmp	r0, #0
 8009440:	d101      	bne.n	8009446 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8009442:	2001      	movs	r0, #1
}
 8009444:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009446:	2201      	movs	r2, #1
 8009448:	4d37      	ldr	r5, [pc, #220]	@ (8009528 <HAL_RCC_ClockConfig+0xf0>)
 800944a:	682b      	ldr	r3, [r5, #0]
 800944c:	4013      	ands	r3, r2
 800944e:	428b      	cmp	r3, r1
 8009450:	d31c      	bcc.n	800948c <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009452:	6822      	ldr	r2, [r4, #0]
 8009454:	0793      	lsls	r3, r2, #30
 8009456:	d422      	bmi.n	800949e <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009458:	07d2      	lsls	r2, r2, #31
 800945a:	d42f      	bmi.n	80094bc <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800945c:	2301      	movs	r3, #1
 800945e:	682a      	ldr	r2, [r5, #0]
 8009460:	401a      	ands	r2, r3
 8009462:	42b2      	cmp	r2, r6
 8009464:	d851      	bhi.n	800950a <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009466:	6823      	ldr	r3, [r4, #0]
 8009468:	4d30      	ldr	r5, [pc, #192]	@ (800952c <HAL_RCC_ClockConfig+0xf4>)
 800946a:	075b      	lsls	r3, r3, #29
 800946c:	d454      	bmi.n	8009518 <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800946e:	f7ff ffbd 	bl	80093ec <HAL_RCC_GetSysClockFreq>
 8009472:	686b      	ldr	r3, [r5, #4]
 8009474:	4a2e      	ldr	r2, [pc, #184]	@ (8009530 <HAL_RCC_ClockConfig+0xf8>)
 8009476:	061b      	lsls	r3, r3, #24
 8009478:	0f1b      	lsrs	r3, r3, #28
 800947a:	5cd3      	ldrb	r3, [r2, r3]
 800947c:	492d      	ldr	r1, [pc, #180]	@ (8009534 <HAL_RCC_ClockConfig+0xfc>)
 800947e:	40d8      	lsrs	r0, r3
 8009480:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8009482:	2003      	movs	r0, #3
 8009484:	f7fe ff50 	bl	8008328 <HAL_InitTick>
  return HAL_OK;
 8009488:	2000      	movs	r0, #0
 800948a:	e7db      	b.n	8009444 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800948c:	682b      	ldr	r3, [r5, #0]
 800948e:	4393      	bics	r3, r2
 8009490:	430b      	orrs	r3, r1
 8009492:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009494:	682b      	ldr	r3, [r5, #0]
 8009496:	4013      	ands	r3, r2
 8009498:	428b      	cmp	r3, r1
 800949a:	d1d2      	bne.n	8009442 <HAL_RCC_ClockConfig+0xa>
 800949c:	e7d9      	b.n	8009452 <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800949e:	4923      	ldr	r1, [pc, #140]	@ (800952c <HAL_RCC_ClockConfig+0xf4>)
 80094a0:	0753      	lsls	r3, r2, #29
 80094a2:	d504      	bpl.n	80094ae <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80094a4:	23e0      	movs	r3, #224	@ 0xe0
 80094a6:	6848      	ldr	r0, [r1, #4]
 80094a8:	00db      	lsls	r3, r3, #3
 80094aa:	4303      	orrs	r3, r0
 80094ac:	604b      	str	r3, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80094ae:	20f0      	movs	r0, #240	@ 0xf0
 80094b0:	684b      	ldr	r3, [r1, #4]
 80094b2:	4383      	bics	r3, r0
 80094b4:	68a0      	ldr	r0, [r4, #8]
 80094b6:	4303      	orrs	r3, r0
 80094b8:	604b      	str	r3, [r1, #4]
 80094ba:	e7cd      	b.n	8009458 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80094bc:	4f1b      	ldr	r7, [pc, #108]	@ (800952c <HAL_RCC_ClockConfig+0xf4>)
 80094be:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80094c0:	683b      	ldr	r3, [r7, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80094c2:	2a01      	cmp	r2, #1
 80094c4:	d119      	bne.n	80094fa <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80094c6:	039b      	lsls	r3, r3, #14
 80094c8:	d5bb      	bpl.n	8009442 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80094ca:	2103      	movs	r1, #3
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	438b      	bics	r3, r1
 80094d0:	4313      	orrs	r3, r2
 80094d2:	607b      	str	r3, [r7, #4]
    tickstart = HAL_GetTick();
 80094d4:	f7fe ff68 	bl	80083a8 <HAL_GetTick>
 80094d8:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094da:	230c      	movs	r3, #12
 80094dc:	687a      	ldr	r2, [r7, #4]
 80094de:	401a      	ands	r2, r3
 80094e0:	6863      	ldr	r3, [r4, #4]
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d0b9      	beq.n	800945c <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80094e8:	f7fe ff5e 	bl	80083a8 <HAL_GetTick>
 80094ec:	9b01      	ldr	r3, [sp, #4]
 80094ee:	1ac0      	subs	r0, r0, r3
 80094f0:	4b11      	ldr	r3, [pc, #68]	@ (8009538 <HAL_RCC_ClockConfig+0x100>)
 80094f2:	4298      	cmp	r0, r3
 80094f4:	d9f1      	bls.n	80094da <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 80094f6:	2003      	movs	r0, #3
 80094f8:	e7a4      	b.n	8009444 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80094fa:	2a02      	cmp	r2, #2
 80094fc:	d102      	bne.n	8009504 <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80094fe:	019b      	lsls	r3, r3, #6
 8009500:	d4e3      	bmi.n	80094ca <HAL_RCC_ClockConfig+0x92>
 8009502:	e79e      	b.n	8009442 <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009504:	079b      	lsls	r3, r3, #30
 8009506:	d4e0      	bmi.n	80094ca <HAL_RCC_ClockConfig+0x92>
 8009508:	e79b      	b.n	8009442 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800950a:	682a      	ldr	r2, [r5, #0]
 800950c:	439a      	bics	r2, r3
 800950e:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009510:	682a      	ldr	r2, [r5, #0]
 8009512:	421a      	tst	r2, r3
 8009514:	d0a7      	beq.n	8009466 <HAL_RCC_ClockConfig+0x2e>
 8009516:	e794      	b.n	8009442 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8009518:	686b      	ldr	r3, [r5, #4]
 800951a:	4a08      	ldr	r2, [pc, #32]	@ (800953c <HAL_RCC_ClockConfig+0x104>)
 800951c:	4013      	ands	r3, r2
 800951e:	68e2      	ldr	r2, [r4, #12]
 8009520:	4313      	orrs	r3, r2
 8009522:	606b      	str	r3, [r5, #4]
 8009524:	e7a3      	b.n	800946e <HAL_RCC_ClockConfig+0x36>
 8009526:	46c0      	nop			@ (mov r8, r8)
 8009528:	40022000 	.word	0x40022000
 800952c:	40021000 	.word	0x40021000
 8009530:	0800d650 	.word	0x0800d650
 8009534:	20000000 	.word	0x20000000
 8009538:	00001388 	.word	0x00001388
 800953c:	fffff8ff 	.word	0xfffff8ff

08009540 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8009540:	4b04      	ldr	r3, [pc, #16]	@ (8009554 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8009542:	4a05      	ldr	r2, [pc, #20]	@ (8009558 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	4905      	ldr	r1, [pc, #20]	@ (800955c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8009548:	055b      	lsls	r3, r3, #21
 800954a:	0f5b      	lsrs	r3, r3, #29
 800954c:	5ccb      	ldrb	r3, [r1, r3]
 800954e:	6810      	ldr	r0, [r2, #0]
 8009550:	40d8      	lsrs	r0, r3
}    
 8009552:	4770      	bx	lr
 8009554:	40021000 	.word	0x40021000
 8009558:	20000000 	.word	0x20000000
 800955c:	0800d648 	.word	0x0800d648

08009560 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009560:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009562:	6803      	ldr	r3, [r0, #0]
{
 8009564:	0005      	movs	r5, r0
 8009566:	b085      	sub	sp, #20
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009568:	03db      	lsls	r3, r3, #15
 800956a:	d52b      	bpl.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800956c:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 800956e:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009570:	4c3d      	ldr	r4, [pc, #244]	@ (8009668 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8009572:	0552      	lsls	r2, r2, #21
 8009574:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8009576:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009578:	4213      	tst	r3, r2
 800957a:	d108      	bne.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800957c:	69e3      	ldr	r3, [r4, #28]
 800957e:	4313      	orrs	r3, r2
 8009580:	61e3      	str	r3, [r4, #28]
 8009582:	69e3      	ldr	r3, [r4, #28]
 8009584:	4013      	ands	r3, r2
 8009586:	9303      	str	r3, [sp, #12]
 8009588:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800958a:	2301      	movs	r3, #1
 800958c:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800958e:	2780      	movs	r7, #128	@ 0x80
 8009590:	4e36      	ldr	r6, [pc, #216]	@ (800966c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8009592:	007f      	lsls	r7, r7, #1
 8009594:	6833      	ldr	r3, [r6, #0]
 8009596:	423b      	tst	r3, r7
 8009598:	d02b      	beq.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0x92>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800959a:	6a21      	ldr	r1, [r4, #32]
 800959c:	22c0      	movs	r2, #192	@ 0xc0
 800959e:	0008      	movs	r0, r1
 80095a0:	0092      	lsls	r2, r2, #2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80095a2:	686b      	ldr	r3, [r5, #4]
 80095a4:	4e32      	ldr	r6, [pc, #200]	@ (8009670 <HAL_RCCEx_PeriphCLKConfig+0x110>)
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80095a6:	4010      	ands	r0, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80095a8:	4211      	tst	r1, r2
 80095aa:	d134      	bne.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0xb6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80095ac:	6a23      	ldr	r3, [r4, #32]
 80095ae:	686a      	ldr	r2, [r5, #4]
 80095b0:	4033      	ands	r3, r6
 80095b2:	4313      	orrs	r3, r2
 80095b4:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80095b6:	9b00      	ldr	r3, [sp, #0]
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d103      	bne.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80095bc:	69e3      	ldr	r3, [r4, #28]
 80095be:	4a2d      	ldr	r2, [pc, #180]	@ (8009674 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80095c0:	4013      	ands	r3, r2
 80095c2:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80095c4:	682a      	ldr	r2, [r5, #0]
 80095c6:	07d3      	lsls	r3, r2, #31
 80095c8:	d506      	bpl.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80095ca:	2003      	movs	r0, #3
 80095cc:	4926      	ldr	r1, [pc, #152]	@ (8009668 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80095ce:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 80095d0:	4383      	bics	r3, r0
 80095d2:	68a8      	ldr	r0, [r5, #8]
 80095d4:	4303      	orrs	r3, r0
 80095d6:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80095d8:	0693      	lsls	r3, r2, #26
 80095da:	d506      	bpl.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80095dc:	2010      	movs	r0, #16
 80095de:	4922      	ldr	r1, [pc, #136]	@ (8009668 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80095e0:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 80095e2:	4383      	bics	r3, r0
 80095e4:	68e8      	ldr	r0, [r5, #12]
 80095e6:	4303      	orrs	r3, r0
 80095e8:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80095ea:	0552      	lsls	r2, r2, #21
 80095ec:	d433      	bmi.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0xf6>
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80095ee:	2000      	movs	r0, #0
 80095f0:	e00f      	b.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80095f2:	6833      	ldr	r3, [r6, #0]
 80095f4:	433b      	orrs	r3, r7
 80095f6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80095f8:	f7fe fed6 	bl	80083a8 <HAL_GetTick>
 80095fc:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80095fe:	6833      	ldr	r3, [r6, #0]
 8009600:	423b      	tst	r3, r7
 8009602:	d1ca      	bne.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009604:	f7fe fed0 	bl	80083a8 <HAL_GetTick>
 8009608:	9b01      	ldr	r3, [sp, #4]
 800960a:	1ac0      	subs	r0, r0, r3
 800960c:	2864      	cmp	r0, #100	@ 0x64
 800960e:	d9f6      	bls.n	80095fe <HAL_RCCEx_PeriphCLKConfig+0x9e>
          return HAL_TIMEOUT;
 8009610:	2003      	movs	r0, #3
}
 8009612:	b005      	add	sp, #20
 8009614:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009616:	4013      	ands	r3, r2
 8009618:	4283      	cmp	r3, r0
 800961a:	d0c7      	beq.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x4c>
      __HAL_RCC_BACKUPRESET_FORCE();
 800961c:	2280      	movs	r2, #128	@ 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800961e:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8009620:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009622:	0019      	movs	r1, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8009624:	0252      	lsls	r2, r2, #9
 8009626:	4302      	orrs	r2, r0
 8009628:	6222      	str	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800962a:	6a22      	ldr	r2, [r4, #32]
 800962c:	4812      	ldr	r0, [pc, #72]	@ (8009678 <HAL_RCCEx_PeriphCLKConfig+0x118>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800962e:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009630:	4002      	ands	r2, r0
 8009632:	6222      	str	r2, [r4, #32]
      RCC->BDCR = temp_reg;
 8009634:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8009636:	07db      	lsls	r3, r3, #31
 8009638:	d5b8      	bpl.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x4c>
        tickstart = HAL_GetTick();
 800963a:	f7fe feb5 	bl	80083a8 <HAL_GetTick>
 800963e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009640:	2202      	movs	r2, #2
 8009642:	6a23      	ldr	r3, [r4, #32]
 8009644:	4213      	tst	r3, r2
 8009646:	d1b1      	bne.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x4c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009648:	f7fe feae 	bl	80083a8 <HAL_GetTick>
 800964c:	4b0b      	ldr	r3, [pc, #44]	@ (800967c <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 800964e:	1bc0      	subs	r0, r0, r7
 8009650:	4298      	cmp	r0, r3
 8009652:	d9f5      	bls.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0xe0>
 8009654:	e7dc      	b.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009656:	2140      	movs	r1, #64	@ 0x40
 8009658:	4a03      	ldr	r2, [pc, #12]	@ (8009668 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800965a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800965c:	438b      	bics	r3, r1
 800965e:	6929      	ldr	r1, [r5, #16]
 8009660:	430b      	orrs	r3, r1
 8009662:	6313      	str	r3, [r2, #48]	@ 0x30
 8009664:	e7c3      	b.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0x8e>
 8009666:	46c0      	nop			@ (mov r8, r8)
 8009668:	40021000 	.word	0x40021000
 800966c:	40007000 	.word	0x40007000
 8009670:	fffffcff 	.word	0xfffffcff
 8009674:	efffffff 	.word	0xefffffff
 8009678:	fffeffff 	.word	0xfffeffff
 800967c:	00001388 	.word	0x00001388

08009680 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009680:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009682:	2401      	movs	r4, #1
  tmpccer = TIMx->CCER;
 8009684:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009686:	6a02      	ldr	r2, [r0, #32]
 8009688:	43a2      	bics	r2, r4
 800968a:	6202      	str	r2, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800968c:	2273      	movs	r2, #115	@ 0x73
  tmpcr2 =  TIMx->CR2;
 800968e:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8009690:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009692:	4395      	bics	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009694:	680a      	ldr	r2, [r1, #0]
 8009696:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009698:	2202      	movs	r2, #2
 800969a:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800969c:	688a      	ldr	r2, [r1, #8]
 800969e:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80096a0:	4a14      	ldr	r2, [pc, #80]	@ (80096f4 <TIM_OC1_SetConfig+0x74>)
 80096a2:	4290      	cmp	r0, r2
 80096a4:	d008      	beq.n	80096b8 <TIM_OC1_SetConfig+0x38>
 80096a6:	4e14      	ldr	r6, [pc, #80]	@ (80096f8 <TIM_OC1_SetConfig+0x78>)
 80096a8:	42b0      	cmp	r0, r6
 80096aa:	d005      	beq.n	80096b8 <TIM_OC1_SetConfig+0x38>
 80096ac:	4e13      	ldr	r6, [pc, #76]	@ (80096fc <TIM_OC1_SetConfig+0x7c>)
 80096ae:	42b0      	cmp	r0, r6
 80096b0:	d002      	beq.n	80096b8 <TIM_OC1_SetConfig+0x38>
 80096b2:	4e13      	ldr	r6, [pc, #76]	@ (8009700 <TIM_OC1_SetConfig+0x80>)
 80096b4:	42b0      	cmp	r0, r6
 80096b6:	d116      	bne.n	80096e6 <TIM_OC1_SetConfig+0x66>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80096b8:	2608      	movs	r6, #8
 80096ba:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80096bc:	68ce      	ldr	r6, [r1, #12]
 80096be:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80096c0:	2604      	movs	r6, #4
 80096c2:	43b3      	bics	r3, r6
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096c4:	4290      	cmp	r0, r2
 80096c6:	d008      	beq.n	80096da <TIM_OC1_SetConfig+0x5a>
 80096c8:	4a0b      	ldr	r2, [pc, #44]	@ (80096f8 <TIM_OC1_SetConfig+0x78>)
 80096ca:	4290      	cmp	r0, r2
 80096cc:	d005      	beq.n	80096da <TIM_OC1_SetConfig+0x5a>
 80096ce:	4a0b      	ldr	r2, [pc, #44]	@ (80096fc <TIM_OC1_SetConfig+0x7c>)
 80096d0:	4290      	cmp	r0, r2
 80096d2:	d002      	beq.n	80096da <TIM_OC1_SetConfig+0x5a>
 80096d4:	4a0a      	ldr	r2, [pc, #40]	@ (8009700 <TIM_OC1_SetConfig+0x80>)
 80096d6:	4290      	cmp	r0, r2
 80096d8:	d105      	bne.n	80096e6 <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80096da:	4a0a      	ldr	r2, [pc, #40]	@ (8009704 <TIM_OC1_SetConfig+0x84>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80096dc:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80096de:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 80096e0:	694c      	ldr	r4, [r1, #20]
 80096e2:	4334      	orrs	r4, r6
 80096e4:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80096e6:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80096e8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80096ea:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80096ec:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096ee:	6203      	str	r3, [r0, #32]
}
 80096f0:	bd70      	pop	{r4, r5, r6, pc}
 80096f2:	46c0      	nop			@ (mov r8, r8)
 80096f4:	40012c00 	.word	0x40012c00
 80096f8:	40014000 	.word	0x40014000
 80096fc:	40014400 	.word	0x40014400
 8009700:	40014800 	.word	0x40014800
 8009704:	fffffcff 	.word	0xfffffcff

08009708 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009708:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800970a:	4a18      	ldr	r2, [pc, #96]	@ (800976c <TIM_OC3_SetConfig+0x64>)
  tmpccer = TIMx->CCER;
 800970c:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800970e:	6a03      	ldr	r3, [r0, #32]
 8009710:	4013      	ands	r3, r2
 8009712:	6203      	str	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009714:	2373      	movs	r3, #115	@ 0x73
  tmpcr2 =  TIMx->CR2;
 8009716:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8009718:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800971a:	439c      	bics	r4, r3
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800971c:	680b      	ldr	r3, [r1, #0]
 800971e:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009720:	4b13      	ldr	r3, [pc, #76]	@ (8009770 <TIM_OC3_SetConfig+0x68>)
 8009722:	401d      	ands	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009724:	688b      	ldr	r3, [r1, #8]
 8009726:	021b      	lsls	r3, r3, #8
 8009728:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800972a:	4d12      	ldr	r5, [pc, #72]	@ (8009774 <TIM_OC3_SetConfig+0x6c>)
 800972c:	42a8      	cmp	r0, r5
 800972e:	d10e      	bne.n	800974e <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009730:	4d11      	ldr	r5, [pc, #68]	@ (8009778 <TIM_OC3_SetConfig+0x70>)
 8009732:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009734:	68cb      	ldr	r3, [r1, #12]
 8009736:	021b      	lsls	r3, r3, #8
 8009738:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800973a:	4d10      	ldr	r5, [pc, #64]	@ (800977c <TIM_OC3_SetConfig+0x74>)
 800973c:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800973e:	4d10      	ldr	r5, [pc, #64]	@ (8009780 <TIM_OC3_SetConfig+0x78>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009740:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009742:	4015      	ands	r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009744:	698a      	ldr	r2, [r1, #24]
 8009746:	4332      	orrs	r2, r6
 8009748:	0112      	lsls	r2, r2, #4
 800974a:	432a      	orrs	r2, r5
 800974c:	e008      	b.n	8009760 <TIM_OC3_SetConfig+0x58>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800974e:	4d0d      	ldr	r5, [pc, #52]	@ (8009784 <TIM_OC3_SetConfig+0x7c>)
 8009750:	42a8      	cmp	r0, r5
 8009752:	d0f4      	beq.n	800973e <TIM_OC3_SetConfig+0x36>
 8009754:	4d0c      	ldr	r5, [pc, #48]	@ (8009788 <TIM_OC3_SetConfig+0x80>)
 8009756:	42a8      	cmp	r0, r5
 8009758:	d0f1      	beq.n	800973e <TIM_OC3_SetConfig+0x36>
 800975a:	4d0c      	ldr	r5, [pc, #48]	@ (800978c <TIM_OC3_SetConfig+0x84>)
 800975c:	42a8      	cmp	r0, r5
 800975e:	d0ee      	beq.n	800973e <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009760:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009762:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8009764:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8009766:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009768:	6203      	str	r3, [r0, #32]
}
 800976a:	bd70      	pop	{r4, r5, r6, pc}
 800976c:	fffffeff 	.word	0xfffffeff
 8009770:	fffffdff 	.word	0xfffffdff
 8009774:	40012c00 	.word	0x40012c00
 8009778:	fffff7ff 	.word	0xfffff7ff
 800977c:	fffffbff 	.word	0xfffffbff
 8009780:	ffffcfff 	.word	0xffffcfff
 8009784:	40014000 	.word	0x40014000
 8009788:	40014400 	.word	0x40014400
 800978c:	40014800 	.word	0x40014800

08009790 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009790:	b530      	push	{r4, r5, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009792:	4a14      	ldr	r2, [pc, #80]	@ (80097e4 <TIM_OC4_SetConfig+0x54>)
  tmpccer = TIMx->CCER;
 8009794:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009796:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009798:	4d13      	ldr	r5, [pc, #76]	@ (80097e8 <TIM_OC4_SetConfig+0x58>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800979a:	4013      	ands	r3, r2
 800979c:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800979e:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80097a0:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80097a2:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097a4:	680d      	ldr	r5, [r1, #0]
 80097a6:	022d      	lsls	r5, r5, #8
 80097a8:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80097aa:	4a10      	ldr	r2, [pc, #64]	@ (80097ec <TIM_OC4_SetConfig+0x5c>)
 80097ac:	4014      	ands	r4, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80097ae:	688a      	ldr	r2, [r1, #8]
 80097b0:	0312      	lsls	r2, r2, #12
 80097b2:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097b4:	4c0e      	ldr	r4, [pc, #56]	@ (80097f0 <TIM_OC4_SetConfig+0x60>)
 80097b6:	42a0      	cmp	r0, r4
 80097b8:	d008      	beq.n	80097cc <TIM_OC4_SetConfig+0x3c>
 80097ba:	4c0e      	ldr	r4, [pc, #56]	@ (80097f4 <TIM_OC4_SetConfig+0x64>)
 80097bc:	42a0      	cmp	r0, r4
 80097be:	d005      	beq.n	80097cc <TIM_OC4_SetConfig+0x3c>
 80097c0:	4c0d      	ldr	r4, [pc, #52]	@ (80097f8 <TIM_OC4_SetConfig+0x68>)
 80097c2:	42a0      	cmp	r0, r4
 80097c4:	d002      	beq.n	80097cc <TIM_OC4_SetConfig+0x3c>
 80097c6:	4c0d      	ldr	r4, [pc, #52]	@ (80097fc <TIM_OC4_SetConfig+0x6c>)
 80097c8:	42a0      	cmp	r0, r4
 80097ca:	d104      	bne.n	80097d6 <TIM_OC4_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80097cc:	4c0c      	ldr	r4, [pc, #48]	@ (8009800 <TIM_OC4_SetConfig+0x70>)
 80097ce:	401c      	ands	r4, r3

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80097d0:	694b      	ldr	r3, [r1, #20]
 80097d2:	019b      	lsls	r3, r3, #6
 80097d4:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097d6:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80097d8:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80097da:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80097dc:	6403      	str	r3, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097de:	6202      	str	r2, [r0, #32]
}
 80097e0:	bd30      	pop	{r4, r5, pc}
 80097e2:	46c0      	nop			@ (mov r8, r8)
 80097e4:	ffffefff 	.word	0xffffefff
 80097e8:	ffff8cff 	.word	0xffff8cff
 80097ec:	ffffdfff 	.word	0xffffdfff
 80097f0:	40012c00 	.word	0x40012c00
 80097f4:	40014000 	.word	0x40014000
 80097f8:	40014400 	.word	0x40014400
 80097fc:	40014800 	.word	0x40014800
 8009800:	ffffbfff 	.word	0xffffbfff

08009804 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8009804:	0001      	movs	r1, r0
{
 8009806:	0003      	movs	r3, r0
    return HAL_ERROR;
 8009808:	2001      	movs	r0, #1
{
 800980a:	b510      	push	{r4, lr}
  if (htim->State != HAL_TIM_STATE_READY)
 800980c:	313d      	adds	r1, #61	@ 0x3d
 800980e:	780c      	ldrb	r4, [r1, #0]
 8009810:	b2e2      	uxtb	r2, r4
 8009812:	4284      	cmp	r4, r0
 8009814:	d11c      	bne.n	8009850 <HAL_TIM_Base_Start_IT+0x4c>
  htim->State = HAL_TIM_STATE_BUSY;
 8009816:	1800      	adds	r0, r0, r0
 8009818:	7008      	strb	r0, [r1, #0]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	68d9      	ldr	r1, [r3, #12]
 800981e:	4311      	orrs	r1, r2
 8009820:	60d9      	str	r1, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009822:	490d      	ldr	r1, [pc, #52]	@ (8009858 <HAL_TIM_Base_Start_IT+0x54>)
 8009824:	428b      	cmp	r3, r1
 8009826:	d009      	beq.n	800983c <HAL_TIM_Base_Start_IT+0x38>
 8009828:	2180      	movs	r1, #128	@ 0x80
 800982a:	05c9      	lsls	r1, r1, #23
 800982c:	428b      	cmp	r3, r1
 800982e:	d005      	beq.n	800983c <HAL_TIM_Base_Start_IT+0x38>
 8009830:	490a      	ldr	r1, [pc, #40]	@ (800985c <HAL_TIM_Base_Start_IT+0x58>)
 8009832:	428b      	cmp	r3, r1
 8009834:	d002      	beq.n	800983c <HAL_TIM_Base_Start_IT+0x38>
 8009836:	490a      	ldr	r1, [pc, #40]	@ (8009860 <HAL_TIM_Base_Start_IT+0x5c>)
 8009838:	428b      	cmp	r3, r1
 800983a:	d10a      	bne.n	8009852 <HAL_TIM_Base_Start_IT+0x4e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800983c:	2107      	movs	r1, #7
 800983e:	689a      	ldr	r2, [r3, #8]
 8009840:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009842:	2a06      	cmp	r2, #6
 8009844:	d003      	beq.n	800984e <HAL_TIM_Base_Start_IT+0x4a>
      __HAL_TIM_ENABLE(htim);
 8009846:	2201      	movs	r2, #1
 8009848:	6819      	ldr	r1, [r3, #0]
 800984a:	430a      	orrs	r2, r1
 800984c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800984e:	2000      	movs	r0, #0
}
 8009850:	bd10      	pop	{r4, pc}
    __HAL_TIM_ENABLE(htim);
 8009852:	6819      	ldr	r1, [r3, #0]
 8009854:	e7f9      	b.n	800984a <HAL_TIM_Base_Start_IT+0x46>
 8009856:	46c0      	nop			@ (mov r8, r8)
 8009858:	40012c00 	.word	0x40012c00
 800985c:	40000400 	.word	0x40000400
 8009860:	40014000 	.word	0x40014000

08009864 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8009864:	4770      	bx	lr

08009866 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8009866:	4770      	bx	lr

08009868 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8009868:	4770      	bx	lr

0800986a <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800986a:	4770      	bx	lr

0800986c <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800986c:	4770      	bx	lr

0800986e <HAL_TIM_IRQHandler>:
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800986e:	2202      	movs	r2, #2
  uint32_t itsource = htim->Instance->DIER;
 8009870:	6803      	ldr	r3, [r0, #0]
{
 8009872:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8009874:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009876:	691e      	ldr	r6, [r3, #16]
{
 8009878:	0004      	movs	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800987a:	4216      	tst	r6, r2
 800987c:	d00d      	beq.n	800989a <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800987e:	4215      	tst	r5, r2
 8009880:	d00b      	beq.n	800989a <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009882:	3a05      	subs	r2, #5
 8009884:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009886:	3204      	adds	r2, #4
 8009888:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800988a:	699b      	ldr	r3, [r3, #24]
 800988c:	079b      	lsls	r3, r3, #30
 800988e:	d100      	bne.n	8009892 <HAL_TIM_IRQHandler+0x24>
 8009890:	e071      	b.n	8009976 <HAL_TIM_IRQHandler+0x108>
          HAL_TIM_IC_CaptureCallback(htim);
 8009892:	f7ff ffe9 	bl	8009868 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009896:	2300      	movs	r3, #0
 8009898:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800989a:	2304      	movs	r3, #4
 800989c:	421e      	tst	r6, r3
 800989e:	d011      	beq.n	80098c4 <HAL_TIM_IRQHandler+0x56>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80098a0:	421d      	tst	r5, r3
 80098a2:	d00f      	beq.n	80098c4 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80098a4:	2205      	movs	r2, #5
 80098a6:	6823      	ldr	r3, [r4, #0]
 80098a8:	4252      	negs	r2, r2
 80098aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80098ac:	3207      	adds	r2, #7
 80098ae:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80098b0:	699a      	ldr	r2, [r3, #24]
 80098b2:	23c0      	movs	r3, #192	@ 0xc0
 80098b4:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80098b6:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80098b8:	421a      	tst	r2, r3
 80098ba:	d062      	beq.n	8009982 <HAL_TIM_IRQHandler+0x114>
        HAL_TIM_IC_CaptureCallback(htim);
 80098bc:	f7ff ffd4 	bl	8009868 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098c0:	2300      	movs	r3, #0
 80098c2:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80098c4:	2308      	movs	r3, #8
 80098c6:	421e      	tst	r6, r3
 80098c8:	d00f      	beq.n	80098ea <HAL_TIM_IRQHandler+0x7c>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80098ca:	421d      	tst	r5, r3
 80098cc:	d00d      	beq.n	80098ea <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80098ce:	2209      	movs	r2, #9
 80098d0:	6823      	ldr	r3, [r4, #0]
 80098d2:	4252      	negs	r2, r2
 80098d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80098d6:	320d      	adds	r2, #13
 80098d8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80098da:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80098dc:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80098de:	079b      	lsls	r3, r3, #30
 80098e0:	d055      	beq.n	800998e <HAL_TIM_IRQHandler+0x120>
        HAL_TIM_IC_CaptureCallback(htim);
 80098e2:	f7ff ffc1 	bl	8009868 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098e6:	2300      	movs	r3, #0
 80098e8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80098ea:	2310      	movs	r3, #16
 80098ec:	421e      	tst	r6, r3
 80098ee:	d011      	beq.n	8009914 <HAL_TIM_IRQHandler+0xa6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80098f0:	421d      	tst	r5, r3
 80098f2:	d00f      	beq.n	8009914 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80098f4:	2211      	movs	r2, #17
 80098f6:	6823      	ldr	r3, [r4, #0]
 80098f8:	4252      	negs	r2, r2
 80098fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80098fc:	3219      	adds	r2, #25
 80098fe:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009900:	69da      	ldr	r2, [r3, #28]
 8009902:	23c0      	movs	r3, #192	@ 0xc0
 8009904:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8009906:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009908:	421a      	tst	r2, r3
 800990a:	d046      	beq.n	800999a <HAL_TIM_IRQHandler+0x12c>
        HAL_TIM_IC_CaptureCallback(htim);
 800990c:	f7ff ffac 	bl	8009868 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009910:	2300      	movs	r3, #0
 8009912:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009914:	2301      	movs	r3, #1
 8009916:	421e      	tst	r6, r3
 8009918:	d008      	beq.n	800992c <HAL_TIM_IRQHandler+0xbe>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800991a:	421d      	tst	r5, r3
 800991c:	d006      	beq.n	800992c <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800991e:	2202      	movs	r2, #2
 8009920:	6823      	ldr	r3, [r4, #0]
 8009922:	4252      	negs	r2, r2
      HAL_TIM_PeriodElapsedCallback(htim);
 8009924:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009926:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8009928:	f7f9 fdda 	bl	80034e0 <HAL_TIM_PeriodElapsedCallback>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800992c:	2380      	movs	r3, #128	@ 0x80
 800992e:	421e      	tst	r6, r3
 8009930:	d008      	beq.n	8009944 <HAL_TIM_IRQHandler+0xd6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009932:	421d      	tst	r5, r3
 8009934:	d006      	beq.n	8009944 <HAL_TIM_IRQHandler+0xd6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009936:	2281      	movs	r2, #129	@ 0x81
 8009938:	6823      	ldr	r3, [r4, #0]
 800993a:	4252      	negs	r2, r2
      HAL_TIMEx_BreakCallback(htim);
 800993c:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800993e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8009940:	f000 fb0f 	bl	8009f62 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009944:	2340      	movs	r3, #64	@ 0x40
 8009946:	421e      	tst	r6, r3
 8009948:	d008      	beq.n	800995c <HAL_TIM_IRQHandler+0xee>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800994a:	421d      	tst	r5, r3
 800994c:	d006      	beq.n	800995c <HAL_TIM_IRQHandler+0xee>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800994e:	2241      	movs	r2, #65	@ 0x41
 8009950:	6823      	ldr	r3, [r4, #0]
 8009952:	4252      	negs	r2, r2
      HAL_TIM_TriggerCallback(htim);
 8009954:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009956:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8009958:	f7ff ff88 	bl	800986c <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800995c:	2320      	movs	r3, #32
 800995e:	421e      	tst	r6, r3
 8009960:	d008      	beq.n	8009974 <HAL_TIM_IRQHandler+0x106>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009962:	421d      	tst	r5, r3
 8009964:	d006      	beq.n	8009974 <HAL_TIM_IRQHandler+0x106>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009966:	2221      	movs	r2, #33	@ 0x21
 8009968:	6823      	ldr	r3, [r4, #0]
 800996a:	4252      	negs	r2, r2
      HAL_TIMEx_CommutCallback(htim);
 800996c:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800996e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8009970:	f000 faf6 	bl	8009f60 <HAL_TIMEx_CommutCallback>
}
 8009974:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009976:	f7ff ff76 	bl	8009866 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800997a:	0020      	movs	r0, r4
 800997c:	f7ff ff75 	bl	800986a <HAL_TIM_PWM_PulseFinishedCallback>
 8009980:	e789      	b.n	8009896 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009982:	f7ff ff70 	bl	8009866 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009986:	0020      	movs	r0, r4
 8009988:	f7ff ff6f 	bl	800986a <HAL_TIM_PWM_PulseFinishedCallback>
 800998c:	e798      	b.n	80098c0 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800998e:	f7ff ff6a 	bl	8009866 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009992:	0020      	movs	r0, r4
 8009994:	f7ff ff69 	bl	800986a <HAL_TIM_PWM_PulseFinishedCallback>
 8009998:	e7a5      	b.n	80098e6 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800999a:	f7ff ff64 	bl	8009866 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800999e:	0020      	movs	r0, r4
 80099a0:	f7ff ff63 	bl	800986a <HAL_TIM_PWM_PulseFinishedCallback>
 80099a4:	e7b4      	b.n	8009910 <HAL_TIM_IRQHandler+0xa2>
	...

080099a8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80099a8:	4a23      	ldr	r2, [pc, #140]	@ (8009a38 <TIM_Base_SetConfig+0x90>)
{
 80099aa:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 80099ac:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80099ae:	4290      	cmp	r0, r2
 80099b0:	d006      	beq.n	80099c0 <TIM_Base_SetConfig+0x18>
 80099b2:	2480      	movs	r4, #128	@ 0x80
 80099b4:	05e4      	lsls	r4, r4, #23
 80099b6:	42a0      	cmp	r0, r4
 80099b8:	d002      	beq.n	80099c0 <TIM_Base_SetConfig+0x18>
 80099ba:	4c20      	ldr	r4, [pc, #128]	@ (8009a3c <TIM_Base_SetConfig+0x94>)
 80099bc:	42a0      	cmp	r0, r4
 80099be:	d10c      	bne.n	80099da <TIM_Base_SetConfig+0x32>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80099c0:	2470      	movs	r4, #112	@ 0x70
 80099c2:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 80099c4:	684c      	ldr	r4, [r1, #4]
 80099c6:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80099c8:	4290      	cmp	r0, r2
 80099ca:	d012      	beq.n	80099f2 <TIM_Base_SetConfig+0x4a>
 80099cc:	2480      	movs	r4, #128	@ 0x80
 80099ce:	05e4      	lsls	r4, r4, #23
 80099d0:	42a0      	cmp	r0, r4
 80099d2:	d00e      	beq.n	80099f2 <TIM_Base_SetConfig+0x4a>
 80099d4:	4c19      	ldr	r4, [pc, #100]	@ (8009a3c <TIM_Base_SetConfig+0x94>)
 80099d6:	42a0      	cmp	r0, r4
 80099d8:	d00b      	beq.n	80099f2 <TIM_Base_SetConfig+0x4a>
 80099da:	4c19      	ldr	r4, [pc, #100]	@ (8009a40 <TIM_Base_SetConfig+0x98>)
 80099dc:	42a0      	cmp	r0, r4
 80099de:	d008      	beq.n	80099f2 <TIM_Base_SetConfig+0x4a>
 80099e0:	4c18      	ldr	r4, [pc, #96]	@ (8009a44 <TIM_Base_SetConfig+0x9c>)
 80099e2:	42a0      	cmp	r0, r4
 80099e4:	d005      	beq.n	80099f2 <TIM_Base_SetConfig+0x4a>
 80099e6:	4c18      	ldr	r4, [pc, #96]	@ (8009a48 <TIM_Base_SetConfig+0xa0>)
 80099e8:	42a0      	cmp	r0, r4
 80099ea:	d002      	beq.n	80099f2 <TIM_Base_SetConfig+0x4a>
 80099ec:	4c17      	ldr	r4, [pc, #92]	@ (8009a4c <TIM_Base_SetConfig+0xa4>)
 80099ee:	42a0      	cmp	r0, r4
 80099f0:	d103      	bne.n	80099fa <TIM_Base_SetConfig+0x52>
    tmpcr1 &= ~TIM_CR1_CKD;
 80099f2:	4c17      	ldr	r4, [pc, #92]	@ (8009a50 <TIM_Base_SetConfig+0xa8>)
 80099f4:	401c      	ands	r4, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80099f6:	68cb      	ldr	r3, [r1, #12]
 80099f8:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80099fa:	2480      	movs	r4, #128	@ 0x80
 80099fc:	43a3      	bics	r3, r4
 80099fe:	694c      	ldr	r4, [r1, #20]
 8009a00:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8009a02:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a04:	688b      	ldr	r3, [r1, #8]
 8009a06:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009a08:	680b      	ldr	r3, [r1, #0]
 8009a0a:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a0c:	4290      	cmp	r0, r2
 8009a0e:	d008      	beq.n	8009a22 <TIM_Base_SetConfig+0x7a>
 8009a10:	4b0c      	ldr	r3, [pc, #48]	@ (8009a44 <TIM_Base_SetConfig+0x9c>)
 8009a12:	4298      	cmp	r0, r3
 8009a14:	d005      	beq.n	8009a22 <TIM_Base_SetConfig+0x7a>
 8009a16:	4b0c      	ldr	r3, [pc, #48]	@ (8009a48 <TIM_Base_SetConfig+0xa0>)
 8009a18:	4298      	cmp	r0, r3
 8009a1a:	d002      	beq.n	8009a22 <TIM_Base_SetConfig+0x7a>
 8009a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8009a4c <TIM_Base_SetConfig+0xa4>)
 8009a1e:	4298      	cmp	r0, r3
 8009a20:	d101      	bne.n	8009a26 <TIM_Base_SetConfig+0x7e>
    TIMx->RCR = Structure->RepetitionCounter;
 8009a22:	690b      	ldr	r3, [r1, #16]
 8009a24:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8009a26:	2201      	movs	r2, #1
 8009a28:	6142      	str	r2, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009a2a:	6903      	ldr	r3, [r0, #16]
 8009a2c:	4213      	tst	r3, r2
 8009a2e:	d002      	beq.n	8009a36 <TIM_Base_SetConfig+0x8e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009a30:	6903      	ldr	r3, [r0, #16]
 8009a32:	4393      	bics	r3, r2
 8009a34:	6103      	str	r3, [r0, #16]
}
 8009a36:	bd10      	pop	{r4, pc}
 8009a38:	40012c00 	.word	0x40012c00
 8009a3c:	40000400 	.word	0x40000400
 8009a40:	40002000 	.word	0x40002000
 8009a44:	40014000 	.word	0x40014000
 8009a48:	40014400 	.word	0x40014400
 8009a4c:	40014800 	.word	0x40014800
 8009a50:	fffffcff 	.word	0xfffffcff

08009a54 <HAL_TIM_Base_Init>:
{
 8009a54:	b570      	push	{r4, r5, r6, lr}
 8009a56:	0004      	movs	r4, r0
    return HAL_ERROR;
 8009a58:	2001      	movs	r0, #1
  if (htim == NULL)
 8009a5a:	2c00      	cmp	r4, #0
 8009a5c:	d021      	beq.n	8009aa2 <HAL_TIM_Base_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 8009a5e:	0025      	movs	r5, r4
 8009a60:	353d      	adds	r5, #61	@ 0x3d
 8009a62:	782b      	ldrb	r3, [r5, #0]
 8009a64:	b2da      	uxtb	r2, r3
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d105      	bne.n	8009a76 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8009a6a:	0023      	movs	r3, r4
 8009a6c:	333c      	adds	r3, #60	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8009a6e:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8009a70:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 8009a72:	f7fa f87b 	bl	8003b6c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8009a76:	2302      	movs	r3, #2
 8009a78:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a7a:	6820      	ldr	r0, [r4, #0]
 8009a7c:	1d21      	adds	r1, r4, #4
 8009a7e:	f7ff ff93 	bl	80099a8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a82:	0022      	movs	r2, r4
 8009a84:	2301      	movs	r3, #1
  return HAL_OK;
 8009a86:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a88:	3246      	adds	r2, #70	@ 0x46
 8009a8a:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a8c:	3445      	adds	r4, #69	@ 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a8e:	3a08      	subs	r2, #8
 8009a90:	7013      	strb	r3, [r2, #0]
 8009a92:	7053      	strb	r3, [r2, #1]
 8009a94:	7093      	strb	r3, [r2, #2]
 8009a96:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a98:	7113      	strb	r3, [r2, #4]
 8009a9a:	7153      	strb	r3, [r2, #5]
 8009a9c:	7193      	strb	r3, [r2, #6]
 8009a9e:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8009aa0:	702b      	strb	r3, [r5, #0]
}
 8009aa2:	bd70      	pop	{r4, r5, r6, pc}

08009aa4 <HAL_TIM_PWM_Init>:
{
 8009aa4:	b570      	push	{r4, r5, r6, lr}
 8009aa6:	0004      	movs	r4, r0
    return HAL_ERROR;
 8009aa8:	2001      	movs	r0, #1
  if (htim == NULL)
 8009aaa:	2c00      	cmp	r4, #0
 8009aac:	d021      	beq.n	8009af2 <HAL_TIM_PWM_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 8009aae:	0025      	movs	r5, r4
 8009ab0:	353d      	adds	r5, #61	@ 0x3d
 8009ab2:	782b      	ldrb	r3, [r5, #0]
 8009ab4:	b2da      	uxtb	r2, r3
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d105      	bne.n	8009ac6 <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8009aba:	0023      	movs	r3, r4
 8009abc:	333c      	adds	r3, #60	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8009abe:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8009ac0:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_MspInit(htim);
 8009ac2:	f7ff fecf 	bl	8009864 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8009ac6:	2302      	movs	r3, #2
 8009ac8:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009aca:	6820      	ldr	r0, [r4, #0]
 8009acc:	1d21      	adds	r1, r4, #4
 8009ace:	f7ff ff6b 	bl	80099a8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ad2:	0022      	movs	r2, r4
 8009ad4:	2301      	movs	r3, #1
  return HAL_OK;
 8009ad6:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ad8:	3246      	adds	r2, #70	@ 0x46
 8009ada:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009adc:	3445      	adds	r4, #69	@ 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ade:	3a08      	subs	r2, #8
 8009ae0:	7013      	strb	r3, [r2, #0]
 8009ae2:	7053      	strb	r3, [r2, #1]
 8009ae4:	7093      	strb	r3, [r2, #2]
 8009ae6:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ae8:	7113      	strb	r3, [r2, #4]
 8009aea:	7153      	strb	r3, [r2, #5]
 8009aec:	7193      	strb	r3, [r2, #6]
 8009aee:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8009af0:	702b      	strb	r3, [r5, #0]
}
 8009af2:	bd70      	pop	{r4, r5, r6, pc}

08009af4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009af4:	2210      	movs	r2, #16
{
 8009af6:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
 8009af8:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009afa:	6a03      	ldr	r3, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009afc:	4c17      	ldr	r4, [pc, #92]	@ (8009b5c <TIM_OC2_SetConfig+0x68>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009afe:	4393      	bics	r3, r2
 8009b00:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8009b02:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8009b04:	6983      	ldr	r3, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009b06:	4023      	ands	r3, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b08:	680c      	ldr	r4, [r1, #0]
 8009b0a:	0224      	lsls	r4, r4, #8
 8009b0c:	431c      	orrs	r4, r3
  tmpccer &= ~TIM_CCER_CC2P;
 8009b0e:	2320      	movs	r3, #32
 8009b10:	439d      	bics	r5, r3
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009b12:	688b      	ldr	r3, [r1, #8]
 8009b14:	011b      	lsls	r3, r3, #4
 8009b16:	432b      	orrs	r3, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009b18:	4d11      	ldr	r5, [pc, #68]	@ (8009b60 <TIM_OC2_SetConfig+0x6c>)
 8009b1a:	42a8      	cmp	r0, r5
 8009b1c:	d10f      	bne.n	8009b3e <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 8009b1e:	2580      	movs	r5, #128	@ 0x80
 8009b20:	43ab      	bics	r3, r5
 8009b22:	001e      	movs	r6, r3
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009b24:	68cb      	ldr	r3, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NE;
 8009b26:	3d40      	subs	r5, #64	@ 0x40
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009b28:	011b      	lsls	r3, r3, #4
 8009b2a:	4333      	orrs	r3, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8009b2c:	43ab      	bics	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009b2e:	4d0d      	ldr	r5, [pc, #52]	@ (8009b64 <TIM_OC2_SetConfig+0x70>)
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009b30:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009b32:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009b34:	698a      	ldr	r2, [r1, #24]
 8009b36:	4332      	orrs	r2, r6
 8009b38:	0092      	lsls	r2, r2, #2
 8009b3a:	432a      	orrs	r2, r5
 8009b3c:	e008      	b.n	8009b50 <TIM_OC2_SetConfig+0x5c>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b3e:	4d0a      	ldr	r5, [pc, #40]	@ (8009b68 <TIM_OC2_SetConfig+0x74>)
 8009b40:	42a8      	cmp	r0, r5
 8009b42:	d0f4      	beq.n	8009b2e <TIM_OC2_SetConfig+0x3a>
 8009b44:	4d09      	ldr	r5, [pc, #36]	@ (8009b6c <TIM_OC2_SetConfig+0x78>)
 8009b46:	42a8      	cmp	r0, r5
 8009b48:	d0f1      	beq.n	8009b2e <TIM_OC2_SetConfig+0x3a>
 8009b4a:	4d09      	ldr	r5, [pc, #36]	@ (8009b70 <TIM_OC2_SetConfig+0x7c>)
 8009b4c:	42a8      	cmp	r0, r5
 8009b4e:	d0ee      	beq.n	8009b2e <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 8009b50:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8009b52:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8009b54:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8009b56:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8009b58:	6203      	str	r3, [r0, #32]
}
 8009b5a:	bd70      	pop	{r4, r5, r6, pc}
 8009b5c:	ffff8cff 	.word	0xffff8cff
 8009b60:	40012c00 	.word	0x40012c00
 8009b64:	fffff3ff 	.word	0xfffff3ff
 8009b68:	40014000 	.word	0x40014000
 8009b6c:	40014400 	.word	0x40014400
 8009b70:	40014800 	.word	0x40014800

08009b74 <HAL_TIM_PWM_ConfigChannel>:
{
 8009b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8009b76:	0006      	movs	r6, r0
 8009b78:	363c      	adds	r6, #60	@ 0x3c
{
 8009b7a:	0015      	movs	r5, r2
  __HAL_LOCK(htim);
 8009b7c:	7832      	ldrb	r2, [r6, #0]
{
 8009b7e:	0003      	movs	r3, r0
 8009b80:	000c      	movs	r4, r1
  __HAL_LOCK(htim);
 8009b82:	2002      	movs	r0, #2
 8009b84:	2a01      	cmp	r2, #1
 8009b86:	d00a      	beq.n	8009b9e <HAL_TIM_PWM_ConfigChannel+0x2a>
 8009b88:	3801      	subs	r0, #1
 8009b8a:	7030      	strb	r0, [r6, #0]
  switch (Channel)
 8009b8c:	2d08      	cmp	r5, #8
 8009b8e:	d03f      	beq.n	8009c10 <HAL_TIM_PWM_ConfigChannel+0x9c>
 8009b90:	d806      	bhi.n	8009ba0 <HAL_TIM_PWM_ConfigChannel+0x2c>
 8009b92:	2d00      	cmp	r5, #0
 8009b94:	d019      	beq.n	8009bca <HAL_TIM_PWM_ConfigChannel+0x56>
 8009b96:	2d04      	cmp	r5, #4
 8009b98:	d029      	beq.n	8009bee <HAL_TIM_PWM_ConfigChannel+0x7a>
  __HAL_UNLOCK(htim);
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	7033      	strb	r3, [r6, #0]
}
 8009b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 8009ba0:	2d0c      	cmp	r5, #12
 8009ba2:	d1fa      	bne.n	8009b9a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009ba4:	681d      	ldr	r5, [r3, #0]
 8009ba6:	0028      	movs	r0, r5
 8009ba8:	f7ff fdf2 	bl	8009790 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009bac:	2380      	movs	r3, #128	@ 0x80
 8009bae:	69ea      	ldr	r2, [r5, #28]
 8009bb0:	011b      	lsls	r3, r3, #4
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	61eb      	str	r3, [r5, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009bb6:	69eb      	ldr	r3, [r5, #28]
 8009bb8:	4a1d      	ldr	r2, [pc, #116]	@ (8009c30 <HAL_TIM_PWM_ConfigChannel+0xbc>)
 8009bba:	4013      	ands	r3, r2
 8009bbc:	61eb      	str	r3, [r5, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009bbe:	6923      	ldr	r3, [r4, #16]
 8009bc0:	69ea      	ldr	r2, [r5, #28]
 8009bc2:	021b      	lsls	r3, r3, #8
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	61eb      	str	r3, [r5, #28]
      break;
 8009bc8:	e00f      	b.n	8009bea <HAL_TIM_PWM_ConfigChannel+0x76>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009bca:	681d      	ldr	r5, [r3, #0]
 8009bcc:	0028      	movs	r0, r5
 8009bce:	f7ff fd57 	bl	8009680 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009bd2:	2308      	movs	r3, #8
 8009bd4:	69aa      	ldr	r2, [r5, #24]
 8009bd6:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009bd8:	2204      	movs	r2, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009bda:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009bdc:	69ab      	ldr	r3, [r5, #24]
 8009bde:	4393      	bics	r3, r2
 8009be0:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009be2:	69ab      	ldr	r3, [r5, #24]
 8009be4:	6922      	ldr	r2, [r4, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009be6:	4313      	orrs	r3, r2
 8009be8:	61ab      	str	r3, [r5, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8009bea:	2000      	movs	r0, #0
 8009bec:	e7d5      	b.n	8009b9a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009bee:	681d      	ldr	r5, [r3, #0]
 8009bf0:	0028      	movs	r0, r5
 8009bf2:	f7ff ff7f 	bl	8009af4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009bf6:	2380      	movs	r3, #128	@ 0x80
 8009bf8:	69aa      	ldr	r2, [r5, #24]
 8009bfa:	011b      	lsls	r3, r3, #4
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009c00:	69ab      	ldr	r3, [r5, #24]
 8009c02:	4a0b      	ldr	r2, [pc, #44]	@ (8009c30 <HAL_TIM_PWM_ConfigChannel+0xbc>)
 8009c04:	4013      	ands	r3, r2
 8009c06:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009c08:	6923      	ldr	r3, [r4, #16]
 8009c0a:	69aa      	ldr	r2, [r5, #24]
 8009c0c:	021b      	lsls	r3, r3, #8
 8009c0e:	e7ea      	b.n	8009be6 <HAL_TIM_PWM_ConfigChannel+0x72>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009c10:	681f      	ldr	r7, [r3, #0]
 8009c12:	0038      	movs	r0, r7
 8009c14:	f7ff fd78 	bl	8009708 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009c18:	2204      	movs	r2, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009c1a:	69fb      	ldr	r3, [r7, #28]
 8009c1c:	431d      	orrs	r5, r3
 8009c1e:	61fd      	str	r5, [r7, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009c20:	69fb      	ldr	r3, [r7, #28]
 8009c22:	4393      	bics	r3, r2
 8009c24:	61fb      	str	r3, [r7, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009c26:	69fb      	ldr	r3, [r7, #28]
 8009c28:	6922      	ldr	r2, [r4, #16]
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	61fb      	str	r3, [r7, #28]
      break;
 8009c2e:	e7dc      	b.n	8009bea <HAL_TIM_PWM_ConfigChannel+0x76>
 8009c30:	fffffbff 	.word	0xfffffbff

08009c34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009c34:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009c36:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c38:	4d03      	ldr	r5, [pc, #12]	@ (8009c48 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009c3a:	430a      	orrs	r2, r1
 8009c3c:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c3e:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009c40:	4313      	orrs	r3, r2
 8009c42:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c44:	6083      	str	r3, [r0, #8]
}
 8009c46:	bd30      	pop	{r4, r5, pc}
 8009c48:	ffff00ff 	.word	0xffff00ff

08009c4c <HAL_TIM_ConfigClockSource>:
{
 8009c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8009c4e:	0005      	movs	r5, r0
 8009c50:	2202      	movs	r2, #2
 8009c52:	353c      	adds	r5, #60	@ 0x3c
 8009c54:	782c      	ldrb	r4, [r5, #0]
{
 8009c56:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8009c58:	0010      	movs	r0, r2
 8009c5a:	2c01      	cmp	r4, #1
 8009c5c:	d01b      	beq.n	8009c96 <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8009c5e:	001e      	movs	r6, r3
  __HAL_LOCK(htim);
 8009c60:	3801      	subs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8009c62:	363d      	adds	r6, #61	@ 0x3d
  __HAL_LOCK(htim);
 8009c64:	7028      	strb	r0, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8009c66:	7032      	strb	r2, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8009c68:	681c      	ldr	r4, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c6a:	4a41      	ldr	r2, [pc, #260]	@ (8009d70 <HAL_TIM_ConfigClockSource+0x124>)
  tmpsmcr = htim->Instance->SMCR;
 8009c6c:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c6e:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8009c70:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8009c72:	680b      	ldr	r3, [r1, #0]
 8009c74:	2b60      	cmp	r3, #96	@ 0x60
 8009c76:	d04e      	beq.n	8009d16 <HAL_TIM_ConfigClockSource+0xca>
 8009c78:	d82d      	bhi.n	8009cd6 <HAL_TIM_ConfigClockSource+0x8a>
 8009c7a:	2b40      	cmp	r3, #64	@ 0x40
 8009c7c:	d062      	beq.n	8009d44 <HAL_TIM_ConfigClockSource+0xf8>
 8009c7e:	d813      	bhi.n	8009ca8 <HAL_TIM_ConfigClockSource+0x5c>
 8009c80:	2b20      	cmp	r3, #32
 8009c82:	d00b      	beq.n	8009c9c <HAL_TIM_ConfigClockSource+0x50>
 8009c84:	d808      	bhi.n	8009c98 <HAL_TIM_ConfigClockSource+0x4c>
 8009c86:	2210      	movs	r2, #16
 8009c88:	0019      	movs	r1, r3
 8009c8a:	4391      	bics	r1, r2
 8009c8c:	d006      	beq.n	8009c9c <HAL_TIM_ConfigClockSource+0x50>
  htim->State = HAL_TIM_STATE_READY;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8009c92:	2300      	movs	r3, #0
 8009c94:	702b      	strb	r3, [r5, #0]
}
 8009c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8009c98:	2b30      	cmp	r3, #48	@ 0x30
 8009c9a:	d1f8      	bne.n	8009c8e <HAL_TIM_ConfigClockSource+0x42>
  tmpsmcr &= ~TIM_SMCR_TS;
 8009c9c:	2170      	movs	r1, #112	@ 0x70
  tmpsmcr = TIMx->SMCR;
 8009c9e:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8009ca0:	438a      	bics	r2, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	2207      	movs	r2, #7
 8009ca6:	e028      	b.n	8009cfa <HAL_TIM_ConfigClockSource+0xae>
  switch (sClockSourceConfig->ClockSource)
 8009ca8:	2b50      	cmp	r3, #80	@ 0x50
 8009caa:	d1f0      	bne.n	8009c8e <HAL_TIM_ConfigClockSource+0x42>
                               sClockSourceConfig->ClockPolarity,
 8009cac:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8009cae:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8009cb0:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009cb2:	6a27      	ldr	r7, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009cb4:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009cb6:	4387      	bics	r7, r0
 8009cb8:	6227      	str	r7, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009cba:	27f0      	movs	r7, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8009cbc:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009cbe:	43b8      	bics	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009cc0:	4303      	orrs	r3, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009cc2:	200a      	movs	r0, #10
  TIMx->CCMR1 = tmpccmr1;
 8009cc4:	61a3      	str	r3, [r4, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8009cc6:	2370      	movs	r3, #112	@ 0x70
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009cc8:	4381      	bics	r1, r0
  tmpccer |= TIM_ICPolarity;
 8009cca:	430a      	orrs	r2, r1
  TIMx->CCER = tmpccer;
 8009ccc:	6222      	str	r2, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8009cce:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8009cd0:	439a      	bics	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009cd2:	3b19      	subs	r3, #25
 8009cd4:	e011      	b.n	8009cfa <HAL_TIM_ConfigClockSource+0xae>
  switch (sClockSourceConfig->ClockSource)
 8009cd6:	2280      	movs	r2, #128	@ 0x80
 8009cd8:	0152      	lsls	r2, r2, #5
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d00f      	beq.n	8009cfe <HAL_TIM_ConfigClockSource+0xb2>
 8009cde:	2280      	movs	r2, #128	@ 0x80
 8009ce0:	0192      	lsls	r2, r2, #6
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d00d      	beq.n	8009d02 <HAL_TIM_ConfigClockSource+0xb6>
 8009ce6:	2b70      	cmp	r3, #112	@ 0x70
 8009ce8:	d1d1      	bne.n	8009c8e <HAL_TIM_ConfigClockSource+0x42>
      TIM_ETR_SetConfig(htim->Instance,
 8009cea:	68cb      	ldr	r3, [r1, #12]
 8009cec:	684a      	ldr	r2, [r1, #4]
 8009cee:	0020      	movs	r0, r4
 8009cf0:	6889      	ldr	r1, [r1, #8]
 8009cf2:	f7ff ff9f 	bl	8009c34 <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009cf6:	2377      	movs	r3, #119	@ 0x77
      tmpsmcr = htim->Instance->SMCR;
 8009cf8:	68a2      	ldr	r2, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009cfa:	4313      	orrs	r3, r2
      htim->Instance->SMCR = tmpsmcr;
 8009cfc:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009cfe:	2000      	movs	r0, #0
 8009d00:	e7c5      	b.n	8009c8e <HAL_TIM_ConfigClockSource+0x42>
      TIM_ETR_SetConfig(htim->Instance,
 8009d02:	68cb      	ldr	r3, [r1, #12]
 8009d04:	684a      	ldr	r2, [r1, #4]
 8009d06:	0020      	movs	r0, r4
 8009d08:	6889      	ldr	r1, [r1, #8]
 8009d0a:	f7ff ff93 	bl	8009c34 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009d0e:	2380      	movs	r3, #128	@ 0x80
 8009d10:	68a2      	ldr	r2, [r4, #8]
 8009d12:	01db      	lsls	r3, r3, #7
 8009d14:	e7f1      	b.n	8009cfa <HAL_TIM_ConfigClockSource+0xae>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d16:	2710      	movs	r7, #16
                               sClockSourceConfig->ClockPolarity,
 8009d18:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8009d1a:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8009d1c:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d1e:	6a20      	ldr	r0, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009d20:	0312      	lsls	r2, r2, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d22:	43b8      	bics	r0, r7
 8009d24:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d26:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d28:	4f12      	ldr	r7, [pc, #72]	@ (8009d74 <HAL_TIM_ConfigClockSource+0x128>)
  tmpccer |= (TIM_ICPolarity << 4U);
 8009d2a:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d2c:	4038      	ands	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009d2e:	4302      	orrs	r2, r0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d30:	20a0      	movs	r0, #160	@ 0xa0
 8009d32:	4381      	bics	r1, r0
  tmpccer |= (TIM_ICPolarity << 4U);
 8009d34:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 8009d36:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 8009d38:	6223      	str	r3, [r4, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d3a:	2370      	movs	r3, #112	@ 0x70
  tmpsmcr = TIMx->SMCR;
 8009d3c:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d3e:	439a      	bics	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009d40:	3b09      	subs	r3, #9
 8009d42:	e7da      	b.n	8009cfa <HAL_TIM_ConfigClockSource+0xae>
                               sClockSourceConfig->ClockPolarity,
 8009d44:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8009d46:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8009d48:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d4a:	6a27      	ldr	r7, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009d4c:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d4e:	4387      	bics	r7, r0
 8009d50:	6227      	str	r7, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d52:	27f0      	movs	r7, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8009d54:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d56:	43b8      	bics	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009d58:	4303      	orrs	r3, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009d5a:	200a      	movs	r0, #10
  TIMx->CCMR1 = tmpccmr1;
 8009d5c:	61a3      	str	r3, [r4, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d5e:	2370      	movs	r3, #112	@ 0x70
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009d60:	4381      	bics	r1, r0
  tmpccer |= TIM_ICPolarity;
 8009d62:	430a      	orrs	r2, r1
  TIMx->CCER = tmpccer;
 8009d64:	6222      	str	r2, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8009d66:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d68:	439a      	bics	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009d6a:	3b29      	subs	r3, #41	@ 0x29
 8009d6c:	e7c5      	b.n	8009cfa <HAL_TIM_ConfigClockSource+0xae>
 8009d6e:	46c0      	nop			@ (mov r8, r8)
 8009d70:	ffff0088 	.word	0xffff0088
 8009d74:	ffff0fff 	.word	0xffff0fff

08009d78 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009d78:	231f      	movs	r3, #31
{
 8009d7a:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009d7c:	2401      	movs	r4, #1
 8009d7e:	4019      	ands	r1, r3
 8009d80:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009d82:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8009d84:	6a03      	ldr	r3, [r0, #32]
 8009d86:	43a3      	bics	r3, r4
 8009d88:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009d8a:	6a03      	ldr	r3, [r0, #32]
 8009d8c:	431a      	orrs	r2, r3
 8009d8e:	6202      	str	r2, [r0, #32]
}
 8009d90:	bd10      	pop	{r4, pc}
	...

08009d94 <HAL_TIM_OC_Start>:
{
 8009d94:	0002      	movs	r2, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009d96:	0003      	movs	r3, r0
{
 8009d98:	b510      	push	{r4, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009d9a:	2900      	cmp	r1, #0
 8009d9c:	d109      	bne.n	8009db2 <HAL_TIM_OC_Start+0x1e>
 8009d9e:	333e      	adds	r3, #62	@ 0x3e
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	3b01      	subs	r3, #1
 8009da4:	1e58      	subs	r0, r3, #1
 8009da6:	4183      	sbcs	r3, r0
 8009da8:	b2db      	uxtb	r3, r3
    return HAL_ERROR;
 8009daa:	2001      	movs	r0, #1
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d00a      	beq.n	8009dc6 <HAL_TIM_OC_Start+0x32>
}
 8009db0:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009db2:	2904      	cmp	r1, #4
 8009db4:	d101      	bne.n	8009dba <HAL_TIM_OC_Start+0x26>
 8009db6:	333f      	adds	r3, #63	@ 0x3f
 8009db8:	e7f2      	b.n	8009da0 <HAL_TIM_OC_Start+0xc>
 8009dba:	2908      	cmp	r1, #8
 8009dbc:	d101      	bne.n	8009dc2 <HAL_TIM_OC_Start+0x2e>
 8009dbe:	3340      	adds	r3, #64	@ 0x40
 8009dc0:	e7ee      	b.n	8009da0 <HAL_TIM_OC_Start+0xc>
 8009dc2:	3341      	adds	r3, #65	@ 0x41
 8009dc4:	e7ec      	b.n	8009da0 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009dc6:	2302      	movs	r3, #2
 8009dc8:	0010      	movs	r0, r2
 8009dca:	2900      	cmp	r1, #0
 8009dcc:	d11d      	bne.n	8009e0a <HAL_TIM_OC_Start+0x76>
 8009dce:	303e      	adds	r0, #62	@ 0x3e
 8009dd0:	7003      	strb	r3, [r0, #0]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009dd2:	6814      	ldr	r4, [r2, #0]
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	0020      	movs	r0, r4
 8009dd8:	f7ff ffce 	bl	8009d78 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009ddc:	4a19      	ldr	r2, [pc, #100]	@ (8009e44 <HAL_TIM_OC_Start+0xb0>)
 8009dde:	4294      	cmp	r4, r2
 8009de0:	d01d      	beq.n	8009e1e <HAL_TIM_OC_Start+0x8a>
 8009de2:	4b19      	ldr	r3, [pc, #100]	@ (8009e48 <HAL_TIM_OC_Start+0xb4>)
 8009de4:	429c      	cmp	r4, r3
 8009de6:	d01a      	beq.n	8009e1e <HAL_TIM_OC_Start+0x8a>
 8009de8:	4b18      	ldr	r3, [pc, #96]	@ (8009e4c <HAL_TIM_OC_Start+0xb8>)
 8009dea:	429c      	cmp	r4, r3
 8009dec:	d017      	beq.n	8009e1e <HAL_TIM_OC_Start+0x8a>
 8009dee:	4b18      	ldr	r3, [pc, #96]	@ (8009e50 <HAL_TIM_OC_Start+0xbc>)
 8009df0:	429c      	cmp	r4, r3
 8009df2:	d014      	beq.n	8009e1e <HAL_TIM_OC_Start+0x8a>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009df4:	2380      	movs	r3, #128	@ 0x80
 8009df6:	05db      	lsls	r3, r3, #23
 8009df8:	429c      	cmp	r4, r3
 8009dfa:	d118      	bne.n	8009e2e <HAL_TIM_OC_Start+0x9a>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009dfc:	2207      	movs	r2, #7
 8009dfe:	68a3      	ldr	r3, [r4, #8]
 8009e00:	4013      	ands	r3, r2
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e02:	2b06      	cmp	r3, #6
 8009e04:	d119      	bne.n	8009e3a <HAL_TIM_OC_Start+0xa6>
  return HAL_OK;
 8009e06:	2000      	movs	r0, #0
 8009e08:	e7d2      	b.n	8009db0 <HAL_TIM_OC_Start+0x1c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e0a:	2904      	cmp	r1, #4
 8009e0c:	d101      	bne.n	8009e12 <HAL_TIM_OC_Start+0x7e>
 8009e0e:	303f      	adds	r0, #63	@ 0x3f
 8009e10:	e7de      	b.n	8009dd0 <HAL_TIM_OC_Start+0x3c>
 8009e12:	2908      	cmp	r1, #8
 8009e14:	d101      	bne.n	8009e1a <HAL_TIM_OC_Start+0x86>
 8009e16:	3040      	adds	r0, #64	@ 0x40
 8009e18:	e7da      	b.n	8009dd0 <HAL_TIM_OC_Start+0x3c>
 8009e1a:	3041      	adds	r0, #65	@ 0x41
 8009e1c:	e7d8      	b.n	8009dd0 <HAL_TIM_OC_Start+0x3c>
    __HAL_TIM_MOE_ENABLE(htim);
 8009e1e:	2380      	movs	r3, #128	@ 0x80
 8009e20:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009e22:	021b      	lsls	r3, r3, #8
 8009e24:	430b      	orrs	r3, r1
 8009e26:	6463      	str	r3, [r4, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e28:	4294      	cmp	r4, r2
 8009e2a:	d1e3      	bne.n	8009df4 <HAL_TIM_OC_Start+0x60>
 8009e2c:	e7e6      	b.n	8009dfc <HAL_TIM_OC_Start+0x68>
 8009e2e:	4b09      	ldr	r3, [pc, #36]	@ (8009e54 <HAL_TIM_OC_Start+0xc0>)
 8009e30:	429c      	cmp	r4, r3
 8009e32:	d0e3      	beq.n	8009dfc <HAL_TIM_OC_Start+0x68>
 8009e34:	4b04      	ldr	r3, [pc, #16]	@ (8009e48 <HAL_TIM_OC_Start+0xb4>)
 8009e36:	429c      	cmp	r4, r3
 8009e38:	d0e0      	beq.n	8009dfc <HAL_TIM_OC_Start+0x68>
      __HAL_TIM_ENABLE(htim);
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	6822      	ldr	r2, [r4, #0]
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	6023      	str	r3, [r4, #0]
 8009e42:	e7e0      	b.n	8009e06 <HAL_TIM_OC_Start+0x72>
 8009e44:	40012c00 	.word	0x40012c00
 8009e48:	40014000 	.word	0x40014000
 8009e4c:	40014400 	.word	0x40014400
 8009e50:	40014800 	.word	0x40014800
 8009e54:	40000400 	.word	0x40000400

08009e58 <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 8009e58:	b510      	push	{r4, lr}
 8009e5a:	f7ff ff9b 	bl	8009d94 <HAL_TIM_OC_Start>
 8009e5e:	bd10      	pop	{r4, pc}

08009e60 <HAL_TIM_OC_Stop>:
{
 8009e60:	b570      	push	{r4, r5, r6, lr}
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009e62:	6805      	ldr	r5, [r0, #0]
 8009e64:	2200      	movs	r2, #0
{
 8009e66:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009e68:	0028      	movs	r0, r5
{
 8009e6a:	000e      	movs	r6, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009e6c:	f7ff ff84 	bl	8009d78 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009e70:	4b19      	ldr	r3, [pc, #100]	@ (8009ed8 <HAL_TIM_OC_Stop+0x78>)
 8009e72:	4a1a      	ldr	r2, [pc, #104]	@ (8009edc <HAL_TIM_OC_Stop+0x7c>)
 8009e74:	429d      	cmp	r5, r3
 8009e76:	d008      	beq.n	8009e8a <HAL_TIM_OC_Stop+0x2a>
 8009e78:	4b19      	ldr	r3, [pc, #100]	@ (8009ee0 <HAL_TIM_OC_Stop+0x80>)
 8009e7a:	429d      	cmp	r5, r3
 8009e7c:	d005      	beq.n	8009e8a <HAL_TIM_OC_Stop+0x2a>
 8009e7e:	4b19      	ldr	r3, [pc, #100]	@ (8009ee4 <HAL_TIM_OC_Stop+0x84>)
 8009e80:	429d      	cmp	r5, r3
 8009e82:	d002      	beq.n	8009e8a <HAL_TIM_OC_Stop+0x2a>
 8009e84:	4b18      	ldr	r3, [pc, #96]	@ (8009ee8 <HAL_TIM_OC_Stop+0x88>)
 8009e86:	429d      	cmp	r5, r3
 8009e88:	d10a      	bne.n	8009ea0 <HAL_TIM_OC_Stop+0x40>
    __HAL_TIM_MOE_DISABLE(htim);
 8009e8a:	6a2b      	ldr	r3, [r5, #32]
 8009e8c:	4213      	tst	r3, r2
 8009e8e:	d107      	bne.n	8009ea0 <HAL_TIM_OC_Stop+0x40>
 8009e90:	6a29      	ldr	r1, [r5, #32]
 8009e92:	4b16      	ldr	r3, [pc, #88]	@ (8009eec <HAL_TIM_OC_Stop+0x8c>)
 8009e94:	4219      	tst	r1, r3
 8009e96:	d103      	bne.n	8009ea0 <HAL_TIM_OC_Stop+0x40>
 8009e98:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8009e9a:	4915      	ldr	r1, [pc, #84]	@ (8009ef0 <HAL_TIM_OC_Stop+0x90>)
 8009e9c:	400b      	ands	r3, r1
 8009e9e:	646b      	str	r3, [r5, #68]	@ 0x44
  __HAL_TIM_DISABLE(htim);
 8009ea0:	6a2b      	ldr	r3, [r5, #32]
 8009ea2:	4213      	tst	r3, r2
 8009ea4:	d107      	bne.n	8009eb6 <HAL_TIM_OC_Stop+0x56>
 8009ea6:	6a2a      	ldr	r2, [r5, #32]
 8009ea8:	4b10      	ldr	r3, [pc, #64]	@ (8009eec <HAL_TIM_OC_Stop+0x8c>)
 8009eaa:	421a      	tst	r2, r3
 8009eac:	d103      	bne.n	8009eb6 <HAL_TIM_OC_Stop+0x56>
 8009eae:	2201      	movs	r2, #1
 8009eb0:	682b      	ldr	r3, [r5, #0]
 8009eb2:	4393      	bics	r3, r2
 8009eb4:	602b      	str	r3, [r5, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	2e00      	cmp	r6, #0
 8009eba:	d103      	bne.n	8009ec4 <HAL_TIM_OC_Stop+0x64>
 8009ebc:	343e      	adds	r4, #62	@ 0x3e
}
 8009ebe:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009ec0:	7023      	strb	r3, [r4, #0]
}
 8009ec2:	bd70      	pop	{r4, r5, r6, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009ec4:	2e04      	cmp	r6, #4
 8009ec6:	d101      	bne.n	8009ecc <HAL_TIM_OC_Stop+0x6c>
 8009ec8:	343f      	adds	r4, #63	@ 0x3f
 8009eca:	e7f8      	b.n	8009ebe <HAL_TIM_OC_Stop+0x5e>
 8009ecc:	2e08      	cmp	r6, #8
 8009ece:	d101      	bne.n	8009ed4 <HAL_TIM_OC_Stop+0x74>
 8009ed0:	3440      	adds	r4, #64	@ 0x40
 8009ed2:	e7f4      	b.n	8009ebe <HAL_TIM_OC_Stop+0x5e>
 8009ed4:	3441      	adds	r4, #65	@ 0x41
 8009ed6:	e7f2      	b.n	8009ebe <HAL_TIM_OC_Stop+0x5e>
 8009ed8:	40012c00 	.word	0x40012c00
 8009edc:	00001111 	.word	0x00001111
 8009ee0:	40014000 	.word	0x40014000
 8009ee4:	40014400 	.word	0x40014400
 8009ee8:	40014800 	.word	0x40014800
 8009eec:	00000444 	.word	0x00000444
 8009ef0:	ffff7fff 	.word	0xffff7fff

08009ef4 <HAL_TIM_PWM_Stop>:
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
 8009ef4:	b510      	push	{r4, lr}
 8009ef6:	f7ff ffb3 	bl	8009e60 <HAL_TIM_OC_Stop>
 8009efa:	bd10      	pop	{r4, pc}

08009efc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009efc:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009efe:	0004      	movs	r4, r0
 8009f00:	2202      	movs	r2, #2
 8009f02:	343c      	adds	r4, #60	@ 0x3c
 8009f04:	7825      	ldrb	r5, [r4, #0]
{
 8009f06:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8009f08:	0010      	movs	r0, r2
 8009f0a:	2d01      	cmp	r5, #1
 8009f0c:	d020      	beq.n	8009f50 <HAL_TIMEx_MasterConfigSynchronization+0x54>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f0e:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f10:	2670      	movs	r6, #112	@ 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8009f12:	353d      	adds	r5, #61	@ 0x3d
 8009f14:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8009f1a:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f1c:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f1e:	680e      	ldr	r6, [r1, #0]
 8009f20:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f22:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f24:	480b      	ldr	r0, [pc, #44]	@ (8009f54 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8009f26:	4283      	cmp	r3, r0
 8009f28:	d009      	beq.n	8009f3e <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8009f2a:	2080      	movs	r0, #128	@ 0x80
 8009f2c:	05c0      	lsls	r0, r0, #23
 8009f2e:	4283      	cmp	r3, r0
 8009f30:	d005      	beq.n	8009f3e <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8009f32:	4809      	ldr	r0, [pc, #36]	@ (8009f58 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
 8009f34:	4283      	cmp	r3, r0
 8009f36:	d002      	beq.n	8009f3e <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8009f38:	4808      	ldr	r0, [pc, #32]	@ (8009f5c <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8009f3a:	4283      	cmp	r3, r0
 8009f3c:	d104      	bne.n	8009f48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009f3e:	2080      	movs	r0, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f40:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009f42:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f44:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f48:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8009f4a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8009f4c:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8009f4e:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8009f50:	bd70      	pop	{r4, r5, r6, pc}
 8009f52:	46c0      	nop			@ (mov r8, r8)
 8009f54:	40012c00 	.word	0x40012c00
 8009f58:	40000400 	.word	0x40000400
 8009f5c:	40014000 	.word	0x40014000

08009f60 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8009f60:	4770      	bx	lr

08009f62 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8009f62:	4770      	bx	lr

08009f64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009f64:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f66:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f70:	6801      	ldr	r1, [r0, #0]
 8009f72:	4d12      	ldr	r5, [pc, #72]	@ (8009fbc <UART_EndRxTransfer+0x58>)
 8009f74:	680b      	ldr	r3, [r1, #0]
 8009f76:	402b      	ands	r3, r5
 8009f78:	600b      	str	r3, [r1, #0]
 8009f7a:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f7e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f82:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f86:	6801      	ldr	r1, [r0, #0]
 8009f88:	688b      	ldr	r3, [r1, #8]
 8009f8a:	4393      	bics	r3, r2
 8009f8c:	608b      	str	r3, [r1, #8]
 8009f8e:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f92:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d10a      	bne.n	8009fae <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f98:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f9c:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fa0:	2410      	movs	r4, #16
 8009fa2:	6802      	ldr	r2, [r0, #0]
 8009fa4:	6813      	ldr	r3, [r2, #0]
 8009fa6:	43a3      	bics	r3, r4
 8009fa8:	6013      	str	r3, [r2, #0]
 8009faa:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009fae:	2220      	movs	r2, #32
 8009fb0:	1d03      	adds	r3, r0, #4
 8009fb2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009fb8:	6683      	str	r3, [r0, #104]	@ 0x68
}
 8009fba:	bd30      	pop	{r4, r5, pc}
 8009fbc:	fffffedf 	.word	0xfffffedf

08009fc0 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8009fc0:	4770      	bx	lr

08009fc2 <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 8009fc2:	4770      	bx	lr

08009fc4 <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 8009fc4:	4770      	bx	lr

08009fc6 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8009fc6:	4770      	bx	lr

08009fc8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009fc8:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009fca:	6a44      	ldr	r4, [r0, #36]	@ 0x24

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009fcc:	1d23      	adds	r3, r4, #4
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009fce:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009fd0:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009fd2:	6823      	ldr	r3, [r4, #0]
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	061b      	lsls	r3, r3, #24
 8009fd8:	d513      	bpl.n	800a002 <UART_DMAError+0x3a>
 8009fda:	2a21      	cmp	r2, #33	@ 0x21
 8009fdc:	d111      	bne.n	800a002 <UART_DMAError+0x3a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009fde:	0023      	movs	r3, r4
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	3352      	adds	r3, #82	@ 0x52
 8009fe4:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fe6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fea:	2301      	movs	r3, #1
 8009fec:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009ff0:	25c0      	movs	r5, #192	@ 0xc0
 8009ff2:	6822      	ldr	r2, [r4, #0]
 8009ff4:	6813      	ldr	r3, [r2, #0]
 8009ff6:	43ab      	bics	r3, r5
 8009ff8:	6013      	str	r3, [r2, #0]
 8009ffa:	f380 8810 	msr	PRIMASK, r0
  huart->gState = HAL_UART_STATE_READY;
 8009ffe:	2320      	movs	r3, #32
 800a000:	67e3      	str	r3, [r4, #124]	@ 0x7c
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a002:	6823      	ldr	r3, [r4, #0]
 800a004:	689b      	ldr	r3, [r3, #8]
 800a006:	065b      	lsls	r3, r3, #25
 800a008:	d508      	bpl.n	800a01c <UART_DMAError+0x54>
 800a00a:	2922      	cmp	r1, #34	@ 0x22
 800a00c:	d106      	bne.n	800a01c <UART_DMAError+0x54>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a00e:	0023      	movs	r3, r4
 800a010:	2200      	movs	r2, #0
 800a012:	335a      	adds	r3, #90	@ 0x5a
    UART_EndRxTransfer(huart);
 800a014:	0020      	movs	r0, r4
    huart->RxXferCount = 0U;
 800a016:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 800a018:	f7ff ffa4 	bl	8009f64 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a01c:	0022      	movs	r2, r4
 800a01e:	2310      	movs	r3, #16
 800a020:	3208      	adds	r2, #8
 800a022:	6fd1      	ldr	r1, [r2, #124]	@ 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a024:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a026:	430b      	orrs	r3, r1
 800a028:	67d3      	str	r3, [r2, #124]	@ 0x7c
  HAL_UART_ErrorCallback(huart);
 800a02a:	f7ff ffcc 	bl	8009fc6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a02e:	bd70      	pop	{r4, r5, r6, pc}

0800a030 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a030:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0U;
 800a032:	2300      	movs	r3, #0
 800a034:	0002      	movs	r2, r0
{
 800a036:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 800a038:	325a      	adds	r2, #90	@ 0x5a
 800a03a:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 800a03c:	3a08      	subs	r2, #8
 800a03e:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a040:	f7ff ffc1 	bl	8009fc6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a044:	bd10      	pop	{r4, pc}
	...

0800a048 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a048:	6802      	ldr	r2, [r0, #0]
{
 800a04a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a04c:	69d3      	ldr	r3, [r2, #28]
{
 800a04e:	0004      	movs	r4, r0
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a050:	48a7      	ldr	r0, [pc, #668]	@ (800a2f0 <HAL_UART_IRQHandler+0x2a8>)
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a052:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a054:	6896      	ldr	r6, [r2, #8]
  if (errorflags == 0U)
 800a056:	4203      	tst	r3, r0
 800a058:	d10b      	bne.n	800a072 <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a05a:	2020      	movs	r0, #32
 800a05c:	4203      	tst	r3, r0
 800a05e:	d100      	bne.n	800a062 <HAL_UART_IRQHandler+0x1a>
 800a060:	e080      	b.n	800a164 <HAL_UART_IRQHandler+0x11c>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a062:	4201      	tst	r1, r0
 800a064:	d100      	bne.n	800a068 <HAL_UART_IRQHandler+0x20>
 800a066:	e07d      	b.n	800a164 <HAL_UART_IRQHandler+0x11c>
      if (huart->RxISR != NULL)
 800a068:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
      huart->TxISR(huart);
 800a06a:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d16f      	bne.n	800a150 <HAL_UART_IRQHandler+0x108>
 800a070:	e06f      	b.n	800a152 <HAL_UART_IRQHandler+0x10a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a072:	2001      	movs	r0, #1
 800a074:	0037      	movs	r7, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a076:	4d9f      	ldr	r5, [pc, #636]	@ (800a2f4 <HAL_UART_IRQHandler+0x2ac>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a078:	4007      	ands	r7, r0
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a07a:	400d      	ands	r5, r1
 800a07c:	433d      	orrs	r5, r7
 800a07e:	d100      	bne.n	800a082 <HAL_UART_IRQHandler+0x3a>
 800a080:	e070      	b.n	800a164 <HAL_UART_IRQHandler+0x11c>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a082:	0025      	movs	r5, r4
 800a084:	3508      	adds	r5, #8
 800a086:	4203      	tst	r3, r0
 800a088:	d005      	beq.n	800a096 <HAL_UART_IRQHandler+0x4e>
 800a08a:	05ce      	lsls	r6, r1, #23
 800a08c:	d503      	bpl.n	800a096 <HAL_UART_IRQHandler+0x4e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a08e:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a090:	6fee      	ldr	r6, [r5, #124]	@ 0x7c
 800a092:	4330      	orrs	r0, r6
 800a094:	67e8      	str	r0, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a096:	2002      	movs	r0, #2
 800a098:	4203      	tst	r3, r0
 800a09a:	d006      	beq.n	800a0aa <HAL_UART_IRQHandler+0x62>
 800a09c:	2f00      	cmp	r7, #0
 800a09e:	d004      	beq.n	800a0aa <HAL_UART_IRQHandler+0x62>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a0a0:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a0a2:	6fee      	ldr	r6, [r5, #124]	@ 0x7c
 800a0a4:	1800      	adds	r0, r0, r0
 800a0a6:	4330      	orrs	r0, r6
 800a0a8:	67e8      	str	r0, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a0aa:	2004      	movs	r0, #4
 800a0ac:	4203      	tst	r3, r0
 800a0ae:	d006      	beq.n	800a0be <HAL_UART_IRQHandler+0x76>
 800a0b0:	2f00      	cmp	r7, #0
 800a0b2:	d004      	beq.n	800a0be <HAL_UART_IRQHandler+0x76>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a0b4:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a0b6:	6fee      	ldr	r6, [r5, #124]	@ 0x7c
 800a0b8:	3802      	subs	r0, #2
 800a0ba:	4330      	orrs	r0, r6
 800a0bc:	67e8      	str	r0, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a0be:	2008      	movs	r0, #8
 800a0c0:	4203      	tst	r3, r0
 800a0c2:	d007      	beq.n	800a0d4 <HAL_UART_IRQHandler+0x8c>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a0c4:	2620      	movs	r6, #32
 800a0c6:	400e      	ands	r6, r1
 800a0c8:	433e      	orrs	r6, r7
 800a0ca:	d003      	beq.n	800a0d4 <HAL_UART_IRQHandler+0x8c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a0cc:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a0ce:	6fee      	ldr	r6, [r5, #124]	@ 0x7c
 800a0d0:	4330      	orrs	r0, r6
 800a0d2:	67e8      	str	r0, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a0d4:	2080      	movs	r0, #128	@ 0x80
 800a0d6:	0100      	lsls	r0, r0, #4
 800a0d8:	4203      	tst	r3, r0
 800a0da:	d006      	beq.n	800a0ea <HAL_UART_IRQHandler+0xa2>
 800a0dc:	014e      	lsls	r6, r1, #5
 800a0de:	d504      	bpl.n	800a0ea <HAL_UART_IRQHandler+0xa2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a0e0:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a0e2:	2220      	movs	r2, #32
 800a0e4:	6fe8      	ldr	r0, [r5, #124]	@ 0x7c
 800a0e6:	4302      	orrs	r2, r0
 800a0e8:	67ea      	str	r2, [r5, #124]	@ 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a0ea:	6fea      	ldr	r2, [r5, #124]	@ 0x7c
 800a0ec:	2a00      	cmp	r2, #0
 800a0ee:	d030      	beq.n	800a152 <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a0f0:	2220      	movs	r2, #32
 800a0f2:	4213      	tst	r3, r2
 800a0f4:	d006      	beq.n	800a104 <HAL_UART_IRQHandler+0xbc>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a0f6:	4211      	tst	r1, r2
 800a0f8:	d004      	beq.n	800a104 <HAL_UART_IRQHandler+0xbc>
        if (huart->RxISR != NULL)
 800a0fa:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d001      	beq.n	800a104 <HAL_UART_IRQHandler+0xbc>
          huart->RxISR(huart);
 800a100:	0020      	movs	r0, r4
 800a102:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a104:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 800a106:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a108:	2740      	movs	r7, #64	@ 0x40
 800a10a:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a10c:	2228      	movs	r2, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a10e:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a110:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 800a112:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a114:	431e      	orrs	r6, r3
 800a116:	d021      	beq.n	800a15c <HAL_UART_IRQHandler+0x114>
        UART_EndRxTransfer(huart);
 800a118:	f7ff ff24 	bl	8009f64 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a11c:	6823      	ldr	r3, [r4, #0]
 800a11e:	689b      	ldr	r3, [r3, #8]
 800a120:	423b      	tst	r3, r7
 800a122:	d017      	beq.n	800a154 <HAL_UART_IRQHandler+0x10c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a124:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a128:	2301      	movs	r3, #1
 800a12a:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a12e:	6822      	ldr	r2, [r4, #0]
 800a130:	6893      	ldr	r3, [r2, #8]
 800a132:	43bb      	bics	r3, r7
 800a134:	6093      	str	r3, [r2, #8]
 800a136:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 800a13a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800a13c:	2800      	cmp	r0, #0
 800a13e:	d009      	beq.n	800a154 <HAL_UART_IRQHandler+0x10c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a140:	4b6d      	ldr	r3, [pc, #436]	@ (800a2f8 <HAL_UART_IRQHandler+0x2b0>)
 800a142:	6343      	str	r3, [r0, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a144:	f7fe fd00 	bl	8008b48 <HAL_DMA_Abort_IT>
 800a148:	2800      	cmp	r0, #0
 800a14a:	d002      	beq.n	800a152 <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a14c:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800a14e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800a150:	4798      	blx	r3
}
 800a152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 800a154:	0020      	movs	r0, r4
 800a156:	f7ff ff36 	bl	8009fc6 <HAL_UART_ErrorCallback>
 800a15a:	e7fa      	b.n	800a152 <HAL_UART_IRQHandler+0x10a>
        HAL_UART_ErrorCallback(huart);
 800a15c:	f7ff ff33 	bl	8009fc6 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a160:	67ee      	str	r6, [r5, #124]	@ 0x7c
 800a162:	e7f6      	b.n	800a152 <HAL_UART_IRQHandler+0x10a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a164:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800a166:	2801      	cmp	r0, #1
 800a168:	d000      	beq.n	800a16c <HAL_UART_IRQHandler+0x124>
 800a16a:	e095      	b.n	800a298 <HAL_UART_IRQHandler+0x250>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a16c:	2510      	movs	r5, #16
 800a16e:	422b      	tst	r3, r5
 800a170:	d100      	bne.n	800a174 <HAL_UART_IRQHandler+0x12c>
 800a172:	e091      	b.n	800a298 <HAL_UART_IRQHandler+0x250>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a174:	4229      	tst	r1, r5
 800a176:	d100      	bne.n	800a17a <HAL_UART_IRQHandler+0x132>
 800a178:	e08e      	b.n	800a298 <HAL_UART_IRQHandler+0x250>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a17a:	6215      	str	r5, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a17c:	6893      	ldr	r3, [r2, #8]
 800a17e:	2140      	movs	r1, #64	@ 0x40
 800a180:	001e      	movs	r6, r3
 800a182:	400e      	ands	r6, r1
 800a184:	420b      	tst	r3, r1
 800a186:	d04f      	beq.n	800a228 <HAL_UART_IRQHandler+0x1e0>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a188:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 800a18a:	6813      	ldr	r3, [r2, #0]
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800a190:	2b00      	cmp	r3, #0
 800a192:	d0de      	beq.n	800a152 <HAL_UART_IRQHandler+0x10a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a194:	0026      	movs	r6, r4
 800a196:	3658      	adds	r6, #88	@ 0x58
 800a198:	8837      	ldrh	r7, [r6, #0]
 800a19a:	429f      	cmp	r7, r3
 800a19c:	d9d9      	bls.n	800a152 <HAL_UART_IRQHandler+0x10a>
        huart->RxXferCount = nb_remaining_rx_data;
 800a19e:	0027      	movs	r7, r4
 800a1a0:	375a      	adds	r7, #90	@ 0x5a
 800a1a2:	803b      	strh	r3, [r7, #0]
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a1a4:	6993      	ldr	r3, [r2, #24]
 800a1a6:	2b20      	cmp	r3, #32
 800a1a8:	d032      	beq.n	800a210 <HAL_UART_IRQHandler+0x1c8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1aa:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1ae:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1b2:	6822      	ldr	r2, [r4, #0]
 800a1b4:	4d51      	ldr	r5, [pc, #324]	@ (800a2fc <HAL_UART_IRQHandler+0x2b4>)
 800a1b6:	6813      	ldr	r3, [r2, #0]
 800a1b8:	402b      	ands	r3, r5
 800a1ba:	6013      	str	r3, [r2, #0]
 800a1bc:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1c0:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1c4:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1c8:	6822      	ldr	r2, [r4, #0]
 800a1ca:	6893      	ldr	r3, [r2, #8]
 800a1cc:	4383      	bics	r3, r0
 800a1ce:	6093      	str	r3, [r2, #8]
 800a1d0:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1d4:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1d8:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1dc:	0023      	movs	r3, r4
 800a1de:	cb80      	ldmia	r3!, {r7}
 800a1e0:	68ba      	ldr	r2, [r7, #8]
 800a1e2:	438a      	bics	r2, r1
 800a1e4:	60ba      	str	r2, [r7, #8]
 800a1e6:	f38c 8810 	msr	PRIMASK, ip
          huart->RxState = HAL_UART_STATE_READY;
 800a1ea:	2220      	movs	r2, #32
 800a1ec:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	6623      	str	r3, [r4, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1f2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1f6:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1fa:	6822      	ldr	r2, [r4, #0]
 800a1fc:	3512      	adds	r5, #18
 800a1fe:	6813      	ldr	r3, [r2, #0]
 800a200:	35ff      	adds	r5, #255	@ 0xff
 800a202:	43ab      	bics	r3, r5
 800a204:	6013      	str	r3, [r2, #0]
 800a206:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a20a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800a20c:	f7fe fc7e 	bl	8008b0c <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a210:	2302      	movs	r3, #2
 800a212:	6663      	str	r3, [r4, #100]	@ 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a214:	0023      	movs	r3, r4
 800a216:	335a      	adds	r3, #90	@ 0x5a
 800a218:	881b      	ldrh	r3, [r3, #0]
 800a21a:	8831      	ldrh	r1, [r6, #0]
 800a21c:	1ac9      	subs	r1, r1, r3
 800a21e:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a220:	0020      	movs	r0, r4
 800a222:	f7f9 f997 	bl	8003554 <HAL_UARTEx_RxEventCallback>
 800a226:	e794      	b.n	800a152 <HAL_UART_IRQHandler+0x10a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a228:	0023      	movs	r3, r4
 800a22a:	0022      	movs	r2, r4
 800a22c:	3358      	adds	r3, #88	@ 0x58
 800a22e:	325a      	adds	r2, #90	@ 0x5a
 800a230:	8819      	ldrh	r1, [r3, #0]
 800a232:	8813      	ldrh	r3, [r2, #0]
      if ((huart->RxXferCount > 0U)
 800a234:	8812      	ldrh	r2, [r2, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a236:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 800a238:	2a00      	cmp	r2, #0
 800a23a:	d100      	bne.n	800a23e <HAL_UART_IRQHandler+0x1f6>
 800a23c:	e789      	b.n	800a152 <HAL_UART_IRQHandler+0x10a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a23e:	1ac9      	subs	r1, r1, r3
 800a240:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800a242:	2900      	cmp	r1, #0
 800a244:	d100      	bne.n	800a248 <HAL_UART_IRQHandler+0x200>
 800a246:	e784      	b.n	800a152 <HAL_UART_IRQHandler+0x10a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a248:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a24c:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a250:	6822      	ldr	r2, [r4, #0]
 800a252:	4d2b      	ldr	r5, [pc, #172]	@ (800a300 <HAL_UART_IRQHandler+0x2b8>)
 800a254:	6813      	ldr	r3, [r2, #0]
 800a256:	402b      	ands	r3, r5
 800a258:	6013      	str	r3, [r2, #0]
 800a25a:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a25e:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a262:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a266:	0023      	movs	r3, r4
 800a268:	cb80      	ldmia	r3!, {r7}
 800a26a:	68ba      	ldr	r2, [r7, #8]
 800a26c:	4382      	bics	r2, r0
 800a26e:	60ba      	str	r2, [r7, #8]
 800a270:	f38c 8810 	msr	PRIMASK, ip
        huart->RxState = HAL_UART_STATE_READY;
 800a274:	2220      	movs	r2, #32
 800a276:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a278:	6626      	str	r6, [r4, #96]	@ 0x60
        huart->RxISR = NULL;
 800a27a:	66a6      	str	r6, [r4, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a27c:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a280:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a284:	2010      	movs	r0, #16
 800a286:	6822      	ldr	r2, [r4, #0]
 800a288:	6813      	ldr	r3, [r2, #0]
 800a28a:	4383      	bics	r3, r0
 800a28c:	6013      	str	r3, [r2, #0]
 800a28e:	f386 8810 	msr	PRIMASK, r6
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a292:	2302      	movs	r3, #2
 800a294:	6663      	str	r3, [r4, #100]	@ 0x64
 800a296:	e7c3      	b.n	800a220 <HAL_UART_IRQHandler+0x1d8>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a298:	2080      	movs	r0, #128	@ 0x80
 800a29a:	0340      	lsls	r0, r0, #13
 800a29c:	4203      	tst	r3, r0
 800a29e:	d006      	beq.n	800a2ae <HAL_UART_IRQHandler+0x266>
 800a2a0:	0276      	lsls	r6, r6, #9
 800a2a2:	d504      	bpl.n	800a2ae <HAL_UART_IRQHandler+0x266>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a2a4:	6210      	str	r0, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800a2a6:	0020      	movs	r0, r4
 800a2a8:	f000 fb20 	bl	800a8ec <HAL_UARTEx_WakeupCallback>
    return;
 800a2ac:	e751      	b.n	800a152 <HAL_UART_IRQHandler+0x10a>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a2ae:	2280      	movs	r2, #128	@ 0x80
 800a2b0:	4213      	tst	r3, r2
 800a2b2:	d003      	beq.n	800a2bc <HAL_UART_IRQHandler+0x274>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a2b4:	4211      	tst	r1, r2
 800a2b6:	d001      	beq.n	800a2bc <HAL_UART_IRQHandler+0x274>
    if (huart->TxISR != NULL)
 800a2b8:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800a2ba:	e6d6      	b.n	800a06a <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a2bc:	2240      	movs	r2, #64	@ 0x40
 800a2be:	4213      	tst	r3, r2
 800a2c0:	d100      	bne.n	800a2c4 <HAL_UART_IRQHandler+0x27c>
 800a2c2:	e746      	b.n	800a152 <HAL_UART_IRQHandler+0x10a>
 800a2c4:	4211      	tst	r1, r2
 800a2c6:	d100      	bne.n	800a2ca <HAL_UART_IRQHandler+0x282>
 800a2c8:	e743      	b.n	800a152 <HAL_UART_IRQHandler+0x10a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2ca:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a2d4:	6821      	ldr	r1, [r4, #0]
 800a2d6:	680b      	ldr	r3, [r1, #0]
 800a2d8:	4393      	bics	r3, r2
 800a2da:	600b      	str	r3, [r1, #0]
 800a2dc:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a2e0:	2320      	movs	r3, #32
 800a2e2:	67e3      	str	r3, [r4, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a2e4:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a2e6:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 800a2e8:	66e3      	str	r3, [r4, #108]	@ 0x6c
  HAL_UART_TxCpltCallback(huart);
 800a2ea:	f7ff fe69 	bl	8009fc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2ee:	e730      	b.n	800a152 <HAL_UART_IRQHandler+0x10a>
 800a2f0:	0000080f 	.word	0x0000080f
 800a2f4:	04000120 	.word	0x04000120
 800a2f8:	0800a031 	.word	0x0800a031
 800a2fc:	fffffeff 	.word	0xfffffeff
 800a300:	fffffedf 	.word	0xfffffedf

0800a304 <UART_DMARxHalfCplt>:
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a304:	2301      	movs	r3, #1
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a306:	6a40      	ldr	r0, [r0, #36]	@ 0x24
{
 800a308:	b510      	push	{r4, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a30a:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a30c:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 800a30e:	2b01      	cmp	r3, #1
 800a310:	d106      	bne.n	800a320 <UART_DMARxHalfCplt+0x1c>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a312:	0003      	movs	r3, r0
 800a314:	3358      	adds	r3, #88	@ 0x58
 800a316:	8819      	ldrh	r1, [r3, #0]
 800a318:	0849      	lsrs	r1, r1, #1
 800a31a:	f7f9 f91b 	bl	8003554 <HAL_UARTEx_RxEventCallback>
}
 800a31e:	bd10      	pop	{r4, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 800a320:	f7ff fe50 	bl	8009fc4 <HAL_UART_RxHalfCpltCallback>
}
 800a324:	e7fb      	b.n	800a31e <UART_DMARxHalfCplt+0x1a>
	...

0800a328 <UART_DMAReceiveCplt>:
{
 800a328:	0003      	movs	r3, r0
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a32a:	699b      	ldr	r3, [r3, #24]
{
 800a32c:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a32e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a330:	2b20      	cmp	r3, #32
 800a332:	d036      	beq.n	800a3a2 <UART_DMAReceiveCplt+0x7a>
    huart->RxXferCount = 0U;
 800a334:	0003      	movs	r3, r0
 800a336:	2200      	movs	r2, #0
 800a338:	335a      	adds	r3, #90	@ 0x5a
 800a33a:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a33c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a340:	2301      	movs	r3, #1
 800a342:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a346:	6801      	ldr	r1, [r0, #0]
 800a348:	4d1d      	ldr	r5, [pc, #116]	@ (800a3c0 <UART_DMAReceiveCplt+0x98>)
 800a34a:	680a      	ldr	r2, [r1, #0]
 800a34c:	402a      	ands	r2, r5
 800a34e:	600a      	str	r2, [r1, #0]
 800a350:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a354:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a358:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a35c:	6801      	ldr	r1, [r0, #0]
 800a35e:	688a      	ldr	r2, [r1, #8]
 800a360:	439a      	bics	r2, r3
 800a362:	608a      	str	r2, [r1, #8]
 800a364:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a368:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a36c:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a370:	0003      	movs	r3, r0
 800a372:	cb02      	ldmia	r3!, {r1}
 800a374:	3542      	adds	r5, #66	@ 0x42
 800a376:	688a      	ldr	r2, [r1, #8]
 800a378:	35ff      	adds	r5, #255	@ 0xff
 800a37a:	43aa      	bics	r2, r5
 800a37c:	608a      	str	r2, [r1, #8]
 800a37e:	f384 8810 	msr	PRIMASK, r4
    huart->RxState = HAL_UART_STATE_READY;
 800a382:	2220      	movs	r2, #32
 800a384:	67da      	str	r2, [r3, #124]	@ 0x7c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a386:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d10a      	bne.n	800a3a2 <UART_DMAReceiveCplt+0x7a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a38c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a390:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a394:	2410      	movs	r4, #16
 800a396:	6802      	ldr	r2, [r0, #0]
 800a398:	6813      	ldr	r3, [r2, #0]
 800a39a:	43a3      	bics	r3, r4
 800a39c:	6013      	str	r3, [r2, #0]
 800a39e:	f381 8810 	msr	PRIMASK, r1
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3a6:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 800a3a8:	2b01      	cmp	r3, #1
 800a3aa:	d105      	bne.n	800a3b8 <UART_DMAReceiveCplt+0x90>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3ac:	0003      	movs	r3, r0
 800a3ae:	3358      	adds	r3, #88	@ 0x58
 800a3b0:	8819      	ldrh	r1, [r3, #0]
 800a3b2:	f7f9 f8cf 	bl	8003554 <HAL_UARTEx_RxEventCallback>
}
 800a3b6:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UART_RxCpltCallback(huart);
 800a3b8:	f7ff fe03 	bl	8009fc2 <HAL_UART_RxCpltCallback>
}
 800a3bc:	e7fb      	b.n	800a3b6 <UART_DMAReceiveCplt+0x8e>
 800a3be:	46c0      	nop			@ (mov r8, r8)
 800a3c0:	fffffeff 	.word	0xfffffeff

0800a3c4 <UART_SetConfig>:
{
 800a3c4:	b570      	push	{r4, r5, r6, lr}
 800a3c6:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a3c8:	6925      	ldr	r5, [r4, #16]
 800a3ca:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a3cc:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a3ce:	4329      	orrs	r1, r5
 800a3d0:	6965      	ldr	r5, [r4, #20]
 800a3d2:	69c2      	ldr	r2, [r0, #28]
 800a3d4:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a3d6:	6818      	ldr	r0, [r3, #0]
 800a3d8:	4d3d      	ldr	r5, [pc, #244]	@ (800a4d0 <UART_SetConfig+0x10c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a3da:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a3dc:	4028      	ands	r0, r5
 800a3de:	4301      	orrs	r1, r0
 800a3e0:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a3e2:	6859      	ldr	r1, [r3, #4]
 800a3e4:	483b      	ldr	r0, [pc, #236]	@ (800a4d4 <UART_SetConfig+0x110>)
  tmpreg |= huart->Init.OneBitSampling;
 800a3e6:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a3e8:	4001      	ands	r1, r0
 800a3ea:	68e0      	ldr	r0, [r4, #12]
 800a3ec:	4301      	orrs	r1, r0
 800a3ee:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a3f0:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a3f2:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 800a3f4:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a3f6:	4d38      	ldr	r5, [pc, #224]	@ (800a4d8 <UART_SetConfig+0x114>)
 800a3f8:	4028      	ands	r0, r5
 800a3fa:	4301      	orrs	r1, r0
 800a3fc:	6099      	str	r1, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a3fe:	4937      	ldr	r1, [pc, #220]	@ (800a4dc <UART_SetConfig+0x118>)
 800a400:	428b      	cmp	r3, r1
 800a402:	d115      	bne.n	800a430 <UART_SetConfig+0x6c>
 800a404:	2103      	movs	r1, #3
 800a406:	4b36      	ldr	r3, [pc, #216]	@ (800a4e0 <UART_SetConfig+0x11c>)
 800a408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a40a:	400b      	ands	r3, r1
 800a40c:	3b01      	subs	r3, #1
 800a40e:	2b02      	cmp	r3, #2
 800a410:	d851      	bhi.n	800a4b6 <UART_SetConfig+0xf2>
 800a412:	4934      	ldr	r1, [pc, #208]	@ (800a4e4 <UART_SetConfig+0x120>)
 800a414:	5cc8      	ldrb	r0, [r1, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a416:	2380      	movs	r3, #128	@ 0x80
 800a418:	021b      	lsls	r3, r3, #8
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d127      	bne.n	800a46e <UART_SetConfig+0xaa>
    switch (clocksource)
 800a41e:	2808      	cmp	r0, #8
 800a420:	d847      	bhi.n	800a4b2 <UART_SetConfig+0xee>
 800a422:	f7f5 fe79 	bl	8000118 <__gnu_thumb1_case_uqi>
 800a426:	464c      	.short	0x464c
 800a428:	460b460e 	.word	0x460b460e
 800a42c:	4646      	.short	0x4646
 800a42e:	0f          	.byte	0x0f
 800a42f:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a430:	492d      	ldr	r1, [pc, #180]	@ (800a4e8 <UART_SetConfig+0x124>)
 800a432:	185b      	adds	r3, r3, r1
 800a434:	1e59      	subs	r1, r3, #1
 800a436:	418b      	sbcs	r3, r1
 800a438:	0118      	lsls	r0, r3, #4
 800a43a:	e7ec      	b.n	800a416 <UART_SetConfig+0x52>
        pclk = HAL_RCC_GetSysClockFreq();
 800a43c:	f7fe ffd6 	bl	80093ec <HAL_RCC_GetSysClockFreq>
 800a440:	e03f      	b.n	800a4c2 <UART_SetConfig+0xfe>
    switch (clocksource)
 800a442:	4a2a      	ldr	r2, [pc, #168]	@ (800a4ec <UART_SetConfig+0x128>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a444:	6861      	ldr	r1, [r4, #4]
 800a446:	0052      	lsls	r2, r2, #1
 800a448:	0848      	lsrs	r0, r1, #1
 800a44a:	1810      	adds	r0, r2, r0
 800a44c:	f7f5 fe82 	bl	8000154 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a450:	0002      	movs	r2, r0
 800a452:	4b27      	ldr	r3, [pc, #156]	@ (800a4f0 <UART_SetConfig+0x12c>)
 800a454:	3a10      	subs	r2, #16
 800a456:	429a      	cmp	r2, r3
 800a458:	d82b      	bhi.n	800a4b2 <UART_SetConfig+0xee>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a45a:	230f      	movs	r3, #15
 800a45c:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a45e:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a460:	439a      	bics	r2, r3
 800a462:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a464:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 800a466:	6822      	ldr	r2, [r4, #0]
 800a468:	4303      	orrs	r3, r0
 800a46a:	60d3      	str	r3, [r2, #12]
 800a46c:	e02b      	b.n	800a4c6 <UART_SetConfig+0x102>
    switch (clocksource)
 800a46e:	2808      	cmp	r0, #8
 800a470:	d81f      	bhi.n	800a4b2 <UART_SetConfig+0xee>
 800a472:	f7f5 fe51 	bl	8000118 <__gnu_thumb1_case_uqi>
 800a476:	1e13      	.short	0x1e13
 800a478:	1e181e05 	.word	0x1e181e05
 800a47c:	1e1e      	.short	0x1e1e
 800a47e:	1b          	.byte	0x1b
 800a47f:	00          	.byte	0x00
        pclk = (uint32_t) HSI_VALUE;
 800a480:	481a      	ldr	r0, [pc, #104]	@ (800a4ec <UART_SetConfig+0x128>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a482:	6861      	ldr	r1, [r4, #4]
 800a484:	084b      	lsrs	r3, r1, #1
 800a486:	1818      	adds	r0, r3, r0
 800a488:	f7f5 fe64 	bl	8000154 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a48c:	0002      	movs	r2, r0
 800a48e:	4b18      	ldr	r3, [pc, #96]	@ (800a4f0 <UART_SetConfig+0x12c>)
 800a490:	3a10      	subs	r2, #16
 800a492:	429a      	cmp	r2, r3
 800a494:	d80d      	bhi.n	800a4b2 <UART_SetConfig+0xee>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a496:	6823      	ldr	r3, [r4, #0]
 800a498:	60d8      	str	r0, [r3, #12]
 800a49a:	e014      	b.n	800a4c6 <UART_SetConfig+0x102>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a49c:	f7ff f850 	bl	8009540 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800a4a0:	2800      	cmp	r0, #0
 800a4a2:	d010      	beq.n	800a4c6 <UART_SetConfig+0x102>
 800a4a4:	e7ed      	b.n	800a482 <UART_SetConfig+0xbe>
        pclk = HAL_RCC_GetSysClockFreq();
 800a4a6:	f7fe ffa1 	bl	80093ec <HAL_RCC_GetSysClockFreq>
        break;
 800a4aa:	e7f9      	b.n	800a4a0 <UART_SetConfig+0xdc>
    switch (clocksource)
 800a4ac:	2080      	movs	r0, #128	@ 0x80
 800a4ae:	0200      	lsls	r0, r0, #8
 800a4b0:	e7e7      	b.n	800a482 <UART_SetConfig+0xbe>
        ret = HAL_ERROR;
 800a4b2:	2001      	movs	r0, #1
 800a4b4:	e008      	b.n	800a4c8 <UART_SetConfig+0x104>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a4b6:	2380      	movs	r3, #128	@ 0x80
 800a4b8:	021b      	lsls	r3, r3, #8
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d1ee      	bne.n	800a49c <UART_SetConfig+0xd8>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a4be:	f7ff f83f 	bl	8009540 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 800a4c2:	1e02      	subs	r2, r0, #0
    if (pclk != 0U)
 800a4c4:	d1be      	bne.n	800a444 <UART_SetConfig+0x80>
        pclk = (uint32_t) HSI_VALUE;
 800a4c6:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 800a4cc:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 800a4ce:	bd70      	pop	{r4, r5, r6, pc}
 800a4d0:	ffff69f3 	.word	0xffff69f3
 800a4d4:	ffffcfff 	.word	0xffffcfff
 800a4d8:	fffff4ff 	.word	0xfffff4ff
 800a4dc:	40013800 	.word	0x40013800
 800a4e0:	40021000 	.word	0x40021000
 800a4e4:	0800d6c0 	.word	0x0800d6c0
 800a4e8:	bfffbc00 	.word	0xbfffbc00
 800a4ec:	007a1200 	.word	0x007a1200
 800a4f0:	0000ffef 	.word	0x0000ffef

0800a4f4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a4f4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 800a4f6:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a4f8:	071a      	lsls	r2, r3, #28
 800a4fa:	d506      	bpl.n	800a50a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a4fc:	6801      	ldr	r1, [r0, #0]
 800a4fe:	4c28      	ldr	r4, [pc, #160]	@ (800a5a0 <UART_AdvFeatureConfig+0xac>)
 800a500:	684a      	ldr	r2, [r1, #4]
 800a502:	4022      	ands	r2, r4
 800a504:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800a506:	4322      	orrs	r2, r4
 800a508:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a50a:	07da      	lsls	r2, r3, #31
 800a50c:	d506      	bpl.n	800a51c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a50e:	6801      	ldr	r1, [r0, #0]
 800a510:	4c24      	ldr	r4, [pc, #144]	@ (800a5a4 <UART_AdvFeatureConfig+0xb0>)
 800a512:	684a      	ldr	r2, [r1, #4]
 800a514:	4022      	ands	r2, r4
 800a516:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800a518:	4322      	orrs	r2, r4
 800a51a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a51c:	079a      	lsls	r2, r3, #30
 800a51e:	d506      	bpl.n	800a52e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a520:	6801      	ldr	r1, [r0, #0]
 800a522:	4c21      	ldr	r4, [pc, #132]	@ (800a5a8 <UART_AdvFeatureConfig+0xb4>)
 800a524:	684a      	ldr	r2, [r1, #4]
 800a526:	4022      	ands	r2, r4
 800a528:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800a52a:	4322      	orrs	r2, r4
 800a52c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a52e:	075a      	lsls	r2, r3, #29
 800a530:	d506      	bpl.n	800a540 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a532:	6801      	ldr	r1, [r0, #0]
 800a534:	4c1d      	ldr	r4, [pc, #116]	@ (800a5ac <UART_AdvFeatureConfig+0xb8>)
 800a536:	684a      	ldr	r2, [r1, #4]
 800a538:	4022      	ands	r2, r4
 800a53a:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800a53c:	4322      	orrs	r2, r4
 800a53e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a540:	06da      	lsls	r2, r3, #27
 800a542:	d506      	bpl.n	800a552 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a544:	6801      	ldr	r1, [r0, #0]
 800a546:	4c1a      	ldr	r4, [pc, #104]	@ (800a5b0 <UART_AdvFeatureConfig+0xbc>)
 800a548:	688a      	ldr	r2, [r1, #8]
 800a54a:	4022      	ands	r2, r4
 800a54c:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800a54e:	4322      	orrs	r2, r4
 800a550:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a552:	069a      	lsls	r2, r3, #26
 800a554:	d506      	bpl.n	800a564 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a556:	6801      	ldr	r1, [r0, #0]
 800a558:	4c16      	ldr	r4, [pc, #88]	@ (800a5b4 <UART_AdvFeatureConfig+0xc0>)
 800a55a:	688a      	ldr	r2, [r1, #8]
 800a55c:	4022      	ands	r2, r4
 800a55e:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 800a560:	4322      	orrs	r2, r4
 800a562:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a564:	065a      	lsls	r2, r3, #25
 800a566:	d510      	bpl.n	800a58a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a568:	6801      	ldr	r1, [r0, #0]
 800a56a:	4d13      	ldr	r5, [pc, #76]	@ (800a5b8 <UART_AdvFeatureConfig+0xc4>)
 800a56c:	684a      	ldr	r2, [r1, #4]
 800a56e:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800a570:	402a      	ands	r2, r5
 800a572:	4322      	orrs	r2, r4
 800a574:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a576:	2280      	movs	r2, #128	@ 0x80
 800a578:	0352      	lsls	r2, r2, #13
 800a57a:	4294      	cmp	r4, r2
 800a57c:	d105      	bne.n	800a58a <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a57e:	684a      	ldr	r2, [r1, #4]
 800a580:	4c0e      	ldr	r4, [pc, #56]	@ (800a5bc <UART_AdvFeatureConfig+0xc8>)
 800a582:	4022      	ands	r2, r4
 800a584:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800a586:	4322      	orrs	r2, r4
 800a588:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a58a:	061b      	lsls	r3, r3, #24
 800a58c:	d506      	bpl.n	800a59c <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a58e:	6802      	ldr	r2, [r0, #0]
 800a590:	490b      	ldr	r1, [pc, #44]	@ (800a5c0 <UART_AdvFeatureConfig+0xcc>)
 800a592:	6853      	ldr	r3, [r2, #4]
 800a594:	400b      	ands	r3, r1
 800a596:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800a598:	430b      	orrs	r3, r1
 800a59a:	6053      	str	r3, [r2, #4]
}
 800a59c:	bd30      	pop	{r4, r5, pc}
 800a59e:	46c0      	nop			@ (mov r8, r8)
 800a5a0:	ffff7fff 	.word	0xffff7fff
 800a5a4:	fffdffff 	.word	0xfffdffff
 800a5a8:	fffeffff 	.word	0xfffeffff
 800a5ac:	fffbffff 	.word	0xfffbffff
 800a5b0:	ffffefff 	.word	0xffffefff
 800a5b4:	ffffdfff 	.word	0xffffdfff
 800a5b8:	ffefffff 	.word	0xffefffff
 800a5bc:	ff9fffff 	.word	0xff9fffff
 800a5c0:	fff7ffff 	.word	0xfff7ffff

0800a5c4 <UART_WaitOnFlagUntilTimeout>:
{
 800a5c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5c6:	0004      	movs	r4, r0
 800a5c8:	000d      	movs	r5, r1
 800a5ca:	0017      	movs	r7, r2
 800a5cc:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5ce:	6822      	ldr	r2, [r4, #0]
 800a5d0:	69d3      	ldr	r3, [r2, #28]
 800a5d2:	402b      	ands	r3, r5
 800a5d4:	1b5b      	subs	r3, r3, r5
 800a5d6:	4259      	negs	r1, r3
 800a5d8:	414b      	adcs	r3, r1
 800a5da:	42bb      	cmp	r3, r7
 800a5dc:	d001      	beq.n	800a5e2 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 800a5de:	2000      	movs	r0, #0
 800a5e0:	e025      	b.n	800a62e <UART_WaitOnFlagUntilTimeout+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 800a5e2:	9b08      	ldr	r3, [sp, #32]
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	d0f3      	beq.n	800a5d0 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5e8:	f7fd fede 	bl	80083a8 <HAL_GetTick>
 800a5ec:	9b00      	ldr	r3, [sp, #0]
 800a5ee:	1ac0      	subs	r0, r0, r3
 800a5f0:	9b08      	ldr	r3, [sp, #32]
 800a5f2:	4298      	cmp	r0, r3
 800a5f4:	d82c      	bhi.n	800a650 <UART_WaitOnFlagUntilTimeout+0x8c>
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d02a      	beq.n	800a650 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a5fa:	6823      	ldr	r3, [r4, #0]
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	0752      	lsls	r2, r2, #29
 800a600:	d5e5      	bpl.n	800a5ce <UART_WaitOnFlagUntilTimeout+0xa>
 800a602:	002a      	movs	r2, r5
 800a604:	2140      	movs	r1, #64	@ 0x40
 800a606:	3a40      	subs	r2, #64	@ 0x40
 800a608:	438a      	bics	r2, r1
 800a60a:	d0e0      	beq.n	800a5ce <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a60c:	69da      	ldr	r2, [r3, #28]
 800a60e:	2608      	movs	r6, #8
 800a610:	0011      	movs	r1, r2
 800a612:	4031      	ands	r1, r6
 800a614:	9101      	str	r1, [sp, #4]
 800a616:	4232      	tst	r2, r6
 800a618:	d00a      	beq.n	800a630 <UART_WaitOnFlagUntilTimeout+0x6c>
          UART_EndRxTransfer(huart);
 800a61a:	0020      	movs	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a61c:	621e      	str	r6, [r3, #32]
          UART_EndRxTransfer(huart);
 800a61e:	f7ff fca1 	bl	8009f64 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a622:	19a3      	adds	r3, r4, r6
 800a624:	67de      	str	r6, [r3, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 800a626:	2300      	movs	r3, #0
          return HAL_ERROR;
 800a628:	2001      	movs	r0, #1
          __HAL_UNLOCK(huart);
 800a62a:	3478      	adds	r4, #120	@ 0x78
 800a62c:	7023      	strb	r3, [r4, #0]
}
 800a62e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a630:	2280      	movs	r2, #128	@ 0x80
 800a632:	69d9      	ldr	r1, [r3, #28]
 800a634:	0112      	lsls	r2, r2, #4
 800a636:	4211      	tst	r1, r2
 800a638:	d0c9      	beq.n	800a5ce <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a63a:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 800a63c:	0020      	movs	r0, r4
 800a63e:	f7ff fc91 	bl	8009f64 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a642:	0023      	movs	r3, r4
 800a644:	2220      	movs	r2, #32
 800a646:	3308      	adds	r3, #8
 800a648:	67da      	str	r2, [r3, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 800a64a:	9b01      	ldr	r3, [sp, #4]
 800a64c:	3478      	adds	r4, #120	@ 0x78
 800a64e:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 800a650:	2003      	movs	r0, #3
 800a652:	e7ec      	b.n	800a62e <UART_WaitOnFlagUntilTimeout+0x6a>

0800a654 <HAL_UART_Transmit>:
{
 800a654:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a656:	b087      	sub	sp, #28
 800a658:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 800a65a:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
{
 800a65c:	0004      	movs	r4, r0
 800a65e:	000d      	movs	r5, r1
 800a660:	0017      	movs	r7, r2
    return HAL_BUSY;
 800a662:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 800a664:	2b20      	cmp	r3, #32
 800a666:	d138      	bne.n	800a6da <HAL_UART_Transmit+0x86>
      return  HAL_ERROR;
 800a668:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800a66a:	2900      	cmp	r1, #0
 800a66c:	d035      	beq.n	800a6da <HAL_UART_Transmit+0x86>
 800a66e:	2a00      	cmp	r2, #0
 800a670:	d033      	beq.n	800a6da <HAL_UART_Transmit+0x86>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a672:	2380      	movs	r3, #128	@ 0x80
 800a674:	68a2      	ldr	r2, [r4, #8]
 800a676:	015b      	lsls	r3, r3, #5
 800a678:	429a      	cmp	r2, r3
 800a67a:	d104      	bne.n	800a686 <HAL_UART_Transmit+0x32>
 800a67c:	6923      	ldr	r3, [r4, #16]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d101      	bne.n	800a686 <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 800a682:	4201      	tst	r1, r0
 800a684:	d129      	bne.n	800a6da <HAL_UART_Transmit+0x86>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a686:	0023      	movs	r3, r4
 800a688:	2600      	movs	r6, #0
 800a68a:	3308      	adds	r3, #8
 800a68c:	67de      	str	r6, [r3, #124]	@ 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a68e:	2321      	movs	r3, #33	@ 0x21
 800a690:	67e3      	str	r3, [r4, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 800a692:	f7fd fe89 	bl	80083a8 <HAL_GetTick>
    huart->TxXferSize  = Size;
 800a696:	0023      	movs	r3, r4
 800a698:	3350      	adds	r3, #80	@ 0x50
 800a69a:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 800a69c:	3302      	adds	r3, #2
 800a69e:	9303      	str	r3, [sp, #12]
 800a6a0:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a6a2:	2380      	movs	r3, #128	@ 0x80
 800a6a4:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 800a6a6:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a6a8:	015b      	lsls	r3, r3, #5
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d104      	bne.n	800a6b8 <HAL_UART_Transmit+0x64>
 800a6ae:	6923      	ldr	r3, [r4, #16]
 800a6b0:	42b3      	cmp	r3, r6
 800a6b2:	d101      	bne.n	800a6b8 <HAL_UART_Transmit+0x64>
 800a6b4:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 800a6b6:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 800a6b8:	0023      	movs	r3, r4
 800a6ba:	3352      	adds	r3, #82	@ 0x52
 800a6bc:	881b      	ldrh	r3, [r3, #0]
 800a6be:	b29a      	uxth	r2, r3
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d10c      	bne.n	800a6de <HAL_UART_Transmit+0x8a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a6c4:	9b05      	ldr	r3, [sp, #20]
 800a6c6:	2140      	movs	r1, #64	@ 0x40
 800a6c8:	9300      	str	r3, [sp, #0]
 800a6ca:	0020      	movs	r0, r4
 800a6cc:	9b04      	ldr	r3, [sp, #16]
 800a6ce:	f7ff ff79 	bl	800a5c4 <UART_WaitOnFlagUntilTimeout>
 800a6d2:	2320      	movs	r3, #32
      huart->gState = HAL_UART_STATE_READY;
 800a6d4:	67e3      	str	r3, [r4, #124]	@ 0x7c
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a6d6:	2800      	cmp	r0, #0
 800a6d8:	d10d      	bne.n	800a6f6 <HAL_UART_Transmit+0xa2>
}
 800a6da:	b007      	add	sp, #28
 800a6dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a6de:	9b05      	ldr	r3, [sp, #20]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	9300      	str	r3, [sp, #0]
 800a6e4:	2180      	movs	r1, #128	@ 0x80
 800a6e6:	0020      	movs	r0, r4
 800a6e8:	9b04      	ldr	r3, [sp, #16]
 800a6ea:	f7ff ff6b 	bl	800a5c4 <UART_WaitOnFlagUntilTimeout>
 800a6ee:	2800      	cmp	r0, #0
 800a6f0:	d003      	beq.n	800a6fa <HAL_UART_Transmit+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 800a6f2:	2320      	movs	r3, #32
 800a6f4:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 800a6f6:	2003      	movs	r0, #3
 800a6f8:	e7ef      	b.n	800a6da <HAL_UART_Transmit+0x86>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a6fa:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800a6fc:	2d00      	cmp	r5, #0
 800a6fe:	d10b      	bne.n	800a718 <HAL_UART_Transmit+0xc4>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a700:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 800a702:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a704:	05db      	lsls	r3, r3, #23
 800a706:	0ddb      	lsrs	r3, r3, #23
 800a708:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 800a70a:	9b03      	ldr	r3, [sp, #12]
 800a70c:	9a03      	ldr	r2, [sp, #12]
 800a70e:	881b      	ldrh	r3, [r3, #0]
 800a710:	3b01      	subs	r3, #1
 800a712:	b29b      	uxth	r3, r3
 800a714:	8013      	strh	r3, [r2, #0]
 800a716:	e7cf      	b.n	800a6b8 <HAL_UART_Transmit+0x64>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a718:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 800a71a:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a71c:	8513      	strh	r3, [r2, #40]	@ 0x28
        pdata8bits++;
 800a71e:	e7f4      	b.n	800a70a <HAL_UART_Transmit+0xb6>

0800a720 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a720:	0003      	movs	r3, r0
{
 800a722:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a724:	2500      	movs	r5, #0
{
 800a726:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a728:	3308      	adds	r3, #8
 800a72a:	67dd      	str	r5, [r3, #124]	@ 0x7c
  tickstart = HAL_GetTick();
 800a72c:	f7fd fe3c 	bl	80083a8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a730:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800a732:	0006      	movs	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	071b      	lsls	r3, r3, #28
 800a738:	d51d      	bpl.n	800a776 <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a73a:	2180      	movs	r1, #128	@ 0x80
 800a73c:	4b26      	ldr	r3, [pc, #152]	@ (800a7d8 <UART_CheckIdleState+0xb8>)
 800a73e:	002a      	movs	r2, r5
 800a740:	9300      	str	r3, [sp, #0]
 800a742:	0389      	lsls	r1, r1, #14
 800a744:	0003      	movs	r3, r0
 800a746:	0020      	movs	r0, r4
 800a748:	f7ff ff3c 	bl	800a5c4 <UART_WaitOnFlagUntilTimeout>
 800a74c:	42a8      	cmp	r0, r5
 800a74e:	d012      	beq.n	800a776 <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a750:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a754:	2301      	movs	r3, #1
 800a756:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a75a:	2080      	movs	r0, #128	@ 0x80
 800a75c:	6822      	ldr	r2, [r4, #0]
 800a75e:	6813      	ldr	r3, [r2, #0]
 800a760:	4383      	bics	r3, r0
 800a762:	6013      	str	r3, [r2, #0]
 800a764:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 800a768:	2320      	movs	r3, #32
 800a76a:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 800a76c:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 800a76e:	2300      	movs	r3, #0
 800a770:	3478      	adds	r4, #120	@ 0x78
 800a772:	7023      	strb	r3, [r4, #0]
}
 800a774:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a776:	0025      	movs	r5, r4
 800a778:	cd08      	ldmia	r5!, {r3}
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	075b      	lsls	r3, r3, #29
 800a77e:	d523      	bpl.n	800a7c8 <UART_CheckIdleState+0xa8>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a780:	2180      	movs	r1, #128	@ 0x80
 800a782:	4b15      	ldr	r3, [pc, #84]	@ (800a7d8 <UART_CheckIdleState+0xb8>)
 800a784:	2200      	movs	r2, #0
 800a786:	9300      	str	r3, [sp, #0]
 800a788:	0020      	movs	r0, r4
 800a78a:	0033      	movs	r3, r6
 800a78c:	03c9      	lsls	r1, r1, #15
 800a78e:	f7ff ff19 	bl	800a5c4 <UART_WaitOnFlagUntilTimeout>
 800a792:	2800      	cmp	r0, #0
 800a794:	d018      	beq.n	800a7c8 <UART_CheckIdleState+0xa8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a796:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a79a:	2201      	movs	r2, #1
 800a79c:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a7a0:	6821      	ldr	r1, [r4, #0]
 800a7a2:	4e0e      	ldr	r6, [pc, #56]	@ (800a7dc <UART_CheckIdleState+0xbc>)
 800a7a4:	680b      	ldr	r3, [r1, #0]
 800a7a6:	4033      	ands	r3, r6
 800a7a8:	600b      	str	r3, [r1, #0]
 800a7aa:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7ae:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7b2:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7b6:	6821      	ldr	r1, [r4, #0]
 800a7b8:	688b      	ldr	r3, [r1, #8]
 800a7ba:	4393      	bics	r3, r2
 800a7bc:	608b      	str	r3, [r1, #8]
 800a7be:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 800a7c2:	2320      	movs	r3, #32
 800a7c4:	67eb      	str	r3, [r5, #124]	@ 0x7c
      return HAL_TIMEOUT;
 800a7c6:	e7d1      	b.n	800a76c <UART_CheckIdleState+0x4c>
  huart->gState = HAL_UART_STATE_READY;
 800a7c8:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7ca:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800a7cc:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a7ce:	67eb      	str	r3, [r5, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7d0:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a7d2:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 800a7d4:	e7cb      	b.n	800a76e <UART_CheckIdleState+0x4e>
 800a7d6:	46c0      	nop			@ (mov r8, r8)
 800a7d8:	01ffffff 	.word	0x01ffffff
 800a7dc:	fffffedf 	.word	0xfffffedf

0800a7e0 <HAL_UART_Init>:
{
 800a7e0:	b510      	push	{r4, lr}
 800a7e2:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 800a7e4:	d101      	bne.n	800a7ea <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800a7e6:	2001      	movs	r0, #1
}
 800a7e8:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800a7ea:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d104      	bne.n	800a7fa <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 800a7f0:	0002      	movs	r2, r0
 800a7f2:	3278      	adds	r2, #120	@ 0x78
 800a7f4:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800a7f6:	f7f9 fa0d 	bl	8003c14 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800a7fa:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 800a7fc:	2101      	movs	r1, #1
 800a7fe:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800a800:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 800a802:	6813      	ldr	r3, [r2, #0]
 800a804:	438b      	bics	r3, r1
 800a806:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a808:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d002      	beq.n	800a814 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 800a80e:	0020      	movs	r0, r4
 800a810:	f7ff fe70 	bl	800a4f4 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a814:	0020      	movs	r0, r4
 800a816:	f7ff fdd5 	bl	800a3c4 <UART_SetConfig>
 800a81a:	2801      	cmp	r0, #1
 800a81c:	d0e3      	beq.n	800a7e6 <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a81e:	6823      	ldr	r3, [r4, #0]
 800a820:	4907      	ldr	r1, [pc, #28]	@ (800a840 <HAL_UART_Init+0x60>)
 800a822:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 800a824:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a826:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a828:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a82a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a82c:	689a      	ldr	r2, [r3, #8]
 800a82e:	438a      	bics	r2, r1
 800a830:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800a832:	2201      	movs	r2, #1
 800a834:	6819      	ldr	r1, [r3, #0]
 800a836:	430a      	orrs	r2, r1
 800a838:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800a83a:	f7ff ff71 	bl	800a720 <UART_CheckIdleState>
 800a83e:	e7d3      	b.n	800a7e8 <HAL_UART_Init+0x8>
 800a840:	ffffb7ff 	.word	0xffffb7ff

0800a844 <UART_Start_Receive_DMA>:
{
 800a844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a846:	0013      	movs	r3, r2
  huart->RxXferSize = Size;
 800a848:	0002      	movs	r2, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a84a:	0006      	movs	r6, r0
  huart->RxXferSize = Size;
 800a84c:	3258      	adds	r2, #88	@ 0x58
  huart->pRxBuffPtr = pData;
 800a84e:	6541      	str	r1, [r0, #84]	@ 0x54
{
 800a850:	000f      	movs	r7, r1
  huart->RxXferSize = Size;
 800a852:	8013      	strh	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a854:	2122      	movs	r1, #34	@ 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a856:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a858:	1d05      	adds	r5, r0, #4
{
 800a85a:	0004      	movs	r4, r0
  if (huart->hdmarx != NULL)
 800a85c:	6f40      	ldr	r0, [r0, #116]	@ 0x74
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a85e:	3608      	adds	r6, #8
 800a860:	67f2      	str	r2, [r6, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a862:	67e9      	str	r1, [r5, #124]	@ 0x7c
  if (huart->hdmarx != NULL)
 800a864:	4290      	cmp	r0, r2
 800a866:	d013      	beq.n	800a890 <UART_Start_Receive_DMA+0x4c>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a868:	491d      	ldr	r1, [pc, #116]	@ (800a8e0 <UART_Start_Receive_DMA+0x9c>)
    huart->hdmarx->XferAbortCallback = NULL;
 800a86a:	6342      	str	r2, [r0, #52]	@ 0x34
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a86c:	6281      	str	r1, [r0, #40]	@ 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a86e:	491d      	ldr	r1, [pc, #116]	@ (800a8e4 <UART_Start_Receive_DMA+0xa0>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a870:	003a      	movs	r2, r7
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a872:	62c1      	str	r1, [r0, #44]	@ 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a874:	491c      	ldr	r1, [pc, #112]	@ (800a8e8 <UART_Start_Receive_DMA+0xa4>)
 800a876:	6301      	str	r1, [r0, #48]	@ 0x30
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a878:	6821      	ldr	r1, [r4, #0]
 800a87a:	3124      	adds	r1, #36	@ 0x24
 800a87c:	f7fe f90a 	bl	8008a94 <HAL_DMA_Start_IT>
 800a880:	2800      	cmp	r0, #0
 800a882:	d005      	beq.n	800a890 <UART_Start_Receive_DMA+0x4c>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a884:	2310      	movs	r3, #16
      return HAL_ERROR;
 800a886:	2001      	movs	r0, #1
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a888:	67f3      	str	r3, [r6, #124]	@ 0x7c
      huart->RxState = HAL_UART_STATE_READY;
 800a88a:	18db      	adds	r3, r3, r3
 800a88c:	67eb      	str	r3, [r5, #124]	@ 0x7c
}
 800a88e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a890:	6923      	ldr	r3, [r4, #16]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d00b      	beq.n	800a8ae <UART_Start_Receive_DMA+0x6a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a896:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a89a:	2301      	movs	r3, #1
 800a89c:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a8a0:	6822      	ldr	r2, [r4, #0]
 800a8a2:	33ff      	adds	r3, #255	@ 0xff
 800a8a4:	6810      	ldr	r0, [r2, #0]
 800a8a6:	4303      	orrs	r3, r0
 800a8a8:	6013      	str	r3, [r2, #0]
 800a8aa:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8ae:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8b8:	6821      	ldr	r1, [r4, #0]
 800a8ba:	688a      	ldr	r2, [r1, #8]
 800a8bc:	431a      	orrs	r2, r3
 800a8be:	608a      	str	r2, [r1, #8]
 800a8c0:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8c4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8c8:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8cc:	6822      	ldr	r2, [r4, #0]
 800a8ce:	333f      	adds	r3, #63	@ 0x3f
 800a8d0:	6890      	ldr	r0, [r2, #8]
 800a8d2:	4303      	orrs	r3, r0
 800a8d4:	6093      	str	r3, [r2, #8]
 800a8d6:	f381 8810 	msr	PRIMASK, r1
  return HAL_OK;
 800a8da:	2000      	movs	r0, #0
 800a8dc:	e7d7      	b.n	800a88e <UART_Start_Receive_DMA+0x4a>
 800a8de:	46c0      	nop			@ (mov r8, r8)
 800a8e0:	0800a329 	.word	0x0800a329
 800a8e4:	0800a305 	.word	0x0800a305
 800a8e8:	08009fc9 	.word	0x08009fc9

0800a8ec <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a8ec:	4770      	bx	lr

0800a8ee <HAL_UARTEx_ReceiveToIdle_DMA>:
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a8ee:	1d03      	adds	r3, r0, #4
 800a8f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
{
 800a8f2:	b570      	push	{r4, r5, r6, lr}
 800a8f4:	0004      	movs	r4, r0

    return status;
  }
  else
  {
    return HAL_BUSY;
 800a8f6:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 800a8f8:	2b20      	cmp	r3, #32
 800a8fa:	d102      	bne.n	800a902 <HAL_UARTEx_ReceiveToIdle_DMA+0x14>
    if ((pData == NULL) || (Size == 0U))
 800a8fc:	2900      	cmp	r1, #0
 800a8fe:	d101      	bne.n	800a904 <HAL_UARTEx_ReceiveToIdle_DMA+0x16>
      return HAL_ERROR;
 800a900:	2001      	movs	r0, #1
  }
}
 800a902:	bd70      	pop	{r4, r5, r6, pc}
    if ((pData == NULL) || (Size == 0U))
 800a904:	2a00      	cmp	r2, #0
 800a906:	d0fb      	beq.n	800a900 <HAL_UARTEx_ReceiveToIdle_DMA+0x12>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a908:	2080      	movs	r0, #128	@ 0x80
 800a90a:	68a5      	ldr	r5, [r4, #8]
 800a90c:	2301      	movs	r3, #1
 800a90e:	0140      	lsls	r0, r0, #5
 800a910:	4285      	cmp	r5, r0
 800a912:	d104      	bne.n	800a91e <HAL_UARTEx_ReceiveToIdle_DMA+0x30>
 800a914:	6920      	ldr	r0, [r4, #16]
 800a916:	2800      	cmp	r0, #0
 800a918:	d101      	bne.n	800a91e <HAL_UARTEx_ReceiveToIdle_DMA+0x30>
      if ((((uint32_t)pData) & 1U) != 0U)
 800a91a:	4219      	tst	r1, r3
 800a91c:	d1f0      	bne.n	800a900 <HAL_UARTEx_ReceiveToIdle_DMA+0x12>
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a91e:	6623      	str	r3, [r4, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a920:	2300      	movs	r3, #0
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a922:	0020      	movs	r0, r4
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a924:	6663      	str	r3, [r4, #100]	@ 0x64
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a926:	f7ff ff8d 	bl	800a844 <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 800a92a:	2800      	cmp	r0, #0
 800a92c:	d1e9      	bne.n	800a902 <HAL_UARTEx_ReceiveToIdle_DMA+0x14>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a92e:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800a930:	2a01      	cmp	r2, #1
 800a932:	d1e5      	bne.n	800a900 <HAL_UARTEx_ReceiveToIdle_DMA+0x12>
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a934:	2310      	movs	r3, #16
 800a936:	6821      	ldr	r1, [r4, #0]
 800a938:	620b      	str	r3, [r1, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a93a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a93e:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a942:	6822      	ldr	r2, [r4, #0]
 800a944:	6814      	ldr	r4, [r2, #0]
 800a946:	4323      	orrs	r3, r4
 800a948:	6013      	str	r3, [r2, #0]
 800a94a:	f381 8810 	msr	PRIMASK, r1
}
 800a94e:	e7d8      	b.n	800a902 <HAL_UARTEx_ReceiveToIdle_DMA+0x14>

0800a950 <calloc>:
 800a950:	b510      	push	{r4, lr}
 800a952:	4b03      	ldr	r3, [pc, #12]	@ (800a960 <calloc+0x10>)
 800a954:	000a      	movs	r2, r1
 800a956:	0001      	movs	r1, r0
 800a958:	6818      	ldr	r0, [r3, #0]
 800a95a:	f000 f803 	bl	800a964 <_calloc_r>
 800a95e:	bd10      	pop	{r4, pc}
 800a960:	20000018 	.word	0x20000018

0800a964 <_calloc_r>:
 800a964:	b570      	push	{r4, r5, r6, lr}
 800a966:	0c0b      	lsrs	r3, r1, #16
 800a968:	0c15      	lsrs	r5, r2, #16
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d11e      	bne.n	800a9ac <_calloc_r+0x48>
 800a96e:	2d00      	cmp	r5, #0
 800a970:	d10c      	bne.n	800a98c <_calloc_r+0x28>
 800a972:	b289      	uxth	r1, r1
 800a974:	b294      	uxth	r4, r2
 800a976:	434c      	muls	r4, r1
 800a978:	0021      	movs	r1, r4
 800a97a:	f000 f857 	bl	800aa2c <_malloc_r>
 800a97e:	1e05      	subs	r5, r0, #0
 800a980:	d01a      	beq.n	800a9b8 <_calloc_r+0x54>
 800a982:	0022      	movs	r2, r4
 800a984:	2100      	movs	r1, #0
 800a986:	f000 fe61 	bl	800b64c <memset>
 800a98a:	e016      	b.n	800a9ba <_calloc_r+0x56>
 800a98c:	1c2b      	adds	r3, r5, #0
 800a98e:	1c0c      	adds	r4, r1, #0
 800a990:	b289      	uxth	r1, r1
 800a992:	b292      	uxth	r2, r2
 800a994:	434a      	muls	r2, r1
 800a996:	b29b      	uxth	r3, r3
 800a998:	b2a1      	uxth	r1, r4
 800a99a:	4359      	muls	r1, r3
 800a99c:	0c14      	lsrs	r4, r2, #16
 800a99e:	190c      	adds	r4, r1, r4
 800a9a0:	0c23      	lsrs	r3, r4, #16
 800a9a2:	d107      	bne.n	800a9b4 <_calloc_r+0x50>
 800a9a4:	0424      	lsls	r4, r4, #16
 800a9a6:	b292      	uxth	r2, r2
 800a9a8:	4314      	orrs	r4, r2
 800a9aa:	e7e5      	b.n	800a978 <_calloc_r+0x14>
 800a9ac:	2d00      	cmp	r5, #0
 800a9ae:	d101      	bne.n	800a9b4 <_calloc_r+0x50>
 800a9b0:	1c14      	adds	r4, r2, #0
 800a9b2:	e7ed      	b.n	800a990 <_calloc_r+0x2c>
 800a9b4:	230c      	movs	r3, #12
 800a9b6:	6003      	str	r3, [r0, #0]
 800a9b8:	2500      	movs	r5, #0
 800a9ba:	0028      	movs	r0, r5
 800a9bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a9c0 <malloc>:
 800a9c0:	b510      	push	{r4, lr}
 800a9c2:	4b03      	ldr	r3, [pc, #12]	@ (800a9d0 <malloc+0x10>)
 800a9c4:	0001      	movs	r1, r0
 800a9c6:	6818      	ldr	r0, [r3, #0]
 800a9c8:	f000 f830 	bl	800aa2c <_malloc_r>
 800a9cc:	bd10      	pop	{r4, pc}
 800a9ce:	46c0      	nop			@ (mov r8, r8)
 800a9d0:	20000018 	.word	0x20000018

0800a9d4 <free>:
 800a9d4:	b510      	push	{r4, lr}
 800a9d6:	4b03      	ldr	r3, [pc, #12]	@ (800a9e4 <free+0x10>)
 800a9d8:	0001      	movs	r1, r0
 800a9da:	6818      	ldr	r0, [r3, #0]
 800a9dc:	f001 fd82 	bl	800c4e4 <_free_r>
 800a9e0:	bd10      	pop	{r4, pc}
 800a9e2:	46c0      	nop			@ (mov r8, r8)
 800a9e4:	20000018 	.word	0x20000018

0800a9e8 <sbrk_aligned>:
 800a9e8:	b570      	push	{r4, r5, r6, lr}
 800a9ea:	4e0f      	ldr	r6, [pc, #60]	@ (800aa28 <sbrk_aligned+0x40>)
 800a9ec:	000d      	movs	r5, r1
 800a9ee:	6831      	ldr	r1, [r6, #0]
 800a9f0:	0004      	movs	r4, r0
 800a9f2:	2900      	cmp	r1, #0
 800a9f4:	d102      	bne.n	800a9fc <sbrk_aligned+0x14>
 800a9f6:	f000 fe83 	bl	800b700 <_sbrk_r>
 800a9fa:	6030      	str	r0, [r6, #0]
 800a9fc:	0029      	movs	r1, r5
 800a9fe:	0020      	movs	r0, r4
 800aa00:	f000 fe7e 	bl	800b700 <_sbrk_r>
 800aa04:	1c43      	adds	r3, r0, #1
 800aa06:	d103      	bne.n	800aa10 <sbrk_aligned+0x28>
 800aa08:	2501      	movs	r5, #1
 800aa0a:	426d      	negs	r5, r5
 800aa0c:	0028      	movs	r0, r5
 800aa0e:	bd70      	pop	{r4, r5, r6, pc}
 800aa10:	2303      	movs	r3, #3
 800aa12:	1cc5      	adds	r5, r0, #3
 800aa14:	439d      	bics	r5, r3
 800aa16:	42a8      	cmp	r0, r5
 800aa18:	d0f8      	beq.n	800aa0c <sbrk_aligned+0x24>
 800aa1a:	1a29      	subs	r1, r5, r0
 800aa1c:	0020      	movs	r0, r4
 800aa1e:	f000 fe6f 	bl	800b700 <_sbrk_r>
 800aa22:	3001      	adds	r0, #1
 800aa24:	d1f2      	bne.n	800aa0c <sbrk_aligned+0x24>
 800aa26:	e7ef      	b.n	800aa08 <sbrk_aligned+0x20>
 800aa28:	20000628 	.word	0x20000628

0800aa2c <_malloc_r>:
 800aa2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa2e:	2203      	movs	r2, #3
 800aa30:	1ccb      	adds	r3, r1, #3
 800aa32:	4393      	bics	r3, r2
 800aa34:	3308      	adds	r3, #8
 800aa36:	0005      	movs	r5, r0
 800aa38:	001f      	movs	r7, r3
 800aa3a:	2b0c      	cmp	r3, #12
 800aa3c:	d234      	bcs.n	800aaa8 <_malloc_r+0x7c>
 800aa3e:	270c      	movs	r7, #12
 800aa40:	42b9      	cmp	r1, r7
 800aa42:	d833      	bhi.n	800aaac <_malloc_r+0x80>
 800aa44:	0028      	movs	r0, r5
 800aa46:	f000 f871 	bl	800ab2c <__malloc_lock>
 800aa4a:	4e37      	ldr	r6, [pc, #220]	@ (800ab28 <_malloc_r+0xfc>)
 800aa4c:	6833      	ldr	r3, [r6, #0]
 800aa4e:	001c      	movs	r4, r3
 800aa50:	2c00      	cmp	r4, #0
 800aa52:	d12f      	bne.n	800aab4 <_malloc_r+0x88>
 800aa54:	0039      	movs	r1, r7
 800aa56:	0028      	movs	r0, r5
 800aa58:	f7ff ffc6 	bl	800a9e8 <sbrk_aligned>
 800aa5c:	0004      	movs	r4, r0
 800aa5e:	1c43      	adds	r3, r0, #1
 800aa60:	d15f      	bne.n	800ab22 <_malloc_r+0xf6>
 800aa62:	6834      	ldr	r4, [r6, #0]
 800aa64:	9400      	str	r4, [sp, #0]
 800aa66:	9b00      	ldr	r3, [sp, #0]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d14a      	bne.n	800ab02 <_malloc_r+0xd6>
 800aa6c:	2c00      	cmp	r4, #0
 800aa6e:	d052      	beq.n	800ab16 <_malloc_r+0xea>
 800aa70:	6823      	ldr	r3, [r4, #0]
 800aa72:	0028      	movs	r0, r5
 800aa74:	18e3      	adds	r3, r4, r3
 800aa76:	9900      	ldr	r1, [sp, #0]
 800aa78:	9301      	str	r3, [sp, #4]
 800aa7a:	f000 fe41 	bl	800b700 <_sbrk_r>
 800aa7e:	9b01      	ldr	r3, [sp, #4]
 800aa80:	4283      	cmp	r3, r0
 800aa82:	d148      	bne.n	800ab16 <_malloc_r+0xea>
 800aa84:	6823      	ldr	r3, [r4, #0]
 800aa86:	0028      	movs	r0, r5
 800aa88:	1aff      	subs	r7, r7, r3
 800aa8a:	0039      	movs	r1, r7
 800aa8c:	f7ff ffac 	bl	800a9e8 <sbrk_aligned>
 800aa90:	3001      	adds	r0, #1
 800aa92:	d040      	beq.n	800ab16 <_malloc_r+0xea>
 800aa94:	6823      	ldr	r3, [r4, #0]
 800aa96:	19db      	adds	r3, r3, r7
 800aa98:	6023      	str	r3, [r4, #0]
 800aa9a:	6833      	ldr	r3, [r6, #0]
 800aa9c:	685a      	ldr	r2, [r3, #4]
 800aa9e:	2a00      	cmp	r2, #0
 800aaa0:	d133      	bne.n	800ab0a <_malloc_r+0xde>
 800aaa2:	9b00      	ldr	r3, [sp, #0]
 800aaa4:	6033      	str	r3, [r6, #0]
 800aaa6:	e019      	b.n	800aadc <_malloc_r+0xb0>
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	dac9      	bge.n	800aa40 <_malloc_r+0x14>
 800aaac:	230c      	movs	r3, #12
 800aaae:	602b      	str	r3, [r5, #0]
 800aab0:	2000      	movs	r0, #0
 800aab2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aab4:	6821      	ldr	r1, [r4, #0]
 800aab6:	1bc9      	subs	r1, r1, r7
 800aab8:	d420      	bmi.n	800aafc <_malloc_r+0xd0>
 800aaba:	290b      	cmp	r1, #11
 800aabc:	d90a      	bls.n	800aad4 <_malloc_r+0xa8>
 800aabe:	19e2      	adds	r2, r4, r7
 800aac0:	6027      	str	r7, [r4, #0]
 800aac2:	42a3      	cmp	r3, r4
 800aac4:	d104      	bne.n	800aad0 <_malloc_r+0xa4>
 800aac6:	6032      	str	r2, [r6, #0]
 800aac8:	6863      	ldr	r3, [r4, #4]
 800aaca:	6011      	str	r1, [r2, #0]
 800aacc:	6053      	str	r3, [r2, #4]
 800aace:	e005      	b.n	800aadc <_malloc_r+0xb0>
 800aad0:	605a      	str	r2, [r3, #4]
 800aad2:	e7f9      	b.n	800aac8 <_malloc_r+0x9c>
 800aad4:	6862      	ldr	r2, [r4, #4]
 800aad6:	42a3      	cmp	r3, r4
 800aad8:	d10e      	bne.n	800aaf8 <_malloc_r+0xcc>
 800aada:	6032      	str	r2, [r6, #0]
 800aadc:	0028      	movs	r0, r5
 800aade:	f000 f82d 	bl	800ab3c <__malloc_unlock>
 800aae2:	0020      	movs	r0, r4
 800aae4:	2207      	movs	r2, #7
 800aae6:	300b      	adds	r0, #11
 800aae8:	1d23      	adds	r3, r4, #4
 800aaea:	4390      	bics	r0, r2
 800aaec:	1ac2      	subs	r2, r0, r3
 800aaee:	4298      	cmp	r0, r3
 800aaf0:	d0df      	beq.n	800aab2 <_malloc_r+0x86>
 800aaf2:	1a1b      	subs	r3, r3, r0
 800aaf4:	50a3      	str	r3, [r4, r2]
 800aaf6:	e7dc      	b.n	800aab2 <_malloc_r+0x86>
 800aaf8:	605a      	str	r2, [r3, #4]
 800aafa:	e7ef      	b.n	800aadc <_malloc_r+0xb0>
 800aafc:	0023      	movs	r3, r4
 800aafe:	6864      	ldr	r4, [r4, #4]
 800ab00:	e7a6      	b.n	800aa50 <_malloc_r+0x24>
 800ab02:	9c00      	ldr	r4, [sp, #0]
 800ab04:	6863      	ldr	r3, [r4, #4]
 800ab06:	9300      	str	r3, [sp, #0]
 800ab08:	e7ad      	b.n	800aa66 <_malloc_r+0x3a>
 800ab0a:	001a      	movs	r2, r3
 800ab0c:	685b      	ldr	r3, [r3, #4]
 800ab0e:	42a3      	cmp	r3, r4
 800ab10:	d1fb      	bne.n	800ab0a <_malloc_r+0xde>
 800ab12:	2300      	movs	r3, #0
 800ab14:	e7da      	b.n	800aacc <_malloc_r+0xa0>
 800ab16:	230c      	movs	r3, #12
 800ab18:	0028      	movs	r0, r5
 800ab1a:	602b      	str	r3, [r5, #0]
 800ab1c:	f000 f80e 	bl	800ab3c <__malloc_unlock>
 800ab20:	e7c6      	b.n	800aab0 <_malloc_r+0x84>
 800ab22:	6007      	str	r7, [r0, #0]
 800ab24:	e7da      	b.n	800aadc <_malloc_r+0xb0>
 800ab26:	46c0      	nop			@ (mov r8, r8)
 800ab28:	2000062c 	.word	0x2000062c

0800ab2c <__malloc_lock>:
 800ab2c:	b510      	push	{r4, lr}
 800ab2e:	4802      	ldr	r0, [pc, #8]	@ (800ab38 <__malloc_lock+0xc>)
 800ab30:	f000 fe37 	bl	800b7a2 <__retarget_lock_acquire_recursive>
 800ab34:	bd10      	pop	{r4, pc}
 800ab36:	46c0      	nop			@ (mov r8, r8)
 800ab38:	20000770 	.word	0x20000770

0800ab3c <__malloc_unlock>:
 800ab3c:	b510      	push	{r4, lr}
 800ab3e:	4802      	ldr	r0, [pc, #8]	@ (800ab48 <__malloc_unlock+0xc>)
 800ab40:	f000 fe30 	bl	800b7a4 <__retarget_lock_release_recursive>
 800ab44:	bd10      	pop	{r4, pc}
 800ab46:	46c0      	nop			@ (mov r8, r8)
 800ab48:	20000770 	.word	0x20000770

0800ab4c <__cvt>:
 800ab4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab4e:	001f      	movs	r7, r3
 800ab50:	2300      	movs	r3, #0
 800ab52:	0016      	movs	r6, r2
 800ab54:	b08b      	sub	sp, #44	@ 0x2c
 800ab56:	429f      	cmp	r7, r3
 800ab58:	da04      	bge.n	800ab64 <__cvt+0x18>
 800ab5a:	2180      	movs	r1, #128	@ 0x80
 800ab5c:	0609      	lsls	r1, r1, #24
 800ab5e:	187b      	adds	r3, r7, r1
 800ab60:	001f      	movs	r7, r3
 800ab62:	232d      	movs	r3, #45	@ 0x2d
 800ab64:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ab66:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800ab68:	7013      	strb	r3, [r2, #0]
 800ab6a:	2320      	movs	r3, #32
 800ab6c:	2203      	movs	r2, #3
 800ab6e:	439d      	bics	r5, r3
 800ab70:	2d46      	cmp	r5, #70	@ 0x46
 800ab72:	d007      	beq.n	800ab84 <__cvt+0x38>
 800ab74:	002b      	movs	r3, r5
 800ab76:	3b45      	subs	r3, #69	@ 0x45
 800ab78:	4259      	negs	r1, r3
 800ab7a:	414b      	adcs	r3, r1
 800ab7c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800ab7e:	3a01      	subs	r2, #1
 800ab80:	18cb      	adds	r3, r1, r3
 800ab82:	9310      	str	r3, [sp, #64]	@ 0x40
 800ab84:	ab09      	add	r3, sp, #36	@ 0x24
 800ab86:	9304      	str	r3, [sp, #16]
 800ab88:	ab08      	add	r3, sp, #32
 800ab8a:	9303      	str	r3, [sp, #12]
 800ab8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ab8e:	9200      	str	r2, [sp, #0]
 800ab90:	9302      	str	r3, [sp, #8]
 800ab92:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ab94:	0032      	movs	r2, r6
 800ab96:	9301      	str	r3, [sp, #4]
 800ab98:	003b      	movs	r3, r7
 800ab9a:	f000 feaf 	bl	800b8fc <_dtoa_r>
 800ab9e:	0004      	movs	r4, r0
 800aba0:	2d47      	cmp	r5, #71	@ 0x47
 800aba2:	d11b      	bne.n	800abdc <__cvt+0x90>
 800aba4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aba6:	07db      	lsls	r3, r3, #31
 800aba8:	d511      	bpl.n	800abce <__cvt+0x82>
 800abaa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800abac:	18c3      	adds	r3, r0, r3
 800abae:	9307      	str	r3, [sp, #28]
 800abb0:	2200      	movs	r2, #0
 800abb2:	2300      	movs	r3, #0
 800abb4:	0030      	movs	r0, r6
 800abb6:	0039      	movs	r1, r7
 800abb8:	f7f5 fc5e 	bl	8000478 <__aeabi_dcmpeq>
 800abbc:	2800      	cmp	r0, #0
 800abbe:	d001      	beq.n	800abc4 <__cvt+0x78>
 800abc0:	9b07      	ldr	r3, [sp, #28]
 800abc2:	9309      	str	r3, [sp, #36]	@ 0x24
 800abc4:	2230      	movs	r2, #48	@ 0x30
 800abc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abc8:	9907      	ldr	r1, [sp, #28]
 800abca:	428b      	cmp	r3, r1
 800abcc:	d320      	bcc.n	800ac10 <__cvt+0xc4>
 800abce:	0020      	movs	r0, r4
 800abd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abd2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800abd4:	1b1b      	subs	r3, r3, r4
 800abd6:	6013      	str	r3, [r2, #0]
 800abd8:	b00b      	add	sp, #44	@ 0x2c
 800abda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abdc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800abde:	18c3      	adds	r3, r0, r3
 800abe0:	9307      	str	r3, [sp, #28]
 800abe2:	2d46      	cmp	r5, #70	@ 0x46
 800abe4:	d1e4      	bne.n	800abb0 <__cvt+0x64>
 800abe6:	7803      	ldrb	r3, [r0, #0]
 800abe8:	2b30      	cmp	r3, #48	@ 0x30
 800abea:	d10c      	bne.n	800ac06 <__cvt+0xba>
 800abec:	2200      	movs	r2, #0
 800abee:	2300      	movs	r3, #0
 800abf0:	0030      	movs	r0, r6
 800abf2:	0039      	movs	r1, r7
 800abf4:	f7f5 fc40 	bl	8000478 <__aeabi_dcmpeq>
 800abf8:	2800      	cmp	r0, #0
 800abfa:	d104      	bne.n	800ac06 <__cvt+0xba>
 800abfc:	2301      	movs	r3, #1
 800abfe:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800ac00:	1a9b      	subs	r3, r3, r2
 800ac02:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ac04:	6013      	str	r3, [r2, #0]
 800ac06:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ac08:	9a07      	ldr	r2, [sp, #28]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	18d3      	adds	r3, r2, r3
 800ac0e:	e7ce      	b.n	800abae <__cvt+0x62>
 800ac10:	1c59      	adds	r1, r3, #1
 800ac12:	9109      	str	r1, [sp, #36]	@ 0x24
 800ac14:	701a      	strb	r2, [r3, #0]
 800ac16:	e7d6      	b.n	800abc6 <__cvt+0x7a>

0800ac18 <__exponent>:
 800ac18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac1a:	232b      	movs	r3, #43	@ 0x2b
 800ac1c:	0005      	movs	r5, r0
 800ac1e:	000c      	movs	r4, r1
 800ac20:	b085      	sub	sp, #20
 800ac22:	7002      	strb	r2, [r0, #0]
 800ac24:	2900      	cmp	r1, #0
 800ac26:	da01      	bge.n	800ac2c <__exponent+0x14>
 800ac28:	424c      	negs	r4, r1
 800ac2a:	3302      	adds	r3, #2
 800ac2c:	706b      	strb	r3, [r5, #1]
 800ac2e:	2c09      	cmp	r4, #9
 800ac30:	dd2c      	ble.n	800ac8c <__exponent+0x74>
 800ac32:	ab02      	add	r3, sp, #8
 800ac34:	1dde      	adds	r6, r3, #7
 800ac36:	0020      	movs	r0, r4
 800ac38:	210a      	movs	r1, #10
 800ac3a:	f7f5 fbfb 	bl	8000434 <__aeabi_idivmod>
 800ac3e:	0037      	movs	r7, r6
 800ac40:	3130      	adds	r1, #48	@ 0x30
 800ac42:	3e01      	subs	r6, #1
 800ac44:	0020      	movs	r0, r4
 800ac46:	7031      	strb	r1, [r6, #0]
 800ac48:	210a      	movs	r1, #10
 800ac4a:	9401      	str	r4, [sp, #4]
 800ac4c:	f7f5 fb0c 	bl	8000268 <__divsi3>
 800ac50:	9b01      	ldr	r3, [sp, #4]
 800ac52:	0004      	movs	r4, r0
 800ac54:	2b63      	cmp	r3, #99	@ 0x63
 800ac56:	dcee      	bgt.n	800ac36 <__exponent+0x1e>
 800ac58:	1eba      	subs	r2, r7, #2
 800ac5a:	1ca8      	adds	r0, r5, #2
 800ac5c:	0001      	movs	r1, r0
 800ac5e:	0013      	movs	r3, r2
 800ac60:	3430      	adds	r4, #48	@ 0x30
 800ac62:	7014      	strb	r4, [r2, #0]
 800ac64:	ac02      	add	r4, sp, #8
 800ac66:	3407      	adds	r4, #7
 800ac68:	429c      	cmp	r4, r3
 800ac6a:	d80a      	bhi.n	800ac82 <__exponent+0x6a>
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	42a2      	cmp	r2, r4
 800ac70:	d803      	bhi.n	800ac7a <__exponent+0x62>
 800ac72:	3309      	adds	r3, #9
 800ac74:	aa02      	add	r2, sp, #8
 800ac76:	189b      	adds	r3, r3, r2
 800ac78:	1bdb      	subs	r3, r3, r7
 800ac7a:	18c0      	adds	r0, r0, r3
 800ac7c:	1b40      	subs	r0, r0, r5
 800ac7e:	b005      	add	sp, #20
 800ac80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac82:	781c      	ldrb	r4, [r3, #0]
 800ac84:	3301      	adds	r3, #1
 800ac86:	700c      	strb	r4, [r1, #0]
 800ac88:	3101      	adds	r1, #1
 800ac8a:	e7eb      	b.n	800ac64 <__exponent+0x4c>
 800ac8c:	2330      	movs	r3, #48	@ 0x30
 800ac8e:	18e4      	adds	r4, r4, r3
 800ac90:	70ab      	strb	r3, [r5, #2]
 800ac92:	1d28      	adds	r0, r5, #4
 800ac94:	70ec      	strb	r4, [r5, #3]
 800ac96:	e7f1      	b.n	800ac7c <__exponent+0x64>

0800ac98 <_printf_float>:
 800ac98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac9a:	b097      	sub	sp, #92	@ 0x5c
 800ac9c:	000d      	movs	r5, r1
 800ac9e:	920a      	str	r2, [sp, #40]	@ 0x28
 800aca0:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800aca2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aca4:	9009      	str	r0, [sp, #36]	@ 0x24
 800aca6:	f000 fced 	bl	800b684 <_localeconv_r>
 800acaa:	6803      	ldr	r3, [r0, #0]
 800acac:	0018      	movs	r0, r3
 800acae:	930d      	str	r3, [sp, #52]	@ 0x34
 800acb0:	f7f5 fa2a 	bl	8000108 <strlen>
 800acb4:	2300      	movs	r3, #0
 800acb6:	900f      	str	r0, [sp, #60]	@ 0x3c
 800acb8:	9314      	str	r3, [sp, #80]	@ 0x50
 800acba:	7e2b      	ldrb	r3, [r5, #24]
 800acbc:	2207      	movs	r2, #7
 800acbe:	930c      	str	r3, [sp, #48]	@ 0x30
 800acc0:	682b      	ldr	r3, [r5, #0]
 800acc2:	930e      	str	r3, [sp, #56]	@ 0x38
 800acc4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800acc6:	6823      	ldr	r3, [r4, #0]
 800acc8:	05c9      	lsls	r1, r1, #23
 800acca:	d545      	bpl.n	800ad58 <_printf_float+0xc0>
 800accc:	189b      	adds	r3, r3, r2
 800acce:	4393      	bics	r3, r2
 800acd0:	001a      	movs	r2, r3
 800acd2:	3208      	adds	r2, #8
 800acd4:	6022      	str	r2, [r4, #0]
 800acd6:	2201      	movs	r2, #1
 800acd8:	681e      	ldr	r6, [r3, #0]
 800acda:	685f      	ldr	r7, [r3, #4]
 800acdc:	007b      	lsls	r3, r7, #1
 800acde:	085b      	lsrs	r3, r3, #1
 800ace0:	9311      	str	r3, [sp, #68]	@ 0x44
 800ace2:	9610      	str	r6, [sp, #64]	@ 0x40
 800ace4:	64ae      	str	r6, [r5, #72]	@ 0x48
 800ace6:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800ace8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800acea:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800acec:	4ba7      	ldr	r3, [pc, #668]	@ (800af8c <_printf_float+0x2f4>)
 800acee:	4252      	negs	r2, r2
 800acf0:	f7f8 f964 	bl	8002fbc <__aeabi_dcmpun>
 800acf4:	2800      	cmp	r0, #0
 800acf6:	d131      	bne.n	800ad5c <_printf_float+0xc4>
 800acf8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800acfa:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800acfc:	2201      	movs	r2, #1
 800acfe:	4ba3      	ldr	r3, [pc, #652]	@ (800af8c <_printf_float+0x2f4>)
 800ad00:	4252      	negs	r2, r2
 800ad02:	f7f5 fbc9 	bl	8000498 <__aeabi_dcmple>
 800ad06:	2800      	cmp	r0, #0
 800ad08:	d128      	bne.n	800ad5c <_printf_float+0xc4>
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	0030      	movs	r0, r6
 800ad10:	0039      	movs	r1, r7
 800ad12:	f7f5 fbb7 	bl	8000484 <__aeabi_dcmplt>
 800ad16:	2800      	cmp	r0, #0
 800ad18:	d003      	beq.n	800ad22 <_printf_float+0x8a>
 800ad1a:	002b      	movs	r3, r5
 800ad1c:	222d      	movs	r2, #45	@ 0x2d
 800ad1e:	3343      	adds	r3, #67	@ 0x43
 800ad20:	701a      	strb	r2, [r3, #0]
 800ad22:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad24:	4f9a      	ldr	r7, [pc, #616]	@ (800af90 <_printf_float+0x2f8>)
 800ad26:	2b47      	cmp	r3, #71	@ 0x47
 800ad28:	d900      	bls.n	800ad2c <_printf_float+0x94>
 800ad2a:	4f9a      	ldr	r7, [pc, #616]	@ (800af94 <_printf_float+0x2fc>)
 800ad2c:	2303      	movs	r3, #3
 800ad2e:	2400      	movs	r4, #0
 800ad30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad32:	612b      	str	r3, [r5, #16]
 800ad34:	3301      	adds	r3, #1
 800ad36:	439a      	bics	r2, r3
 800ad38:	602a      	str	r2, [r5, #0]
 800ad3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad3c:	0029      	movs	r1, r5
 800ad3e:	9300      	str	r3, [sp, #0]
 800ad40:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad44:	aa15      	add	r2, sp, #84	@ 0x54
 800ad46:	f000 f9e5 	bl	800b114 <_printf_common>
 800ad4a:	3001      	adds	r0, #1
 800ad4c:	d000      	beq.n	800ad50 <_printf_float+0xb8>
 800ad4e:	e09f      	b.n	800ae90 <_printf_float+0x1f8>
 800ad50:	2001      	movs	r0, #1
 800ad52:	4240      	negs	r0, r0
 800ad54:	b017      	add	sp, #92	@ 0x5c
 800ad56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad58:	3307      	adds	r3, #7
 800ad5a:	e7b8      	b.n	800acce <_printf_float+0x36>
 800ad5c:	0032      	movs	r2, r6
 800ad5e:	003b      	movs	r3, r7
 800ad60:	0030      	movs	r0, r6
 800ad62:	0039      	movs	r1, r7
 800ad64:	f7f8 f92a 	bl	8002fbc <__aeabi_dcmpun>
 800ad68:	2800      	cmp	r0, #0
 800ad6a:	d00b      	beq.n	800ad84 <_printf_float+0xec>
 800ad6c:	2f00      	cmp	r7, #0
 800ad6e:	da03      	bge.n	800ad78 <_printf_float+0xe0>
 800ad70:	002b      	movs	r3, r5
 800ad72:	222d      	movs	r2, #45	@ 0x2d
 800ad74:	3343      	adds	r3, #67	@ 0x43
 800ad76:	701a      	strb	r2, [r3, #0]
 800ad78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad7a:	4f87      	ldr	r7, [pc, #540]	@ (800af98 <_printf_float+0x300>)
 800ad7c:	2b47      	cmp	r3, #71	@ 0x47
 800ad7e:	d9d5      	bls.n	800ad2c <_printf_float+0x94>
 800ad80:	4f86      	ldr	r7, [pc, #536]	@ (800af9c <_printf_float+0x304>)
 800ad82:	e7d3      	b.n	800ad2c <_printf_float+0x94>
 800ad84:	2220      	movs	r2, #32
 800ad86:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800ad88:	686b      	ldr	r3, [r5, #4]
 800ad8a:	4394      	bics	r4, r2
 800ad8c:	1c5a      	adds	r2, r3, #1
 800ad8e:	d146      	bne.n	800ae1e <_printf_float+0x186>
 800ad90:	3307      	adds	r3, #7
 800ad92:	606b      	str	r3, [r5, #4]
 800ad94:	2380      	movs	r3, #128	@ 0x80
 800ad96:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad98:	00db      	lsls	r3, r3, #3
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	602b      	str	r3, [r5, #0]
 800ada0:	9206      	str	r2, [sp, #24]
 800ada2:	aa14      	add	r2, sp, #80	@ 0x50
 800ada4:	9205      	str	r2, [sp, #20]
 800ada6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ada8:	a90a      	add	r1, sp, #40	@ 0x28
 800adaa:	9204      	str	r2, [sp, #16]
 800adac:	aa13      	add	r2, sp, #76	@ 0x4c
 800adae:	9203      	str	r2, [sp, #12]
 800adb0:	2223      	movs	r2, #35	@ 0x23
 800adb2:	1852      	adds	r2, r2, r1
 800adb4:	9202      	str	r2, [sp, #8]
 800adb6:	9301      	str	r3, [sp, #4]
 800adb8:	686b      	ldr	r3, [r5, #4]
 800adba:	0032      	movs	r2, r6
 800adbc:	9300      	str	r3, [sp, #0]
 800adbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800adc0:	003b      	movs	r3, r7
 800adc2:	f7ff fec3 	bl	800ab4c <__cvt>
 800adc6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800adc8:	0007      	movs	r7, r0
 800adca:	2c47      	cmp	r4, #71	@ 0x47
 800adcc:	d12d      	bne.n	800ae2a <_printf_float+0x192>
 800adce:	1cd3      	adds	r3, r2, #3
 800add0:	db02      	blt.n	800add8 <_printf_float+0x140>
 800add2:	686b      	ldr	r3, [r5, #4]
 800add4:	429a      	cmp	r2, r3
 800add6:	dd48      	ble.n	800ae6a <_printf_float+0x1d2>
 800add8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800adda:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800addc:	3b02      	subs	r3, #2
 800adde:	b2db      	uxtb	r3, r3
 800ade0:	930c      	str	r3, [sp, #48]	@ 0x30
 800ade2:	0028      	movs	r0, r5
 800ade4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ade6:	3901      	subs	r1, #1
 800ade8:	3050      	adds	r0, #80	@ 0x50
 800adea:	9113      	str	r1, [sp, #76]	@ 0x4c
 800adec:	f7ff ff14 	bl	800ac18 <__exponent>
 800adf0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800adf2:	0004      	movs	r4, r0
 800adf4:	1813      	adds	r3, r2, r0
 800adf6:	612b      	str	r3, [r5, #16]
 800adf8:	2a01      	cmp	r2, #1
 800adfa:	dc02      	bgt.n	800ae02 <_printf_float+0x16a>
 800adfc:	682a      	ldr	r2, [r5, #0]
 800adfe:	07d2      	lsls	r2, r2, #31
 800ae00:	d501      	bpl.n	800ae06 <_printf_float+0x16e>
 800ae02:	3301      	adds	r3, #1
 800ae04:	612b      	str	r3, [r5, #16]
 800ae06:	2323      	movs	r3, #35	@ 0x23
 800ae08:	aa0a      	add	r2, sp, #40	@ 0x28
 800ae0a:	189b      	adds	r3, r3, r2
 800ae0c:	781b      	ldrb	r3, [r3, #0]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d100      	bne.n	800ae14 <_printf_float+0x17c>
 800ae12:	e792      	b.n	800ad3a <_printf_float+0xa2>
 800ae14:	002b      	movs	r3, r5
 800ae16:	222d      	movs	r2, #45	@ 0x2d
 800ae18:	3343      	adds	r3, #67	@ 0x43
 800ae1a:	701a      	strb	r2, [r3, #0]
 800ae1c:	e78d      	b.n	800ad3a <_printf_float+0xa2>
 800ae1e:	2c47      	cmp	r4, #71	@ 0x47
 800ae20:	d1b8      	bne.n	800ad94 <_printf_float+0xfc>
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d1b6      	bne.n	800ad94 <_printf_float+0xfc>
 800ae26:	3301      	adds	r3, #1
 800ae28:	e7b3      	b.n	800ad92 <_printf_float+0xfa>
 800ae2a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ae2c:	0011      	movs	r1, r2
 800ae2e:	2b65      	cmp	r3, #101	@ 0x65
 800ae30:	d9d7      	bls.n	800ade2 <_printf_float+0x14a>
 800ae32:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ae34:	2b66      	cmp	r3, #102	@ 0x66
 800ae36:	d11a      	bne.n	800ae6e <_printf_float+0x1d6>
 800ae38:	686b      	ldr	r3, [r5, #4]
 800ae3a:	2a00      	cmp	r2, #0
 800ae3c:	dd09      	ble.n	800ae52 <_printf_float+0x1ba>
 800ae3e:	612a      	str	r2, [r5, #16]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d102      	bne.n	800ae4a <_printf_float+0x1b2>
 800ae44:	6829      	ldr	r1, [r5, #0]
 800ae46:	07c9      	lsls	r1, r1, #31
 800ae48:	d50b      	bpl.n	800ae62 <_printf_float+0x1ca>
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	189b      	adds	r3, r3, r2
 800ae4e:	612b      	str	r3, [r5, #16]
 800ae50:	e007      	b.n	800ae62 <_printf_float+0x1ca>
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d103      	bne.n	800ae5e <_printf_float+0x1c6>
 800ae56:	2201      	movs	r2, #1
 800ae58:	6829      	ldr	r1, [r5, #0]
 800ae5a:	4211      	tst	r1, r2
 800ae5c:	d000      	beq.n	800ae60 <_printf_float+0x1c8>
 800ae5e:	1c9a      	adds	r2, r3, #2
 800ae60:	612a      	str	r2, [r5, #16]
 800ae62:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ae64:	2400      	movs	r4, #0
 800ae66:	65ab      	str	r3, [r5, #88]	@ 0x58
 800ae68:	e7cd      	b.n	800ae06 <_printf_float+0x16e>
 800ae6a:	2367      	movs	r3, #103	@ 0x67
 800ae6c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ae6e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800ae70:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ae72:	4299      	cmp	r1, r3
 800ae74:	db06      	blt.n	800ae84 <_printf_float+0x1ec>
 800ae76:	682b      	ldr	r3, [r5, #0]
 800ae78:	6129      	str	r1, [r5, #16]
 800ae7a:	07db      	lsls	r3, r3, #31
 800ae7c:	d5f1      	bpl.n	800ae62 <_printf_float+0x1ca>
 800ae7e:	3101      	adds	r1, #1
 800ae80:	6129      	str	r1, [r5, #16]
 800ae82:	e7ee      	b.n	800ae62 <_printf_float+0x1ca>
 800ae84:	2201      	movs	r2, #1
 800ae86:	2900      	cmp	r1, #0
 800ae88:	dce0      	bgt.n	800ae4c <_printf_float+0x1b4>
 800ae8a:	1892      	adds	r2, r2, r2
 800ae8c:	1a52      	subs	r2, r2, r1
 800ae8e:	e7dd      	b.n	800ae4c <_printf_float+0x1b4>
 800ae90:	682a      	ldr	r2, [r5, #0]
 800ae92:	0553      	lsls	r3, r2, #21
 800ae94:	d408      	bmi.n	800aea8 <_printf_float+0x210>
 800ae96:	692b      	ldr	r3, [r5, #16]
 800ae98:	003a      	movs	r2, r7
 800ae9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ae9c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ae9e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800aea0:	47a0      	blx	r4
 800aea2:	3001      	adds	r0, #1
 800aea4:	d129      	bne.n	800aefa <_printf_float+0x262>
 800aea6:	e753      	b.n	800ad50 <_printf_float+0xb8>
 800aea8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aeaa:	2b65      	cmp	r3, #101	@ 0x65
 800aeac:	d800      	bhi.n	800aeb0 <_printf_float+0x218>
 800aeae:	e0da      	b.n	800b066 <_printf_float+0x3ce>
 800aeb0:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800aeb2:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	f7f5 fade 	bl	8000478 <__aeabi_dcmpeq>
 800aebc:	2800      	cmp	r0, #0
 800aebe:	d033      	beq.n	800af28 <_printf_float+0x290>
 800aec0:	2301      	movs	r3, #1
 800aec2:	4a37      	ldr	r2, [pc, #220]	@ (800afa0 <_printf_float+0x308>)
 800aec4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aec6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aec8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800aeca:	47a0      	blx	r4
 800aecc:	3001      	adds	r0, #1
 800aece:	d100      	bne.n	800aed2 <_printf_float+0x23a>
 800aed0:	e73e      	b.n	800ad50 <_printf_float+0xb8>
 800aed2:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800aed4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800aed6:	42b3      	cmp	r3, r6
 800aed8:	db02      	blt.n	800aee0 <_printf_float+0x248>
 800aeda:	682b      	ldr	r3, [r5, #0]
 800aedc:	07db      	lsls	r3, r3, #31
 800aede:	d50c      	bpl.n	800aefa <_printf_float+0x262>
 800aee0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800aee2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aee4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800aee6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aee8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aeea:	47a0      	blx	r4
 800aeec:	2400      	movs	r4, #0
 800aeee:	3001      	adds	r0, #1
 800aef0:	d100      	bne.n	800aef4 <_printf_float+0x25c>
 800aef2:	e72d      	b.n	800ad50 <_printf_float+0xb8>
 800aef4:	1e73      	subs	r3, r6, #1
 800aef6:	42a3      	cmp	r3, r4
 800aef8:	dc0a      	bgt.n	800af10 <_printf_float+0x278>
 800aefa:	682b      	ldr	r3, [r5, #0]
 800aefc:	079b      	lsls	r3, r3, #30
 800aefe:	d500      	bpl.n	800af02 <_printf_float+0x26a>
 800af00:	e105      	b.n	800b10e <_printf_float+0x476>
 800af02:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800af04:	68e8      	ldr	r0, [r5, #12]
 800af06:	4298      	cmp	r0, r3
 800af08:	db00      	blt.n	800af0c <_printf_float+0x274>
 800af0a:	e723      	b.n	800ad54 <_printf_float+0xbc>
 800af0c:	0018      	movs	r0, r3
 800af0e:	e721      	b.n	800ad54 <_printf_float+0xbc>
 800af10:	002a      	movs	r2, r5
 800af12:	2301      	movs	r3, #1
 800af14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800af16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af18:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800af1a:	321a      	adds	r2, #26
 800af1c:	47b8      	blx	r7
 800af1e:	3001      	adds	r0, #1
 800af20:	d100      	bne.n	800af24 <_printf_float+0x28c>
 800af22:	e715      	b.n	800ad50 <_printf_float+0xb8>
 800af24:	3401      	adds	r4, #1
 800af26:	e7e5      	b.n	800aef4 <_printf_float+0x25c>
 800af28:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	dc3a      	bgt.n	800afa4 <_printf_float+0x30c>
 800af2e:	2301      	movs	r3, #1
 800af30:	4a1b      	ldr	r2, [pc, #108]	@ (800afa0 <_printf_float+0x308>)
 800af32:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800af34:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af36:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800af38:	47a0      	blx	r4
 800af3a:	3001      	adds	r0, #1
 800af3c:	d100      	bne.n	800af40 <_printf_float+0x2a8>
 800af3e:	e707      	b.n	800ad50 <_printf_float+0xb8>
 800af40:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800af42:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800af44:	4333      	orrs	r3, r6
 800af46:	d102      	bne.n	800af4e <_printf_float+0x2b6>
 800af48:	682b      	ldr	r3, [r5, #0]
 800af4a:	07db      	lsls	r3, r3, #31
 800af4c:	d5d5      	bpl.n	800aefa <_printf_float+0x262>
 800af4e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af50:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800af52:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800af54:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af56:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800af58:	47a0      	blx	r4
 800af5a:	2300      	movs	r3, #0
 800af5c:	3001      	adds	r0, #1
 800af5e:	d100      	bne.n	800af62 <_printf_float+0x2ca>
 800af60:	e6f6      	b.n	800ad50 <_printf_float+0xb8>
 800af62:	930c      	str	r3, [sp, #48]	@ 0x30
 800af64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800af66:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800af68:	425b      	negs	r3, r3
 800af6a:	4293      	cmp	r3, r2
 800af6c:	dc01      	bgt.n	800af72 <_printf_float+0x2da>
 800af6e:	0033      	movs	r3, r6
 800af70:	e792      	b.n	800ae98 <_printf_float+0x200>
 800af72:	002a      	movs	r2, r5
 800af74:	2301      	movs	r3, #1
 800af76:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800af78:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af7a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800af7c:	321a      	adds	r2, #26
 800af7e:	47a0      	blx	r4
 800af80:	3001      	adds	r0, #1
 800af82:	d100      	bne.n	800af86 <_printf_float+0x2ee>
 800af84:	e6e4      	b.n	800ad50 <_printf_float+0xb8>
 800af86:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af88:	3301      	adds	r3, #1
 800af8a:	e7ea      	b.n	800af62 <_printf_float+0x2ca>
 800af8c:	7fefffff 	.word	0x7fefffff
 800af90:	0800d6c3 	.word	0x0800d6c3
 800af94:	0800d6c7 	.word	0x0800d6c7
 800af98:	0800d6cb 	.word	0x0800d6cb
 800af9c:	0800d6cf 	.word	0x0800d6cf
 800afa0:	0800d6d3 	.word	0x0800d6d3
 800afa4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800afa6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800afa8:	930c      	str	r3, [sp, #48]	@ 0x30
 800afaa:	429e      	cmp	r6, r3
 800afac:	dd00      	ble.n	800afb0 <_printf_float+0x318>
 800afae:	001e      	movs	r6, r3
 800afb0:	2e00      	cmp	r6, #0
 800afb2:	dc31      	bgt.n	800b018 <_printf_float+0x380>
 800afb4:	43f3      	mvns	r3, r6
 800afb6:	2400      	movs	r4, #0
 800afb8:	17db      	asrs	r3, r3, #31
 800afba:	4033      	ands	r3, r6
 800afbc:	930e      	str	r3, [sp, #56]	@ 0x38
 800afbe:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800afc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afc2:	1af3      	subs	r3, r6, r3
 800afc4:	42a3      	cmp	r3, r4
 800afc6:	dc30      	bgt.n	800b02a <_printf_float+0x392>
 800afc8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800afca:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800afcc:	429a      	cmp	r2, r3
 800afce:	dc38      	bgt.n	800b042 <_printf_float+0x3aa>
 800afd0:	682b      	ldr	r3, [r5, #0]
 800afd2:	07db      	lsls	r3, r3, #31
 800afd4:	d435      	bmi.n	800b042 <_printf_float+0x3aa>
 800afd6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800afd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800afda:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800afdc:	1b9b      	subs	r3, r3, r6
 800afde:	1b14      	subs	r4, r2, r4
 800afe0:	429c      	cmp	r4, r3
 800afe2:	dd00      	ble.n	800afe6 <_printf_float+0x34e>
 800afe4:	001c      	movs	r4, r3
 800afe6:	2c00      	cmp	r4, #0
 800afe8:	dc34      	bgt.n	800b054 <_printf_float+0x3bc>
 800afea:	43e3      	mvns	r3, r4
 800afec:	2600      	movs	r6, #0
 800afee:	17db      	asrs	r3, r3, #31
 800aff0:	401c      	ands	r4, r3
 800aff2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800aff4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800aff6:	1ad3      	subs	r3, r2, r3
 800aff8:	1b1b      	subs	r3, r3, r4
 800affa:	42b3      	cmp	r3, r6
 800affc:	dc00      	bgt.n	800b000 <_printf_float+0x368>
 800affe:	e77c      	b.n	800aefa <_printf_float+0x262>
 800b000:	002a      	movs	r2, r5
 800b002:	2301      	movs	r3, #1
 800b004:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b006:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b008:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800b00a:	321a      	adds	r2, #26
 800b00c:	47b8      	blx	r7
 800b00e:	3001      	adds	r0, #1
 800b010:	d100      	bne.n	800b014 <_printf_float+0x37c>
 800b012:	e69d      	b.n	800ad50 <_printf_float+0xb8>
 800b014:	3601      	adds	r6, #1
 800b016:	e7ec      	b.n	800aff2 <_printf_float+0x35a>
 800b018:	0033      	movs	r3, r6
 800b01a:	003a      	movs	r2, r7
 800b01c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b01e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b020:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800b022:	47a0      	blx	r4
 800b024:	3001      	adds	r0, #1
 800b026:	d1c5      	bne.n	800afb4 <_printf_float+0x31c>
 800b028:	e692      	b.n	800ad50 <_printf_float+0xb8>
 800b02a:	002a      	movs	r2, r5
 800b02c:	2301      	movs	r3, #1
 800b02e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b030:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b032:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b034:	321a      	adds	r2, #26
 800b036:	47b0      	blx	r6
 800b038:	3001      	adds	r0, #1
 800b03a:	d100      	bne.n	800b03e <_printf_float+0x3a6>
 800b03c:	e688      	b.n	800ad50 <_printf_float+0xb8>
 800b03e:	3401      	adds	r4, #1
 800b040:	e7bd      	b.n	800afbe <_printf_float+0x326>
 800b042:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b044:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b046:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b048:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b04a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800b04c:	47a0      	blx	r4
 800b04e:	3001      	adds	r0, #1
 800b050:	d1c1      	bne.n	800afd6 <_printf_float+0x33e>
 800b052:	e67d      	b.n	800ad50 <_printf_float+0xb8>
 800b054:	19ba      	adds	r2, r7, r6
 800b056:	0023      	movs	r3, r4
 800b058:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b05a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b05c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b05e:	47b0      	blx	r6
 800b060:	3001      	adds	r0, #1
 800b062:	d1c2      	bne.n	800afea <_printf_float+0x352>
 800b064:	e674      	b.n	800ad50 <_printf_float+0xb8>
 800b066:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b068:	930c      	str	r3, [sp, #48]	@ 0x30
 800b06a:	2b01      	cmp	r3, #1
 800b06c:	dc02      	bgt.n	800b074 <_printf_float+0x3dc>
 800b06e:	2301      	movs	r3, #1
 800b070:	421a      	tst	r2, r3
 800b072:	d039      	beq.n	800b0e8 <_printf_float+0x450>
 800b074:	2301      	movs	r3, #1
 800b076:	003a      	movs	r2, r7
 800b078:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b07a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b07c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b07e:	47b0      	blx	r6
 800b080:	3001      	adds	r0, #1
 800b082:	d100      	bne.n	800b086 <_printf_float+0x3ee>
 800b084:	e664      	b.n	800ad50 <_printf_float+0xb8>
 800b086:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b088:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b08a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b08c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b08e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b090:	47b0      	blx	r6
 800b092:	3001      	adds	r0, #1
 800b094:	d100      	bne.n	800b098 <_printf_float+0x400>
 800b096:	e65b      	b.n	800ad50 <_printf_float+0xb8>
 800b098:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800b09a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800b09c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b09e:	2200      	movs	r2, #0
 800b0a0:	3b01      	subs	r3, #1
 800b0a2:	930c      	str	r3, [sp, #48]	@ 0x30
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	f7f5 f9e7 	bl	8000478 <__aeabi_dcmpeq>
 800b0aa:	2800      	cmp	r0, #0
 800b0ac:	d11a      	bne.n	800b0e4 <_printf_float+0x44c>
 800b0ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b0b0:	1c7a      	adds	r2, r7, #1
 800b0b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b0b4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b0b6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b0b8:	47b0      	blx	r6
 800b0ba:	3001      	adds	r0, #1
 800b0bc:	d10e      	bne.n	800b0dc <_printf_float+0x444>
 800b0be:	e647      	b.n	800ad50 <_printf_float+0xb8>
 800b0c0:	002a      	movs	r2, r5
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b0c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b0c8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800b0ca:	321a      	adds	r2, #26
 800b0cc:	47b8      	blx	r7
 800b0ce:	3001      	adds	r0, #1
 800b0d0:	d100      	bne.n	800b0d4 <_printf_float+0x43c>
 800b0d2:	e63d      	b.n	800ad50 <_printf_float+0xb8>
 800b0d4:	3601      	adds	r6, #1
 800b0d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b0d8:	429e      	cmp	r6, r3
 800b0da:	dbf1      	blt.n	800b0c0 <_printf_float+0x428>
 800b0dc:	002a      	movs	r2, r5
 800b0de:	0023      	movs	r3, r4
 800b0e0:	3250      	adds	r2, #80	@ 0x50
 800b0e2:	e6da      	b.n	800ae9a <_printf_float+0x202>
 800b0e4:	2600      	movs	r6, #0
 800b0e6:	e7f6      	b.n	800b0d6 <_printf_float+0x43e>
 800b0e8:	003a      	movs	r2, r7
 800b0ea:	e7e2      	b.n	800b0b2 <_printf_float+0x41a>
 800b0ec:	002a      	movs	r2, r5
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b0f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b0f4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b0f6:	3219      	adds	r2, #25
 800b0f8:	47b0      	blx	r6
 800b0fa:	3001      	adds	r0, #1
 800b0fc:	d100      	bne.n	800b100 <_printf_float+0x468>
 800b0fe:	e627      	b.n	800ad50 <_printf_float+0xb8>
 800b100:	3401      	adds	r4, #1
 800b102:	68eb      	ldr	r3, [r5, #12]
 800b104:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b106:	1a9b      	subs	r3, r3, r2
 800b108:	42a3      	cmp	r3, r4
 800b10a:	dcef      	bgt.n	800b0ec <_printf_float+0x454>
 800b10c:	e6f9      	b.n	800af02 <_printf_float+0x26a>
 800b10e:	2400      	movs	r4, #0
 800b110:	e7f7      	b.n	800b102 <_printf_float+0x46a>
 800b112:	46c0      	nop			@ (mov r8, r8)

0800b114 <_printf_common>:
 800b114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b116:	0016      	movs	r6, r2
 800b118:	9301      	str	r3, [sp, #4]
 800b11a:	688a      	ldr	r2, [r1, #8]
 800b11c:	690b      	ldr	r3, [r1, #16]
 800b11e:	000c      	movs	r4, r1
 800b120:	9000      	str	r0, [sp, #0]
 800b122:	4293      	cmp	r3, r2
 800b124:	da00      	bge.n	800b128 <_printf_common+0x14>
 800b126:	0013      	movs	r3, r2
 800b128:	0022      	movs	r2, r4
 800b12a:	6033      	str	r3, [r6, #0]
 800b12c:	3243      	adds	r2, #67	@ 0x43
 800b12e:	7812      	ldrb	r2, [r2, #0]
 800b130:	2a00      	cmp	r2, #0
 800b132:	d001      	beq.n	800b138 <_printf_common+0x24>
 800b134:	3301      	adds	r3, #1
 800b136:	6033      	str	r3, [r6, #0]
 800b138:	6823      	ldr	r3, [r4, #0]
 800b13a:	069b      	lsls	r3, r3, #26
 800b13c:	d502      	bpl.n	800b144 <_printf_common+0x30>
 800b13e:	6833      	ldr	r3, [r6, #0]
 800b140:	3302      	adds	r3, #2
 800b142:	6033      	str	r3, [r6, #0]
 800b144:	6822      	ldr	r2, [r4, #0]
 800b146:	2306      	movs	r3, #6
 800b148:	0015      	movs	r5, r2
 800b14a:	401d      	ands	r5, r3
 800b14c:	421a      	tst	r2, r3
 800b14e:	d027      	beq.n	800b1a0 <_printf_common+0x8c>
 800b150:	0023      	movs	r3, r4
 800b152:	3343      	adds	r3, #67	@ 0x43
 800b154:	781b      	ldrb	r3, [r3, #0]
 800b156:	1e5a      	subs	r2, r3, #1
 800b158:	4193      	sbcs	r3, r2
 800b15a:	6822      	ldr	r2, [r4, #0]
 800b15c:	0692      	lsls	r2, r2, #26
 800b15e:	d430      	bmi.n	800b1c2 <_printf_common+0xae>
 800b160:	0022      	movs	r2, r4
 800b162:	9901      	ldr	r1, [sp, #4]
 800b164:	9800      	ldr	r0, [sp, #0]
 800b166:	9d08      	ldr	r5, [sp, #32]
 800b168:	3243      	adds	r2, #67	@ 0x43
 800b16a:	47a8      	blx	r5
 800b16c:	3001      	adds	r0, #1
 800b16e:	d025      	beq.n	800b1bc <_printf_common+0xa8>
 800b170:	2206      	movs	r2, #6
 800b172:	6823      	ldr	r3, [r4, #0]
 800b174:	2500      	movs	r5, #0
 800b176:	4013      	ands	r3, r2
 800b178:	2b04      	cmp	r3, #4
 800b17a:	d105      	bne.n	800b188 <_printf_common+0x74>
 800b17c:	6833      	ldr	r3, [r6, #0]
 800b17e:	68e5      	ldr	r5, [r4, #12]
 800b180:	1aed      	subs	r5, r5, r3
 800b182:	43eb      	mvns	r3, r5
 800b184:	17db      	asrs	r3, r3, #31
 800b186:	401d      	ands	r5, r3
 800b188:	68a3      	ldr	r3, [r4, #8]
 800b18a:	6922      	ldr	r2, [r4, #16]
 800b18c:	4293      	cmp	r3, r2
 800b18e:	dd01      	ble.n	800b194 <_printf_common+0x80>
 800b190:	1a9b      	subs	r3, r3, r2
 800b192:	18ed      	adds	r5, r5, r3
 800b194:	2600      	movs	r6, #0
 800b196:	42b5      	cmp	r5, r6
 800b198:	d120      	bne.n	800b1dc <_printf_common+0xc8>
 800b19a:	2000      	movs	r0, #0
 800b19c:	e010      	b.n	800b1c0 <_printf_common+0xac>
 800b19e:	3501      	adds	r5, #1
 800b1a0:	68e3      	ldr	r3, [r4, #12]
 800b1a2:	6832      	ldr	r2, [r6, #0]
 800b1a4:	1a9b      	subs	r3, r3, r2
 800b1a6:	42ab      	cmp	r3, r5
 800b1a8:	ddd2      	ble.n	800b150 <_printf_common+0x3c>
 800b1aa:	0022      	movs	r2, r4
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	9901      	ldr	r1, [sp, #4]
 800b1b0:	9800      	ldr	r0, [sp, #0]
 800b1b2:	9f08      	ldr	r7, [sp, #32]
 800b1b4:	3219      	adds	r2, #25
 800b1b6:	47b8      	blx	r7
 800b1b8:	3001      	adds	r0, #1
 800b1ba:	d1f0      	bne.n	800b19e <_printf_common+0x8a>
 800b1bc:	2001      	movs	r0, #1
 800b1be:	4240      	negs	r0, r0
 800b1c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b1c2:	2030      	movs	r0, #48	@ 0x30
 800b1c4:	18e1      	adds	r1, r4, r3
 800b1c6:	3143      	adds	r1, #67	@ 0x43
 800b1c8:	7008      	strb	r0, [r1, #0]
 800b1ca:	0021      	movs	r1, r4
 800b1cc:	1c5a      	adds	r2, r3, #1
 800b1ce:	3145      	adds	r1, #69	@ 0x45
 800b1d0:	7809      	ldrb	r1, [r1, #0]
 800b1d2:	18a2      	adds	r2, r4, r2
 800b1d4:	3243      	adds	r2, #67	@ 0x43
 800b1d6:	3302      	adds	r3, #2
 800b1d8:	7011      	strb	r1, [r2, #0]
 800b1da:	e7c1      	b.n	800b160 <_printf_common+0x4c>
 800b1dc:	0022      	movs	r2, r4
 800b1de:	2301      	movs	r3, #1
 800b1e0:	9901      	ldr	r1, [sp, #4]
 800b1e2:	9800      	ldr	r0, [sp, #0]
 800b1e4:	9f08      	ldr	r7, [sp, #32]
 800b1e6:	321a      	adds	r2, #26
 800b1e8:	47b8      	blx	r7
 800b1ea:	3001      	adds	r0, #1
 800b1ec:	d0e6      	beq.n	800b1bc <_printf_common+0xa8>
 800b1ee:	3601      	adds	r6, #1
 800b1f0:	e7d1      	b.n	800b196 <_printf_common+0x82>
	...

0800b1f4 <_printf_i>:
 800b1f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1f6:	b08b      	sub	sp, #44	@ 0x2c
 800b1f8:	9206      	str	r2, [sp, #24]
 800b1fa:	000a      	movs	r2, r1
 800b1fc:	3243      	adds	r2, #67	@ 0x43
 800b1fe:	9307      	str	r3, [sp, #28]
 800b200:	9005      	str	r0, [sp, #20]
 800b202:	9203      	str	r2, [sp, #12]
 800b204:	7e0a      	ldrb	r2, [r1, #24]
 800b206:	000c      	movs	r4, r1
 800b208:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b20a:	2a78      	cmp	r2, #120	@ 0x78
 800b20c:	d809      	bhi.n	800b222 <_printf_i+0x2e>
 800b20e:	2a62      	cmp	r2, #98	@ 0x62
 800b210:	d80b      	bhi.n	800b22a <_printf_i+0x36>
 800b212:	2a00      	cmp	r2, #0
 800b214:	d100      	bne.n	800b218 <_printf_i+0x24>
 800b216:	e0bc      	b.n	800b392 <_printf_i+0x19e>
 800b218:	497b      	ldr	r1, [pc, #492]	@ (800b408 <_printf_i+0x214>)
 800b21a:	9104      	str	r1, [sp, #16]
 800b21c:	2a58      	cmp	r2, #88	@ 0x58
 800b21e:	d100      	bne.n	800b222 <_printf_i+0x2e>
 800b220:	e090      	b.n	800b344 <_printf_i+0x150>
 800b222:	0025      	movs	r5, r4
 800b224:	3542      	adds	r5, #66	@ 0x42
 800b226:	702a      	strb	r2, [r5, #0]
 800b228:	e022      	b.n	800b270 <_printf_i+0x7c>
 800b22a:	0010      	movs	r0, r2
 800b22c:	3863      	subs	r0, #99	@ 0x63
 800b22e:	2815      	cmp	r0, #21
 800b230:	d8f7      	bhi.n	800b222 <_printf_i+0x2e>
 800b232:	f7f4 ff7b 	bl	800012c <__gnu_thumb1_case_shi>
 800b236:	0016      	.short	0x0016
 800b238:	fff6001f 	.word	0xfff6001f
 800b23c:	fff6fff6 	.word	0xfff6fff6
 800b240:	001ffff6 	.word	0x001ffff6
 800b244:	fff6fff6 	.word	0xfff6fff6
 800b248:	fff6fff6 	.word	0xfff6fff6
 800b24c:	003600a1 	.word	0x003600a1
 800b250:	fff60080 	.word	0xfff60080
 800b254:	00b2fff6 	.word	0x00b2fff6
 800b258:	0036fff6 	.word	0x0036fff6
 800b25c:	fff6fff6 	.word	0xfff6fff6
 800b260:	0084      	.short	0x0084
 800b262:	0025      	movs	r5, r4
 800b264:	681a      	ldr	r2, [r3, #0]
 800b266:	3542      	adds	r5, #66	@ 0x42
 800b268:	1d11      	adds	r1, r2, #4
 800b26a:	6019      	str	r1, [r3, #0]
 800b26c:	6813      	ldr	r3, [r2, #0]
 800b26e:	702b      	strb	r3, [r5, #0]
 800b270:	2301      	movs	r3, #1
 800b272:	e0a0      	b.n	800b3b6 <_printf_i+0x1c2>
 800b274:	6818      	ldr	r0, [r3, #0]
 800b276:	6809      	ldr	r1, [r1, #0]
 800b278:	1d02      	adds	r2, r0, #4
 800b27a:	060d      	lsls	r5, r1, #24
 800b27c:	d50b      	bpl.n	800b296 <_printf_i+0xa2>
 800b27e:	6806      	ldr	r6, [r0, #0]
 800b280:	601a      	str	r2, [r3, #0]
 800b282:	2e00      	cmp	r6, #0
 800b284:	da03      	bge.n	800b28e <_printf_i+0x9a>
 800b286:	232d      	movs	r3, #45	@ 0x2d
 800b288:	9a03      	ldr	r2, [sp, #12]
 800b28a:	4276      	negs	r6, r6
 800b28c:	7013      	strb	r3, [r2, #0]
 800b28e:	4b5e      	ldr	r3, [pc, #376]	@ (800b408 <_printf_i+0x214>)
 800b290:	270a      	movs	r7, #10
 800b292:	9304      	str	r3, [sp, #16]
 800b294:	e018      	b.n	800b2c8 <_printf_i+0xd4>
 800b296:	6806      	ldr	r6, [r0, #0]
 800b298:	601a      	str	r2, [r3, #0]
 800b29a:	0649      	lsls	r1, r1, #25
 800b29c:	d5f1      	bpl.n	800b282 <_printf_i+0x8e>
 800b29e:	b236      	sxth	r6, r6
 800b2a0:	e7ef      	b.n	800b282 <_printf_i+0x8e>
 800b2a2:	6808      	ldr	r0, [r1, #0]
 800b2a4:	6819      	ldr	r1, [r3, #0]
 800b2a6:	c940      	ldmia	r1!, {r6}
 800b2a8:	0605      	lsls	r5, r0, #24
 800b2aa:	d402      	bmi.n	800b2b2 <_printf_i+0xbe>
 800b2ac:	0640      	lsls	r0, r0, #25
 800b2ae:	d500      	bpl.n	800b2b2 <_printf_i+0xbe>
 800b2b0:	b2b6      	uxth	r6, r6
 800b2b2:	6019      	str	r1, [r3, #0]
 800b2b4:	4b54      	ldr	r3, [pc, #336]	@ (800b408 <_printf_i+0x214>)
 800b2b6:	270a      	movs	r7, #10
 800b2b8:	9304      	str	r3, [sp, #16]
 800b2ba:	2a6f      	cmp	r2, #111	@ 0x6f
 800b2bc:	d100      	bne.n	800b2c0 <_printf_i+0xcc>
 800b2be:	3f02      	subs	r7, #2
 800b2c0:	0023      	movs	r3, r4
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	3343      	adds	r3, #67	@ 0x43
 800b2c6:	701a      	strb	r2, [r3, #0]
 800b2c8:	6863      	ldr	r3, [r4, #4]
 800b2ca:	60a3      	str	r3, [r4, #8]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	db03      	blt.n	800b2d8 <_printf_i+0xe4>
 800b2d0:	2104      	movs	r1, #4
 800b2d2:	6822      	ldr	r2, [r4, #0]
 800b2d4:	438a      	bics	r2, r1
 800b2d6:	6022      	str	r2, [r4, #0]
 800b2d8:	2e00      	cmp	r6, #0
 800b2da:	d102      	bne.n	800b2e2 <_printf_i+0xee>
 800b2dc:	9d03      	ldr	r5, [sp, #12]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d00c      	beq.n	800b2fc <_printf_i+0x108>
 800b2e2:	9d03      	ldr	r5, [sp, #12]
 800b2e4:	0030      	movs	r0, r6
 800b2e6:	0039      	movs	r1, r7
 800b2e8:	f7f4 ffba 	bl	8000260 <__aeabi_uidivmod>
 800b2ec:	9b04      	ldr	r3, [sp, #16]
 800b2ee:	3d01      	subs	r5, #1
 800b2f0:	5c5b      	ldrb	r3, [r3, r1]
 800b2f2:	702b      	strb	r3, [r5, #0]
 800b2f4:	0033      	movs	r3, r6
 800b2f6:	0006      	movs	r6, r0
 800b2f8:	429f      	cmp	r7, r3
 800b2fa:	d9f3      	bls.n	800b2e4 <_printf_i+0xf0>
 800b2fc:	2f08      	cmp	r7, #8
 800b2fe:	d109      	bne.n	800b314 <_printf_i+0x120>
 800b300:	6823      	ldr	r3, [r4, #0]
 800b302:	07db      	lsls	r3, r3, #31
 800b304:	d506      	bpl.n	800b314 <_printf_i+0x120>
 800b306:	6862      	ldr	r2, [r4, #4]
 800b308:	6923      	ldr	r3, [r4, #16]
 800b30a:	429a      	cmp	r2, r3
 800b30c:	dc02      	bgt.n	800b314 <_printf_i+0x120>
 800b30e:	2330      	movs	r3, #48	@ 0x30
 800b310:	3d01      	subs	r5, #1
 800b312:	702b      	strb	r3, [r5, #0]
 800b314:	9b03      	ldr	r3, [sp, #12]
 800b316:	1b5b      	subs	r3, r3, r5
 800b318:	6123      	str	r3, [r4, #16]
 800b31a:	9b07      	ldr	r3, [sp, #28]
 800b31c:	0021      	movs	r1, r4
 800b31e:	9300      	str	r3, [sp, #0]
 800b320:	9805      	ldr	r0, [sp, #20]
 800b322:	9b06      	ldr	r3, [sp, #24]
 800b324:	aa09      	add	r2, sp, #36	@ 0x24
 800b326:	f7ff fef5 	bl	800b114 <_printf_common>
 800b32a:	3001      	adds	r0, #1
 800b32c:	d148      	bne.n	800b3c0 <_printf_i+0x1cc>
 800b32e:	2001      	movs	r0, #1
 800b330:	4240      	negs	r0, r0
 800b332:	b00b      	add	sp, #44	@ 0x2c
 800b334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b336:	2220      	movs	r2, #32
 800b338:	6809      	ldr	r1, [r1, #0]
 800b33a:	430a      	orrs	r2, r1
 800b33c:	6022      	str	r2, [r4, #0]
 800b33e:	2278      	movs	r2, #120	@ 0x78
 800b340:	4932      	ldr	r1, [pc, #200]	@ (800b40c <_printf_i+0x218>)
 800b342:	9104      	str	r1, [sp, #16]
 800b344:	0021      	movs	r1, r4
 800b346:	3145      	adds	r1, #69	@ 0x45
 800b348:	700a      	strb	r2, [r1, #0]
 800b34a:	6819      	ldr	r1, [r3, #0]
 800b34c:	6822      	ldr	r2, [r4, #0]
 800b34e:	c940      	ldmia	r1!, {r6}
 800b350:	0610      	lsls	r0, r2, #24
 800b352:	d402      	bmi.n	800b35a <_printf_i+0x166>
 800b354:	0650      	lsls	r0, r2, #25
 800b356:	d500      	bpl.n	800b35a <_printf_i+0x166>
 800b358:	b2b6      	uxth	r6, r6
 800b35a:	6019      	str	r1, [r3, #0]
 800b35c:	07d3      	lsls	r3, r2, #31
 800b35e:	d502      	bpl.n	800b366 <_printf_i+0x172>
 800b360:	2320      	movs	r3, #32
 800b362:	4313      	orrs	r3, r2
 800b364:	6023      	str	r3, [r4, #0]
 800b366:	2e00      	cmp	r6, #0
 800b368:	d001      	beq.n	800b36e <_printf_i+0x17a>
 800b36a:	2710      	movs	r7, #16
 800b36c:	e7a8      	b.n	800b2c0 <_printf_i+0xcc>
 800b36e:	2220      	movs	r2, #32
 800b370:	6823      	ldr	r3, [r4, #0]
 800b372:	4393      	bics	r3, r2
 800b374:	6023      	str	r3, [r4, #0]
 800b376:	e7f8      	b.n	800b36a <_printf_i+0x176>
 800b378:	681a      	ldr	r2, [r3, #0]
 800b37a:	680d      	ldr	r5, [r1, #0]
 800b37c:	1d10      	adds	r0, r2, #4
 800b37e:	6949      	ldr	r1, [r1, #20]
 800b380:	6018      	str	r0, [r3, #0]
 800b382:	6813      	ldr	r3, [r2, #0]
 800b384:	062e      	lsls	r6, r5, #24
 800b386:	d501      	bpl.n	800b38c <_printf_i+0x198>
 800b388:	6019      	str	r1, [r3, #0]
 800b38a:	e002      	b.n	800b392 <_printf_i+0x19e>
 800b38c:	066d      	lsls	r5, r5, #25
 800b38e:	d5fb      	bpl.n	800b388 <_printf_i+0x194>
 800b390:	8019      	strh	r1, [r3, #0]
 800b392:	2300      	movs	r3, #0
 800b394:	9d03      	ldr	r5, [sp, #12]
 800b396:	6123      	str	r3, [r4, #16]
 800b398:	e7bf      	b.n	800b31a <_printf_i+0x126>
 800b39a:	681a      	ldr	r2, [r3, #0]
 800b39c:	1d11      	adds	r1, r2, #4
 800b39e:	6019      	str	r1, [r3, #0]
 800b3a0:	6815      	ldr	r5, [r2, #0]
 800b3a2:	2100      	movs	r1, #0
 800b3a4:	0028      	movs	r0, r5
 800b3a6:	6862      	ldr	r2, [r4, #4]
 800b3a8:	f000 fa05 	bl	800b7b6 <memchr>
 800b3ac:	2800      	cmp	r0, #0
 800b3ae:	d001      	beq.n	800b3b4 <_printf_i+0x1c0>
 800b3b0:	1b40      	subs	r0, r0, r5
 800b3b2:	6060      	str	r0, [r4, #4]
 800b3b4:	6863      	ldr	r3, [r4, #4]
 800b3b6:	6123      	str	r3, [r4, #16]
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	9a03      	ldr	r2, [sp, #12]
 800b3bc:	7013      	strb	r3, [r2, #0]
 800b3be:	e7ac      	b.n	800b31a <_printf_i+0x126>
 800b3c0:	002a      	movs	r2, r5
 800b3c2:	6923      	ldr	r3, [r4, #16]
 800b3c4:	9906      	ldr	r1, [sp, #24]
 800b3c6:	9805      	ldr	r0, [sp, #20]
 800b3c8:	9d07      	ldr	r5, [sp, #28]
 800b3ca:	47a8      	blx	r5
 800b3cc:	3001      	adds	r0, #1
 800b3ce:	d0ae      	beq.n	800b32e <_printf_i+0x13a>
 800b3d0:	6823      	ldr	r3, [r4, #0]
 800b3d2:	079b      	lsls	r3, r3, #30
 800b3d4:	d415      	bmi.n	800b402 <_printf_i+0x20e>
 800b3d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3d8:	68e0      	ldr	r0, [r4, #12]
 800b3da:	4298      	cmp	r0, r3
 800b3dc:	daa9      	bge.n	800b332 <_printf_i+0x13e>
 800b3de:	0018      	movs	r0, r3
 800b3e0:	e7a7      	b.n	800b332 <_printf_i+0x13e>
 800b3e2:	0022      	movs	r2, r4
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	9906      	ldr	r1, [sp, #24]
 800b3e8:	9805      	ldr	r0, [sp, #20]
 800b3ea:	9e07      	ldr	r6, [sp, #28]
 800b3ec:	3219      	adds	r2, #25
 800b3ee:	47b0      	blx	r6
 800b3f0:	3001      	adds	r0, #1
 800b3f2:	d09c      	beq.n	800b32e <_printf_i+0x13a>
 800b3f4:	3501      	adds	r5, #1
 800b3f6:	68e3      	ldr	r3, [r4, #12]
 800b3f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b3fa:	1a9b      	subs	r3, r3, r2
 800b3fc:	42ab      	cmp	r3, r5
 800b3fe:	dcf0      	bgt.n	800b3e2 <_printf_i+0x1ee>
 800b400:	e7e9      	b.n	800b3d6 <_printf_i+0x1e2>
 800b402:	2500      	movs	r5, #0
 800b404:	e7f7      	b.n	800b3f6 <_printf_i+0x202>
 800b406:	46c0      	nop			@ (mov r8, r8)
 800b408:	0800d6d5 	.word	0x0800d6d5
 800b40c:	0800d6e6 	.word	0x0800d6e6

0800b410 <std>:
 800b410:	2300      	movs	r3, #0
 800b412:	b510      	push	{r4, lr}
 800b414:	0004      	movs	r4, r0
 800b416:	6003      	str	r3, [r0, #0]
 800b418:	6043      	str	r3, [r0, #4]
 800b41a:	6083      	str	r3, [r0, #8]
 800b41c:	8181      	strh	r1, [r0, #12]
 800b41e:	6643      	str	r3, [r0, #100]	@ 0x64
 800b420:	81c2      	strh	r2, [r0, #14]
 800b422:	6103      	str	r3, [r0, #16]
 800b424:	6143      	str	r3, [r0, #20]
 800b426:	6183      	str	r3, [r0, #24]
 800b428:	0019      	movs	r1, r3
 800b42a:	2208      	movs	r2, #8
 800b42c:	305c      	adds	r0, #92	@ 0x5c
 800b42e:	f000 f90d 	bl	800b64c <memset>
 800b432:	4b0b      	ldr	r3, [pc, #44]	@ (800b460 <std+0x50>)
 800b434:	6224      	str	r4, [r4, #32]
 800b436:	6263      	str	r3, [r4, #36]	@ 0x24
 800b438:	4b0a      	ldr	r3, [pc, #40]	@ (800b464 <std+0x54>)
 800b43a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b43c:	4b0a      	ldr	r3, [pc, #40]	@ (800b468 <std+0x58>)
 800b43e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b440:	4b0a      	ldr	r3, [pc, #40]	@ (800b46c <std+0x5c>)
 800b442:	6323      	str	r3, [r4, #48]	@ 0x30
 800b444:	4b0a      	ldr	r3, [pc, #40]	@ (800b470 <std+0x60>)
 800b446:	429c      	cmp	r4, r3
 800b448:	d005      	beq.n	800b456 <std+0x46>
 800b44a:	4b0a      	ldr	r3, [pc, #40]	@ (800b474 <std+0x64>)
 800b44c:	429c      	cmp	r4, r3
 800b44e:	d002      	beq.n	800b456 <std+0x46>
 800b450:	4b09      	ldr	r3, [pc, #36]	@ (800b478 <std+0x68>)
 800b452:	429c      	cmp	r4, r3
 800b454:	d103      	bne.n	800b45e <std+0x4e>
 800b456:	0020      	movs	r0, r4
 800b458:	3058      	adds	r0, #88	@ 0x58
 800b45a:	f000 f9a1 	bl	800b7a0 <__retarget_lock_init_recursive>
 800b45e:	bd10      	pop	{r4, pc}
 800b460:	0800b599 	.word	0x0800b599
 800b464:	0800b5c1 	.word	0x0800b5c1
 800b468:	0800b5f9 	.word	0x0800b5f9
 800b46c:	0800b625 	.word	0x0800b625
 800b470:	20000630 	.word	0x20000630
 800b474:	20000698 	.word	0x20000698
 800b478:	20000700 	.word	0x20000700

0800b47c <stdio_exit_handler>:
 800b47c:	b510      	push	{r4, lr}
 800b47e:	4a03      	ldr	r2, [pc, #12]	@ (800b48c <stdio_exit_handler+0x10>)
 800b480:	4903      	ldr	r1, [pc, #12]	@ (800b490 <stdio_exit_handler+0x14>)
 800b482:	4804      	ldr	r0, [pc, #16]	@ (800b494 <stdio_exit_handler+0x18>)
 800b484:	f000 f86c 	bl	800b560 <_fwalk_sglue>
 800b488:	bd10      	pop	{r4, pc}
 800b48a:	46c0      	nop			@ (mov r8, r8)
 800b48c:	2000000c 	.word	0x2000000c
 800b490:	0800cdcd 	.word	0x0800cdcd
 800b494:	2000001c 	.word	0x2000001c

0800b498 <cleanup_stdio>:
 800b498:	6841      	ldr	r1, [r0, #4]
 800b49a:	4b0b      	ldr	r3, [pc, #44]	@ (800b4c8 <cleanup_stdio+0x30>)
 800b49c:	b510      	push	{r4, lr}
 800b49e:	0004      	movs	r4, r0
 800b4a0:	4299      	cmp	r1, r3
 800b4a2:	d001      	beq.n	800b4a8 <cleanup_stdio+0x10>
 800b4a4:	f001 fc92 	bl	800cdcc <_fflush_r>
 800b4a8:	68a1      	ldr	r1, [r4, #8]
 800b4aa:	4b08      	ldr	r3, [pc, #32]	@ (800b4cc <cleanup_stdio+0x34>)
 800b4ac:	4299      	cmp	r1, r3
 800b4ae:	d002      	beq.n	800b4b6 <cleanup_stdio+0x1e>
 800b4b0:	0020      	movs	r0, r4
 800b4b2:	f001 fc8b 	bl	800cdcc <_fflush_r>
 800b4b6:	68e1      	ldr	r1, [r4, #12]
 800b4b8:	4b05      	ldr	r3, [pc, #20]	@ (800b4d0 <cleanup_stdio+0x38>)
 800b4ba:	4299      	cmp	r1, r3
 800b4bc:	d002      	beq.n	800b4c4 <cleanup_stdio+0x2c>
 800b4be:	0020      	movs	r0, r4
 800b4c0:	f001 fc84 	bl	800cdcc <_fflush_r>
 800b4c4:	bd10      	pop	{r4, pc}
 800b4c6:	46c0      	nop			@ (mov r8, r8)
 800b4c8:	20000630 	.word	0x20000630
 800b4cc:	20000698 	.word	0x20000698
 800b4d0:	20000700 	.word	0x20000700

0800b4d4 <global_stdio_init.part.0>:
 800b4d4:	b510      	push	{r4, lr}
 800b4d6:	4b09      	ldr	r3, [pc, #36]	@ (800b4fc <global_stdio_init.part.0+0x28>)
 800b4d8:	4a09      	ldr	r2, [pc, #36]	@ (800b500 <global_stdio_init.part.0+0x2c>)
 800b4da:	2104      	movs	r1, #4
 800b4dc:	601a      	str	r2, [r3, #0]
 800b4de:	4809      	ldr	r0, [pc, #36]	@ (800b504 <global_stdio_init.part.0+0x30>)
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	f7ff ff95 	bl	800b410 <std>
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	2109      	movs	r1, #9
 800b4ea:	4807      	ldr	r0, [pc, #28]	@ (800b508 <global_stdio_init.part.0+0x34>)
 800b4ec:	f7ff ff90 	bl	800b410 <std>
 800b4f0:	2202      	movs	r2, #2
 800b4f2:	2112      	movs	r1, #18
 800b4f4:	4805      	ldr	r0, [pc, #20]	@ (800b50c <global_stdio_init.part.0+0x38>)
 800b4f6:	f7ff ff8b 	bl	800b410 <std>
 800b4fa:	bd10      	pop	{r4, pc}
 800b4fc:	20000768 	.word	0x20000768
 800b500:	0800b47d 	.word	0x0800b47d
 800b504:	20000630 	.word	0x20000630
 800b508:	20000698 	.word	0x20000698
 800b50c:	20000700 	.word	0x20000700

0800b510 <__sfp_lock_acquire>:
 800b510:	b510      	push	{r4, lr}
 800b512:	4802      	ldr	r0, [pc, #8]	@ (800b51c <__sfp_lock_acquire+0xc>)
 800b514:	f000 f945 	bl	800b7a2 <__retarget_lock_acquire_recursive>
 800b518:	bd10      	pop	{r4, pc}
 800b51a:	46c0      	nop			@ (mov r8, r8)
 800b51c:	20000771 	.word	0x20000771

0800b520 <__sfp_lock_release>:
 800b520:	b510      	push	{r4, lr}
 800b522:	4802      	ldr	r0, [pc, #8]	@ (800b52c <__sfp_lock_release+0xc>)
 800b524:	f000 f93e 	bl	800b7a4 <__retarget_lock_release_recursive>
 800b528:	bd10      	pop	{r4, pc}
 800b52a:	46c0      	nop			@ (mov r8, r8)
 800b52c:	20000771 	.word	0x20000771

0800b530 <__sinit>:
 800b530:	b510      	push	{r4, lr}
 800b532:	0004      	movs	r4, r0
 800b534:	f7ff ffec 	bl	800b510 <__sfp_lock_acquire>
 800b538:	6a23      	ldr	r3, [r4, #32]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d002      	beq.n	800b544 <__sinit+0x14>
 800b53e:	f7ff ffef 	bl	800b520 <__sfp_lock_release>
 800b542:	bd10      	pop	{r4, pc}
 800b544:	4b04      	ldr	r3, [pc, #16]	@ (800b558 <__sinit+0x28>)
 800b546:	6223      	str	r3, [r4, #32]
 800b548:	4b04      	ldr	r3, [pc, #16]	@ (800b55c <__sinit+0x2c>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d1f6      	bne.n	800b53e <__sinit+0xe>
 800b550:	f7ff ffc0 	bl	800b4d4 <global_stdio_init.part.0>
 800b554:	e7f3      	b.n	800b53e <__sinit+0xe>
 800b556:	46c0      	nop			@ (mov r8, r8)
 800b558:	0800b499 	.word	0x0800b499
 800b55c:	20000768 	.word	0x20000768

0800b560 <_fwalk_sglue>:
 800b560:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b562:	0014      	movs	r4, r2
 800b564:	2600      	movs	r6, #0
 800b566:	9000      	str	r0, [sp, #0]
 800b568:	9101      	str	r1, [sp, #4]
 800b56a:	68a5      	ldr	r5, [r4, #8]
 800b56c:	6867      	ldr	r7, [r4, #4]
 800b56e:	3f01      	subs	r7, #1
 800b570:	d504      	bpl.n	800b57c <_fwalk_sglue+0x1c>
 800b572:	6824      	ldr	r4, [r4, #0]
 800b574:	2c00      	cmp	r4, #0
 800b576:	d1f8      	bne.n	800b56a <_fwalk_sglue+0xa>
 800b578:	0030      	movs	r0, r6
 800b57a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b57c:	89ab      	ldrh	r3, [r5, #12]
 800b57e:	2b01      	cmp	r3, #1
 800b580:	d908      	bls.n	800b594 <_fwalk_sglue+0x34>
 800b582:	220e      	movs	r2, #14
 800b584:	5eab      	ldrsh	r3, [r5, r2]
 800b586:	3301      	adds	r3, #1
 800b588:	d004      	beq.n	800b594 <_fwalk_sglue+0x34>
 800b58a:	0029      	movs	r1, r5
 800b58c:	9800      	ldr	r0, [sp, #0]
 800b58e:	9b01      	ldr	r3, [sp, #4]
 800b590:	4798      	blx	r3
 800b592:	4306      	orrs	r6, r0
 800b594:	3568      	adds	r5, #104	@ 0x68
 800b596:	e7ea      	b.n	800b56e <_fwalk_sglue+0xe>

0800b598 <__sread>:
 800b598:	b570      	push	{r4, r5, r6, lr}
 800b59a:	000c      	movs	r4, r1
 800b59c:	250e      	movs	r5, #14
 800b59e:	5f49      	ldrsh	r1, [r1, r5]
 800b5a0:	f000 f89a 	bl	800b6d8 <_read_r>
 800b5a4:	2800      	cmp	r0, #0
 800b5a6:	db03      	blt.n	800b5b0 <__sread+0x18>
 800b5a8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b5aa:	181b      	adds	r3, r3, r0
 800b5ac:	6563      	str	r3, [r4, #84]	@ 0x54
 800b5ae:	bd70      	pop	{r4, r5, r6, pc}
 800b5b0:	89a3      	ldrh	r3, [r4, #12]
 800b5b2:	4a02      	ldr	r2, [pc, #8]	@ (800b5bc <__sread+0x24>)
 800b5b4:	4013      	ands	r3, r2
 800b5b6:	81a3      	strh	r3, [r4, #12]
 800b5b8:	e7f9      	b.n	800b5ae <__sread+0x16>
 800b5ba:	46c0      	nop			@ (mov r8, r8)
 800b5bc:	ffffefff 	.word	0xffffefff

0800b5c0 <__swrite>:
 800b5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5c2:	001f      	movs	r7, r3
 800b5c4:	898b      	ldrh	r3, [r1, #12]
 800b5c6:	0005      	movs	r5, r0
 800b5c8:	000c      	movs	r4, r1
 800b5ca:	0016      	movs	r6, r2
 800b5cc:	05db      	lsls	r3, r3, #23
 800b5ce:	d505      	bpl.n	800b5dc <__swrite+0x1c>
 800b5d0:	230e      	movs	r3, #14
 800b5d2:	5ec9      	ldrsh	r1, [r1, r3]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	2302      	movs	r3, #2
 800b5d8:	f000 f86a 	bl	800b6b0 <_lseek_r>
 800b5dc:	89a3      	ldrh	r3, [r4, #12]
 800b5de:	4a05      	ldr	r2, [pc, #20]	@ (800b5f4 <__swrite+0x34>)
 800b5e0:	0028      	movs	r0, r5
 800b5e2:	4013      	ands	r3, r2
 800b5e4:	81a3      	strh	r3, [r4, #12]
 800b5e6:	0032      	movs	r2, r6
 800b5e8:	230e      	movs	r3, #14
 800b5ea:	5ee1      	ldrsh	r1, [r4, r3]
 800b5ec:	003b      	movs	r3, r7
 800b5ee:	f000 f899 	bl	800b724 <_write_r>
 800b5f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5f4:	ffffefff 	.word	0xffffefff

0800b5f8 <__sseek>:
 800b5f8:	b570      	push	{r4, r5, r6, lr}
 800b5fa:	000c      	movs	r4, r1
 800b5fc:	250e      	movs	r5, #14
 800b5fe:	5f49      	ldrsh	r1, [r1, r5]
 800b600:	f000 f856 	bl	800b6b0 <_lseek_r>
 800b604:	89a3      	ldrh	r3, [r4, #12]
 800b606:	1c42      	adds	r2, r0, #1
 800b608:	d103      	bne.n	800b612 <__sseek+0x1a>
 800b60a:	4a05      	ldr	r2, [pc, #20]	@ (800b620 <__sseek+0x28>)
 800b60c:	4013      	ands	r3, r2
 800b60e:	81a3      	strh	r3, [r4, #12]
 800b610:	bd70      	pop	{r4, r5, r6, pc}
 800b612:	2280      	movs	r2, #128	@ 0x80
 800b614:	0152      	lsls	r2, r2, #5
 800b616:	4313      	orrs	r3, r2
 800b618:	81a3      	strh	r3, [r4, #12]
 800b61a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b61c:	e7f8      	b.n	800b610 <__sseek+0x18>
 800b61e:	46c0      	nop			@ (mov r8, r8)
 800b620:	ffffefff 	.word	0xffffefff

0800b624 <__sclose>:
 800b624:	b510      	push	{r4, lr}
 800b626:	230e      	movs	r3, #14
 800b628:	5ec9      	ldrsh	r1, [r1, r3]
 800b62a:	f000 f82f 	bl	800b68c <_close_r>
 800b62e:	bd10      	pop	{r4, pc}

0800b630 <memcmp>:
 800b630:	b530      	push	{r4, r5, lr}
 800b632:	2400      	movs	r4, #0
 800b634:	3901      	subs	r1, #1
 800b636:	42a2      	cmp	r2, r4
 800b638:	d101      	bne.n	800b63e <memcmp+0xe>
 800b63a:	2000      	movs	r0, #0
 800b63c:	e005      	b.n	800b64a <memcmp+0x1a>
 800b63e:	5d03      	ldrb	r3, [r0, r4]
 800b640:	3401      	adds	r4, #1
 800b642:	5d0d      	ldrb	r5, [r1, r4]
 800b644:	42ab      	cmp	r3, r5
 800b646:	d0f6      	beq.n	800b636 <memcmp+0x6>
 800b648:	1b58      	subs	r0, r3, r5
 800b64a:	bd30      	pop	{r4, r5, pc}

0800b64c <memset>:
 800b64c:	0003      	movs	r3, r0
 800b64e:	1882      	adds	r2, r0, r2
 800b650:	4293      	cmp	r3, r2
 800b652:	d100      	bne.n	800b656 <memset+0xa>
 800b654:	4770      	bx	lr
 800b656:	7019      	strb	r1, [r3, #0]
 800b658:	3301      	adds	r3, #1
 800b65a:	e7f9      	b.n	800b650 <memset+0x4>

0800b65c <strncpy>:
 800b65c:	0003      	movs	r3, r0
 800b65e:	b530      	push	{r4, r5, lr}
 800b660:	001d      	movs	r5, r3
 800b662:	2a00      	cmp	r2, #0
 800b664:	d006      	beq.n	800b674 <strncpy+0x18>
 800b666:	780c      	ldrb	r4, [r1, #0]
 800b668:	3a01      	subs	r2, #1
 800b66a:	3301      	adds	r3, #1
 800b66c:	702c      	strb	r4, [r5, #0]
 800b66e:	3101      	adds	r1, #1
 800b670:	2c00      	cmp	r4, #0
 800b672:	d1f5      	bne.n	800b660 <strncpy+0x4>
 800b674:	2100      	movs	r1, #0
 800b676:	189a      	adds	r2, r3, r2
 800b678:	4293      	cmp	r3, r2
 800b67a:	d100      	bne.n	800b67e <strncpy+0x22>
 800b67c:	bd30      	pop	{r4, r5, pc}
 800b67e:	7019      	strb	r1, [r3, #0]
 800b680:	3301      	adds	r3, #1
 800b682:	e7f9      	b.n	800b678 <strncpy+0x1c>

0800b684 <_localeconv_r>:
 800b684:	4800      	ldr	r0, [pc, #0]	@ (800b688 <_localeconv_r+0x4>)
 800b686:	4770      	bx	lr
 800b688:	20000158 	.word	0x20000158

0800b68c <_close_r>:
 800b68c:	2300      	movs	r3, #0
 800b68e:	b570      	push	{r4, r5, r6, lr}
 800b690:	4d06      	ldr	r5, [pc, #24]	@ (800b6ac <_close_r+0x20>)
 800b692:	0004      	movs	r4, r0
 800b694:	0008      	movs	r0, r1
 800b696:	602b      	str	r3, [r5, #0]
 800b698:	f7f8 fb68 	bl	8003d6c <_close>
 800b69c:	1c43      	adds	r3, r0, #1
 800b69e:	d103      	bne.n	800b6a8 <_close_r+0x1c>
 800b6a0:	682b      	ldr	r3, [r5, #0]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d000      	beq.n	800b6a8 <_close_r+0x1c>
 800b6a6:	6023      	str	r3, [r4, #0]
 800b6a8:	bd70      	pop	{r4, r5, r6, pc}
 800b6aa:	46c0      	nop			@ (mov r8, r8)
 800b6ac:	2000076c 	.word	0x2000076c

0800b6b0 <_lseek_r>:
 800b6b0:	b570      	push	{r4, r5, r6, lr}
 800b6b2:	0004      	movs	r4, r0
 800b6b4:	0008      	movs	r0, r1
 800b6b6:	0011      	movs	r1, r2
 800b6b8:	001a      	movs	r2, r3
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	4d05      	ldr	r5, [pc, #20]	@ (800b6d4 <_lseek_r+0x24>)
 800b6be:	602b      	str	r3, [r5, #0]
 800b6c0:	f7f8 fb5e 	bl	8003d80 <_lseek>
 800b6c4:	1c43      	adds	r3, r0, #1
 800b6c6:	d103      	bne.n	800b6d0 <_lseek_r+0x20>
 800b6c8:	682b      	ldr	r3, [r5, #0]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d000      	beq.n	800b6d0 <_lseek_r+0x20>
 800b6ce:	6023      	str	r3, [r4, #0]
 800b6d0:	bd70      	pop	{r4, r5, r6, pc}
 800b6d2:	46c0      	nop			@ (mov r8, r8)
 800b6d4:	2000076c 	.word	0x2000076c

0800b6d8 <_read_r>:
 800b6d8:	b570      	push	{r4, r5, r6, lr}
 800b6da:	0004      	movs	r4, r0
 800b6dc:	0008      	movs	r0, r1
 800b6de:	0011      	movs	r1, r2
 800b6e0:	001a      	movs	r2, r3
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	4d05      	ldr	r5, [pc, #20]	@ (800b6fc <_read_r+0x24>)
 800b6e6:	602b      	str	r3, [r5, #0]
 800b6e8:	f7f8 fb26 	bl	8003d38 <_read>
 800b6ec:	1c43      	adds	r3, r0, #1
 800b6ee:	d103      	bne.n	800b6f8 <_read_r+0x20>
 800b6f0:	682b      	ldr	r3, [r5, #0]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d000      	beq.n	800b6f8 <_read_r+0x20>
 800b6f6:	6023      	str	r3, [r4, #0]
 800b6f8:	bd70      	pop	{r4, r5, r6, pc}
 800b6fa:	46c0      	nop			@ (mov r8, r8)
 800b6fc:	2000076c 	.word	0x2000076c

0800b700 <_sbrk_r>:
 800b700:	2300      	movs	r3, #0
 800b702:	b570      	push	{r4, r5, r6, lr}
 800b704:	4d06      	ldr	r5, [pc, #24]	@ (800b720 <_sbrk_r+0x20>)
 800b706:	0004      	movs	r4, r0
 800b708:	0008      	movs	r0, r1
 800b70a:	602b      	str	r3, [r5, #0]
 800b70c:	f7f8 fb3a 	bl	8003d84 <_sbrk>
 800b710:	1c43      	adds	r3, r0, #1
 800b712:	d103      	bne.n	800b71c <_sbrk_r+0x1c>
 800b714:	682b      	ldr	r3, [r5, #0]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d000      	beq.n	800b71c <_sbrk_r+0x1c>
 800b71a:	6023      	str	r3, [r4, #0]
 800b71c:	bd70      	pop	{r4, r5, r6, pc}
 800b71e:	46c0      	nop			@ (mov r8, r8)
 800b720:	2000076c 	.word	0x2000076c

0800b724 <_write_r>:
 800b724:	b570      	push	{r4, r5, r6, lr}
 800b726:	0004      	movs	r4, r0
 800b728:	0008      	movs	r0, r1
 800b72a:	0011      	movs	r1, r2
 800b72c:	001a      	movs	r2, r3
 800b72e:	2300      	movs	r3, #0
 800b730:	4d05      	ldr	r5, [pc, #20]	@ (800b748 <_write_r+0x24>)
 800b732:	602b      	str	r3, [r5, #0]
 800b734:	f7f8 fb0d 	bl	8003d52 <_write>
 800b738:	1c43      	adds	r3, r0, #1
 800b73a:	d103      	bne.n	800b744 <_write_r+0x20>
 800b73c:	682b      	ldr	r3, [r5, #0]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d000      	beq.n	800b744 <_write_r+0x20>
 800b742:	6023      	str	r3, [r4, #0]
 800b744:	bd70      	pop	{r4, r5, r6, pc}
 800b746:	46c0      	nop			@ (mov r8, r8)
 800b748:	2000076c 	.word	0x2000076c

0800b74c <__errno>:
 800b74c:	4b01      	ldr	r3, [pc, #4]	@ (800b754 <__errno+0x8>)
 800b74e:	6818      	ldr	r0, [r3, #0]
 800b750:	4770      	bx	lr
 800b752:	46c0      	nop			@ (mov r8, r8)
 800b754:	20000018 	.word	0x20000018

0800b758 <__libc_init_array>:
 800b758:	b570      	push	{r4, r5, r6, lr}
 800b75a:	2600      	movs	r6, #0
 800b75c:	4c0c      	ldr	r4, [pc, #48]	@ (800b790 <__libc_init_array+0x38>)
 800b75e:	4d0d      	ldr	r5, [pc, #52]	@ (800b794 <__libc_init_array+0x3c>)
 800b760:	1b64      	subs	r4, r4, r5
 800b762:	10a4      	asrs	r4, r4, #2
 800b764:	42a6      	cmp	r6, r4
 800b766:	d109      	bne.n	800b77c <__libc_init_array+0x24>
 800b768:	2600      	movs	r6, #0
 800b76a:	f001 ff01 	bl	800d570 <_init>
 800b76e:	4c0a      	ldr	r4, [pc, #40]	@ (800b798 <__libc_init_array+0x40>)
 800b770:	4d0a      	ldr	r5, [pc, #40]	@ (800b79c <__libc_init_array+0x44>)
 800b772:	1b64      	subs	r4, r4, r5
 800b774:	10a4      	asrs	r4, r4, #2
 800b776:	42a6      	cmp	r6, r4
 800b778:	d105      	bne.n	800b786 <__libc_init_array+0x2e>
 800b77a:	bd70      	pop	{r4, r5, r6, pc}
 800b77c:	00b3      	lsls	r3, r6, #2
 800b77e:	58eb      	ldr	r3, [r5, r3]
 800b780:	4798      	blx	r3
 800b782:	3601      	adds	r6, #1
 800b784:	e7ee      	b.n	800b764 <__libc_init_array+0xc>
 800b786:	00b3      	lsls	r3, r6, #2
 800b788:	58eb      	ldr	r3, [r5, r3]
 800b78a:	4798      	blx	r3
 800b78c:	3601      	adds	r6, #1
 800b78e:	e7f2      	b.n	800b776 <__libc_init_array+0x1e>
 800b790:	0800da38 	.word	0x0800da38
 800b794:	0800da38 	.word	0x0800da38
 800b798:	0800da3c 	.word	0x0800da3c
 800b79c:	0800da38 	.word	0x0800da38

0800b7a0 <__retarget_lock_init_recursive>:
 800b7a0:	4770      	bx	lr

0800b7a2 <__retarget_lock_acquire_recursive>:
 800b7a2:	4770      	bx	lr

0800b7a4 <__retarget_lock_release_recursive>:
 800b7a4:	4770      	bx	lr

0800b7a6 <strcpy>:
 800b7a6:	0003      	movs	r3, r0
 800b7a8:	780a      	ldrb	r2, [r1, #0]
 800b7aa:	3101      	adds	r1, #1
 800b7ac:	701a      	strb	r2, [r3, #0]
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	2a00      	cmp	r2, #0
 800b7b2:	d1f9      	bne.n	800b7a8 <strcpy+0x2>
 800b7b4:	4770      	bx	lr

0800b7b6 <memchr>:
 800b7b6:	b2c9      	uxtb	r1, r1
 800b7b8:	1882      	adds	r2, r0, r2
 800b7ba:	4290      	cmp	r0, r2
 800b7bc:	d101      	bne.n	800b7c2 <memchr+0xc>
 800b7be:	2000      	movs	r0, #0
 800b7c0:	4770      	bx	lr
 800b7c2:	7803      	ldrb	r3, [r0, #0]
 800b7c4:	428b      	cmp	r3, r1
 800b7c6:	d0fb      	beq.n	800b7c0 <memchr+0xa>
 800b7c8:	3001      	adds	r0, #1
 800b7ca:	e7f6      	b.n	800b7ba <memchr+0x4>

0800b7cc <memcpy>:
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	b510      	push	{r4, lr}
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	d100      	bne.n	800b7d6 <memcpy+0xa>
 800b7d4:	bd10      	pop	{r4, pc}
 800b7d6:	5ccc      	ldrb	r4, [r1, r3]
 800b7d8:	54c4      	strb	r4, [r0, r3]
 800b7da:	3301      	adds	r3, #1
 800b7dc:	e7f8      	b.n	800b7d0 <memcpy+0x4>

0800b7de <quorem>:
 800b7de:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7e0:	6902      	ldr	r2, [r0, #16]
 800b7e2:	690f      	ldr	r7, [r1, #16]
 800b7e4:	b087      	sub	sp, #28
 800b7e6:	0006      	movs	r6, r0
 800b7e8:	000b      	movs	r3, r1
 800b7ea:	2000      	movs	r0, #0
 800b7ec:	9102      	str	r1, [sp, #8]
 800b7ee:	42ba      	cmp	r2, r7
 800b7f0:	db6d      	blt.n	800b8ce <quorem+0xf0>
 800b7f2:	3f01      	subs	r7, #1
 800b7f4:	00bc      	lsls	r4, r7, #2
 800b7f6:	3314      	adds	r3, #20
 800b7f8:	9305      	str	r3, [sp, #20]
 800b7fa:	191b      	adds	r3, r3, r4
 800b7fc:	9303      	str	r3, [sp, #12]
 800b7fe:	0033      	movs	r3, r6
 800b800:	3314      	adds	r3, #20
 800b802:	191c      	adds	r4, r3, r4
 800b804:	9301      	str	r3, [sp, #4]
 800b806:	6823      	ldr	r3, [r4, #0]
 800b808:	9304      	str	r3, [sp, #16]
 800b80a:	9b03      	ldr	r3, [sp, #12]
 800b80c:	9804      	ldr	r0, [sp, #16]
 800b80e:	681d      	ldr	r5, [r3, #0]
 800b810:	3501      	adds	r5, #1
 800b812:	0029      	movs	r1, r5
 800b814:	f7f4 fc9e 	bl	8000154 <__udivsi3>
 800b818:	9b04      	ldr	r3, [sp, #16]
 800b81a:	9000      	str	r0, [sp, #0]
 800b81c:	42ab      	cmp	r3, r5
 800b81e:	d32b      	bcc.n	800b878 <quorem+0x9a>
 800b820:	9b05      	ldr	r3, [sp, #20]
 800b822:	9d01      	ldr	r5, [sp, #4]
 800b824:	469c      	mov	ip, r3
 800b826:	2300      	movs	r3, #0
 800b828:	9305      	str	r3, [sp, #20]
 800b82a:	9304      	str	r3, [sp, #16]
 800b82c:	4662      	mov	r2, ip
 800b82e:	ca08      	ldmia	r2!, {r3}
 800b830:	6828      	ldr	r0, [r5, #0]
 800b832:	4694      	mov	ip, r2
 800b834:	9a00      	ldr	r2, [sp, #0]
 800b836:	b299      	uxth	r1, r3
 800b838:	4351      	muls	r1, r2
 800b83a:	9a05      	ldr	r2, [sp, #20]
 800b83c:	0c1b      	lsrs	r3, r3, #16
 800b83e:	1889      	adds	r1, r1, r2
 800b840:	9a00      	ldr	r2, [sp, #0]
 800b842:	4353      	muls	r3, r2
 800b844:	0c0a      	lsrs	r2, r1, #16
 800b846:	189b      	adds	r3, r3, r2
 800b848:	0c1a      	lsrs	r2, r3, #16
 800b84a:	b289      	uxth	r1, r1
 800b84c:	9205      	str	r2, [sp, #20]
 800b84e:	b282      	uxth	r2, r0
 800b850:	1a52      	subs	r2, r2, r1
 800b852:	9904      	ldr	r1, [sp, #16]
 800b854:	0c00      	lsrs	r0, r0, #16
 800b856:	1852      	adds	r2, r2, r1
 800b858:	b29b      	uxth	r3, r3
 800b85a:	1411      	asrs	r1, r2, #16
 800b85c:	1ac3      	subs	r3, r0, r3
 800b85e:	185b      	adds	r3, r3, r1
 800b860:	1419      	asrs	r1, r3, #16
 800b862:	b292      	uxth	r2, r2
 800b864:	041b      	lsls	r3, r3, #16
 800b866:	431a      	orrs	r2, r3
 800b868:	9b03      	ldr	r3, [sp, #12]
 800b86a:	9104      	str	r1, [sp, #16]
 800b86c:	c504      	stmia	r5!, {r2}
 800b86e:	4563      	cmp	r3, ip
 800b870:	d2dc      	bcs.n	800b82c <quorem+0x4e>
 800b872:	6823      	ldr	r3, [r4, #0]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d030      	beq.n	800b8da <quorem+0xfc>
 800b878:	0030      	movs	r0, r6
 800b87a:	9902      	ldr	r1, [sp, #8]
 800b87c:	f001 f90a 	bl	800ca94 <__mcmp>
 800b880:	2800      	cmp	r0, #0
 800b882:	db23      	blt.n	800b8cc <quorem+0xee>
 800b884:	0034      	movs	r4, r6
 800b886:	2500      	movs	r5, #0
 800b888:	9902      	ldr	r1, [sp, #8]
 800b88a:	3414      	adds	r4, #20
 800b88c:	3114      	adds	r1, #20
 800b88e:	6823      	ldr	r3, [r4, #0]
 800b890:	c901      	ldmia	r1!, {r0}
 800b892:	9302      	str	r3, [sp, #8]
 800b894:	466b      	mov	r3, sp
 800b896:	891b      	ldrh	r3, [r3, #8]
 800b898:	b282      	uxth	r2, r0
 800b89a:	1a9a      	subs	r2, r3, r2
 800b89c:	9b02      	ldr	r3, [sp, #8]
 800b89e:	1952      	adds	r2, r2, r5
 800b8a0:	0c00      	lsrs	r0, r0, #16
 800b8a2:	0c1b      	lsrs	r3, r3, #16
 800b8a4:	1a1b      	subs	r3, r3, r0
 800b8a6:	1410      	asrs	r0, r2, #16
 800b8a8:	181b      	adds	r3, r3, r0
 800b8aa:	141d      	asrs	r5, r3, #16
 800b8ac:	b292      	uxth	r2, r2
 800b8ae:	041b      	lsls	r3, r3, #16
 800b8b0:	431a      	orrs	r2, r3
 800b8b2:	9b03      	ldr	r3, [sp, #12]
 800b8b4:	c404      	stmia	r4!, {r2}
 800b8b6:	428b      	cmp	r3, r1
 800b8b8:	d2e9      	bcs.n	800b88e <quorem+0xb0>
 800b8ba:	9a01      	ldr	r2, [sp, #4]
 800b8bc:	00bb      	lsls	r3, r7, #2
 800b8be:	18d3      	adds	r3, r2, r3
 800b8c0:	681a      	ldr	r2, [r3, #0]
 800b8c2:	2a00      	cmp	r2, #0
 800b8c4:	d013      	beq.n	800b8ee <quorem+0x110>
 800b8c6:	9b00      	ldr	r3, [sp, #0]
 800b8c8:	3301      	adds	r3, #1
 800b8ca:	9300      	str	r3, [sp, #0]
 800b8cc:	9800      	ldr	r0, [sp, #0]
 800b8ce:	b007      	add	sp, #28
 800b8d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8d2:	6823      	ldr	r3, [r4, #0]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d104      	bne.n	800b8e2 <quorem+0x104>
 800b8d8:	3f01      	subs	r7, #1
 800b8da:	9b01      	ldr	r3, [sp, #4]
 800b8dc:	3c04      	subs	r4, #4
 800b8de:	42a3      	cmp	r3, r4
 800b8e0:	d3f7      	bcc.n	800b8d2 <quorem+0xf4>
 800b8e2:	6137      	str	r7, [r6, #16]
 800b8e4:	e7c8      	b.n	800b878 <quorem+0x9a>
 800b8e6:	681a      	ldr	r2, [r3, #0]
 800b8e8:	2a00      	cmp	r2, #0
 800b8ea:	d104      	bne.n	800b8f6 <quorem+0x118>
 800b8ec:	3f01      	subs	r7, #1
 800b8ee:	9a01      	ldr	r2, [sp, #4]
 800b8f0:	3b04      	subs	r3, #4
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d3f7      	bcc.n	800b8e6 <quorem+0x108>
 800b8f6:	6137      	str	r7, [r6, #16]
 800b8f8:	e7e5      	b.n	800b8c6 <quorem+0xe8>
	...

0800b8fc <_dtoa_r>:
 800b8fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8fe:	0014      	movs	r4, r2
 800b900:	001d      	movs	r5, r3
 800b902:	69c6      	ldr	r6, [r0, #28]
 800b904:	b09d      	sub	sp, #116	@ 0x74
 800b906:	940a      	str	r4, [sp, #40]	@ 0x28
 800b908:	950b      	str	r5, [sp, #44]	@ 0x2c
 800b90a:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800b90c:	9003      	str	r0, [sp, #12]
 800b90e:	2e00      	cmp	r6, #0
 800b910:	d10f      	bne.n	800b932 <_dtoa_r+0x36>
 800b912:	2010      	movs	r0, #16
 800b914:	f7ff f854 	bl	800a9c0 <malloc>
 800b918:	9b03      	ldr	r3, [sp, #12]
 800b91a:	1e02      	subs	r2, r0, #0
 800b91c:	61d8      	str	r0, [r3, #28]
 800b91e:	d104      	bne.n	800b92a <_dtoa_r+0x2e>
 800b920:	21ef      	movs	r1, #239	@ 0xef
 800b922:	4bc7      	ldr	r3, [pc, #796]	@ (800bc40 <_dtoa_r+0x344>)
 800b924:	48c7      	ldr	r0, [pc, #796]	@ (800bc44 <_dtoa_r+0x348>)
 800b926:	f001 fa7d 	bl	800ce24 <__assert_func>
 800b92a:	6046      	str	r6, [r0, #4]
 800b92c:	6086      	str	r6, [r0, #8]
 800b92e:	6006      	str	r6, [r0, #0]
 800b930:	60c6      	str	r6, [r0, #12]
 800b932:	9b03      	ldr	r3, [sp, #12]
 800b934:	69db      	ldr	r3, [r3, #28]
 800b936:	6819      	ldr	r1, [r3, #0]
 800b938:	2900      	cmp	r1, #0
 800b93a:	d00b      	beq.n	800b954 <_dtoa_r+0x58>
 800b93c:	685a      	ldr	r2, [r3, #4]
 800b93e:	2301      	movs	r3, #1
 800b940:	4093      	lsls	r3, r2
 800b942:	604a      	str	r2, [r1, #4]
 800b944:	608b      	str	r3, [r1, #8]
 800b946:	9803      	ldr	r0, [sp, #12]
 800b948:	f000 fe5a 	bl	800c600 <_Bfree>
 800b94c:	2200      	movs	r2, #0
 800b94e:	9b03      	ldr	r3, [sp, #12]
 800b950:	69db      	ldr	r3, [r3, #28]
 800b952:	601a      	str	r2, [r3, #0]
 800b954:	2d00      	cmp	r5, #0
 800b956:	da1e      	bge.n	800b996 <_dtoa_r+0x9a>
 800b958:	2301      	movs	r3, #1
 800b95a:	603b      	str	r3, [r7, #0]
 800b95c:	006b      	lsls	r3, r5, #1
 800b95e:	085b      	lsrs	r3, r3, #1
 800b960:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b962:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800b964:	4bb8      	ldr	r3, [pc, #736]	@ (800bc48 <_dtoa_r+0x34c>)
 800b966:	4ab8      	ldr	r2, [pc, #736]	@ (800bc48 <_dtoa_r+0x34c>)
 800b968:	403b      	ands	r3, r7
 800b96a:	4293      	cmp	r3, r2
 800b96c:	d116      	bne.n	800b99c <_dtoa_r+0xa0>
 800b96e:	4bb7      	ldr	r3, [pc, #732]	@ (800bc4c <_dtoa_r+0x350>)
 800b970:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b972:	6013      	str	r3, [r2, #0]
 800b974:	033b      	lsls	r3, r7, #12
 800b976:	0b1b      	lsrs	r3, r3, #12
 800b978:	4323      	orrs	r3, r4
 800b97a:	d101      	bne.n	800b980 <_dtoa_r+0x84>
 800b97c:	f000 fd83 	bl	800c486 <_dtoa_r+0xb8a>
 800b980:	4bb3      	ldr	r3, [pc, #716]	@ (800bc50 <_dtoa_r+0x354>)
 800b982:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800b984:	9308      	str	r3, [sp, #32]
 800b986:	2a00      	cmp	r2, #0
 800b988:	d002      	beq.n	800b990 <_dtoa_r+0x94>
 800b98a:	4bb2      	ldr	r3, [pc, #712]	@ (800bc54 <_dtoa_r+0x358>)
 800b98c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800b98e:	6013      	str	r3, [r2, #0]
 800b990:	9808      	ldr	r0, [sp, #32]
 800b992:	b01d      	add	sp, #116	@ 0x74
 800b994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b996:	2300      	movs	r3, #0
 800b998:	603b      	str	r3, [r7, #0]
 800b99a:	e7e2      	b.n	800b962 <_dtoa_r+0x66>
 800b99c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b99e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b9a0:	9212      	str	r2, [sp, #72]	@ 0x48
 800b9a2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b9a4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b9a6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	f7f4 fd64 	bl	8000478 <__aeabi_dcmpeq>
 800b9b0:	1e06      	subs	r6, r0, #0
 800b9b2:	d00b      	beq.n	800b9cc <_dtoa_r+0xd0>
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b9b8:	6013      	str	r3, [r2, #0]
 800b9ba:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d002      	beq.n	800b9c6 <_dtoa_r+0xca>
 800b9c0:	4ba5      	ldr	r3, [pc, #660]	@ (800bc58 <_dtoa_r+0x35c>)
 800b9c2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800b9c4:	6013      	str	r3, [r2, #0]
 800b9c6:	4ba5      	ldr	r3, [pc, #660]	@ (800bc5c <_dtoa_r+0x360>)
 800b9c8:	9308      	str	r3, [sp, #32]
 800b9ca:	e7e1      	b.n	800b990 <_dtoa_r+0x94>
 800b9cc:	ab1a      	add	r3, sp, #104	@ 0x68
 800b9ce:	9301      	str	r3, [sp, #4]
 800b9d0:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b9d2:	9300      	str	r3, [sp, #0]
 800b9d4:	9803      	ldr	r0, [sp, #12]
 800b9d6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b9d8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b9da:	f001 f911 	bl	800cc00 <__d2b>
 800b9de:	007a      	lsls	r2, r7, #1
 800b9e0:	9005      	str	r0, [sp, #20]
 800b9e2:	0d52      	lsrs	r2, r2, #21
 800b9e4:	d100      	bne.n	800b9e8 <_dtoa_r+0xec>
 800b9e6:	e07b      	b.n	800bae0 <_dtoa_r+0x1e4>
 800b9e8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b9ea:	9618      	str	r6, [sp, #96]	@ 0x60
 800b9ec:	0319      	lsls	r1, r3, #12
 800b9ee:	4b9c      	ldr	r3, [pc, #624]	@ (800bc60 <_dtoa_r+0x364>)
 800b9f0:	0b09      	lsrs	r1, r1, #12
 800b9f2:	430b      	orrs	r3, r1
 800b9f4:	499b      	ldr	r1, [pc, #620]	@ (800bc64 <_dtoa_r+0x368>)
 800b9f6:	1857      	adds	r7, r2, r1
 800b9f8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b9fa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b9fc:	0019      	movs	r1, r3
 800b9fe:	2200      	movs	r2, #0
 800ba00:	4b99      	ldr	r3, [pc, #612]	@ (800bc68 <_dtoa_r+0x36c>)
 800ba02:	f7f6 ff3f 	bl	8002884 <__aeabi_dsub>
 800ba06:	4a99      	ldr	r2, [pc, #612]	@ (800bc6c <_dtoa_r+0x370>)
 800ba08:	4b99      	ldr	r3, [pc, #612]	@ (800bc70 <_dtoa_r+0x374>)
 800ba0a:	f7f6 fc73 	bl	80022f4 <__aeabi_dmul>
 800ba0e:	4a99      	ldr	r2, [pc, #612]	@ (800bc74 <_dtoa_r+0x378>)
 800ba10:	4b99      	ldr	r3, [pc, #612]	@ (800bc78 <_dtoa_r+0x37c>)
 800ba12:	f7f5 fcc7 	bl	80013a4 <__aeabi_dadd>
 800ba16:	0004      	movs	r4, r0
 800ba18:	0038      	movs	r0, r7
 800ba1a:	000d      	movs	r5, r1
 800ba1c:	f7f7 fb2c 	bl	8003078 <__aeabi_i2d>
 800ba20:	4a96      	ldr	r2, [pc, #600]	@ (800bc7c <_dtoa_r+0x380>)
 800ba22:	4b97      	ldr	r3, [pc, #604]	@ (800bc80 <_dtoa_r+0x384>)
 800ba24:	f7f6 fc66 	bl	80022f4 <__aeabi_dmul>
 800ba28:	0002      	movs	r2, r0
 800ba2a:	000b      	movs	r3, r1
 800ba2c:	0020      	movs	r0, r4
 800ba2e:	0029      	movs	r1, r5
 800ba30:	f7f5 fcb8 	bl	80013a4 <__aeabi_dadd>
 800ba34:	0004      	movs	r4, r0
 800ba36:	000d      	movs	r5, r1
 800ba38:	f7f7 fae2 	bl	8003000 <__aeabi_d2iz>
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	9004      	str	r0, [sp, #16]
 800ba40:	2300      	movs	r3, #0
 800ba42:	0020      	movs	r0, r4
 800ba44:	0029      	movs	r1, r5
 800ba46:	f7f4 fd1d 	bl	8000484 <__aeabi_dcmplt>
 800ba4a:	2800      	cmp	r0, #0
 800ba4c:	d00b      	beq.n	800ba66 <_dtoa_r+0x16a>
 800ba4e:	9804      	ldr	r0, [sp, #16]
 800ba50:	f7f7 fb12 	bl	8003078 <__aeabi_i2d>
 800ba54:	002b      	movs	r3, r5
 800ba56:	0022      	movs	r2, r4
 800ba58:	f7f4 fd0e 	bl	8000478 <__aeabi_dcmpeq>
 800ba5c:	4243      	negs	r3, r0
 800ba5e:	4158      	adcs	r0, r3
 800ba60:	9b04      	ldr	r3, [sp, #16]
 800ba62:	1a1b      	subs	r3, r3, r0
 800ba64:	9304      	str	r3, [sp, #16]
 800ba66:	2301      	movs	r3, #1
 800ba68:	9315      	str	r3, [sp, #84]	@ 0x54
 800ba6a:	9b04      	ldr	r3, [sp, #16]
 800ba6c:	2b16      	cmp	r3, #22
 800ba6e:	d810      	bhi.n	800ba92 <_dtoa_r+0x196>
 800ba70:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800ba72:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800ba74:	9a04      	ldr	r2, [sp, #16]
 800ba76:	4b83      	ldr	r3, [pc, #524]	@ (800bc84 <_dtoa_r+0x388>)
 800ba78:	00d2      	lsls	r2, r2, #3
 800ba7a:	189b      	adds	r3, r3, r2
 800ba7c:	681a      	ldr	r2, [r3, #0]
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	f7f4 fd00 	bl	8000484 <__aeabi_dcmplt>
 800ba84:	2800      	cmp	r0, #0
 800ba86:	d047      	beq.n	800bb18 <_dtoa_r+0x21c>
 800ba88:	9b04      	ldr	r3, [sp, #16]
 800ba8a:	3b01      	subs	r3, #1
 800ba8c:	9304      	str	r3, [sp, #16]
 800ba8e:	2300      	movs	r3, #0
 800ba90:	9315      	str	r3, [sp, #84]	@ 0x54
 800ba92:	2200      	movs	r2, #0
 800ba94:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800ba96:	9206      	str	r2, [sp, #24]
 800ba98:	1bdb      	subs	r3, r3, r7
 800ba9a:	1e5a      	subs	r2, r3, #1
 800ba9c:	d53e      	bpl.n	800bb1c <_dtoa_r+0x220>
 800ba9e:	2201      	movs	r2, #1
 800baa0:	1ad3      	subs	r3, r2, r3
 800baa2:	9306      	str	r3, [sp, #24]
 800baa4:	2300      	movs	r3, #0
 800baa6:	930d      	str	r3, [sp, #52]	@ 0x34
 800baa8:	9b04      	ldr	r3, [sp, #16]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	db38      	blt.n	800bb20 <_dtoa_r+0x224>
 800baae:	9a04      	ldr	r2, [sp, #16]
 800bab0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bab2:	4694      	mov	ip, r2
 800bab4:	4463      	add	r3, ip
 800bab6:	930d      	str	r3, [sp, #52]	@ 0x34
 800bab8:	2300      	movs	r3, #0
 800baba:	9214      	str	r2, [sp, #80]	@ 0x50
 800babc:	930f      	str	r3, [sp, #60]	@ 0x3c
 800babe:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800bac0:	2401      	movs	r4, #1
 800bac2:	2b09      	cmp	r3, #9
 800bac4:	d867      	bhi.n	800bb96 <_dtoa_r+0x29a>
 800bac6:	2b05      	cmp	r3, #5
 800bac8:	dd02      	ble.n	800bad0 <_dtoa_r+0x1d4>
 800baca:	2400      	movs	r4, #0
 800bacc:	3b04      	subs	r3, #4
 800bace:	9322      	str	r3, [sp, #136]	@ 0x88
 800bad0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800bad2:	1e98      	subs	r0, r3, #2
 800bad4:	2803      	cmp	r0, #3
 800bad6:	d867      	bhi.n	800bba8 <_dtoa_r+0x2ac>
 800bad8:	f7f4 fb1e 	bl	8000118 <__gnu_thumb1_case_uqi>
 800badc:	5b383a2b 	.word	0x5b383a2b
 800bae0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800bae2:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800bae4:	18f6      	adds	r6, r6, r3
 800bae6:	4b68      	ldr	r3, [pc, #416]	@ (800bc88 <_dtoa_r+0x38c>)
 800bae8:	18f2      	adds	r2, r6, r3
 800baea:	2a20      	cmp	r2, #32
 800baec:	dd0f      	ble.n	800bb0e <_dtoa_r+0x212>
 800baee:	2340      	movs	r3, #64	@ 0x40
 800baf0:	1a9b      	subs	r3, r3, r2
 800baf2:	409f      	lsls	r7, r3
 800baf4:	4b65      	ldr	r3, [pc, #404]	@ (800bc8c <_dtoa_r+0x390>)
 800baf6:	0038      	movs	r0, r7
 800baf8:	18f3      	adds	r3, r6, r3
 800bafa:	40dc      	lsrs	r4, r3
 800bafc:	4320      	orrs	r0, r4
 800bafe:	f7f7 fae9 	bl	80030d4 <__aeabi_ui2d>
 800bb02:	2201      	movs	r2, #1
 800bb04:	4b62      	ldr	r3, [pc, #392]	@ (800bc90 <_dtoa_r+0x394>)
 800bb06:	1e77      	subs	r7, r6, #1
 800bb08:	18cb      	adds	r3, r1, r3
 800bb0a:	9218      	str	r2, [sp, #96]	@ 0x60
 800bb0c:	e776      	b.n	800b9fc <_dtoa_r+0x100>
 800bb0e:	2320      	movs	r3, #32
 800bb10:	0020      	movs	r0, r4
 800bb12:	1a9b      	subs	r3, r3, r2
 800bb14:	4098      	lsls	r0, r3
 800bb16:	e7f2      	b.n	800bafe <_dtoa_r+0x202>
 800bb18:	9015      	str	r0, [sp, #84]	@ 0x54
 800bb1a:	e7ba      	b.n	800ba92 <_dtoa_r+0x196>
 800bb1c:	920d      	str	r2, [sp, #52]	@ 0x34
 800bb1e:	e7c3      	b.n	800baa8 <_dtoa_r+0x1ac>
 800bb20:	9b06      	ldr	r3, [sp, #24]
 800bb22:	9a04      	ldr	r2, [sp, #16]
 800bb24:	1a9b      	subs	r3, r3, r2
 800bb26:	9306      	str	r3, [sp, #24]
 800bb28:	4253      	negs	r3, r2
 800bb2a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	9314      	str	r3, [sp, #80]	@ 0x50
 800bb30:	e7c5      	b.n	800babe <_dtoa_r+0x1c2>
 800bb32:	2300      	movs	r3, #0
 800bb34:	9310      	str	r3, [sp, #64]	@ 0x40
 800bb36:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bb38:	930e      	str	r3, [sp, #56]	@ 0x38
 800bb3a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	dc13      	bgt.n	800bb68 <_dtoa_r+0x26c>
 800bb40:	2301      	movs	r3, #1
 800bb42:	001a      	movs	r2, r3
 800bb44:	930e      	str	r3, [sp, #56]	@ 0x38
 800bb46:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb48:	9223      	str	r2, [sp, #140]	@ 0x8c
 800bb4a:	e00d      	b.n	800bb68 <_dtoa_r+0x26c>
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	e7f1      	b.n	800bb34 <_dtoa_r+0x238>
 800bb50:	2300      	movs	r3, #0
 800bb52:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bb54:	9310      	str	r3, [sp, #64]	@ 0x40
 800bb56:	4694      	mov	ip, r2
 800bb58:	9b04      	ldr	r3, [sp, #16]
 800bb5a:	4463      	add	r3, ip
 800bb5c:	930e      	str	r3, [sp, #56]	@ 0x38
 800bb5e:	3301      	adds	r3, #1
 800bb60:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	dc00      	bgt.n	800bb68 <_dtoa_r+0x26c>
 800bb66:	2301      	movs	r3, #1
 800bb68:	9a03      	ldr	r2, [sp, #12]
 800bb6a:	2100      	movs	r1, #0
 800bb6c:	69d0      	ldr	r0, [r2, #28]
 800bb6e:	2204      	movs	r2, #4
 800bb70:	0015      	movs	r5, r2
 800bb72:	3514      	adds	r5, #20
 800bb74:	429d      	cmp	r5, r3
 800bb76:	d91b      	bls.n	800bbb0 <_dtoa_r+0x2b4>
 800bb78:	6041      	str	r1, [r0, #4]
 800bb7a:	9803      	ldr	r0, [sp, #12]
 800bb7c:	f000 fcfc 	bl	800c578 <_Balloc>
 800bb80:	9008      	str	r0, [sp, #32]
 800bb82:	2800      	cmp	r0, #0
 800bb84:	d117      	bne.n	800bbb6 <_dtoa_r+0x2ba>
 800bb86:	21b0      	movs	r1, #176	@ 0xb0
 800bb88:	4b42      	ldr	r3, [pc, #264]	@ (800bc94 <_dtoa_r+0x398>)
 800bb8a:	482e      	ldr	r0, [pc, #184]	@ (800bc44 <_dtoa_r+0x348>)
 800bb8c:	9a08      	ldr	r2, [sp, #32]
 800bb8e:	31ff      	adds	r1, #255	@ 0xff
 800bb90:	e6c9      	b.n	800b926 <_dtoa_r+0x2a>
 800bb92:	2301      	movs	r3, #1
 800bb94:	e7dd      	b.n	800bb52 <_dtoa_r+0x256>
 800bb96:	2300      	movs	r3, #0
 800bb98:	9410      	str	r4, [sp, #64]	@ 0x40
 800bb9a:	9322      	str	r3, [sp, #136]	@ 0x88
 800bb9c:	3b01      	subs	r3, #1
 800bb9e:	930e      	str	r3, [sp, #56]	@ 0x38
 800bba0:	9309      	str	r3, [sp, #36]	@ 0x24
 800bba2:	2200      	movs	r2, #0
 800bba4:	3313      	adds	r3, #19
 800bba6:	e7cf      	b.n	800bb48 <_dtoa_r+0x24c>
 800bba8:	2301      	movs	r3, #1
 800bbaa:	9310      	str	r3, [sp, #64]	@ 0x40
 800bbac:	3b02      	subs	r3, #2
 800bbae:	e7f6      	b.n	800bb9e <_dtoa_r+0x2a2>
 800bbb0:	3101      	adds	r1, #1
 800bbb2:	0052      	lsls	r2, r2, #1
 800bbb4:	e7dc      	b.n	800bb70 <_dtoa_r+0x274>
 800bbb6:	9b03      	ldr	r3, [sp, #12]
 800bbb8:	9a08      	ldr	r2, [sp, #32]
 800bbba:	69db      	ldr	r3, [r3, #28]
 800bbbc:	601a      	str	r2, [r3, #0]
 800bbbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbc0:	2b0e      	cmp	r3, #14
 800bbc2:	d900      	bls.n	800bbc6 <_dtoa_r+0x2ca>
 800bbc4:	e0d9      	b.n	800bd7a <_dtoa_r+0x47e>
 800bbc6:	2c00      	cmp	r4, #0
 800bbc8:	d100      	bne.n	800bbcc <_dtoa_r+0x2d0>
 800bbca:	e0d6      	b.n	800bd7a <_dtoa_r+0x47e>
 800bbcc:	9b04      	ldr	r3, [sp, #16]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	dd64      	ble.n	800bc9c <_dtoa_r+0x3a0>
 800bbd2:	210f      	movs	r1, #15
 800bbd4:	9a04      	ldr	r2, [sp, #16]
 800bbd6:	4b2b      	ldr	r3, [pc, #172]	@ (800bc84 <_dtoa_r+0x388>)
 800bbd8:	400a      	ands	r2, r1
 800bbda:	00d2      	lsls	r2, r2, #3
 800bbdc:	189b      	adds	r3, r3, r2
 800bbde:	681e      	ldr	r6, [r3, #0]
 800bbe0:	685f      	ldr	r7, [r3, #4]
 800bbe2:	9b04      	ldr	r3, [sp, #16]
 800bbe4:	2402      	movs	r4, #2
 800bbe6:	111d      	asrs	r5, r3, #4
 800bbe8:	05db      	lsls	r3, r3, #23
 800bbea:	d50a      	bpl.n	800bc02 <_dtoa_r+0x306>
 800bbec:	4b2a      	ldr	r3, [pc, #168]	@ (800bc98 <_dtoa_r+0x39c>)
 800bbee:	400d      	ands	r5, r1
 800bbf0:	6a1a      	ldr	r2, [r3, #32]
 800bbf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbf4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800bbf6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800bbf8:	f7f5 ff38 	bl	8001a6c <__aeabi_ddiv>
 800bbfc:	900a      	str	r0, [sp, #40]	@ 0x28
 800bbfe:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bc00:	3401      	adds	r4, #1
 800bc02:	4b25      	ldr	r3, [pc, #148]	@ (800bc98 <_dtoa_r+0x39c>)
 800bc04:	930c      	str	r3, [sp, #48]	@ 0x30
 800bc06:	2d00      	cmp	r5, #0
 800bc08:	d108      	bne.n	800bc1c <_dtoa_r+0x320>
 800bc0a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bc0c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bc0e:	0032      	movs	r2, r6
 800bc10:	003b      	movs	r3, r7
 800bc12:	f7f5 ff2b 	bl	8001a6c <__aeabi_ddiv>
 800bc16:	900a      	str	r0, [sp, #40]	@ 0x28
 800bc18:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bc1a:	e05a      	b.n	800bcd2 <_dtoa_r+0x3d6>
 800bc1c:	2301      	movs	r3, #1
 800bc1e:	421d      	tst	r5, r3
 800bc20:	d009      	beq.n	800bc36 <_dtoa_r+0x33a>
 800bc22:	18e4      	adds	r4, r4, r3
 800bc24:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bc26:	0030      	movs	r0, r6
 800bc28:	681a      	ldr	r2, [r3, #0]
 800bc2a:	685b      	ldr	r3, [r3, #4]
 800bc2c:	0039      	movs	r1, r7
 800bc2e:	f7f6 fb61 	bl	80022f4 <__aeabi_dmul>
 800bc32:	0006      	movs	r6, r0
 800bc34:	000f      	movs	r7, r1
 800bc36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bc38:	106d      	asrs	r5, r5, #1
 800bc3a:	3308      	adds	r3, #8
 800bc3c:	e7e2      	b.n	800bc04 <_dtoa_r+0x308>
 800bc3e:	46c0      	nop			@ (mov r8, r8)
 800bc40:	0800d704 	.word	0x0800d704
 800bc44:	0800d71b 	.word	0x0800d71b
 800bc48:	7ff00000 	.word	0x7ff00000
 800bc4c:	0000270f 	.word	0x0000270f
 800bc50:	0800d700 	.word	0x0800d700
 800bc54:	0800d703 	.word	0x0800d703
 800bc58:	0800d6d4 	.word	0x0800d6d4
 800bc5c:	0800d6d3 	.word	0x0800d6d3
 800bc60:	3ff00000 	.word	0x3ff00000
 800bc64:	fffffc01 	.word	0xfffffc01
 800bc68:	3ff80000 	.word	0x3ff80000
 800bc6c:	636f4361 	.word	0x636f4361
 800bc70:	3fd287a7 	.word	0x3fd287a7
 800bc74:	8b60c8b3 	.word	0x8b60c8b3
 800bc78:	3fc68a28 	.word	0x3fc68a28
 800bc7c:	509f79fb 	.word	0x509f79fb
 800bc80:	3fd34413 	.word	0x3fd34413
 800bc84:	0800d818 	.word	0x0800d818
 800bc88:	00000432 	.word	0x00000432
 800bc8c:	00000412 	.word	0x00000412
 800bc90:	fe100000 	.word	0xfe100000
 800bc94:	0800d773 	.word	0x0800d773
 800bc98:	0800d7f0 	.word	0x0800d7f0
 800bc9c:	9b04      	ldr	r3, [sp, #16]
 800bc9e:	2402      	movs	r4, #2
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d016      	beq.n	800bcd2 <_dtoa_r+0x3d6>
 800bca4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800bca6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800bca8:	220f      	movs	r2, #15
 800bcaa:	425d      	negs	r5, r3
 800bcac:	402a      	ands	r2, r5
 800bcae:	4bd7      	ldr	r3, [pc, #860]	@ (800c00c <_dtoa_r+0x710>)
 800bcb0:	00d2      	lsls	r2, r2, #3
 800bcb2:	189b      	adds	r3, r3, r2
 800bcb4:	681a      	ldr	r2, [r3, #0]
 800bcb6:	685b      	ldr	r3, [r3, #4]
 800bcb8:	f7f6 fb1c 	bl	80022f4 <__aeabi_dmul>
 800bcbc:	2701      	movs	r7, #1
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	900a      	str	r0, [sp, #40]	@ 0x28
 800bcc2:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bcc4:	4ed2      	ldr	r6, [pc, #840]	@ (800c010 <_dtoa_r+0x714>)
 800bcc6:	112d      	asrs	r5, r5, #4
 800bcc8:	2d00      	cmp	r5, #0
 800bcca:	d000      	beq.n	800bcce <_dtoa_r+0x3d2>
 800bccc:	e0ba      	b.n	800be44 <_dtoa_r+0x548>
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d1a1      	bne.n	800bc16 <_dtoa_r+0x31a>
 800bcd2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800bcd4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800bcd6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d100      	bne.n	800bcde <_dtoa_r+0x3e2>
 800bcdc:	e0bd      	b.n	800be5a <_dtoa_r+0x55e>
 800bcde:	2200      	movs	r2, #0
 800bce0:	0030      	movs	r0, r6
 800bce2:	0039      	movs	r1, r7
 800bce4:	4bcb      	ldr	r3, [pc, #812]	@ (800c014 <_dtoa_r+0x718>)
 800bce6:	f7f4 fbcd 	bl	8000484 <__aeabi_dcmplt>
 800bcea:	2800      	cmp	r0, #0
 800bcec:	d100      	bne.n	800bcf0 <_dtoa_r+0x3f4>
 800bcee:	e0b4      	b.n	800be5a <_dtoa_r+0x55e>
 800bcf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d100      	bne.n	800bcf8 <_dtoa_r+0x3fc>
 800bcf6:	e0b0      	b.n	800be5a <_dtoa_r+0x55e>
 800bcf8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	dd39      	ble.n	800bd72 <_dtoa_r+0x476>
 800bcfe:	9b04      	ldr	r3, [sp, #16]
 800bd00:	2200      	movs	r2, #0
 800bd02:	3b01      	subs	r3, #1
 800bd04:	930c      	str	r3, [sp, #48]	@ 0x30
 800bd06:	0030      	movs	r0, r6
 800bd08:	4bc3      	ldr	r3, [pc, #780]	@ (800c018 <_dtoa_r+0x71c>)
 800bd0a:	0039      	movs	r1, r7
 800bd0c:	f7f6 faf2 	bl	80022f4 <__aeabi_dmul>
 800bd10:	900a      	str	r0, [sp, #40]	@ 0x28
 800bd12:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bd14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd16:	3401      	adds	r4, #1
 800bd18:	0020      	movs	r0, r4
 800bd1a:	9311      	str	r3, [sp, #68]	@ 0x44
 800bd1c:	f7f7 f9ac 	bl	8003078 <__aeabi_i2d>
 800bd20:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bd22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd24:	f7f6 fae6 	bl	80022f4 <__aeabi_dmul>
 800bd28:	4bbc      	ldr	r3, [pc, #752]	@ (800c01c <_dtoa_r+0x720>)
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	f7f5 fb3a 	bl	80013a4 <__aeabi_dadd>
 800bd30:	4bbb      	ldr	r3, [pc, #748]	@ (800c020 <_dtoa_r+0x724>)
 800bd32:	0006      	movs	r6, r0
 800bd34:	18cf      	adds	r7, r1, r3
 800bd36:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d000      	beq.n	800bd3e <_dtoa_r+0x442>
 800bd3c:	e091      	b.n	800be62 <_dtoa_r+0x566>
 800bd3e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bd40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bd42:	2200      	movs	r2, #0
 800bd44:	4bb7      	ldr	r3, [pc, #732]	@ (800c024 <_dtoa_r+0x728>)
 800bd46:	f7f6 fd9d 	bl	8002884 <__aeabi_dsub>
 800bd4a:	0032      	movs	r2, r6
 800bd4c:	003b      	movs	r3, r7
 800bd4e:	0004      	movs	r4, r0
 800bd50:	000d      	movs	r5, r1
 800bd52:	f7f4 fbab 	bl	80004ac <__aeabi_dcmpgt>
 800bd56:	2800      	cmp	r0, #0
 800bd58:	d000      	beq.n	800bd5c <_dtoa_r+0x460>
 800bd5a:	e29d      	b.n	800c298 <_dtoa_r+0x99c>
 800bd5c:	2180      	movs	r1, #128	@ 0x80
 800bd5e:	0609      	lsls	r1, r1, #24
 800bd60:	187b      	adds	r3, r7, r1
 800bd62:	0032      	movs	r2, r6
 800bd64:	0020      	movs	r0, r4
 800bd66:	0029      	movs	r1, r5
 800bd68:	f7f4 fb8c 	bl	8000484 <__aeabi_dcmplt>
 800bd6c:	2800      	cmp	r0, #0
 800bd6e:	d000      	beq.n	800bd72 <_dtoa_r+0x476>
 800bd70:	e130      	b.n	800bfd4 <_dtoa_r+0x6d8>
 800bd72:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bd74:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800bd76:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd78:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bd7a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	da00      	bge.n	800bd82 <_dtoa_r+0x486>
 800bd80:	e177      	b.n	800c072 <_dtoa_r+0x776>
 800bd82:	9a04      	ldr	r2, [sp, #16]
 800bd84:	2a0e      	cmp	r2, #14
 800bd86:	dd00      	ble.n	800bd8a <_dtoa_r+0x48e>
 800bd88:	e173      	b.n	800c072 <_dtoa_r+0x776>
 800bd8a:	4ba0      	ldr	r3, [pc, #640]	@ (800c00c <_dtoa_r+0x710>)
 800bd8c:	00d2      	lsls	r2, r2, #3
 800bd8e:	189b      	adds	r3, r3, r2
 800bd90:	685c      	ldr	r4, [r3, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	9306      	str	r3, [sp, #24]
 800bd96:	9407      	str	r4, [sp, #28]
 800bd98:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	da03      	bge.n	800bda6 <_dtoa_r+0x4aa>
 800bd9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	dc00      	bgt.n	800bda6 <_dtoa_r+0x4aa>
 800bda4:	e106      	b.n	800bfb4 <_dtoa_r+0x6b8>
 800bda6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800bda8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800bdaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdac:	9d08      	ldr	r5, [sp, #32]
 800bdae:	3b01      	subs	r3, #1
 800bdb0:	195b      	adds	r3, r3, r5
 800bdb2:	930a      	str	r3, [sp, #40]	@ 0x28
 800bdb4:	9a06      	ldr	r2, [sp, #24]
 800bdb6:	9b07      	ldr	r3, [sp, #28]
 800bdb8:	0030      	movs	r0, r6
 800bdba:	0039      	movs	r1, r7
 800bdbc:	f7f5 fe56 	bl	8001a6c <__aeabi_ddiv>
 800bdc0:	f7f7 f91e 	bl	8003000 <__aeabi_d2iz>
 800bdc4:	9009      	str	r0, [sp, #36]	@ 0x24
 800bdc6:	f7f7 f957 	bl	8003078 <__aeabi_i2d>
 800bdca:	9a06      	ldr	r2, [sp, #24]
 800bdcc:	9b07      	ldr	r3, [sp, #28]
 800bdce:	f7f6 fa91 	bl	80022f4 <__aeabi_dmul>
 800bdd2:	0002      	movs	r2, r0
 800bdd4:	000b      	movs	r3, r1
 800bdd6:	0030      	movs	r0, r6
 800bdd8:	0039      	movs	r1, r7
 800bdda:	f7f6 fd53 	bl	8002884 <__aeabi_dsub>
 800bdde:	002b      	movs	r3, r5
 800bde0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bde2:	3501      	adds	r5, #1
 800bde4:	3230      	adds	r2, #48	@ 0x30
 800bde6:	701a      	strb	r2, [r3, #0]
 800bde8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bdea:	002c      	movs	r4, r5
 800bdec:	429a      	cmp	r2, r3
 800bdee:	d000      	beq.n	800bdf2 <_dtoa_r+0x4f6>
 800bdf0:	e131      	b.n	800c056 <_dtoa_r+0x75a>
 800bdf2:	0002      	movs	r2, r0
 800bdf4:	000b      	movs	r3, r1
 800bdf6:	f7f5 fad5 	bl	80013a4 <__aeabi_dadd>
 800bdfa:	9a06      	ldr	r2, [sp, #24]
 800bdfc:	9b07      	ldr	r3, [sp, #28]
 800bdfe:	0006      	movs	r6, r0
 800be00:	000f      	movs	r7, r1
 800be02:	f7f4 fb53 	bl	80004ac <__aeabi_dcmpgt>
 800be06:	2800      	cmp	r0, #0
 800be08:	d000      	beq.n	800be0c <_dtoa_r+0x510>
 800be0a:	e10f      	b.n	800c02c <_dtoa_r+0x730>
 800be0c:	9a06      	ldr	r2, [sp, #24]
 800be0e:	9b07      	ldr	r3, [sp, #28]
 800be10:	0030      	movs	r0, r6
 800be12:	0039      	movs	r1, r7
 800be14:	f7f4 fb30 	bl	8000478 <__aeabi_dcmpeq>
 800be18:	2800      	cmp	r0, #0
 800be1a:	d003      	beq.n	800be24 <_dtoa_r+0x528>
 800be1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be1e:	07dd      	lsls	r5, r3, #31
 800be20:	d500      	bpl.n	800be24 <_dtoa_r+0x528>
 800be22:	e103      	b.n	800c02c <_dtoa_r+0x730>
 800be24:	9905      	ldr	r1, [sp, #20]
 800be26:	9803      	ldr	r0, [sp, #12]
 800be28:	f000 fbea 	bl	800c600 <_Bfree>
 800be2c:	2300      	movs	r3, #0
 800be2e:	7023      	strb	r3, [r4, #0]
 800be30:	9b04      	ldr	r3, [sp, #16]
 800be32:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800be34:	3301      	adds	r3, #1
 800be36:	6013      	str	r3, [r2, #0]
 800be38:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d100      	bne.n	800be40 <_dtoa_r+0x544>
 800be3e:	e5a7      	b.n	800b990 <_dtoa_r+0x94>
 800be40:	601c      	str	r4, [r3, #0]
 800be42:	e5a5      	b.n	800b990 <_dtoa_r+0x94>
 800be44:	423d      	tst	r5, r7
 800be46:	d005      	beq.n	800be54 <_dtoa_r+0x558>
 800be48:	6832      	ldr	r2, [r6, #0]
 800be4a:	6873      	ldr	r3, [r6, #4]
 800be4c:	f7f6 fa52 	bl	80022f4 <__aeabi_dmul>
 800be50:	003b      	movs	r3, r7
 800be52:	3401      	adds	r4, #1
 800be54:	106d      	asrs	r5, r5, #1
 800be56:	3608      	adds	r6, #8
 800be58:	e736      	b.n	800bcc8 <_dtoa_r+0x3cc>
 800be5a:	9b04      	ldr	r3, [sp, #16]
 800be5c:	930c      	str	r3, [sp, #48]	@ 0x30
 800be5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be60:	e75a      	b.n	800bd18 <_dtoa_r+0x41c>
 800be62:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800be64:	4b69      	ldr	r3, [pc, #420]	@ (800c00c <_dtoa_r+0x710>)
 800be66:	3a01      	subs	r2, #1
 800be68:	00d2      	lsls	r2, r2, #3
 800be6a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800be6c:	189b      	adds	r3, r3, r2
 800be6e:	681a      	ldr	r2, [r3, #0]
 800be70:	685b      	ldr	r3, [r3, #4]
 800be72:	2900      	cmp	r1, #0
 800be74:	d04c      	beq.n	800bf10 <_dtoa_r+0x614>
 800be76:	2000      	movs	r0, #0
 800be78:	496b      	ldr	r1, [pc, #428]	@ (800c028 <_dtoa_r+0x72c>)
 800be7a:	f7f5 fdf7 	bl	8001a6c <__aeabi_ddiv>
 800be7e:	0032      	movs	r2, r6
 800be80:	003b      	movs	r3, r7
 800be82:	f7f6 fcff 	bl	8002884 <__aeabi_dsub>
 800be86:	9a08      	ldr	r2, [sp, #32]
 800be88:	0006      	movs	r6, r0
 800be8a:	4694      	mov	ip, r2
 800be8c:	000f      	movs	r7, r1
 800be8e:	9b08      	ldr	r3, [sp, #32]
 800be90:	9316      	str	r3, [sp, #88]	@ 0x58
 800be92:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800be94:	4463      	add	r3, ip
 800be96:	9311      	str	r3, [sp, #68]	@ 0x44
 800be98:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800be9a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800be9c:	f7f7 f8b0 	bl	8003000 <__aeabi_d2iz>
 800bea0:	0005      	movs	r5, r0
 800bea2:	f7f7 f8e9 	bl	8003078 <__aeabi_i2d>
 800bea6:	0002      	movs	r2, r0
 800bea8:	000b      	movs	r3, r1
 800beaa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800beac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800beae:	f7f6 fce9 	bl	8002884 <__aeabi_dsub>
 800beb2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800beb4:	3530      	adds	r5, #48	@ 0x30
 800beb6:	1c5c      	adds	r4, r3, #1
 800beb8:	701d      	strb	r5, [r3, #0]
 800beba:	0032      	movs	r2, r6
 800bebc:	003b      	movs	r3, r7
 800bebe:	900a      	str	r0, [sp, #40]	@ 0x28
 800bec0:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bec2:	f7f4 fadf 	bl	8000484 <__aeabi_dcmplt>
 800bec6:	2800      	cmp	r0, #0
 800bec8:	d16a      	bne.n	800bfa0 <_dtoa_r+0x6a4>
 800beca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800becc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bece:	2000      	movs	r0, #0
 800bed0:	4950      	ldr	r1, [pc, #320]	@ (800c014 <_dtoa_r+0x718>)
 800bed2:	f7f6 fcd7 	bl	8002884 <__aeabi_dsub>
 800bed6:	0032      	movs	r2, r6
 800bed8:	003b      	movs	r3, r7
 800beda:	f7f4 fad3 	bl	8000484 <__aeabi_dcmplt>
 800bede:	2800      	cmp	r0, #0
 800bee0:	d000      	beq.n	800bee4 <_dtoa_r+0x5e8>
 800bee2:	e0a5      	b.n	800c030 <_dtoa_r+0x734>
 800bee4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bee6:	42a3      	cmp	r3, r4
 800bee8:	d100      	bne.n	800beec <_dtoa_r+0x5f0>
 800beea:	e742      	b.n	800bd72 <_dtoa_r+0x476>
 800beec:	2200      	movs	r2, #0
 800beee:	0030      	movs	r0, r6
 800bef0:	0039      	movs	r1, r7
 800bef2:	4b49      	ldr	r3, [pc, #292]	@ (800c018 <_dtoa_r+0x71c>)
 800bef4:	f7f6 f9fe 	bl	80022f4 <__aeabi_dmul>
 800bef8:	2200      	movs	r2, #0
 800befa:	0006      	movs	r6, r0
 800befc:	000f      	movs	r7, r1
 800befe:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bf00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bf02:	4b45      	ldr	r3, [pc, #276]	@ (800c018 <_dtoa_r+0x71c>)
 800bf04:	f7f6 f9f6 	bl	80022f4 <__aeabi_dmul>
 800bf08:	9416      	str	r4, [sp, #88]	@ 0x58
 800bf0a:	900a      	str	r0, [sp, #40]	@ 0x28
 800bf0c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bf0e:	e7c3      	b.n	800be98 <_dtoa_r+0x59c>
 800bf10:	0030      	movs	r0, r6
 800bf12:	0039      	movs	r1, r7
 800bf14:	f7f6 f9ee 	bl	80022f4 <__aeabi_dmul>
 800bf18:	9d08      	ldr	r5, [sp, #32]
 800bf1a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bf1c:	002b      	movs	r3, r5
 800bf1e:	4694      	mov	ip, r2
 800bf20:	9016      	str	r0, [sp, #88]	@ 0x58
 800bf22:	9117      	str	r1, [sp, #92]	@ 0x5c
 800bf24:	4463      	add	r3, ip
 800bf26:	9319      	str	r3, [sp, #100]	@ 0x64
 800bf28:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bf2a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bf2c:	f7f7 f868 	bl	8003000 <__aeabi_d2iz>
 800bf30:	0004      	movs	r4, r0
 800bf32:	f7f7 f8a1 	bl	8003078 <__aeabi_i2d>
 800bf36:	000b      	movs	r3, r1
 800bf38:	0002      	movs	r2, r0
 800bf3a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bf3c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bf3e:	f7f6 fca1 	bl	8002884 <__aeabi_dsub>
 800bf42:	3430      	adds	r4, #48	@ 0x30
 800bf44:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bf46:	702c      	strb	r4, [r5, #0]
 800bf48:	3501      	adds	r5, #1
 800bf4a:	0006      	movs	r6, r0
 800bf4c:	000f      	movs	r7, r1
 800bf4e:	42ab      	cmp	r3, r5
 800bf50:	d129      	bne.n	800bfa6 <_dtoa_r+0x6aa>
 800bf52:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800bf54:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800bf56:	9b08      	ldr	r3, [sp, #32]
 800bf58:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800bf5a:	469c      	mov	ip, r3
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	4b32      	ldr	r3, [pc, #200]	@ (800c028 <_dtoa_r+0x72c>)
 800bf60:	4464      	add	r4, ip
 800bf62:	f7f5 fa1f 	bl	80013a4 <__aeabi_dadd>
 800bf66:	0002      	movs	r2, r0
 800bf68:	000b      	movs	r3, r1
 800bf6a:	0030      	movs	r0, r6
 800bf6c:	0039      	movs	r1, r7
 800bf6e:	f7f4 fa9d 	bl	80004ac <__aeabi_dcmpgt>
 800bf72:	2800      	cmp	r0, #0
 800bf74:	d15c      	bne.n	800c030 <_dtoa_r+0x734>
 800bf76:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bf78:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bf7a:	2000      	movs	r0, #0
 800bf7c:	492a      	ldr	r1, [pc, #168]	@ (800c028 <_dtoa_r+0x72c>)
 800bf7e:	f7f6 fc81 	bl	8002884 <__aeabi_dsub>
 800bf82:	0002      	movs	r2, r0
 800bf84:	000b      	movs	r3, r1
 800bf86:	0030      	movs	r0, r6
 800bf88:	0039      	movs	r1, r7
 800bf8a:	f7f4 fa7b 	bl	8000484 <__aeabi_dcmplt>
 800bf8e:	2800      	cmp	r0, #0
 800bf90:	d100      	bne.n	800bf94 <_dtoa_r+0x698>
 800bf92:	e6ee      	b.n	800bd72 <_dtoa_r+0x476>
 800bf94:	0023      	movs	r3, r4
 800bf96:	3c01      	subs	r4, #1
 800bf98:	7822      	ldrb	r2, [r4, #0]
 800bf9a:	2a30      	cmp	r2, #48	@ 0x30
 800bf9c:	d0fa      	beq.n	800bf94 <_dtoa_r+0x698>
 800bf9e:	001c      	movs	r4, r3
 800bfa0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bfa2:	9304      	str	r3, [sp, #16]
 800bfa4:	e73e      	b.n	800be24 <_dtoa_r+0x528>
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	4b1b      	ldr	r3, [pc, #108]	@ (800c018 <_dtoa_r+0x71c>)
 800bfaa:	f7f6 f9a3 	bl	80022f4 <__aeabi_dmul>
 800bfae:	900a      	str	r0, [sp, #40]	@ 0x28
 800bfb0:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bfb2:	e7b9      	b.n	800bf28 <_dtoa_r+0x62c>
 800bfb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d10c      	bne.n	800bfd4 <_dtoa_r+0x6d8>
 800bfba:	9806      	ldr	r0, [sp, #24]
 800bfbc:	9907      	ldr	r1, [sp, #28]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	4b18      	ldr	r3, [pc, #96]	@ (800c024 <_dtoa_r+0x728>)
 800bfc2:	f7f6 f997 	bl	80022f4 <__aeabi_dmul>
 800bfc6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bfc8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bfca:	f7f4 fa79 	bl	80004c0 <__aeabi_dcmpge>
 800bfce:	2800      	cmp	r0, #0
 800bfd0:	d100      	bne.n	800bfd4 <_dtoa_r+0x6d8>
 800bfd2:	e164      	b.n	800c29e <_dtoa_r+0x9a2>
 800bfd4:	2600      	movs	r6, #0
 800bfd6:	0037      	movs	r7, r6
 800bfd8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bfda:	9c08      	ldr	r4, [sp, #32]
 800bfdc:	43db      	mvns	r3, r3
 800bfde:	930c      	str	r3, [sp, #48]	@ 0x30
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	9304      	str	r3, [sp, #16]
 800bfe4:	0031      	movs	r1, r6
 800bfe6:	9803      	ldr	r0, [sp, #12]
 800bfe8:	f000 fb0a 	bl	800c600 <_Bfree>
 800bfec:	2f00      	cmp	r7, #0
 800bfee:	d0d7      	beq.n	800bfa0 <_dtoa_r+0x6a4>
 800bff0:	9b04      	ldr	r3, [sp, #16]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d005      	beq.n	800c002 <_dtoa_r+0x706>
 800bff6:	42bb      	cmp	r3, r7
 800bff8:	d003      	beq.n	800c002 <_dtoa_r+0x706>
 800bffa:	0019      	movs	r1, r3
 800bffc:	9803      	ldr	r0, [sp, #12]
 800bffe:	f000 faff 	bl	800c600 <_Bfree>
 800c002:	0039      	movs	r1, r7
 800c004:	9803      	ldr	r0, [sp, #12]
 800c006:	f000 fafb 	bl	800c600 <_Bfree>
 800c00a:	e7c9      	b.n	800bfa0 <_dtoa_r+0x6a4>
 800c00c:	0800d818 	.word	0x0800d818
 800c010:	0800d7f0 	.word	0x0800d7f0
 800c014:	3ff00000 	.word	0x3ff00000
 800c018:	40240000 	.word	0x40240000
 800c01c:	401c0000 	.word	0x401c0000
 800c020:	fcc00000 	.word	0xfcc00000
 800c024:	40140000 	.word	0x40140000
 800c028:	3fe00000 	.word	0x3fe00000
 800c02c:	9b04      	ldr	r3, [sp, #16]
 800c02e:	930c      	str	r3, [sp, #48]	@ 0x30
 800c030:	0023      	movs	r3, r4
 800c032:	001c      	movs	r4, r3
 800c034:	3b01      	subs	r3, #1
 800c036:	781a      	ldrb	r2, [r3, #0]
 800c038:	2a39      	cmp	r2, #57	@ 0x39
 800c03a:	d108      	bne.n	800c04e <_dtoa_r+0x752>
 800c03c:	9a08      	ldr	r2, [sp, #32]
 800c03e:	429a      	cmp	r2, r3
 800c040:	d1f7      	bne.n	800c032 <_dtoa_r+0x736>
 800c042:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c044:	9908      	ldr	r1, [sp, #32]
 800c046:	3201      	adds	r2, #1
 800c048:	920c      	str	r2, [sp, #48]	@ 0x30
 800c04a:	2230      	movs	r2, #48	@ 0x30
 800c04c:	700a      	strb	r2, [r1, #0]
 800c04e:	781a      	ldrb	r2, [r3, #0]
 800c050:	3201      	adds	r2, #1
 800c052:	701a      	strb	r2, [r3, #0]
 800c054:	e7a4      	b.n	800bfa0 <_dtoa_r+0x6a4>
 800c056:	2200      	movs	r2, #0
 800c058:	4bc6      	ldr	r3, [pc, #792]	@ (800c374 <_dtoa_r+0xa78>)
 800c05a:	f7f6 f94b 	bl	80022f4 <__aeabi_dmul>
 800c05e:	2200      	movs	r2, #0
 800c060:	2300      	movs	r3, #0
 800c062:	0006      	movs	r6, r0
 800c064:	000f      	movs	r7, r1
 800c066:	f7f4 fa07 	bl	8000478 <__aeabi_dcmpeq>
 800c06a:	2800      	cmp	r0, #0
 800c06c:	d100      	bne.n	800c070 <_dtoa_r+0x774>
 800c06e:	e6a1      	b.n	800bdb4 <_dtoa_r+0x4b8>
 800c070:	e6d8      	b.n	800be24 <_dtoa_r+0x528>
 800c072:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800c074:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800c076:	9c06      	ldr	r4, [sp, #24]
 800c078:	2f00      	cmp	r7, #0
 800c07a:	d014      	beq.n	800c0a6 <_dtoa_r+0x7aa>
 800c07c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c07e:	2a01      	cmp	r2, #1
 800c080:	dd00      	ble.n	800c084 <_dtoa_r+0x788>
 800c082:	e0c8      	b.n	800c216 <_dtoa_r+0x91a>
 800c084:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800c086:	2a00      	cmp	r2, #0
 800c088:	d100      	bne.n	800c08c <_dtoa_r+0x790>
 800c08a:	e0be      	b.n	800c20a <_dtoa_r+0x90e>
 800c08c:	4aba      	ldr	r2, [pc, #744]	@ (800c378 <_dtoa_r+0xa7c>)
 800c08e:	189b      	adds	r3, r3, r2
 800c090:	9a06      	ldr	r2, [sp, #24]
 800c092:	2101      	movs	r1, #1
 800c094:	18d2      	adds	r2, r2, r3
 800c096:	9206      	str	r2, [sp, #24]
 800c098:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c09a:	9803      	ldr	r0, [sp, #12]
 800c09c:	18d3      	adds	r3, r2, r3
 800c09e:	930d      	str	r3, [sp, #52]	@ 0x34
 800c0a0:	f000 fb66 	bl	800c770 <__i2b>
 800c0a4:	0007      	movs	r7, r0
 800c0a6:	2c00      	cmp	r4, #0
 800c0a8:	d00e      	beq.n	800c0c8 <_dtoa_r+0x7cc>
 800c0aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	dd0b      	ble.n	800c0c8 <_dtoa_r+0x7cc>
 800c0b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c0b2:	0023      	movs	r3, r4
 800c0b4:	4294      	cmp	r4, r2
 800c0b6:	dd00      	ble.n	800c0ba <_dtoa_r+0x7be>
 800c0b8:	0013      	movs	r3, r2
 800c0ba:	9a06      	ldr	r2, [sp, #24]
 800c0bc:	1ae4      	subs	r4, r4, r3
 800c0be:	1ad2      	subs	r2, r2, r3
 800c0c0:	9206      	str	r2, [sp, #24]
 800c0c2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c0c4:	1ad3      	subs	r3, r2, r3
 800c0c6:	930d      	str	r3, [sp, #52]	@ 0x34
 800c0c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d01f      	beq.n	800c10e <_dtoa_r+0x812>
 800c0ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d100      	bne.n	800c0d6 <_dtoa_r+0x7da>
 800c0d4:	e0b5      	b.n	800c242 <_dtoa_r+0x946>
 800c0d6:	2d00      	cmp	r5, #0
 800c0d8:	d010      	beq.n	800c0fc <_dtoa_r+0x800>
 800c0da:	0039      	movs	r1, r7
 800c0dc:	002a      	movs	r2, r5
 800c0de:	9803      	ldr	r0, [sp, #12]
 800c0e0:	f000 fc10 	bl	800c904 <__pow5mult>
 800c0e4:	9a05      	ldr	r2, [sp, #20]
 800c0e6:	0001      	movs	r1, r0
 800c0e8:	0007      	movs	r7, r0
 800c0ea:	9803      	ldr	r0, [sp, #12]
 800c0ec:	f000 fb58 	bl	800c7a0 <__multiply>
 800c0f0:	0006      	movs	r6, r0
 800c0f2:	9905      	ldr	r1, [sp, #20]
 800c0f4:	9803      	ldr	r0, [sp, #12]
 800c0f6:	f000 fa83 	bl	800c600 <_Bfree>
 800c0fa:	9605      	str	r6, [sp, #20]
 800c0fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0fe:	1b5a      	subs	r2, r3, r5
 800c100:	42ab      	cmp	r3, r5
 800c102:	d004      	beq.n	800c10e <_dtoa_r+0x812>
 800c104:	9905      	ldr	r1, [sp, #20]
 800c106:	9803      	ldr	r0, [sp, #12]
 800c108:	f000 fbfc 	bl	800c904 <__pow5mult>
 800c10c:	9005      	str	r0, [sp, #20]
 800c10e:	2101      	movs	r1, #1
 800c110:	9803      	ldr	r0, [sp, #12]
 800c112:	f000 fb2d 	bl	800c770 <__i2b>
 800c116:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c118:	0006      	movs	r6, r0
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d100      	bne.n	800c120 <_dtoa_r+0x824>
 800c11e:	e1bc      	b.n	800c49a <_dtoa_r+0xb9e>
 800c120:	001a      	movs	r2, r3
 800c122:	0001      	movs	r1, r0
 800c124:	9803      	ldr	r0, [sp, #12]
 800c126:	f000 fbed 	bl	800c904 <__pow5mult>
 800c12a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c12c:	0006      	movs	r6, r0
 800c12e:	2500      	movs	r5, #0
 800c130:	2b01      	cmp	r3, #1
 800c132:	dc16      	bgt.n	800c162 <_dtoa_r+0x866>
 800c134:	2500      	movs	r5, #0
 800c136:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c138:	42ab      	cmp	r3, r5
 800c13a:	d10e      	bne.n	800c15a <_dtoa_r+0x85e>
 800c13c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c13e:	031b      	lsls	r3, r3, #12
 800c140:	42ab      	cmp	r3, r5
 800c142:	d10a      	bne.n	800c15a <_dtoa_r+0x85e>
 800c144:	4b8d      	ldr	r3, [pc, #564]	@ (800c37c <_dtoa_r+0xa80>)
 800c146:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c148:	4213      	tst	r3, r2
 800c14a:	d006      	beq.n	800c15a <_dtoa_r+0x85e>
 800c14c:	9b06      	ldr	r3, [sp, #24]
 800c14e:	3501      	adds	r5, #1
 800c150:	3301      	adds	r3, #1
 800c152:	9306      	str	r3, [sp, #24]
 800c154:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c156:	3301      	adds	r3, #1
 800c158:	930d      	str	r3, [sp, #52]	@ 0x34
 800c15a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c15c:	2001      	movs	r0, #1
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d008      	beq.n	800c174 <_dtoa_r+0x878>
 800c162:	6933      	ldr	r3, [r6, #16]
 800c164:	3303      	adds	r3, #3
 800c166:	009b      	lsls	r3, r3, #2
 800c168:	18f3      	adds	r3, r6, r3
 800c16a:	6858      	ldr	r0, [r3, #4]
 800c16c:	f000 fab0 	bl	800c6d0 <__hi0bits>
 800c170:	2320      	movs	r3, #32
 800c172:	1a18      	subs	r0, r3, r0
 800c174:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c176:	1818      	adds	r0, r3, r0
 800c178:	0002      	movs	r2, r0
 800c17a:	231f      	movs	r3, #31
 800c17c:	401a      	ands	r2, r3
 800c17e:	4218      	tst	r0, r3
 800c180:	d065      	beq.n	800c24e <_dtoa_r+0x952>
 800c182:	3301      	adds	r3, #1
 800c184:	1a9b      	subs	r3, r3, r2
 800c186:	2b04      	cmp	r3, #4
 800c188:	dd5d      	ble.n	800c246 <_dtoa_r+0x94a>
 800c18a:	231c      	movs	r3, #28
 800c18c:	1a9b      	subs	r3, r3, r2
 800c18e:	9a06      	ldr	r2, [sp, #24]
 800c190:	18e4      	adds	r4, r4, r3
 800c192:	18d2      	adds	r2, r2, r3
 800c194:	9206      	str	r2, [sp, #24]
 800c196:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c198:	18d3      	adds	r3, r2, r3
 800c19a:	930d      	str	r3, [sp, #52]	@ 0x34
 800c19c:	9b06      	ldr	r3, [sp, #24]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	dd05      	ble.n	800c1ae <_dtoa_r+0x8b2>
 800c1a2:	001a      	movs	r2, r3
 800c1a4:	9905      	ldr	r1, [sp, #20]
 800c1a6:	9803      	ldr	r0, [sp, #12]
 800c1a8:	f000 fc08 	bl	800c9bc <__lshift>
 800c1ac:	9005      	str	r0, [sp, #20]
 800c1ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	dd05      	ble.n	800c1c0 <_dtoa_r+0x8c4>
 800c1b4:	0031      	movs	r1, r6
 800c1b6:	001a      	movs	r2, r3
 800c1b8:	9803      	ldr	r0, [sp, #12]
 800c1ba:	f000 fbff 	bl	800c9bc <__lshift>
 800c1be:	0006      	movs	r6, r0
 800c1c0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d045      	beq.n	800c252 <_dtoa_r+0x956>
 800c1c6:	0031      	movs	r1, r6
 800c1c8:	9805      	ldr	r0, [sp, #20]
 800c1ca:	f000 fc63 	bl	800ca94 <__mcmp>
 800c1ce:	2800      	cmp	r0, #0
 800c1d0:	da3f      	bge.n	800c252 <_dtoa_r+0x956>
 800c1d2:	9b04      	ldr	r3, [sp, #16]
 800c1d4:	220a      	movs	r2, #10
 800c1d6:	3b01      	subs	r3, #1
 800c1d8:	930c      	str	r3, [sp, #48]	@ 0x30
 800c1da:	9905      	ldr	r1, [sp, #20]
 800c1dc:	2300      	movs	r3, #0
 800c1de:	9803      	ldr	r0, [sp, #12]
 800c1e0:	f000 fa32 	bl	800c648 <__multadd>
 800c1e4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c1e6:	9005      	str	r0, [sp, #20]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d100      	bne.n	800c1ee <_dtoa_r+0x8f2>
 800c1ec:	e15c      	b.n	800c4a8 <_dtoa_r+0xbac>
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	0039      	movs	r1, r7
 800c1f2:	220a      	movs	r2, #10
 800c1f4:	9803      	ldr	r0, [sp, #12]
 800c1f6:	f000 fa27 	bl	800c648 <__multadd>
 800c1fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1fc:	0007      	movs	r7, r0
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	dc55      	bgt.n	800c2ae <_dtoa_r+0x9b2>
 800c202:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c204:	2b02      	cmp	r3, #2
 800c206:	dc2d      	bgt.n	800c264 <_dtoa_r+0x968>
 800c208:	e051      	b.n	800c2ae <_dtoa_r+0x9b2>
 800c20a:	2336      	movs	r3, #54	@ 0x36
 800c20c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c20e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800c210:	9c06      	ldr	r4, [sp, #24]
 800c212:	1a9b      	subs	r3, r3, r2
 800c214:	e73c      	b.n	800c090 <_dtoa_r+0x794>
 800c216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c218:	1e5d      	subs	r5, r3, #1
 800c21a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c21c:	42ab      	cmp	r3, r5
 800c21e:	db08      	blt.n	800c232 <_dtoa_r+0x936>
 800c220:	1b5d      	subs	r5, r3, r5
 800c222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c224:	9c06      	ldr	r4, [sp, #24]
 800c226:	2b00      	cmp	r3, #0
 800c228:	db00      	blt.n	800c22c <_dtoa_r+0x930>
 800c22a:	e731      	b.n	800c090 <_dtoa_r+0x794>
 800c22c:	1ae4      	subs	r4, r4, r3
 800c22e:	2300      	movs	r3, #0
 800c230:	e72e      	b.n	800c090 <_dtoa_r+0x794>
 800c232:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c234:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c236:	1aeb      	subs	r3, r5, r3
 800c238:	18d3      	adds	r3, r2, r3
 800c23a:	950f      	str	r5, [sp, #60]	@ 0x3c
 800c23c:	9314      	str	r3, [sp, #80]	@ 0x50
 800c23e:	2500      	movs	r5, #0
 800c240:	e7ef      	b.n	800c222 <_dtoa_r+0x926>
 800c242:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c244:	e75e      	b.n	800c104 <_dtoa_r+0x808>
 800c246:	2b04      	cmp	r3, #4
 800c248:	d0a8      	beq.n	800c19c <_dtoa_r+0x8a0>
 800c24a:	331c      	adds	r3, #28
 800c24c:	e79f      	b.n	800c18e <_dtoa_r+0x892>
 800c24e:	0013      	movs	r3, r2
 800c250:	e7fb      	b.n	800c24a <_dtoa_r+0x94e>
 800c252:	9b04      	ldr	r3, [sp, #16]
 800c254:	930c      	str	r3, [sp, #48]	@ 0x30
 800c256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c258:	930e      	str	r3, [sp, #56]	@ 0x38
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	dc23      	bgt.n	800c2a6 <_dtoa_r+0x9aa>
 800c25e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c260:	2b02      	cmp	r3, #2
 800c262:	dd20      	ble.n	800c2a6 <_dtoa_r+0x9aa>
 800c264:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c266:	2b00      	cmp	r3, #0
 800c268:	d000      	beq.n	800c26c <_dtoa_r+0x970>
 800c26a:	e6b5      	b.n	800bfd8 <_dtoa_r+0x6dc>
 800c26c:	0031      	movs	r1, r6
 800c26e:	2205      	movs	r2, #5
 800c270:	9803      	ldr	r0, [sp, #12]
 800c272:	f000 f9e9 	bl	800c648 <__multadd>
 800c276:	0006      	movs	r6, r0
 800c278:	0001      	movs	r1, r0
 800c27a:	9805      	ldr	r0, [sp, #20]
 800c27c:	f000 fc0a 	bl	800ca94 <__mcmp>
 800c280:	2800      	cmp	r0, #0
 800c282:	dc00      	bgt.n	800c286 <_dtoa_r+0x98a>
 800c284:	e6a8      	b.n	800bfd8 <_dtoa_r+0x6dc>
 800c286:	9b08      	ldr	r3, [sp, #32]
 800c288:	9a08      	ldr	r2, [sp, #32]
 800c28a:	1c5c      	adds	r4, r3, #1
 800c28c:	2331      	movs	r3, #49	@ 0x31
 800c28e:	7013      	strb	r3, [r2, #0]
 800c290:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c292:	3301      	adds	r3, #1
 800c294:	930c      	str	r3, [sp, #48]	@ 0x30
 800c296:	e6a3      	b.n	800bfe0 <_dtoa_r+0x6e4>
 800c298:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800c29a:	0037      	movs	r7, r6
 800c29c:	e7f3      	b.n	800c286 <_dtoa_r+0x98a>
 800c29e:	9b04      	ldr	r3, [sp, #16]
 800c2a0:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800c2a2:	930c      	str	r3, [sp, #48]	@ 0x30
 800c2a4:	e7f9      	b.n	800c29a <_dtoa_r+0x99e>
 800c2a6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d100      	bne.n	800c2ae <_dtoa_r+0x9b2>
 800c2ac:	e100      	b.n	800c4b0 <_dtoa_r+0xbb4>
 800c2ae:	2c00      	cmp	r4, #0
 800c2b0:	dd05      	ble.n	800c2be <_dtoa_r+0x9c2>
 800c2b2:	0039      	movs	r1, r7
 800c2b4:	0022      	movs	r2, r4
 800c2b6:	9803      	ldr	r0, [sp, #12]
 800c2b8:	f000 fb80 	bl	800c9bc <__lshift>
 800c2bc:	0007      	movs	r7, r0
 800c2be:	0038      	movs	r0, r7
 800c2c0:	2d00      	cmp	r5, #0
 800c2c2:	d018      	beq.n	800c2f6 <_dtoa_r+0x9fa>
 800c2c4:	6879      	ldr	r1, [r7, #4]
 800c2c6:	9803      	ldr	r0, [sp, #12]
 800c2c8:	f000 f956 	bl	800c578 <_Balloc>
 800c2cc:	1e04      	subs	r4, r0, #0
 800c2ce:	d105      	bne.n	800c2dc <_dtoa_r+0x9e0>
 800c2d0:	0022      	movs	r2, r4
 800c2d2:	4b2b      	ldr	r3, [pc, #172]	@ (800c380 <_dtoa_r+0xa84>)
 800c2d4:	482b      	ldr	r0, [pc, #172]	@ (800c384 <_dtoa_r+0xa88>)
 800c2d6:	492c      	ldr	r1, [pc, #176]	@ (800c388 <_dtoa_r+0xa8c>)
 800c2d8:	f7ff fb25 	bl	800b926 <_dtoa_r+0x2a>
 800c2dc:	0039      	movs	r1, r7
 800c2de:	693a      	ldr	r2, [r7, #16]
 800c2e0:	310c      	adds	r1, #12
 800c2e2:	3202      	adds	r2, #2
 800c2e4:	0092      	lsls	r2, r2, #2
 800c2e6:	300c      	adds	r0, #12
 800c2e8:	f7ff fa70 	bl	800b7cc <memcpy>
 800c2ec:	2201      	movs	r2, #1
 800c2ee:	0021      	movs	r1, r4
 800c2f0:	9803      	ldr	r0, [sp, #12]
 800c2f2:	f000 fb63 	bl	800c9bc <__lshift>
 800c2f6:	9b08      	ldr	r3, [sp, #32]
 800c2f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c2fa:	9306      	str	r3, [sp, #24]
 800c2fc:	3b01      	subs	r3, #1
 800c2fe:	189b      	adds	r3, r3, r2
 800c300:	2201      	movs	r2, #1
 800c302:	9704      	str	r7, [sp, #16]
 800c304:	0007      	movs	r7, r0
 800c306:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c308:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c30a:	4013      	ands	r3, r2
 800c30c:	930e      	str	r3, [sp, #56]	@ 0x38
 800c30e:	0031      	movs	r1, r6
 800c310:	9805      	ldr	r0, [sp, #20]
 800c312:	f7ff fa64 	bl	800b7de <quorem>
 800c316:	9904      	ldr	r1, [sp, #16]
 800c318:	0005      	movs	r5, r0
 800c31a:	900a      	str	r0, [sp, #40]	@ 0x28
 800c31c:	9805      	ldr	r0, [sp, #20]
 800c31e:	f000 fbb9 	bl	800ca94 <__mcmp>
 800c322:	003a      	movs	r2, r7
 800c324:	900d      	str	r0, [sp, #52]	@ 0x34
 800c326:	0031      	movs	r1, r6
 800c328:	9803      	ldr	r0, [sp, #12]
 800c32a:	f000 fbcf 	bl	800cacc <__mdiff>
 800c32e:	2201      	movs	r2, #1
 800c330:	68c3      	ldr	r3, [r0, #12]
 800c332:	0004      	movs	r4, r0
 800c334:	3530      	adds	r5, #48	@ 0x30
 800c336:	9209      	str	r2, [sp, #36]	@ 0x24
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d104      	bne.n	800c346 <_dtoa_r+0xa4a>
 800c33c:	0001      	movs	r1, r0
 800c33e:	9805      	ldr	r0, [sp, #20]
 800c340:	f000 fba8 	bl	800ca94 <__mcmp>
 800c344:	9009      	str	r0, [sp, #36]	@ 0x24
 800c346:	0021      	movs	r1, r4
 800c348:	9803      	ldr	r0, [sp, #12]
 800c34a:	f000 f959 	bl	800c600 <_Bfree>
 800c34e:	9b06      	ldr	r3, [sp, #24]
 800c350:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c352:	1c5c      	adds	r4, r3, #1
 800c354:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c356:	4313      	orrs	r3, r2
 800c358:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c35a:	4313      	orrs	r3, r2
 800c35c:	d116      	bne.n	800c38c <_dtoa_r+0xa90>
 800c35e:	2d39      	cmp	r5, #57	@ 0x39
 800c360:	d02f      	beq.n	800c3c2 <_dtoa_r+0xac6>
 800c362:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c364:	2b00      	cmp	r3, #0
 800c366:	dd01      	ble.n	800c36c <_dtoa_r+0xa70>
 800c368:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800c36a:	3531      	adds	r5, #49	@ 0x31
 800c36c:	9b06      	ldr	r3, [sp, #24]
 800c36e:	701d      	strb	r5, [r3, #0]
 800c370:	e638      	b.n	800bfe4 <_dtoa_r+0x6e8>
 800c372:	46c0      	nop			@ (mov r8, r8)
 800c374:	40240000 	.word	0x40240000
 800c378:	00000433 	.word	0x00000433
 800c37c:	7ff00000 	.word	0x7ff00000
 800c380:	0800d773 	.word	0x0800d773
 800c384:	0800d71b 	.word	0x0800d71b
 800c388:	000002ef 	.word	0x000002ef
 800c38c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c38e:	2b00      	cmp	r3, #0
 800c390:	db04      	blt.n	800c39c <_dtoa_r+0xaa0>
 800c392:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c394:	4313      	orrs	r3, r2
 800c396:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c398:	4313      	orrs	r3, r2
 800c39a:	d11e      	bne.n	800c3da <_dtoa_r+0xade>
 800c39c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	dde4      	ble.n	800c36c <_dtoa_r+0xa70>
 800c3a2:	9905      	ldr	r1, [sp, #20]
 800c3a4:	2201      	movs	r2, #1
 800c3a6:	9803      	ldr	r0, [sp, #12]
 800c3a8:	f000 fb08 	bl	800c9bc <__lshift>
 800c3ac:	0031      	movs	r1, r6
 800c3ae:	9005      	str	r0, [sp, #20]
 800c3b0:	f000 fb70 	bl	800ca94 <__mcmp>
 800c3b4:	2800      	cmp	r0, #0
 800c3b6:	dc02      	bgt.n	800c3be <_dtoa_r+0xac2>
 800c3b8:	d1d8      	bne.n	800c36c <_dtoa_r+0xa70>
 800c3ba:	07eb      	lsls	r3, r5, #31
 800c3bc:	d5d6      	bpl.n	800c36c <_dtoa_r+0xa70>
 800c3be:	2d39      	cmp	r5, #57	@ 0x39
 800c3c0:	d1d2      	bne.n	800c368 <_dtoa_r+0xa6c>
 800c3c2:	2339      	movs	r3, #57	@ 0x39
 800c3c4:	9a06      	ldr	r2, [sp, #24]
 800c3c6:	7013      	strb	r3, [r2, #0]
 800c3c8:	0023      	movs	r3, r4
 800c3ca:	001c      	movs	r4, r3
 800c3cc:	3b01      	subs	r3, #1
 800c3ce:	781a      	ldrb	r2, [r3, #0]
 800c3d0:	2a39      	cmp	r2, #57	@ 0x39
 800c3d2:	d04f      	beq.n	800c474 <_dtoa_r+0xb78>
 800c3d4:	3201      	adds	r2, #1
 800c3d6:	701a      	strb	r2, [r3, #0]
 800c3d8:	e604      	b.n	800bfe4 <_dtoa_r+0x6e8>
 800c3da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	dd03      	ble.n	800c3e8 <_dtoa_r+0xaec>
 800c3e0:	2d39      	cmp	r5, #57	@ 0x39
 800c3e2:	d0ee      	beq.n	800c3c2 <_dtoa_r+0xac6>
 800c3e4:	3501      	adds	r5, #1
 800c3e6:	e7c1      	b.n	800c36c <_dtoa_r+0xa70>
 800c3e8:	9b06      	ldr	r3, [sp, #24]
 800c3ea:	9a06      	ldr	r2, [sp, #24]
 800c3ec:	701d      	strb	r5, [r3, #0]
 800c3ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3f0:	4293      	cmp	r3, r2
 800c3f2:	d02a      	beq.n	800c44a <_dtoa_r+0xb4e>
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	220a      	movs	r2, #10
 800c3f8:	9905      	ldr	r1, [sp, #20]
 800c3fa:	9803      	ldr	r0, [sp, #12]
 800c3fc:	f000 f924 	bl	800c648 <__multadd>
 800c400:	9b04      	ldr	r3, [sp, #16]
 800c402:	9005      	str	r0, [sp, #20]
 800c404:	42bb      	cmp	r3, r7
 800c406:	d109      	bne.n	800c41c <_dtoa_r+0xb20>
 800c408:	2300      	movs	r3, #0
 800c40a:	220a      	movs	r2, #10
 800c40c:	9904      	ldr	r1, [sp, #16]
 800c40e:	9803      	ldr	r0, [sp, #12]
 800c410:	f000 f91a 	bl	800c648 <__multadd>
 800c414:	9004      	str	r0, [sp, #16]
 800c416:	0007      	movs	r7, r0
 800c418:	9406      	str	r4, [sp, #24]
 800c41a:	e778      	b.n	800c30e <_dtoa_r+0xa12>
 800c41c:	9904      	ldr	r1, [sp, #16]
 800c41e:	2300      	movs	r3, #0
 800c420:	220a      	movs	r2, #10
 800c422:	9803      	ldr	r0, [sp, #12]
 800c424:	f000 f910 	bl	800c648 <__multadd>
 800c428:	2300      	movs	r3, #0
 800c42a:	9004      	str	r0, [sp, #16]
 800c42c:	220a      	movs	r2, #10
 800c42e:	0039      	movs	r1, r7
 800c430:	9803      	ldr	r0, [sp, #12]
 800c432:	f000 f909 	bl	800c648 <__multadd>
 800c436:	e7ee      	b.n	800c416 <_dtoa_r+0xb1a>
 800c438:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c43a:	2401      	movs	r4, #1
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	dd00      	ble.n	800c442 <_dtoa_r+0xb46>
 800c440:	001c      	movs	r4, r3
 800c442:	9b08      	ldr	r3, [sp, #32]
 800c444:	191c      	adds	r4, r3, r4
 800c446:	2300      	movs	r3, #0
 800c448:	9304      	str	r3, [sp, #16]
 800c44a:	9905      	ldr	r1, [sp, #20]
 800c44c:	2201      	movs	r2, #1
 800c44e:	9803      	ldr	r0, [sp, #12]
 800c450:	f000 fab4 	bl	800c9bc <__lshift>
 800c454:	0031      	movs	r1, r6
 800c456:	9005      	str	r0, [sp, #20]
 800c458:	f000 fb1c 	bl	800ca94 <__mcmp>
 800c45c:	2800      	cmp	r0, #0
 800c45e:	dcb3      	bgt.n	800c3c8 <_dtoa_r+0xacc>
 800c460:	d101      	bne.n	800c466 <_dtoa_r+0xb6a>
 800c462:	07ed      	lsls	r5, r5, #31
 800c464:	d4b0      	bmi.n	800c3c8 <_dtoa_r+0xacc>
 800c466:	0023      	movs	r3, r4
 800c468:	001c      	movs	r4, r3
 800c46a:	3b01      	subs	r3, #1
 800c46c:	781a      	ldrb	r2, [r3, #0]
 800c46e:	2a30      	cmp	r2, #48	@ 0x30
 800c470:	d0fa      	beq.n	800c468 <_dtoa_r+0xb6c>
 800c472:	e5b7      	b.n	800bfe4 <_dtoa_r+0x6e8>
 800c474:	9a08      	ldr	r2, [sp, #32]
 800c476:	429a      	cmp	r2, r3
 800c478:	d1a7      	bne.n	800c3ca <_dtoa_r+0xace>
 800c47a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c47c:	3301      	adds	r3, #1
 800c47e:	930c      	str	r3, [sp, #48]	@ 0x30
 800c480:	2331      	movs	r3, #49	@ 0x31
 800c482:	7013      	strb	r3, [r2, #0]
 800c484:	e5ae      	b.n	800bfe4 <_dtoa_r+0x6e8>
 800c486:	4b15      	ldr	r3, [pc, #84]	@ (800c4dc <_dtoa_r+0xbe0>)
 800c488:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800c48a:	9308      	str	r3, [sp, #32]
 800c48c:	4b14      	ldr	r3, [pc, #80]	@ (800c4e0 <_dtoa_r+0xbe4>)
 800c48e:	2a00      	cmp	r2, #0
 800c490:	d001      	beq.n	800c496 <_dtoa_r+0xb9a>
 800c492:	f7ff fa7b 	bl	800b98c <_dtoa_r+0x90>
 800c496:	f7ff fa7b 	bl	800b990 <_dtoa_r+0x94>
 800c49a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c49c:	2b01      	cmp	r3, #1
 800c49e:	dc00      	bgt.n	800c4a2 <_dtoa_r+0xba6>
 800c4a0:	e648      	b.n	800c134 <_dtoa_r+0x838>
 800c4a2:	2001      	movs	r0, #1
 800c4a4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800c4a6:	e665      	b.n	800c174 <_dtoa_r+0x878>
 800c4a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	dc00      	bgt.n	800c4b0 <_dtoa_r+0xbb4>
 800c4ae:	e6d6      	b.n	800c25e <_dtoa_r+0x962>
 800c4b0:	2400      	movs	r4, #0
 800c4b2:	0031      	movs	r1, r6
 800c4b4:	9805      	ldr	r0, [sp, #20]
 800c4b6:	f7ff f992 	bl	800b7de <quorem>
 800c4ba:	9b08      	ldr	r3, [sp, #32]
 800c4bc:	3030      	adds	r0, #48	@ 0x30
 800c4be:	5518      	strb	r0, [r3, r4]
 800c4c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c4c2:	3401      	adds	r4, #1
 800c4c4:	0005      	movs	r5, r0
 800c4c6:	429c      	cmp	r4, r3
 800c4c8:	dab6      	bge.n	800c438 <_dtoa_r+0xb3c>
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	220a      	movs	r2, #10
 800c4ce:	9905      	ldr	r1, [sp, #20]
 800c4d0:	9803      	ldr	r0, [sp, #12]
 800c4d2:	f000 f8b9 	bl	800c648 <__multadd>
 800c4d6:	9005      	str	r0, [sp, #20]
 800c4d8:	e7eb      	b.n	800c4b2 <_dtoa_r+0xbb6>
 800c4da:	46c0      	nop			@ (mov r8, r8)
 800c4dc:	0800d6f7 	.word	0x0800d6f7
 800c4e0:	0800d6ff 	.word	0x0800d6ff

0800c4e4 <_free_r>:
 800c4e4:	b570      	push	{r4, r5, r6, lr}
 800c4e6:	0005      	movs	r5, r0
 800c4e8:	1e0c      	subs	r4, r1, #0
 800c4ea:	d010      	beq.n	800c50e <_free_r+0x2a>
 800c4ec:	3c04      	subs	r4, #4
 800c4ee:	6823      	ldr	r3, [r4, #0]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	da00      	bge.n	800c4f6 <_free_r+0x12>
 800c4f4:	18e4      	adds	r4, r4, r3
 800c4f6:	0028      	movs	r0, r5
 800c4f8:	f7fe fb18 	bl	800ab2c <__malloc_lock>
 800c4fc:	4a1d      	ldr	r2, [pc, #116]	@ (800c574 <_free_r+0x90>)
 800c4fe:	6813      	ldr	r3, [r2, #0]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d105      	bne.n	800c510 <_free_r+0x2c>
 800c504:	6063      	str	r3, [r4, #4]
 800c506:	6014      	str	r4, [r2, #0]
 800c508:	0028      	movs	r0, r5
 800c50a:	f7fe fb17 	bl	800ab3c <__malloc_unlock>
 800c50e:	bd70      	pop	{r4, r5, r6, pc}
 800c510:	42a3      	cmp	r3, r4
 800c512:	d908      	bls.n	800c526 <_free_r+0x42>
 800c514:	6820      	ldr	r0, [r4, #0]
 800c516:	1821      	adds	r1, r4, r0
 800c518:	428b      	cmp	r3, r1
 800c51a:	d1f3      	bne.n	800c504 <_free_r+0x20>
 800c51c:	6819      	ldr	r1, [r3, #0]
 800c51e:	685b      	ldr	r3, [r3, #4]
 800c520:	1809      	adds	r1, r1, r0
 800c522:	6021      	str	r1, [r4, #0]
 800c524:	e7ee      	b.n	800c504 <_free_r+0x20>
 800c526:	001a      	movs	r2, r3
 800c528:	685b      	ldr	r3, [r3, #4]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d001      	beq.n	800c532 <_free_r+0x4e>
 800c52e:	42a3      	cmp	r3, r4
 800c530:	d9f9      	bls.n	800c526 <_free_r+0x42>
 800c532:	6811      	ldr	r1, [r2, #0]
 800c534:	1850      	adds	r0, r2, r1
 800c536:	42a0      	cmp	r0, r4
 800c538:	d10b      	bne.n	800c552 <_free_r+0x6e>
 800c53a:	6820      	ldr	r0, [r4, #0]
 800c53c:	1809      	adds	r1, r1, r0
 800c53e:	1850      	adds	r0, r2, r1
 800c540:	6011      	str	r1, [r2, #0]
 800c542:	4283      	cmp	r3, r0
 800c544:	d1e0      	bne.n	800c508 <_free_r+0x24>
 800c546:	6818      	ldr	r0, [r3, #0]
 800c548:	685b      	ldr	r3, [r3, #4]
 800c54a:	1841      	adds	r1, r0, r1
 800c54c:	6011      	str	r1, [r2, #0]
 800c54e:	6053      	str	r3, [r2, #4]
 800c550:	e7da      	b.n	800c508 <_free_r+0x24>
 800c552:	42a0      	cmp	r0, r4
 800c554:	d902      	bls.n	800c55c <_free_r+0x78>
 800c556:	230c      	movs	r3, #12
 800c558:	602b      	str	r3, [r5, #0]
 800c55a:	e7d5      	b.n	800c508 <_free_r+0x24>
 800c55c:	6820      	ldr	r0, [r4, #0]
 800c55e:	1821      	adds	r1, r4, r0
 800c560:	428b      	cmp	r3, r1
 800c562:	d103      	bne.n	800c56c <_free_r+0x88>
 800c564:	6819      	ldr	r1, [r3, #0]
 800c566:	685b      	ldr	r3, [r3, #4]
 800c568:	1809      	adds	r1, r1, r0
 800c56a:	6021      	str	r1, [r4, #0]
 800c56c:	6063      	str	r3, [r4, #4]
 800c56e:	6054      	str	r4, [r2, #4]
 800c570:	e7ca      	b.n	800c508 <_free_r+0x24>
 800c572:	46c0      	nop			@ (mov r8, r8)
 800c574:	2000062c 	.word	0x2000062c

0800c578 <_Balloc>:
 800c578:	b570      	push	{r4, r5, r6, lr}
 800c57a:	69c5      	ldr	r5, [r0, #28]
 800c57c:	0006      	movs	r6, r0
 800c57e:	000c      	movs	r4, r1
 800c580:	2d00      	cmp	r5, #0
 800c582:	d10e      	bne.n	800c5a2 <_Balloc+0x2a>
 800c584:	2010      	movs	r0, #16
 800c586:	f7fe fa1b 	bl	800a9c0 <malloc>
 800c58a:	1e02      	subs	r2, r0, #0
 800c58c:	61f0      	str	r0, [r6, #28]
 800c58e:	d104      	bne.n	800c59a <_Balloc+0x22>
 800c590:	216b      	movs	r1, #107	@ 0x6b
 800c592:	4b19      	ldr	r3, [pc, #100]	@ (800c5f8 <_Balloc+0x80>)
 800c594:	4819      	ldr	r0, [pc, #100]	@ (800c5fc <_Balloc+0x84>)
 800c596:	f000 fc45 	bl	800ce24 <__assert_func>
 800c59a:	6045      	str	r5, [r0, #4]
 800c59c:	6085      	str	r5, [r0, #8]
 800c59e:	6005      	str	r5, [r0, #0]
 800c5a0:	60c5      	str	r5, [r0, #12]
 800c5a2:	69f5      	ldr	r5, [r6, #28]
 800c5a4:	68eb      	ldr	r3, [r5, #12]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d013      	beq.n	800c5d2 <_Balloc+0x5a>
 800c5aa:	69f3      	ldr	r3, [r6, #28]
 800c5ac:	00a2      	lsls	r2, r4, #2
 800c5ae:	68db      	ldr	r3, [r3, #12]
 800c5b0:	189b      	adds	r3, r3, r2
 800c5b2:	6818      	ldr	r0, [r3, #0]
 800c5b4:	2800      	cmp	r0, #0
 800c5b6:	d118      	bne.n	800c5ea <_Balloc+0x72>
 800c5b8:	2101      	movs	r1, #1
 800c5ba:	000d      	movs	r5, r1
 800c5bc:	40a5      	lsls	r5, r4
 800c5be:	1d6a      	adds	r2, r5, #5
 800c5c0:	0030      	movs	r0, r6
 800c5c2:	0092      	lsls	r2, r2, #2
 800c5c4:	f7fe f9ce 	bl	800a964 <_calloc_r>
 800c5c8:	2800      	cmp	r0, #0
 800c5ca:	d00c      	beq.n	800c5e6 <_Balloc+0x6e>
 800c5cc:	6044      	str	r4, [r0, #4]
 800c5ce:	6085      	str	r5, [r0, #8]
 800c5d0:	e00d      	b.n	800c5ee <_Balloc+0x76>
 800c5d2:	2221      	movs	r2, #33	@ 0x21
 800c5d4:	2104      	movs	r1, #4
 800c5d6:	0030      	movs	r0, r6
 800c5d8:	f7fe f9c4 	bl	800a964 <_calloc_r>
 800c5dc:	69f3      	ldr	r3, [r6, #28]
 800c5de:	60e8      	str	r0, [r5, #12]
 800c5e0:	68db      	ldr	r3, [r3, #12]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d1e1      	bne.n	800c5aa <_Balloc+0x32>
 800c5e6:	2000      	movs	r0, #0
 800c5e8:	bd70      	pop	{r4, r5, r6, pc}
 800c5ea:	6802      	ldr	r2, [r0, #0]
 800c5ec:	601a      	str	r2, [r3, #0]
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	6103      	str	r3, [r0, #16]
 800c5f2:	60c3      	str	r3, [r0, #12]
 800c5f4:	e7f8      	b.n	800c5e8 <_Balloc+0x70>
 800c5f6:	46c0      	nop			@ (mov r8, r8)
 800c5f8:	0800d704 	.word	0x0800d704
 800c5fc:	0800d784 	.word	0x0800d784

0800c600 <_Bfree>:
 800c600:	b570      	push	{r4, r5, r6, lr}
 800c602:	69c6      	ldr	r6, [r0, #28]
 800c604:	0005      	movs	r5, r0
 800c606:	000c      	movs	r4, r1
 800c608:	2e00      	cmp	r6, #0
 800c60a:	d10e      	bne.n	800c62a <_Bfree+0x2a>
 800c60c:	2010      	movs	r0, #16
 800c60e:	f7fe f9d7 	bl	800a9c0 <malloc>
 800c612:	1e02      	subs	r2, r0, #0
 800c614:	61e8      	str	r0, [r5, #28]
 800c616:	d104      	bne.n	800c622 <_Bfree+0x22>
 800c618:	218f      	movs	r1, #143	@ 0x8f
 800c61a:	4b09      	ldr	r3, [pc, #36]	@ (800c640 <_Bfree+0x40>)
 800c61c:	4809      	ldr	r0, [pc, #36]	@ (800c644 <_Bfree+0x44>)
 800c61e:	f000 fc01 	bl	800ce24 <__assert_func>
 800c622:	6046      	str	r6, [r0, #4]
 800c624:	6086      	str	r6, [r0, #8]
 800c626:	6006      	str	r6, [r0, #0]
 800c628:	60c6      	str	r6, [r0, #12]
 800c62a:	2c00      	cmp	r4, #0
 800c62c:	d007      	beq.n	800c63e <_Bfree+0x3e>
 800c62e:	69eb      	ldr	r3, [r5, #28]
 800c630:	6862      	ldr	r2, [r4, #4]
 800c632:	68db      	ldr	r3, [r3, #12]
 800c634:	0092      	lsls	r2, r2, #2
 800c636:	189b      	adds	r3, r3, r2
 800c638:	681a      	ldr	r2, [r3, #0]
 800c63a:	6022      	str	r2, [r4, #0]
 800c63c:	601c      	str	r4, [r3, #0]
 800c63e:	bd70      	pop	{r4, r5, r6, pc}
 800c640:	0800d704 	.word	0x0800d704
 800c644:	0800d784 	.word	0x0800d784

0800c648 <__multadd>:
 800c648:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c64a:	000f      	movs	r7, r1
 800c64c:	9001      	str	r0, [sp, #4]
 800c64e:	000c      	movs	r4, r1
 800c650:	001e      	movs	r6, r3
 800c652:	2000      	movs	r0, #0
 800c654:	690d      	ldr	r5, [r1, #16]
 800c656:	3714      	adds	r7, #20
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	3001      	adds	r0, #1
 800c65c:	b299      	uxth	r1, r3
 800c65e:	4351      	muls	r1, r2
 800c660:	0c1b      	lsrs	r3, r3, #16
 800c662:	4353      	muls	r3, r2
 800c664:	1989      	adds	r1, r1, r6
 800c666:	0c0e      	lsrs	r6, r1, #16
 800c668:	199b      	adds	r3, r3, r6
 800c66a:	0c1e      	lsrs	r6, r3, #16
 800c66c:	b289      	uxth	r1, r1
 800c66e:	041b      	lsls	r3, r3, #16
 800c670:	185b      	adds	r3, r3, r1
 800c672:	c708      	stmia	r7!, {r3}
 800c674:	4285      	cmp	r5, r0
 800c676:	dcef      	bgt.n	800c658 <__multadd+0x10>
 800c678:	2e00      	cmp	r6, #0
 800c67a:	d022      	beq.n	800c6c2 <__multadd+0x7a>
 800c67c:	68a3      	ldr	r3, [r4, #8]
 800c67e:	42ab      	cmp	r3, r5
 800c680:	dc19      	bgt.n	800c6b6 <__multadd+0x6e>
 800c682:	6861      	ldr	r1, [r4, #4]
 800c684:	9801      	ldr	r0, [sp, #4]
 800c686:	3101      	adds	r1, #1
 800c688:	f7ff ff76 	bl	800c578 <_Balloc>
 800c68c:	1e07      	subs	r7, r0, #0
 800c68e:	d105      	bne.n	800c69c <__multadd+0x54>
 800c690:	003a      	movs	r2, r7
 800c692:	21ba      	movs	r1, #186	@ 0xba
 800c694:	4b0c      	ldr	r3, [pc, #48]	@ (800c6c8 <__multadd+0x80>)
 800c696:	480d      	ldr	r0, [pc, #52]	@ (800c6cc <__multadd+0x84>)
 800c698:	f000 fbc4 	bl	800ce24 <__assert_func>
 800c69c:	0021      	movs	r1, r4
 800c69e:	6922      	ldr	r2, [r4, #16]
 800c6a0:	310c      	adds	r1, #12
 800c6a2:	3202      	adds	r2, #2
 800c6a4:	0092      	lsls	r2, r2, #2
 800c6a6:	300c      	adds	r0, #12
 800c6a8:	f7ff f890 	bl	800b7cc <memcpy>
 800c6ac:	0021      	movs	r1, r4
 800c6ae:	9801      	ldr	r0, [sp, #4]
 800c6b0:	f7ff ffa6 	bl	800c600 <_Bfree>
 800c6b4:	003c      	movs	r4, r7
 800c6b6:	1d2b      	adds	r3, r5, #4
 800c6b8:	009b      	lsls	r3, r3, #2
 800c6ba:	18e3      	adds	r3, r4, r3
 800c6bc:	3501      	adds	r5, #1
 800c6be:	605e      	str	r6, [r3, #4]
 800c6c0:	6125      	str	r5, [r4, #16]
 800c6c2:	0020      	movs	r0, r4
 800c6c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c6c6:	46c0      	nop			@ (mov r8, r8)
 800c6c8:	0800d773 	.word	0x0800d773
 800c6cc:	0800d784 	.word	0x0800d784

0800c6d0 <__hi0bits>:
 800c6d0:	2280      	movs	r2, #128	@ 0x80
 800c6d2:	0003      	movs	r3, r0
 800c6d4:	0252      	lsls	r2, r2, #9
 800c6d6:	2000      	movs	r0, #0
 800c6d8:	4293      	cmp	r3, r2
 800c6da:	d201      	bcs.n	800c6e0 <__hi0bits+0x10>
 800c6dc:	041b      	lsls	r3, r3, #16
 800c6de:	3010      	adds	r0, #16
 800c6e0:	2280      	movs	r2, #128	@ 0x80
 800c6e2:	0452      	lsls	r2, r2, #17
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d201      	bcs.n	800c6ec <__hi0bits+0x1c>
 800c6e8:	3008      	adds	r0, #8
 800c6ea:	021b      	lsls	r3, r3, #8
 800c6ec:	2280      	movs	r2, #128	@ 0x80
 800c6ee:	0552      	lsls	r2, r2, #21
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	d201      	bcs.n	800c6f8 <__hi0bits+0x28>
 800c6f4:	3004      	adds	r0, #4
 800c6f6:	011b      	lsls	r3, r3, #4
 800c6f8:	2280      	movs	r2, #128	@ 0x80
 800c6fa:	05d2      	lsls	r2, r2, #23
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	d201      	bcs.n	800c704 <__hi0bits+0x34>
 800c700:	3002      	adds	r0, #2
 800c702:	009b      	lsls	r3, r3, #2
 800c704:	2b00      	cmp	r3, #0
 800c706:	db03      	blt.n	800c710 <__hi0bits+0x40>
 800c708:	3001      	adds	r0, #1
 800c70a:	4213      	tst	r3, r2
 800c70c:	d100      	bne.n	800c710 <__hi0bits+0x40>
 800c70e:	2020      	movs	r0, #32
 800c710:	4770      	bx	lr

0800c712 <__lo0bits>:
 800c712:	6803      	ldr	r3, [r0, #0]
 800c714:	0001      	movs	r1, r0
 800c716:	2207      	movs	r2, #7
 800c718:	0018      	movs	r0, r3
 800c71a:	4010      	ands	r0, r2
 800c71c:	4213      	tst	r3, r2
 800c71e:	d00d      	beq.n	800c73c <__lo0bits+0x2a>
 800c720:	3a06      	subs	r2, #6
 800c722:	2000      	movs	r0, #0
 800c724:	4213      	tst	r3, r2
 800c726:	d105      	bne.n	800c734 <__lo0bits+0x22>
 800c728:	3002      	adds	r0, #2
 800c72a:	4203      	tst	r3, r0
 800c72c:	d003      	beq.n	800c736 <__lo0bits+0x24>
 800c72e:	40d3      	lsrs	r3, r2
 800c730:	0010      	movs	r0, r2
 800c732:	600b      	str	r3, [r1, #0]
 800c734:	4770      	bx	lr
 800c736:	089b      	lsrs	r3, r3, #2
 800c738:	600b      	str	r3, [r1, #0]
 800c73a:	e7fb      	b.n	800c734 <__lo0bits+0x22>
 800c73c:	b29a      	uxth	r2, r3
 800c73e:	2a00      	cmp	r2, #0
 800c740:	d101      	bne.n	800c746 <__lo0bits+0x34>
 800c742:	2010      	movs	r0, #16
 800c744:	0c1b      	lsrs	r3, r3, #16
 800c746:	b2da      	uxtb	r2, r3
 800c748:	2a00      	cmp	r2, #0
 800c74a:	d101      	bne.n	800c750 <__lo0bits+0x3e>
 800c74c:	3008      	adds	r0, #8
 800c74e:	0a1b      	lsrs	r3, r3, #8
 800c750:	071a      	lsls	r2, r3, #28
 800c752:	d101      	bne.n	800c758 <__lo0bits+0x46>
 800c754:	3004      	adds	r0, #4
 800c756:	091b      	lsrs	r3, r3, #4
 800c758:	079a      	lsls	r2, r3, #30
 800c75a:	d101      	bne.n	800c760 <__lo0bits+0x4e>
 800c75c:	3002      	adds	r0, #2
 800c75e:	089b      	lsrs	r3, r3, #2
 800c760:	07da      	lsls	r2, r3, #31
 800c762:	d4e9      	bmi.n	800c738 <__lo0bits+0x26>
 800c764:	3001      	adds	r0, #1
 800c766:	085b      	lsrs	r3, r3, #1
 800c768:	d1e6      	bne.n	800c738 <__lo0bits+0x26>
 800c76a:	2020      	movs	r0, #32
 800c76c:	e7e2      	b.n	800c734 <__lo0bits+0x22>
	...

0800c770 <__i2b>:
 800c770:	b510      	push	{r4, lr}
 800c772:	000c      	movs	r4, r1
 800c774:	2101      	movs	r1, #1
 800c776:	f7ff feff 	bl	800c578 <_Balloc>
 800c77a:	2800      	cmp	r0, #0
 800c77c:	d107      	bne.n	800c78e <__i2b+0x1e>
 800c77e:	2146      	movs	r1, #70	@ 0x46
 800c780:	4c05      	ldr	r4, [pc, #20]	@ (800c798 <__i2b+0x28>)
 800c782:	0002      	movs	r2, r0
 800c784:	4b05      	ldr	r3, [pc, #20]	@ (800c79c <__i2b+0x2c>)
 800c786:	0020      	movs	r0, r4
 800c788:	31ff      	adds	r1, #255	@ 0xff
 800c78a:	f000 fb4b 	bl	800ce24 <__assert_func>
 800c78e:	2301      	movs	r3, #1
 800c790:	6144      	str	r4, [r0, #20]
 800c792:	6103      	str	r3, [r0, #16]
 800c794:	bd10      	pop	{r4, pc}
 800c796:	46c0      	nop			@ (mov r8, r8)
 800c798:	0800d784 	.word	0x0800d784
 800c79c:	0800d773 	.word	0x0800d773

0800c7a0 <__multiply>:
 800c7a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7a2:	0014      	movs	r4, r2
 800c7a4:	690a      	ldr	r2, [r1, #16]
 800c7a6:	6923      	ldr	r3, [r4, #16]
 800c7a8:	000d      	movs	r5, r1
 800c7aa:	b08b      	sub	sp, #44	@ 0x2c
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	db02      	blt.n	800c7b6 <__multiply+0x16>
 800c7b0:	0023      	movs	r3, r4
 800c7b2:	000c      	movs	r4, r1
 800c7b4:	001d      	movs	r5, r3
 800c7b6:	6927      	ldr	r7, [r4, #16]
 800c7b8:	692e      	ldr	r6, [r5, #16]
 800c7ba:	6861      	ldr	r1, [r4, #4]
 800c7bc:	19bb      	adds	r3, r7, r6
 800c7be:	9303      	str	r3, [sp, #12]
 800c7c0:	68a3      	ldr	r3, [r4, #8]
 800c7c2:	19ba      	adds	r2, r7, r6
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	da00      	bge.n	800c7ca <__multiply+0x2a>
 800c7c8:	3101      	adds	r1, #1
 800c7ca:	f7ff fed5 	bl	800c578 <_Balloc>
 800c7ce:	9002      	str	r0, [sp, #8]
 800c7d0:	2800      	cmp	r0, #0
 800c7d2:	d106      	bne.n	800c7e2 <__multiply+0x42>
 800c7d4:	21b1      	movs	r1, #177	@ 0xb1
 800c7d6:	4b49      	ldr	r3, [pc, #292]	@ (800c8fc <__multiply+0x15c>)
 800c7d8:	4849      	ldr	r0, [pc, #292]	@ (800c900 <__multiply+0x160>)
 800c7da:	9a02      	ldr	r2, [sp, #8]
 800c7dc:	0049      	lsls	r1, r1, #1
 800c7de:	f000 fb21 	bl	800ce24 <__assert_func>
 800c7e2:	9b02      	ldr	r3, [sp, #8]
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	3314      	adds	r3, #20
 800c7e8:	469c      	mov	ip, r3
 800c7ea:	19bb      	adds	r3, r7, r6
 800c7ec:	009b      	lsls	r3, r3, #2
 800c7ee:	4463      	add	r3, ip
 800c7f0:	9304      	str	r3, [sp, #16]
 800c7f2:	4663      	mov	r3, ip
 800c7f4:	9904      	ldr	r1, [sp, #16]
 800c7f6:	428b      	cmp	r3, r1
 800c7f8:	d32a      	bcc.n	800c850 <__multiply+0xb0>
 800c7fa:	0023      	movs	r3, r4
 800c7fc:	00bf      	lsls	r7, r7, #2
 800c7fe:	3314      	adds	r3, #20
 800c800:	3514      	adds	r5, #20
 800c802:	9308      	str	r3, [sp, #32]
 800c804:	00b6      	lsls	r6, r6, #2
 800c806:	19db      	adds	r3, r3, r7
 800c808:	9305      	str	r3, [sp, #20]
 800c80a:	19ab      	adds	r3, r5, r6
 800c80c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c80e:	2304      	movs	r3, #4
 800c810:	9306      	str	r3, [sp, #24]
 800c812:	0023      	movs	r3, r4
 800c814:	9a05      	ldr	r2, [sp, #20]
 800c816:	3315      	adds	r3, #21
 800c818:	9501      	str	r5, [sp, #4]
 800c81a:	429a      	cmp	r2, r3
 800c81c:	d305      	bcc.n	800c82a <__multiply+0x8a>
 800c81e:	1b13      	subs	r3, r2, r4
 800c820:	3b15      	subs	r3, #21
 800c822:	089b      	lsrs	r3, r3, #2
 800c824:	3301      	adds	r3, #1
 800c826:	009b      	lsls	r3, r3, #2
 800c828:	9306      	str	r3, [sp, #24]
 800c82a:	9b01      	ldr	r3, [sp, #4]
 800c82c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c82e:	4293      	cmp	r3, r2
 800c830:	d310      	bcc.n	800c854 <__multiply+0xb4>
 800c832:	9b03      	ldr	r3, [sp, #12]
 800c834:	2b00      	cmp	r3, #0
 800c836:	dd05      	ble.n	800c844 <__multiply+0xa4>
 800c838:	9b04      	ldr	r3, [sp, #16]
 800c83a:	3b04      	subs	r3, #4
 800c83c:	9304      	str	r3, [sp, #16]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d056      	beq.n	800c8f2 <__multiply+0x152>
 800c844:	9b02      	ldr	r3, [sp, #8]
 800c846:	9a03      	ldr	r2, [sp, #12]
 800c848:	0018      	movs	r0, r3
 800c84a:	611a      	str	r2, [r3, #16]
 800c84c:	b00b      	add	sp, #44	@ 0x2c
 800c84e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c850:	c304      	stmia	r3!, {r2}
 800c852:	e7cf      	b.n	800c7f4 <__multiply+0x54>
 800c854:	9b01      	ldr	r3, [sp, #4]
 800c856:	6818      	ldr	r0, [r3, #0]
 800c858:	b280      	uxth	r0, r0
 800c85a:	2800      	cmp	r0, #0
 800c85c:	d01e      	beq.n	800c89c <__multiply+0xfc>
 800c85e:	4667      	mov	r7, ip
 800c860:	2500      	movs	r5, #0
 800c862:	9e08      	ldr	r6, [sp, #32]
 800c864:	ce02      	ldmia	r6!, {r1}
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	9307      	str	r3, [sp, #28]
 800c86a:	b28b      	uxth	r3, r1
 800c86c:	4343      	muls	r3, r0
 800c86e:	001a      	movs	r2, r3
 800c870:	466b      	mov	r3, sp
 800c872:	0c09      	lsrs	r1, r1, #16
 800c874:	8b9b      	ldrh	r3, [r3, #28]
 800c876:	4341      	muls	r1, r0
 800c878:	18d3      	adds	r3, r2, r3
 800c87a:	9a07      	ldr	r2, [sp, #28]
 800c87c:	195b      	adds	r3, r3, r5
 800c87e:	0c12      	lsrs	r2, r2, #16
 800c880:	1889      	adds	r1, r1, r2
 800c882:	0c1a      	lsrs	r2, r3, #16
 800c884:	188a      	adds	r2, r1, r2
 800c886:	b29b      	uxth	r3, r3
 800c888:	0c15      	lsrs	r5, r2, #16
 800c88a:	0412      	lsls	r2, r2, #16
 800c88c:	431a      	orrs	r2, r3
 800c88e:	9b05      	ldr	r3, [sp, #20]
 800c890:	c704      	stmia	r7!, {r2}
 800c892:	42b3      	cmp	r3, r6
 800c894:	d8e6      	bhi.n	800c864 <__multiply+0xc4>
 800c896:	4663      	mov	r3, ip
 800c898:	9a06      	ldr	r2, [sp, #24]
 800c89a:	509d      	str	r5, [r3, r2]
 800c89c:	9b01      	ldr	r3, [sp, #4]
 800c89e:	6818      	ldr	r0, [r3, #0]
 800c8a0:	0c00      	lsrs	r0, r0, #16
 800c8a2:	d020      	beq.n	800c8e6 <__multiply+0x146>
 800c8a4:	4663      	mov	r3, ip
 800c8a6:	0025      	movs	r5, r4
 800c8a8:	4661      	mov	r1, ip
 800c8aa:	2700      	movs	r7, #0
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	3514      	adds	r5, #20
 800c8b0:	682a      	ldr	r2, [r5, #0]
 800c8b2:	680e      	ldr	r6, [r1, #0]
 800c8b4:	b292      	uxth	r2, r2
 800c8b6:	4342      	muls	r2, r0
 800c8b8:	0c36      	lsrs	r6, r6, #16
 800c8ba:	1992      	adds	r2, r2, r6
 800c8bc:	19d2      	adds	r2, r2, r7
 800c8be:	0416      	lsls	r6, r2, #16
 800c8c0:	b29b      	uxth	r3, r3
 800c8c2:	431e      	orrs	r6, r3
 800c8c4:	600e      	str	r6, [r1, #0]
 800c8c6:	cd40      	ldmia	r5!, {r6}
 800c8c8:	684b      	ldr	r3, [r1, #4]
 800c8ca:	0c36      	lsrs	r6, r6, #16
 800c8cc:	4346      	muls	r6, r0
 800c8ce:	b29b      	uxth	r3, r3
 800c8d0:	0c12      	lsrs	r2, r2, #16
 800c8d2:	18f3      	adds	r3, r6, r3
 800c8d4:	189b      	adds	r3, r3, r2
 800c8d6:	9a05      	ldr	r2, [sp, #20]
 800c8d8:	0c1f      	lsrs	r7, r3, #16
 800c8da:	3104      	adds	r1, #4
 800c8dc:	42aa      	cmp	r2, r5
 800c8de:	d8e7      	bhi.n	800c8b0 <__multiply+0x110>
 800c8e0:	4662      	mov	r2, ip
 800c8e2:	9906      	ldr	r1, [sp, #24]
 800c8e4:	5053      	str	r3, [r2, r1]
 800c8e6:	9b01      	ldr	r3, [sp, #4]
 800c8e8:	3304      	adds	r3, #4
 800c8ea:	9301      	str	r3, [sp, #4]
 800c8ec:	2304      	movs	r3, #4
 800c8ee:	449c      	add	ip, r3
 800c8f0:	e79b      	b.n	800c82a <__multiply+0x8a>
 800c8f2:	9b03      	ldr	r3, [sp, #12]
 800c8f4:	3b01      	subs	r3, #1
 800c8f6:	9303      	str	r3, [sp, #12]
 800c8f8:	e79b      	b.n	800c832 <__multiply+0x92>
 800c8fa:	46c0      	nop			@ (mov r8, r8)
 800c8fc:	0800d773 	.word	0x0800d773
 800c900:	0800d784 	.word	0x0800d784

0800c904 <__pow5mult>:
 800c904:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c906:	2303      	movs	r3, #3
 800c908:	0015      	movs	r5, r2
 800c90a:	0007      	movs	r7, r0
 800c90c:	000e      	movs	r6, r1
 800c90e:	401a      	ands	r2, r3
 800c910:	421d      	tst	r5, r3
 800c912:	d008      	beq.n	800c926 <__pow5mult+0x22>
 800c914:	4925      	ldr	r1, [pc, #148]	@ (800c9ac <__pow5mult+0xa8>)
 800c916:	3a01      	subs	r2, #1
 800c918:	0092      	lsls	r2, r2, #2
 800c91a:	5852      	ldr	r2, [r2, r1]
 800c91c:	2300      	movs	r3, #0
 800c91e:	0031      	movs	r1, r6
 800c920:	f7ff fe92 	bl	800c648 <__multadd>
 800c924:	0006      	movs	r6, r0
 800c926:	10ad      	asrs	r5, r5, #2
 800c928:	d03d      	beq.n	800c9a6 <__pow5mult+0xa2>
 800c92a:	69fc      	ldr	r4, [r7, #28]
 800c92c:	2c00      	cmp	r4, #0
 800c92e:	d10f      	bne.n	800c950 <__pow5mult+0x4c>
 800c930:	2010      	movs	r0, #16
 800c932:	f7fe f845 	bl	800a9c0 <malloc>
 800c936:	1e02      	subs	r2, r0, #0
 800c938:	61f8      	str	r0, [r7, #28]
 800c93a:	d105      	bne.n	800c948 <__pow5mult+0x44>
 800c93c:	21b4      	movs	r1, #180	@ 0xb4
 800c93e:	4b1c      	ldr	r3, [pc, #112]	@ (800c9b0 <__pow5mult+0xac>)
 800c940:	481c      	ldr	r0, [pc, #112]	@ (800c9b4 <__pow5mult+0xb0>)
 800c942:	31ff      	adds	r1, #255	@ 0xff
 800c944:	f000 fa6e 	bl	800ce24 <__assert_func>
 800c948:	6044      	str	r4, [r0, #4]
 800c94a:	6084      	str	r4, [r0, #8]
 800c94c:	6004      	str	r4, [r0, #0]
 800c94e:	60c4      	str	r4, [r0, #12]
 800c950:	69fb      	ldr	r3, [r7, #28]
 800c952:	689c      	ldr	r4, [r3, #8]
 800c954:	9301      	str	r3, [sp, #4]
 800c956:	2c00      	cmp	r4, #0
 800c958:	d108      	bne.n	800c96c <__pow5mult+0x68>
 800c95a:	0038      	movs	r0, r7
 800c95c:	4916      	ldr	r1, [pc, #88]	@ (800c9b8 <__pow5mult+0xb4>)
 800c95e:	f7ff ff07 	bl	800c770 <__i2b>
 800c962:	9b01      	ldr	r3, [sp, #4]
 800c964:	0004      	movs	r4, r0
 800c966:	6098      	str	r0, [r3, #8]
 800c968:	2300      	movs	r3, #0
 800c96a:	6003      	str	r3, [r0, #0]
 800c96c:	2301      	movs	r3, #1
 800c96e:	421d      	tst	r5, r3
 800c970:	d00a      	beq.n	800c988 <__pow5mult+0x84>
 800c972:	0031      	movs	r1, r6
 800c974:	0022      	movs	r2, r4
 800c976:	0038      	movs	r0, r7
 800c978:	f7ff ff12 	bl	800c7a0 <__multiply>
 800c97c:	0031      	movs	r1, r6
 800c97e:	9001      	str	r0, [sp, #4]
 800c980:	0038      	movs	r0, r7
 800c982:	f7ff fe3d 	bl	800c600 <_Bfree>
 800c986:	9e01      	ldr	r6, [sp, #4]
 800c988:	106d      	asrs	r5, r5, #1
 800c98a:	d00c      	beq.n	800c9a6 <__pow5mult+0xa2>
 800c98c:	6820      	ldr	r0, [r4, #0]
 800c98e:	2800      	cmp	r0, #0
 800c990:	d107      	bne.n	800c9a2 <__pow5mult+0x9e>
 800c992:	0022      	movs	r2, r4
 800c994:	0021      	movs	r1, r4
 800c996:	0038      	movs	r0, r7
 800c998:	f7ff ff02 	bl	800c7a0 <__multiply>
 800c99c:	2300      	movs	r3, #0
 800c99e:	6020      	str	r0, [r4, #0]
 800c9a0:	6003      	str	r3, [r0, #0]
 800c9a2:	0004      	movs	r4, r0
 800c9a4:	e7e2      	b.n	800c96c <__pow5mult+0x68>
 800c9a6:	0030      	movs	r0, r6
 800c9a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c9aa:	46c0      	nop			@ (mov r8, r8)
 800c9ac:	0800d7e0 	.word	0x0800d7e0
 800c9b0:	0800d704 	.word	0x0800d704
 800c9b4:	0800d784 	.word	0x0800d784
 800c9b8:	00000271 	.word	0x00000271

0800c9bc <__lshift>:
 800c9bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9be:	000c      	movs	r4, r1
 800c9c0:	0016      	movs	r6, r2
 800c9c2:	6923      	ldr	r3, [r4, #16]
 800c9c4:	1157      	asrs	r7, r2, #5
 800c9c6:	b085      	sub	sp, #20
 800c9c8:	18fb      	adds	r3, r7, r3
 800c9ca:	9301      	str	r3, [sp, #4]
 800c9cc:	3301      	adds	r3, #1
 800c9ce:	9300      	str	r3, [sp, #0]
 800c9d0:	6849      	ldr	r1, [r1, #4]
 800c9d2:	68a3      	ldr	r3, [r4, #8]
 800c9d4:	9002      	str	r0, [sp, #8]
 800c9d6:	9a00      	ldr	r2, [sp, #0]
 800c9d8:	4293      	cmp	r3, r2
 800c9da:	db10      	blt.n	800c9fe <__lshift+0x42>
 800c9dc:	9802      	ldr	r0, [sp, #8]
 800c9de:	f7ff fdcb 	bl	800c578 <_Balloc>
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	0001      	movs	r1, r0
 800c9e6:	0005      	movs	r5, r0
 800c9e8:	001a      	movs	r2, r3
 800c9ea:	3114      	adds	r1, #20
 800c9ec:	4298      	cmp	r0, r3
 800c9ee:	d10c      	bne.n	800ca0a <__lshift+0x4e>
 800c9f0:	21ef      	movs	r1, #239	@ 0xef
 800c9f2:	002a      	movs	r2, r5
 800c9f4:	4b25      	ldr	r3, [pc, #148]	@ (800ca8c <__lshift+0xd0>)
 800c9f6:	4826      	ldr	r0, [pc, #152]	@ (800ca90 <__lshift+0xd4>)
 800c9f8:	0049      	lsls	r1, r1, #1
 800c9fa:	f000 fa13 	bl	800ce24 <__assert_func>
 800c9fe:	3101      	adds	r1, #1
 800ca00:	005b      	lsls	r3, r3, #1
 800ca02:	e7e8      	b.n	800c9d6 <__lshift+0x1a>
 800ca04:	0098      	lsls	r0, r3, #2
 800ca06:	500a      	str	r2, [r1, r0]
 800ca08:	3301      	adds	r3, #1
 800ca0a:	42bb      	cmp	r3, r7
 800ca0c:	dbfa      	blt.n	800ca04 <__lshift+0x48>
 800ca0e:	43fb      	mvns	r3, r7
 800ca10:	17db      	asrs	r3, r3, #31
 800ca12:	401f      	ands	r7, r3
 800ca14:	00bf      	lsls	r7, r7, #2
 800ca16:	0023      	movs	r3, r4
 800ca18:	201f      	movs	r0, #31
 800ca1a:	19c9      	adds	r1, r1, r7
 800ca1c:	0037      	movs	r7, r6
 800ca1e:	6922      	ldr	r2, [r4, #16]
 800ca20:	3314      	adds	r3, #20
 800ca22:	0092      	lsls	r2, r2, #2
 800ca24:	189a      	adds	r2, r3, r2
 800ca26:	4007      	ands	r7, r0
 800ca28:	4206      	tst	r6, r0
 800ca2a:	d029      	beq.n	800ca80 <__lshift+0xc4>
 800ca2c:	3001      	adds	r0, #1
 800ca2e:	1bc0      	subs	r0, r0, r7
 800ca30:	9003      	str	r0, [sp, #12]
 800ca32:	468c      	mov	ip, r1
 800ca34:	2000      	movs	r0, #0
 800ca36:	681e      	ldr	r6, [r3, #0]
 800ca38:	40be      	lsls	r6, r7
 800ca3a:	4306      	orrs	r6, r0
 800ca3c:	4660      	mov	r0, ip
 800ca3e:	c040      	stmia	r0!, {r6}
 800ca40:	4684      	mov	ip, r0
 800ca42:	9e03      	ldr	r6, [sp, #12]
 800ca44:	cb01      	ldmia	r3!, {r0}
 800ca46:	40f0      	lsrs	r0, r6
 800ca48:	429a      	cmp	r2, r3
 800ca4a:	d8f4      	bhi.n	800ca36 <__lshift+0x7a>
 800ca4c:	0026      	movs	r6, r4
 800ca4e:	3615      	adds	r6, #21
 800ca50:	2304      	movs	r3, #4
 800ca52:	42b2      	cmp	r2, r6
 800ca54:	d304      	bcc.n	800ca60 <__lshift+0xa4>
 800ca56:	1b13      	subs	r3, r2, r4
 800ca58:	3b15      	subs	r3, #21
 800ca5a:	089b      	lsrs	r3, r3, #2
 800ca5c:	3301      	adds	r3, #1
 800ca5e:	009b      	lsls	r3, r3, #2
 800ca60:	50c8      	str	r0, [r1, r3]
 800ca62:	2800      	cmp	r0, #0
 800ca64:	d002      	beq.n	800ca6c <__lshift+0xb0>
 800ca66:	9b01      	ldr	r3, [sp, #4]
 800ca68:	3302      	adds	r3, #2
 800ca6a:	9300      	str	r3, [sp, #0]
 800ca6c:	9b00      	ldr	r3, [sp, #0]
 800ca6e:	9802      	ldr	r0, [sp, #8]
 800ca70:	3b01      	subs	r3, #1
 800ca72:	0021      	movs	r1, r4
 800ca74:	612b      	str	r3, [r5, #16]
 800ca76:	f7ff fdc3 	bl	800c600 <_Bfree>
 800ca7a:	0028      	movs	r0, r5
 800ca7c:	b005      	add	sp, #20
 800ca7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca80:	cb01      	ldmia	r3!, {r0}
 800ca82:	c101      	stmia	r1!, {r0}
 800ca84:	429a      	cmp	r2, r3
 800ca86:	d8fb      	bhi.n	800ca80 <__lshift+0xc4>
 800ca88:	e7f0      	b.n	800ca6c <__lshift+0xb0>
 800ca8a:	46c0      	nop			@ (mov r8, r8)
 800ca8c:	0800d773 	.word	0x0800d773
 800ca90:	0800d784 	.word	0x0800d784

0800ca94 <__mcmp>:
 800ca94:	b530      	push	{r4, r5, lr}
 800ca96:	690b      	ldr	r3, [r1, #16]
 800ca98:	6904      	ldr	r4, [r0, #16]
 800ca9a:	0002      	movs	r2, r0
 800ca9c:	1ae0      	subs	r0, r4, r3
 800ca9e:	429c      	cmp	r4, r3
 800caa0:	d10f      	bne.n	800cac2 <__mcmp+0x2e>
 800caa2:	3214      	adds	r2, #20
 800caa4:	009b      	lsls	r3, r3, #2
 800caa6:	3114      	adds	r1, #20
 800caa8:	0014      	movs	r4, r2
 800caaa:	18c9      	adds	r1, r1, r3
 800caac:	18d2      	adds	r2, r2, r3
 800caae:	3a04      	subs	r2, #4
 800cab0:	3904      	subs	r1, #4
 800cab2:	6815      	ldr	r5, [r2, #0]
 800cab4:	680b      	ldr	r3, [r1, #0]
 800cab6:	429d      	cmp	r5, r3
 800cab8:	d004      	beq.n	800cac4 <__mcmp+0x30>
 800caba:	2001      	movs	r0, #1
 800cabc:	429d      	cmp	r5, r3
 800cabe:	d200      	bcs.n	800cac2 <__mcmp+0x2e>
 800cac0:	3802      	subs	r0, #2
 800cac2:	bd30      	pop	{r4, r5, pc}
 800cac4:	4294      	cmp	r4, r2
 800cac6:	d3f2      	bcc.n	800caae <__mcmp+0x1a>
 800cac8:	e7fb      	b.n	800cac2 <__mcmp+0x2e>
	...

0800cacc <__mdiff>:
 800cacc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cace:	000c      	movs	r4, r1
 800cad0:	b087      	sub	sp, #28
 800cad2:	9000      	str	r0, [sp, #0]
 800cad4:	0011      	movs	r1, r2
 800cad6:	0020      	movs	r0, r4
 800cad8:	0017      	movs	r7, r2
 800cada:	f7ff ffdb 	bl	800ca94 <__mcmp>
 800cade:	1e05      	subs	r5, r0, #0
 800cae0:	d110      	bne.n	800cb04 <__mdiff+0x38>
 800cae2:	0001      	movs	r1, r0
 800cae4:	9800      	ldr	r0, [sp, #0]
 800cae6:	f7ff fd47 	bl	800c578 <_Balloc>
 800caea:	1e02      	subs	r2, r0, #0
 800caec:	d104      	bne.n	800caf8 <__mdiff+0x2c>
 800caee:	4b40      	ldr	r3, [pc, #256]	@ (800cbf0 <__mdiff+0x124>)
 800caf0:	4840      	ldr	r0, [pc, #256]	@ (800cbf4 <__mdiff+0x128>)
 800caf2:	4941      	ldr	r1, [pc, #260]	@ (800cbf8 <__mdiff+0x12c>)
 800caf4:	f000 f996 	bl	800ce24 <__assert_func>
 800caf8:	2301      	movs	r3, #1
 800cafa:	6145      	str	r5, [r0, #20]
 800cafc:	6103      	str	r3, [r0, #16]
 800cafe:	0010      	movs	r0, r2
 800cb00:	b007      	add	sp, #28
 800cb02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb04:	2600      	movs	r6, #0
 800cb06:	42b0      	cmp	r0, r6
 800cb08:	da03      	bge.n	800cb12 <__mdiff+0x46>
 800cb0a:	0023      	movs	r3, r4
 800cb0c:	003c      	movs	r4, r7
 800cb0e:	001f      	movs	r7, r3
 800cb10:	3601      	adds	r6, #1
 800cb12:	6861      	ldr	r1, [r4, #4]
 800cb14:	9800      	ldr	r0, [sp, #0]
 800cb16:	f7ff fd2f 	bl	800c578 <_Balloc>
 800cb1a:	1e02      	subs	r2, r0, #0
 800cb1c:	d103      	bne.n	800cb26 <__mdiff+0x5a>
 800cb1e:	4b34      	ldr	r3, [pc, #208]	@ (800cbf0 <__mdiff+0x124>)
 800cb20:	4834      	ldr	r0, [pc, #208]	@ (800cbf4 <__mdiff+0x128>)
 800cb22:	4936      	ldr	r1, [pc, #216]	@ (800cbfc <__mdiff+0x130>)
 800cb24:	e7e6      	b.n	800caf4 <__mdiff+0x28>
 800cb26:	6923      	ldr	r3, [r4, #16]
 800cb28:	3414      	adds	r4, #20
 800cb2a:	9300      	str	r3, [sp, #0]
 800cb2c:	009b      	lsls	r3, r3, #2
 800cb2e:	18e3      	adds	r3, r4, r3
 800cb30:	0021      	movs	r1, r4
 800cb32:	9401      	str	r4, [sp, #4]
 800cb34:	003c      	movs	r4, r7
 800cb36:	9302      	str	r3, [sp, #8]
 800cb38:	693b      	ldr	r3, [r7, #16]
 800cb3a:	3414      	adds	r4, #20
 800cb3c:	009b      	lsls	r3, r3, #2
 800cb3e:	18e3      	adds	r3, r4, r3
 800cb40:	9303      	str	r3, [sp, #12]
 800cb42:	0003      	movs	r3, r0
 800cb44:	60c6      	str	r6, [r0, #12]
 800cb46:	468c      	mov	ip, r1
 800cb48:	2000      	movs	r0, #0
 800cb4a:	3314      	adds	r3, #20
 800cb4c:	9304      	str	r3, [sp, #16]
 800cb4e:	9305      	str	r3, [sp, #20]
 800cb50:	4663      	mov	r3, ip
 800cb52:	cb20      	ldmia	r3!, {r5}
 800cb54:	b2a9      	uxth	r1, r5
 800cb56:	000e      	movs	r6, r1
 800cb58:	469c      	mov	ip, r3
 800cb5a:	cc08      	ldmia	r4!, {r3}
 800cb5c:	0c2d      	lsrs	r5, r5, #16
 800cb5e:	b299      	uxth	r1, r3
 800cb60:	1a71      	subs	r1, r6, r1
 800cb62:	1809      	adds	r1, r1, r0
 800cb64:	0c1b      	lsrs	r3, r3, #16
 800cb66:	1408      	asrs	r0, r1, #16
 800cb68:	1aeb      	subs	r3, r5, r3
 800cb6a:	181b      	adds	r3, r3, r0
 800cb6c:	1418      	asrs	r0, r3, #16
 800cb6e:	b289      	uxth	r1, r1
 800cb70:	041b      	lsls	r3, r3, #16
 800cb72:	4319      	orrs	r1, r3
 800cb74:	9b05      	ldr	r3, [sp, #20]
 800cb76:	c302      	stmia	r3!, {r1}
 800cb78:	9305      	str	r3, [sp, #20]
 800cb7a:	9b03      	ldr	r3, [sp, #12]
 800cb7c:	42a3      	cmp	r3, r4
 800cb7e:	d8e7      	bhi.n	800cb50 <__mdiff+0x84>
 800cb80:	0039      	movs	r1, r7
 800cb82:	9c03      	ldr	r4, [sp, #12]
 800cb84:	3115      	adds	r1, #21
 800cb86:	2304      	movs	r3, #4
 800cb88:	428c      	cmp	r4, r1
 800cb8a:	d304      	bcc.n	800cb96 <__mdiff+0xca>
 800cb8c:	1be3      	subs	r3, r4, r7
 800cb8e:	3b15      	subs	r3, #21
 800cb90:	089b      	lsrs	r3, r3, #2
 800cb92:	3301      	adds	r3, #1
 800cb94:	009b      	lsls	r3, r3, #2
 800cb96:	9901      	ldr	r1, [sp, #4]
 800cb98:	18cd      	adds	r5, r1, r3
 800cb9a:	9904      	ldr	r1, [sp, #16]
 800cb9c:	002e      	movs	r6, r5
 800cb9e:	18cb      	adds	r3, r1, r3
 800cba0:	001f      	movs	r7, r3
 800cba2:	9902      	ldr	r1, [sp, #8]
 800cba4:	428e      	cmp	r6, r1
 800cba6:	d311      	bcc.n	800cbcc <__mdiff+0x100>
 800cba8:	9c02      	ldr	r4, [sp, #8]
 800cbaa:	1ee9      	subs	r1, r5, #3
 800cbac:	2000      	movs	r0, #0
 800cbae:	428c      	cmp	r4, r1
 800cbb0:	d304      	bcc.n	800cbbc <__mdiff+0xf0>
 800cbb2:	0021      	movs	r1, r4
 800cbb4:	3103      	adds	r1, #3
 800cbb6:	1b49      	subs	r1, r1, r5
 800cbb8:	0889      	lsrs	r1, r1, #2
 800cbba:	0088      	lsls	r0, r1, #2
 800cbbc:	181b      	adds	r3, r3, r0
 800cbbe:	3b04      	subs	r3, #4
 800cbc0:	6819      	ldr	r1, [r3, #0]
 800cbc2:	2900      	cmp	r1, #0
 800cbc4:	d010      	beq.n	800cbe8 <__mdiff+0x11c>
 800cbc6:	9b00      	ldr	r3, [sp, #0]
 800cbc8:	6113      	str	r3, [r2, #16]
 800cbca:	e798      	b.n	800cafe <__mdiff+0x32>
 800cbcc:	4684      	mov	ip, r0
 800cbce:	ce02      	ldmia	r6!, {r1}
 800cbd0:	b288      	uxth	r0, r1
 800cbd2:	4460      	add	r0, ip
 800cbd4:	1400      	asrs	r0, r0, #16
 800cbd6:	0c0c      	lsrs	r4, r1, #16
 800cbd8:	1904      	adds	r4, r0, r4
 800cbda:	4461      	add	r1, ip
 800cbdc:	1420      	asrs	r0, r4, #16
 800cbde:	b289      	uxth	r1, r1
 800cbe0:	0424      	lsls	r4, r4, #16
 800cbe2:	4321      	orrs	r1, r4
 800cbe4:	c702      	stmia	r7!, {r1}
 800cbe6:	e7dc      	b.n	800cba2 <__mdiff+0xd6>
 800cbe8:	9900      	ldr	r1, [sp, #0]
 800cbea:	3901      	subs	r1, #1
 800cbec:	9100      	str	r1, [sp, #0]
 800cbee:	e7e6      	b.n	800cbbe <__mdiff+0xf2>
 800cbf0:	0800d773 	.word	0x0800d773
 800cbf4:	0800d784 	.word	0x0800d784
 800cbf8:	00000237 	.word	0x00000237
 800cbfc:	00000245 	.word	0x00000245

0800cc00 <__d2b>:
 800cc00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc02:	2101      	movs	r1, #1
 800cc04:	0016      	movs	r6, r2
 800cc06:	001f      	movs	r7, r3
 800cc08:	f7ff fcb6 	bl	800c578 <_Balloc>
 800cc0c:	1e04      	subs	r4, r0, #0
 800cc0e:	d105      	bne.n	800cc1c <__d2b+0x1c>
 800cc10:	0022      	movs	r2, r4
 800cc12:	4b25      	ldr	r3, [pc, #148]	@ (800cca8 <__d2b+0xa8>)
 800cc14:	4825      	ldr	r0, [pc, #148]	@ (800ccac <__d2b+0xac>)
 800cc16:	4926      	ldr	r1, [pc, #152]	@ (800ccb0 <__d2b+0xb0>)
 800cc18:	f000 f904 	bl	800ce24 <__assert_func>
 800cc1c:	033b      	lsls	r3, r7, #12
 800cc1e:	007d      	lsls	r5, r7, #1
 800cc20:	0b1b      	lsrs	r3, r3, #12
 800cc22:	0d6d      	lsrs	r5, r5, #21
 800cc24:	d002      	beq.n	800cc2c <__d2b+0x2c>
 800cc26:	2280      	movs	r2, #128	@ 0x80
 800cc28:	0352      	lsls	r2, r2, #13
 800cc2a:	4313      	orrs	r3, r2
 800cc2c:	9301      	str	r3, [sp, #4]
 800cc2e:	2e00      	cmp	r6, #0
 800cc30:	d025      	beq.n	800cc7e <__d2b+0x7e>
 800cc32:	4668      	mov	r0, sp
 800cc34:	9600      	str	r6, [sp, #0]
 800cc36:	f7ff fd6c 	bl	800c712 <__lo0bits>
 800cc3a:	9b01      	ldr	r3, [sp, #4]
 800cc3c:	9900      	ldr	r1, [sp, #0]
 800cc3e:	2800      	cmp	r0, #0
 800cc40:	d01b      	beq.n	800cc7a <__d2b+0x7a>
 800cc42:	2220      	movs	r2, #32
 800cc44:	001e      	movs	r6, r3
 800cc46:	1a12      	subs	r2, r2, r0
 800cc48:	4096      	lsls	r6, r2
 800cc4a:	0032      	movs	r2, r6
 800cc4c:	40c3      	lsrs	r3, r0
 800cc4e:	430a      	orrs	r2, r1
 800cc50:	6162      	str	r2, [r4, #20]
 800cc52:	9301      	str	r3, [sp, #4]
 800cc54:	9e01      	ldr	r6, [sp, #4]
 800cc56:	61a6      	str	r6, [r4, #24]
 800cc58:	1e73      	subs	r3, r6, #1
 800cc5a:	419e      	sbcs	r6, r3
 800cc5c:	3601      	adds	r6, #1
 800cc5e:	6126      	str	r6, [r4, #16]
 800cc60:	2d00      	cmp	r5, #0
 800cc62:	d014      	beq.n	800cc8e <__d2b+0x8e>
 800cc64:	2635      	movs	r6, #53	@ 0x35
 800cc66:	4b13      	ldr	r3, [pc, #76]	@ (800ccb4 <__d2b+0xb4>)
 800cc68:	18ed      	adds	r5, r5, r3
 800cc6a:	9b08      	ldr	r3, [sp, #32]
 800cc6c:	182d      	adds	r5, r5, r0
 800cc6e:	601d      	str	r5, [r3, #0]
 800cc70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc72:	1a36      	subs	r6, r6, r0
 800cc74:	601e      	str	r6, [r3, #0]
 800cc76:	0020      	movs	r0, r4
 800cc78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cc7a:	6161      	str	r1, [r4, #20]
 800cc7c:	e7ea      	b.n	800cc54 <__d2b+0x54>
 800cc7e:	a801      	add	r0, sp, #4
 800cc80:	f7ff fd47 	bl	800c712 <__lo0bits>
 800cc84:	9b01      	ldr	r3, [sp, #4]
 800cc86:	2601      	movs	r6, #1
 800cc88:	6163      	str	r3, [r4, #20]
 800cc8a:	3020      	adds	r0, #32
 800cc8c:	e7e7      	b.n	800cc5e <__d2b+0x5e>
 800cc8e:	4b0a      	ldr	r3, [pc, #40]	@ (800ccb8 <__d2b+0xb8>)
 800cc90:	18c0      	adds	r0, r0, r3
 800cc92:	9b08      	ldr	r3, [sp, #32]
 800cc94:	6018      	str	r0, [r3, #0]
 800cc96:	4b09      	ldr	r3, [pc, #36]	@ (800ccbc <__d2b+0xbc>)
 800cc98:	18f3      	adds	r3, r6, r3
 800cc9a:	009b      	lsls	r3, r3, #2
 800cc9c:	18e3      	adds	r3, r4, r3
 800cc9e:	6958      	ldr	r0, [r3, #20]
 800cca0:	f7ff fd16 	bl	800c6d0 <__hi0bits>
 800cca4:	0176      	lsls	r6, r6, #5
 800cca6:	e7e3      	b.n	800cc70 <__d2b+0x70>
 800cca8:	0800d773 	.word	0x0800d773
 800ccac:	0800d784 	.word	0x0800d784
 800ccb0:	0000030f 	.word	0x0000030f
 800ccb4:	fffffbcd 	.word	0xfffffbcd
 800ccb8:	fffffbce 	.word	0xfffffbce
 800ccbc:	3fffffff 	.word	0x3fffffff

0800ccc0 <__sflush_r>:
 800ccc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ccc2:	220c      	movs	r2, #12
 800ccc4:	5e8b      	ldrsh	r3, [r1, r2]
 800ccc6:	0005      	movs	r5, r0
 800ccc8:	000c      	movs	r4, r1
 800ccca:	071a      	lsls	r2, r3, #28
 800cccc:	d456      	bmi.n	800cd7c <__sflush_r+0xbc>
 800ccce:	684a      	ldr	r2, [r1, #4]
 800ccd0:	2a00      	cmp	r2, #0
 800ccd2:	dc02      	bgt.n	800ccda <__sflush_r+0x1a>
 800ccd4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800ccd6:	2a00      	cmp	r2, #0
 800ccd8:	dd4e      	ble.n	800cd78 <__sflush_r+0xb8>
 800ccda:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800ccdc:	2f00      	cmp	r7, #0
 800ccde:	d04b      	beq.n	800cd78 <__sflush_r+0xb8>
 800cce0:	2200      	movs	r2, #0
 800cce2:	2080      	movs	r0, #128	@ 0x80
 800cce4:	682e      	ldr	r6, [r5, #0]
 800cce6:	602a      	str	r2, [r5, #0]
 800cce8:	001a      	movs	r2, r3
 800ccea:	0140      	lsls	r0, r0, #5
 800ccec:	6a21      	ldr	r1, [r4, #32]
 800ccee:	4002      	ands	r2, r0
 800ccf0:	4203      	tst	r3, r0
 800ccf2:	d033      	beq.n	800cd5c <__sflush_r+0x9c>
 800ccf4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ccf6:	89a3      	ldrh	r3, [r4, #12]
 800ccf8:	075b      	lsls	r3, r3, #29
 800ccfa:	d506      	bpl.n	800cd0a <__sflush_r+0x4a>
 800ccfc:	6863      	ldr	r3, [r4, #4]
 800ccfe:	1ad2      	subs	r2, r2, r3
 800cd00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d001      	beq.n	800cd0a <__sflush_r+0x4a>
 800cd06:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cd08:	1ad2      	subs	r2, r2, r3
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	0028      	movs	r0, r5
 800cd0e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800cd10:	6a21      	ldr	r1, [r4, #32]
 800cd12:	47b8      	blx	r7
 800cd14:	89a2      	ldrh	r2, [r4, #12]
 800cd16:	1c43      	adds	r3, r0, #1
 800cd18:	d106      	bne.n	800cd28 <__sflush_r+0x68>
 800cd1a:	6829      	ldr	r1, [r5, #0]
 800cd1c:	291d      	cmp	r1, #29
 800cd1e:	d846      	bhi.n	800cdae <__sflush_r+0xee>
 800cd20:	4b29      	ldr	r3, [pc, #164]	@ (800cdc8 <__sflush_r+0x108>)
 800cd22:	410b      	asrs	r3, r1
 800cd24:	07db      	lsls	r3, r3, #31
 800cd26:	d442      	bmi.n	800cdae <__sflush_r+0xee>
 800cd28:	2300      	movs	r3, #0
 800cd2a:	6063      	str	r3, [r4, #4]
 800cd2c:	6923      	ldr	r3, [r4, #16]
 800cd2e:	6023      	str	r3, [r4, #0]
 800cd30:	04d2      	lsls	r2, r2, #19
 800cd32:	d505      	bpl.n	800cd40 <__sflush_r+0x80>
 800cd34:	1c43      	adds	r3, r0, #1
 800cd36:	d102      	bne.n	800cd3e <__sflush_r+0x7e>
 800cd38:	682b      	ldr	r3, [r5, #0]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d100      	bne.n	800cd40 <__sflush_r+0x80>
 800cd3e:	6560      	str	r0, [r4, #84]	@ 0x54
 800cd40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cd42:	602e      	str	r6, [r5, #0]
 800cd44:	2900      	cmp	r1, #0
 800cd46:	d017      	beq.n	800cd78 <__sflush_r+0xb8>
 800cd48:	0023      	movs	r3, r4
 800cd4a:	3344      	adds	r3, #68	@ 0x44
 800cd4c:	4299      	cmp	r1, r3
 800cd4e:	d002      	beq.n	800cd56 <__sflush_r+0x96>
 800cd50:	0028      	movs	r0, r5
 800cd52:	f7ff fbc7 	bl	800c4e4 <_free_r>
 800cd56:	2300      	movs	r3, #0
 800cd58:	6363      	str	r3, [r4, #52]	@ 0x34
 800cd5a:	e00d      	b.n	800cd78 <__sflush_r+0xb8>
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	0028      	movs	r0, r5
 800cd60:	47b8      	blx	r7
 800cd62:	0002      	movs	r2, r0
 800cd64:	1c43      	adds	r3, r0, #1
 800cd66:	d1c6      	bne.n	800ccf6 <__sflush_r+0x36>
 800cd68:	682b      	ldr	r3, [r5, #0]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d0c3      	beq.n	800ccf6 <__sflush_r+0x36>
 800cd6e:	2b1d      	cmp	r3, #29
 800cd70:	d001      	beq.n	800cd76 <__sflush_r+0xb6>
 800cd72:	2b16      	cmp	r3, #22
 800cd74:	d11a      	bne.n	800cdac <__sflush_r+0xec>
 800cd76:	602e      	str	r6, [r5, #0]
 800cd78:	2000      	movs	r0, #0
 800cd7a:	e01e      	b.n	800cdba <__sflush_r+0xfa>
 800cd7c:	690e      	ldr	r6, [r1, #16]
 800cd7e:	2e00      	cmp	r6, #0
 800cd80:	d0fa      	beq.n	800cd78 <__sflush_r+0xb8>
 800cd82:	680f      	ldr	r7, [r1, #0]
 800cd84:	600e      	str	r6, [r1, #0]
 800cd86:	1bba      	subs	r2, r7, r6
 800cd88:	9201      	str	r2, [sp, #4]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	079b      	lsls	r3, r3, #30
 800cd8e:	d100      	bne.n	800cd92 <__sflush_r+0xd2>
 800cd90:	694a      	ldr	r2, [r1, #20]
 800cd92:	60a2      	str	r2, [r4, #8]
 800cd94:	9b01      	ldr	r3, [sp, #4]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	ddee      	ble.n	800cd78 <__sflush_r+0xb8>
 800cd9a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800cd9c:	0032      	movs	r2, r6
 800cd9e:	001f      	movs	r7, r3
 800cda0:	0028      	movs	r0, r5
 800cda2:	9b01      	ldr	r3, [sp, #4]
 800cda4:	6a21      	ldr	r1, [r4, #32]
 800cda6:	47b8      	blx	r7
 800cda8:	2800      	cmp	r0, #0
 800cdaa:	dc07      	bgt.n	800cdbc <__sflush_r+0xfc>
 800cdac:	89a2      	ldrh	r2, [r4, #12]
 800cdae:	2340      	movs	r3, #64	@ 0x40
 800cdb0:	2001      	movs	r0, #1
 800cdb2:	4313      	orrs	r3, r2
 800cdb4:	b21b      	sxth	r3, r3
 800cdb6:	81a3      	strh	r3, [r4, #12]
 800cdb8:	4240      	negs	r0, r0
 800cdba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cdbc:	9b01      	ldr	r3, [sp, #4]
 800cdbe:	1836      	adds	r6, r6, r0
 800cdc0:	1a1b      	subs	r3, r3, r0
 800cdc2:	9301      	str	r3, [sp, #4]
 800cdc4:	e7e6      	b.n	800cd94 <__sflush_r+0xd4>
 800cdc6:	46c0      	nop			@ (mov r8, r8)
 800cdc8:	dfbffffe 	.word	0xdfbffffe

0800cdcc <_fflush_r>:
 800cdcc:	690b      	ldr	r3, [r1, #16]
 800cdce:	b570      	push	{r4, r5, r6, lr}
 800cdd0:	0005      	movs	r5, r0
 800cdd2:	000c      	movs	r4, r1
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d102      	bne.n	800cdde <_fflush_r+0x12>
 800cdd8:	2500      	movs	r5, #0
 800cdda:	0028      	movs	r0, r5
 800cddc:	bd70      	pop	{r4, r5, r6, pc}
 800cdde:	2800      	cmp	r0, #0
 800cde0:	d004      	beq.n	800cdec <_fflush_r+0x20>
 800cde2:	6a03      	ldr	r3, [r0, #32]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d101      	bne.n	800cdec <_fflush_r+0x20>
 800cde8:	f7fe fba2 	bl	800b530 <__sinit>
 800cdec:	220c      	movs	r2, #12
 800cdee:	5ea3      	ldrsh	r3, [r4, r2]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d0f1      	beq.n	800cdd8 <_fflush_r+0xc>
 800cdf4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cdf6:	07d2      	lsls	r2, r2, #31
 800cdf8:	d404      	bmi.n	800ce04 <_fflush_r+0x38>
 800cdfa:	059b      	lsls	r3, r3, #22
 800cdfc:	d402      	bmi.n	800ce04 <_fflush_r+0x38>
 800cdfe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ce00:	f7fe fccf 	bl	800b7a2 <__retarget_lock_acquire_recursive>
 800ce04:	0028      	movs	r0, r5
 800ce06:	0021      	movs	r1, r4
 800ce08:	f7ff ff5a 	bl	800ccc0 <__sflush_r>
 800ce0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ce0e:	0005      	movs	r5, r0
 800ce10:	07db      	lsls	r3, r3, #31
 800ce12:	d4e2      	bmi.n	800cdda <_fflush_r+0xe>
 800ce14:	89a3      	ldrh	r3, [r4, #12]
 800ce16:	059b      	lsls	r3, r3, #22
 800ce18:	d4df      	bmi.n	800cdda <_fflush_r+0xe>
 800ce1a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ce1c:	f7fe fcc2 	bl	800b7a4 <__retarget_lock_release_recursive>
 800ce20:	e7db      	b.n	800cdda <_fflush_r+0xe>
	...

0800ce24 <__assert_func>:
 800ce24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ce26:	0014      	movs	r4, r2
 800ce28:	001a      	movs	r2, r3
 800ce2a:	4b09      	ldr	r3, [pc, #36]	@ (800ce50 <__assert_func+0x2c>)
 800ce2c:	0005      	movs	r5, r0
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	000e      	movs	r6, r1
 800ce32:	68d8      	ldr	r0, [r3, #12]
 800ce34:	4b07      	ldr	r3, [pc, #28]	@ (800ce54 <__assert_func+0x30>)
 800ce36:	2c00      	cmp	r4, #0
 800ce38:	d101      	bne.n	800ce3e <__assert_func+0x1a>
 800ce3a:	4b07      	ldr	r3, [pc, #28]	@ (800ce58 <__assert_func+0x34>)
 800ce3c:	001c      	movs	r4, r3
 800ce3e:	4907      	ldr	r1, [pc, #28]	@ (800ce5c <__assert_func+0x38>)
 800ce40:	9301      	str	r3, [sp, #4]
 800ce42:	9402      	str	r4, [sp, #8]
 800ce44:	002b      	movs	r3, r5
 800ce46:	9600      	str	r6, [sp, #0]
 800ce48:	f000 f82a 	bl	800cea0 <fiprintf>
 800ce4c:	f000 f838 	bl	800cec0 <abort>
 800ce50:	20000018 	.word	0x20000018
 800ce54:	0800d8ea 	.word	0x0800d8ea
 800ce58:	0800d925 	.word	0x0800d925
 800ce5c:	0800d8f7 	.word	0x0800d8f7

0800ce60 <__ascii_mbtowc>:
 800ce60:	b082      	sub	sp, #8
 800ce62:	2900      	cmp	r1, #0
 800ce64:	d100      	bne.n	800ce68 <__ascii_mbtowc+0x8>
 800ce66:	a901      	add	r1, sp, #4
 800ce68:	1e10      	subs	r0, r2, #0
 800ce6a:	d006      	beq.n	800ce7a <__ascii_mbtowc+0x1a>
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d006      	beq.n	800ce7e <__ascii_mbtowc+0x1e>
 800ce70:	7813      	ldrb	r3, [r2, #0]
 800ce72:	600b      	str	r3, [r1, #0]
 800ce74:	7810      	ldrb	r0, [r2, #0]
 800ce76:	1e43      	subs	r3, r0, #1
 800ce78:	4198      	sbcs	r0, r3
 800ce7a:	b002      	add	sp, #8
 800ce7c:	4770      	bx	lr
 800ce7e:	2002      	movs	r0, #2
 800ce80:	4240      	negs	r0, r0
 800ce82:	e7fa      	b.n	800ce7a <__ascii_mbtowc+0x1a>

0800ce84 <__ascii_wctomb>:
 800ce84:	0003      	movs	r3, r0
 800ce86:	1e08      	subs	r0, r1, #0
 800ce88:	d005      	beq.n	800ce96 <__ascii_wctomb+0x12>
 800ce8a:	2aff      	cmp	r2, #255	@ 0xff
 800ce8c:	d904      	bls.n	800ce98 <__ascii_wctomb+0x14>
 800ce8e:	228a      	movs	r2, #138	@ 0x8a
 800ce90:	2001      	movs	r0, #1
 800ce92:	601a      	str	r2, [r3, #0]
 800ce94:	4240      	negs	r0, r0
 800ce96:	4770      	bx	lr
 800ce98:	2001      	movs	r0, #1
 800ce9a:	700a      	strb	r2, [r1, #0]
 800ce9c:	e7fb      	b.n	800ce96 <__ascii_wctomb+0x12>
	...

0800cea0 <fiprintf>:
 800cea0:	b40e      	push	{r1, r2, r3}
 800cea2:	b517      	push	{r0, r1, r2, r4, lr}
 800cea4:	4c05      	ldr	r4, [pc, #20]	@ (800cebc <fiprintf+0x1c>)
 800cea6:	ab05      	add	r3, sp, #20
 800cea8:	cb04      	ldmia	r3!, {r2}
 800ceaa:	0001      	movs	r1, r0
 800ceac:	6820      	ldr	r0, [r4, #0]
 800ceae:	9301      	str	r3, [sp, #4]
 800ceb0:	f000 f834 	bl	800cf1c <_vfiprintf_r>
 800ceb4:	bc1e      	pop	{r1, r2, r3, r4}
 800ceb6:	bc08      	pop	{r3}
 800ceb8:	b003      	add	sp, #12
 800ceba:	4718      	bx	r3
 800cebc:	20000018 	.word	0x20000018

0800cec0 <abort>:
 800cec0:	2006      	movs	r0, #6
 800cec2:	b510      	push	{r4, lr}
 800cec4:	f000 fa10 	bl	800d2e8 <raise>
 800cec8:	2001      	movs	r0, #1
 800ceca:	f7f6 ff2f 	bl	8003d2c <_exit>

0800cece <__sfputc_r>:
 800cece:	6893      	ldr	r3, [r2, #8]
 800ced0:	b510      	push	{r4, lr}
 800ced2:	3b01      	subs	r3, #1
 800ced4:	6093      	str	r3, [r2, #8]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	da04      	bge.n	800cee4 <__sfputc_r+0x16>
 800ceda:	6994      	ldr	r4, [r2, #24]
 800cedc:	42a3      	cmp	r3, r4
 800cede:	db07      	blt.n	800cef0 <__sfputc_r+0x22>
 800cee0:	290a      	cmp	r1, #10
 800cee2:	d005      	beq.n	800cef0 <__sfputc_r+0x22>
 800cee4:	6813      	ldr	r3, [r2, #0]
 800cee6:	1c58      	adds	r0, r3, #1
 800cee8:	6010      	str	r0, [r2, #0]
 800ceea:	7019      	strb	r1, [r3, #0]
 800ceec:	0008      	movs	r0, r1
 800ceee:	bd10      	pop	{r4, pc}
 800cef0:	f000 f930 	bl	800d154 <__swbuf_r>
 800cef4:	0001      	movs	r1, r0
 800cef6:	e7f9      	b.n	800ceec <__sfputc_r+0x1e>

0800cef8 <__sfputs_r>:
 800cef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cefa:	0006      	movs	r6, r0
 800cefc:	000f      	movs	r7, r1
 800cefe:	0014      	movs	r4, r2
 800cf00:	18d5      	adds	r5, r2, r3
 800cf02:	42ac      	cmp	r4, r5
 800cf04:	d101      	bne.n	800cf0a <__sfputs_r+0x12>
 800cf06:	2000      	movs	r0, #0
 800cf08:	e007      	b.n	800cf1a <__sfputs_r+0x22>
 800cf0a:	7821      	ldrb	r1, [r4, #0]
 800cf0c:	003a      	movs	r2, r7
 800cf0e:	0030      	movs	r0, r6
 800cf10:	f7ff ffdd 	bl	800cece <__sfputc_r>
 800cf14:	3401      	adds	r4, #1
 800cf16:	1c43      	adds	r3, r0, #1
 800cf18:	d1f3      	bne.n	800cf02 <__sfputs_r+0xa>
 800cf1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cf1c <_vfiprintf_r>:
 800cf1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf1e:	b0a1      	sub	sp, #132	@ 0x84
 800cf20:	000f      	movs	r7, r1
 800cf22:	0015      	movs	r5, r2
 800cf24:	001e      	movs	r6, r3
 800cf26:	9003      	str	r0, [sp, #12]
 800cf28:	2800      	cmp	r0, #0
 800cf2a:	d004      	beq.n	800cf36 <_vfiprintf_r+0x1a>
 800cf2c:	6a03      	ldr	r3, [r0, #32]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d101      	bne.n	800cf36 <_vfiprintf_r+0x1a>
 800cf32:	f7fe fafd 	bl	800b530 <__sinit>
 800cf36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cf38:	07db      	lsls	r3, r3, #31
 800cf3a:	d405      	bmi.n	800cf48 <_vfiprintf_r+0x2c>
 800cf3c:	89bb      	ldrh	r3, [r7, #12]
 800cf3e:	059b      	lsls	r3, r3, #22
 800cf40:	d402      	bmi.n	800cf48 <_vfiprintf_r+0x2c>
 800cf42:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800cf44:	f7fe fc2d 	bl	800b7a2 <__retarget_lock_acquire_recursive>
 800cf48:	89bb      	ldrh	r3, [r7, #12]
 800cf4a:	071b      	lsls	r3, r3, #28
 800cf4c:	d502      	bpl.n	800cf54 <_vfiprintf_r+0x38>
 800cf4e:	693b      	ldr	r3, [r7, #16]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d113      	bne.n	800cf7c <_vfiprintf_r+0x60>
 800cf54:	0039      	movs	r1, r7
 800cf56:	9803      	ldr	r0, [sp, #12]
 800cf58:	f000 f93e 	bl	800d1d8 <__swsetup_r>
 800cf5c:	2800      	cmp	r0, #0
 800cf5e:	d00d      	beq.n	800cf7c <_vfiprintf_r+0x60>
 800cf60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cf62:	07db      	lsls	r3, r3, #31
 800cf64:	d503      	bpl.n	800cf6e <_vfiprintf_r+0x52>
 800cf66:	2001      	movs	r0, #1
 800cf68:	4240      	negs	r0, r0
 800cf6a:	b021      	add	sp, #132	@ 0x84
 800cf6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf6e:	89bb      	ldrh	r3, [r7, #12]
 800cf70:	059b      	lsls	r3, r3, #22
 800cf72:	d4f8      	bmi.n	800cf66 <_vfiprintf_r+0x4a>
 800cf74:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800cf76:	f7fe fc15 	bl	800b7a4 <__retarget_lock_release_recursive>
 800cf7a:	e7f4      	b.n	800cf66 <_vfiprintf_r+0x4a>
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	ac08      	add	r4, sp, #32
 800cf80:	6163      	str	r3, [r4, #20]
 800cf82:	3320      	adds	r3, #32
 800cf84:	7663      	strb	r3, [r4, #25]
 800cf86:	3310      	adds	r3, #16
 800cf88:	76a3      	strb	r3, [r4, #26]
 800cf8a:	9607      	str	r6, [sp, #28]
 800cf8c:	002e      	movs	r6, r5
 800cf8e:	7833      	ldrb	r3, [r6, #0]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d001      	beq.n	800cf98 <_vfiprintf_r+0x7c>
 800cf94:	2b25      	cmp	r3, #37	@ 0x25
 800cf96:	d148      	bne.n	800d02a <_vfiprintf_r+0x10e>
 800cf98:	1b73      	subs	r3, r6, r5
 800cf9a:	9305      	str	r3, [sp, #20]
 800cf9c:	42ae      	cmp	r6, r5
 800cf9e:	d00b      	beq.n	800cfb8 <_vfiprintf_r+0x9c>
 800cfa0:	002a      	movs	r2, r5
 800cfa2:	0039      	movs	r1, r7
 800cfa4:	9803      	ldr	r0, [sp, #12]
 800cfa6:	f7ff ffa7 	bl	800cef8 <__sfputs_r>
 800cfaa:	3001      	adds	r0, #1
 800cfac:	d100      	bne.n	800cfb0 <_vfiprintf_r+0x94>
 800cfae:	e0ae      	b.n	800d10e <_vfiprintf_r+0x1f2>
 800cfb0:	6963      	ldr	r3, [r4, #20]
 800cfb2:	9a05      	ldr	r2, [sp, #20]
 800cfb4:	189b      	adds	r3, r3, r2
 800cfb6:	6163      	str	r3, [r4, #20]
 800cfb8:	7833      	ldrb	r3, [r6, #0]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d100      	bne.n	800cfc0 <_vfiprintf_r+0xa4>
 800cfbe:	e0a6      	b.n	800d10e <_vfiprintf_r+0x1f2>
 800cfc0:	2201      	movs	r2, #1
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	4252      	negs	r2, r2
 800cfc6:	6062      	str	r2, [r4, #4]
 800cfc8:	a904      	add	r1, sp, #16
 800cfca:	3254      	adds	r2, #84	@ 0x54
 800cfcc:	1852      	adds	r2, r2, r1
 800cfce:	1c75      	adds	r5, r6, #1
 800cfd0:	6023      	str	r3, [r4, #0]
 800cfd2:	60e3      	str	r3, [r4, #12]
 800cfd4:	60a3      	str	r3, [r4, #8]
 800cfd6:	7013      	strb	r3, [r2, #0]
 800cfd8:	65a3      	str	r3, [r4, #88]	@ 0x58
 800cfda:	4b59      	ldr	r3, [pc, #356]	@ (800d140 <_vfiprintf_r+0x224>)
 800cfdc:	2205      	movs	r2, #5
 800cfde:	0018      	movs	r0, r3
 800cfe0:	7829      	ldrb	r1, [r5, #0]
 800cfe2:	9305      	str	r3, [sp, #20]
 800cfe4:	f7fe fbe7 	bl	800b7b6 <memchr>
 800cfe8:	1c6e      	adds	r6, r5, #1
 800cfea:	2800      	cmp	r0, #0
 800cfec:	d11f      	bne.n	800d02e <_vfiprintf_r+0x112>
 800cfee:	6822      	ldr	r2, [r4, #0]
 800cff0:	06d3      	lsls	r3, r2, #27
 800cff2:	d504      	bpl.n	800cffe <_vfiprintf_r+0xe2>
 800cff4:	2353      	movs	r3, #83	@ 0x53
 800cff6:	a904      	add	r1, sp, #16
 800cff8:	185b      	adds	r3, r3, r1
 800cffa:	2120      	movs	r1, #32
 800cffc:	7019      	strb	r1, [r3, #0]
 800cffe:	0713      	lsls	r3, r2, #28
 800d000:	d504      	bpl.n	800d00c <_vfiprintf_r+0xf0>
 800d002:	2353      	movs	r3, #83	@ 0x53
 800d004:	a904      	add	r1, sp, #16
 800d006:	185b      	adds	r3, r3, r1
 800d008:	212b      	movs	r1, #43	@ 0x2b
 800d00a:	7019      	strb	r1, [r3, #0]
 800d00c:	782b      	ldrb	r3, [r5, #0]
 800d00e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d010:	d016      	beq.n	800d040 <_vfiprintf_r+0x124>
 800d012:	002e      	movs	r6, r5
 800d014:	2100      	movs	r1, #0
 800d016:	200a      	movs	r0, #10
 800d018:	68e3      	ldr	r3, [r4, #12]
 800d01a:	7832      	ldrb	r2, [r6, #0]
 800d01c:	1c75      	adds	r5, r6, #1
 800d01e:	3a30      	subs	r2, #48	@ 0x30
 800d020:	2a09      	cmp	r2, #9
 800d022:	d950      	bls.n	800d0c6 <_vfiprintf_r+0x1aa>
 800d024:	2900      	cmp	r1, #0
 800d026:	d111      	bne.n	800d04c <_vfiprintf_r+0x130>
 800d028:	e017      	b.n	800d05a <_vfiprintf_r+0x13e>
 800d02a:	3601      	adds	r6, #1
 800d02c:	e7af      	b.n	800cf8e <_vfiprintf_r+0x72>
 800d02e:	9b05      	ldr	r3, [sp, #20]
 800d030:	6822      	ldr	r2, [r4, #0]
 800d032:	1ac0      	subs	r0, r0, r3
 800d034:	2301      	movs	r3, #1
 800d036:	4083      	lsls	r3, r0
 800d038:	4313      	orrs	r3, r2
 800d03a:	0035      	movs	r5, r6
 800d03c:	6023      	str	r3, [r4, #0]
 800d03e:	e7cc      	b.n	800cfda <_vfiprintf_r+0xbe>
 800d040:	9b07      	ldr	r3, [sp, #28]
 800d042:	1d19      	adds	r1, r3, #4
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	9107      	str	r1, [sp, #28]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	db01      	blt.n	800d050 <_vfiprintf_r+0x134>
 800d04c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d04e:	e004      	b.n	800d05a <_vfiprintf_r+0x13e>
 800d050:	425b      	negs	r3, r3
 800d052:	60e3      	str	r3, [r4, #12]
 800d054:	2302      	movs	r3, #2
 800d056:	4313      	orrs	r3, r2
 800d058:	6023      	str	r3, [r4, #0]
 800d05a:	7833      	ldrb	r3, [r6, #0]
 800d05c:	2b2e      	cmp	r3, #46	@ 0x2e
 800d05e:	d10c      	bne.n	800d07a <_vfiprintf_r+0x15e>
 800d060:	7873      	ldrb	r3, [r6, #1]
 800d062:	2b2a      	cmp	r3, #42	@ 0x2a
 800d064:	d134      	bne.n	800d0d0 <_vfiprintf_r+0x1b4>
 800d066:	9b07      	ldr	r3, [sp, #28]
 800d068:	3602      	adds	r6, #2
 800d06a:	1d1a      	adds	r2, r3, #4
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	9207      	str	r2, [sp, #28]
 800d070:	2b00      	cmp	r3, #0
 800d072:	da01      	bge.n	800d078 <_vfiprintf_r+0x15c>
 800d074:	2301      	movs	r3, #1
 800d076:	425b      	negs	r3, r3
 800d078:	9309      	str	r3, [sp, #36]	@ 0x24
 800d07a:	4d32      	ldr	r5, [pc, #200]	@ (800d144 <_vfiprintf_r+0x228>)
 800d07c:	2203      	movs	r2, #3
 800d07e:	0028      	movs	r0, r5
 800d080:	7831      	ldrb	r1, [r6, #0]
 800d082:	f7fe fb98 	bl	800b7b6 <memchr>
 800d086:	2800      	cmp	r0, #0
 800d088:	d006      	beq.n	800d098 <_vfiprintf_r+0x17c>
 800d08a:	2340      	movs	r3, #64	@ 0x40
 800d08c:	1b40      	subs	r0, r0, r5
 800d08e:	4083      	lsls	r3, r0
 800d090:	6822      	ldr	r2, [r4, #0]
 800d092:	3601      	adds	r6, #1
 800d094:	4313      	orrs	r3, r2
 800d096:	6023      	str	r3, [r4, #0]
 800d098:	7831      	ldrb	r1, [r6, #0]
 800d09a:	2206      	movs	r2, #6
 800d09c:	482a      	ldr	r0, [pc, #168]	@ (800d148 <_vfiprintf_r+0x22c>)
 800d09e:	1c75      	adds	r5, r6, #1
 800d0a0:	7621      	strb	r1, [r4, #24]
 800d0a2:	f7fe fb88 	bl	800b7b6 <memchr>
 800d0a6:	2800      	cmp	r0, #0
 800d0a8:	d040      	beq.n	800d12c <_vfiprintf_r+0x210>
 800d0aa:	4b28      	ldr	r3, [pc, #160]	@ (800d14c <_vfiprintf_r+0x230>)
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d122      	bne.n	800d0f6 <_vfiprintf_r+0x1da>
 800d0b0:	2207      	movs	r2, #7
 800d0b2:	9b07      	ldr	r3, [sp, #28]
 800d0b4:	3307      	adds	r3, #7
 800d0b6:	4393      	bics	r3, r2
 800d0b8:	3308      	adds	r3, #8
 800d0ba:	9307      	str	r3, [sp, #28]
 800d0bc:	6963      	ldr	r3, [r4, #20]
 800d0be:	9a04      	ldr	r2, [sp, #16]
 800d0c0:	189b      	adds	r3, r3, r2
 800d0c2:	6163      	str	r3, [r4, #20]
 800d0c4:	e762      	b.n	800cf8c <_vfiprintf_r+0x70>
 800d0c6:	4343      	muls	r3, r0
 800d0c8:	002e      	movs	r6, r5
 800d0ca:	2101      	movs	r1, #1
 800d0cc:	189b      	adds	r3, r3, r2
 800d0ce:	e7a4      	b.n	800d01a <_vfiprintf_r+0xfe>
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	200a      	movs	r0, #10
 800d0d4:	0019      	movs	r1, r3
 800d0d6:	3601      	adds	r6, #1
 800d0d8:	6063      	str	r3, [r4, #4]
 800d0da:	7832      	ldrb	r2, [r6, #0]
 800d0dc:	1c75      	adds	r5, r6, #1
 800d0de:	3a30      	subs	r2, #48	@ 0x30
 800d0e0:	2a09      	cmp	r2, #9
 800d0e2:	d903      	bls.n	800d0ec <_vfiprintf_r+0x1d0>
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d0c8      	beq.n	800d07a <_vfiprintf_r+0x15e>
 800d0e8:	9109      	str	r1, [sp, #36]	@ 0x24
 800d0ea:	e7c6      	b.n	800d07a <_vfiprintf_r+0x15e>
 800d0ec:	4341      	muls	r1, r0
 800d0ee:	002e      	movs	r6, r5
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	1889      	adds	r1, r1, r2
 800d0f4:	e7f1      	b.n	800d0da <_vfiprintf_r+0x1be>
 800d0f6:	aa07      	add	r2, sp, #28
 800d0f8:	9200      	str	r2, [sp, #0]
 800d0fa:	0021      	movs	r1, r4
 800d0fc:	003a      	movs	r2, r7
 800d0fe:	4b14      	ldr	r3, [pc, #80]	@ (800d150 <_vfiprintf_r+0x234>)
 800d100:	9803      	ldr	r0, [sp, #12]
 800d102:	f7fd fdc9 	bl	800ac98 <_printf_float>
 800d106:	9004      	str	r0, [sp, #16]
 800d108:	9b04      	ldr	r3, [sp, #16]
 800d10a:	3301      	adds	r3, #1
 800d10c:	d1d6      	bne.n	800d0bc <_vfiprintf_r+0x1a0>
 800d10e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d110:	07db      	lsls	r3, r3, #31
 800d112:	d405      	bmi.n	800d120 <_vfiprintf_r+0x204>
 800d114:	89bb      	ldrh	r3, [r7, #12]
 800d116:	059b      	lsls	r3, r3, #22
 800d118:	d402      	bmi.n	800d120 <_vfiprintf_r+0x204>
 800d11a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800d11c:	f7fe fb42 	bl	800b7a4 <__retarget_lock_release_recursive>
 800d120:	89bb      	ldrh	r3, [r7, #12]
 800d122:	065b      	lsls	r3, r3, #25
 800d124:	d500      	bpl.n	800d128 <_vfiprintf_r+0x20c>
 800d126:	e71e      	b.n	800cf66 <_vfiprintf_r+0x4a>
 800d128:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800d12a:	e71e      	b.n	800cf6a <_vfiprintf_r+0x4e>
 800d12c:	aa07      	add	r2, sp, #28
 800d12e:	9200      	str	r2, [sp, #0]
 800d130:	0021      	movs	r1, r4
 800d132:	003a      	movs	r2, r7
 800d134:	4b06      	ldr	r3, [pc, #24]	@ (800d150 <_vfiprintf_r+0x234>)
 800d136:	9803      	ldr	r0, [sp, #12]
 800d138:	f7fe f85c 	bl	800b1f4 <_printf_i>
 800d13c:	e7e3      	b.n	800d106 <_vfiprintf_r+0x1ea>
 800d13e:	46c0      	nop			@ (mov r8, r8)
 800d140:	0800da27 	.word	0x0800da27
 800d144:	0800da2d 	.word	0x0800da2d
 800d148:	0800da31 	.word	0x0800da31
 800d14c:	0800ac99 	.word	0x0800ac99
 800d150:	0800cef9 	.word	0x0800cef9

0800d154 <__swbuf_r>:
 800d154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d156:	0006      	movs	r6, r0
 800d158:	000d      	movs	r5, r1
 800d15a:	0014      	movs	r4, r2
 800d15c:	2800      	cmp	r0, #0
 800d15e:	d004      	beq.n	800d16a <__swbuf_r+0x16>
 800d160:	6a03      	ldr	r3, [r0, #32]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d101      	bne.n	800d16a <__swbuf_r+0x16>
 800d166:	f7fe f9e3 	bl	800b530 <__sinit>
 800d16a:	69a3      	ldr	r3, [r4, #24]
 800d16c:	60a3      	str	r3, [r4, #8]
 800d16e:	89a3      	ldrh	r3, [r4, #12]
 800d170:	071b      	lsls	r3, r3, #28
 800d172:	d502      	bpl.n	800d17a <__swbuf_r+0x26>
 800d174:	6923      	ldr	r3, [r4, #16]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d109      	bne.n	800d18e <__swbuf_r+0x3a>
 800d17a:	0021      	movs	r1, r4
 800d17c:	0030      	movs	r0, r6
 800d17e:	f000 f82b 	bl	800d1d8 <__swsetup_r>
 800d182:	2800      	cmp	r0, #0
 800d184:	d003      	beq.n	800d18e <__swbuf_r+0x3a>
 800d186:	2501      	movs	r5, #1
 800d188:	426d      	negs	r5, r5
 800d18a:	0028      	movs	r0, r5
 800d18c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d18e:	6923      	ldr	r3, [r4, #16]
 800d190:	6820      	ldr	r0, [r4, #0]
 800d192:	b2ef      	uxtb	r7, r5
 800d194:	1ac0      	subs	r0, r0, r3
 800d196:	6963      	ldr	r3, [r4, #20]
 800d198:	b2ed      	uxtb	r5, r5
 800d19a:	4283      	cmp	r3, r0
 800d19c:	dc05      	bgt.n	800d1aa <__swbuf_r+0x56>
 800d19e:	0021      	movs	r1, r4
 800d1a0:	0030      	movs	r0, r6
 800d1a2:	f7ff fe13 	bl	800cdcc <_fflush_r>
 800d1a6:	2800      	cmp	r0, #0
 800d1a8:	d1ed      	bne.n	800d186 <__swbuf_r+0x32>
 800d1aa:	68a3      	ldr	r3, [r4, #8]
 800d1ac:	3001      	adds	r0, #1
 800d1ae:	3b01      	subs	r3, #1
 800d1b0:	60a3      	str	r3, [r4, #8]
 800d1b2:	6823      	ldr	r3, [r4, #0]
 800d1b4:	1c5a      	adds	r2, r3, #1
 800d1b6:	6022      	str	r2, [r4, #0]
 800d1b8:	701f      	strb	r7, [r3, #0]
 800d1ba:	6963      	ldr	r3, [r4, #20]
 800d1bc:	4283      	cmp	r3, r0
 800d1be:	d004      	beq.n	800d1ca <__swbuf_r+0x76>
 800d1c0:	89a3      	ldrh	r3, [r4, #12]
 800d1c2:	07db      	lsls	r3, r3, #31
 800d1c4:	d5e1      	bpl.n	800d18a <__swbuf_r+0x36>
 800d1c6:	2d0a      	cmp	r5, #10
 800d1c8:	d1df      	bne.n	800d18a <__swbuf_r+0x36>
 800d1ca:	0021      	movs	r1, r4
 800d1cc:	0030      	movs	r0, r6
 800d1ce:	f7ff fdfd 	bl	800cdcc <_fflush_r>
 800d1d2:	2800      	cmp	r0, #0
 800d1d4:	d0d9      	beq.n	800d18a <__swbuf_r+0x36>
 800d1d6:	e7d6      	b.n	800d186 <__swbuf_r+0x32>

0800d1d8 <__swsetup_r>:
 800d1d8:	4b2d      	ldr	r3, [pc, #180]	@ (800d290 <__swsetup_r+0xb8>)
 800d1da:	b570      	push	{r4, r5, r6, lr}
 800d1dc:	0005      	movs	r5, r0
 800d1de:	6818      	ldr	r0, [r3, #0]
 800d1e0:	000c      	movs	r4, r1
 800d1e2:	2800      	cmp	r0, #0
 800d1e4:	d004      	beq.n	800d1f0 <__swsetup_r+0x18>
 800d1e6:	6a03      	ldr	r3, [r0, #32]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d101      	bne.n	800d1f0 <__swsetup_r+0x18>
 800d1ec:	f7fe f9a0 	bl	800b530 <__sinit>
 800d1f0:	230c      	movs	r3, #12
 800d1f2:	5ee2      	ldrsh	r2, [r4, r3]
 800d1f4:	0713      	lsls	r3, r2, #28
 800d1f6:	d423      	bmi.n	800d240 <__swsetup_r+0x68>
 800d1f8:	06d3      	lsls	r3, r2, #27
 800d1fa:	d407      	bmi.n	800d20c <__swsetup_r+0x34>
 800d1fc:	2309      	movs	r3, #9
 800d1fe:	602b      	str	r3, [r5, #0]
 800d200:	2340      	movs	r3, #64	@ 0x40
 800d202:	2001      	movs	r0, #1
 800d204:	4313      	orrs	r3, r2
 800d206:	81a3      	strh	r3, [r4, #12]
 800d208:	4240      	negs	r0, r0
 800d20a:	e03a      	b.n	800d282 <__swsetup_r+0xaa>
 800d20c:	0752      	lsls	r2, r2, #29
 800d20e:	d513      	bpl.n	800d238 <__swsetup_r+0x60>
 800d210:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d212:	2900      	cmp	r1, #0
 800d214:	d008      	beq.n	800d228 <__swsetup_r+0x50>
 800d216:	0023      	movs	r3, r4
 800d218:	3344      	adds	r3, #68	@ 0x44
 800d21a:	4299      	cmp	r1, r3
 800d21c:	d002      	beq.n	800d224 <__swsetup_r+0x4c>
 800d21e:	0028      	movs	r0, r5
 800d220:	f7ff f960 	bl	800c4e4 <_free_r>
 800d224:	2300      	movs	r3, #0
 800d226:	6363      	str	r3, [r4, #52]	@ 0x34
 800d228:	2224      	movs	r2, #36	@ 0x24
 800d22a:	89a3      	ldrh	r3, [r4, #12]
 800d22c:	4393      	bics	r3, r2
 800d22e:	81a3      	strh	r3, [r4, #12]
 800d230:	2300      	movs	r3, #0
 800d232:	6063      	str	r3, [r4, #4]
 800d234:	6923      	ldr	r3, [r4, #16]
 800d236:	6023      	str	r3, [r4, #0]
 800d238:	2308      	movs	r3, #8
 800d23a:	89a2      	ldrh	r2, [r4, #12]
 800d23c:	4313      	orrs	r3, r2
 800d23e:	81a3      	strh	r3, [r4, #12]
 800d240:	6923      	ldr	r3, [r4, #16]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d10b      	bne.n	800d25e <__swsetup_r+0x86>
 800d246:	21a0      	movs	r1, #160	@ 0xa0
 800d248:	2280      	movs	r2, #128	@ 0x80
 800d24a:	89a3      	ldrh	r3, [r4, #12]
 800d24c:	0089      	lsls	r1, r1, #2
 800d24e:	0092      	lsls	r2, r2, #2
 800d250:	400b      	ands	r3, r1
 800d252:	4293      	cmp	r3, r2
 800d254:	d003      	beq.n	800d25e <__swsetup_r+0x86>
 800d256:	0021      	movs	r1, r4
 800d258:	0028      	movs	r0, r5
 800d25a:	f000 f88f 	bl	800d37c <__smakebuf_r>
 800d25e:	230c      	movs	r3, #12
 800d260:	5ee2      	ldrsh	r2, [r4, r3]
 800d262:	2101      	movs	r1, #1
 800d264:	0013      	movs	r3, r2
 800d266:	400b      	ands	r3, r1
 800d268:	420a      	tst	r2, r1
 800d26a:	d00b      	beq.n	800d284 <__swsetup_r+0xac>
 800d26c:	2300      	movs	r3, #0
 800d26e:	60a3      	str	r3, [r4, #8]
 800d270:	6963      	ldr	r3, [r4, #20]
 800d272:	425b      	negs	r3, r3
 800d274:	61a3      	str	r3, [r4, #24]
 800d276:	2000      	movs	r0, #0
 800d278:	6923      	ldr	r3, [r4, #16]
 800d27a:	4283      	cmp	r3, r0
 800d27c:	d101      	bne.n	800d282 <__swsetup_r+0xaa>
 800d27e:	0613      	lsls	r3, r2, #24
 800d280:	d4be      	bmi.n	800d200 <__swsetup_r+0x28>
 800d282:	bd70      	pop	{r4, r5, r6, pc}
 800d284:	0791      	lsls	r1, r2, #30
 800d286:	d400      	bmi.n	800d28a <__swsetup_r+0xb2>
 800d288:	6963      	ldr	r3, [r4, #20]
 800d28a:	60a3      	str	r3, [r4, #8]
 800d28c:	e7f3      	b.n	800d276 <__swsetup_r+0x9e>
 800d28e:	46c0      	nop			@ (mov r8, r8)
 800d290:	20000018 	.word	0x20000018

0800d294 <_raise_r>:
 800d294:	b570      	push	{r4, r5, r6, lr}
 800d296:	0004      	movs	r4, r0
 800d298:	000d      	movs	r5, r1
 800d29a:	291f      	cmp	r1, #31
 800d29c:	d904      	bls.n	800d2a8 <_raise_r+0x14>
 800d29e:	2316      	movs	r3, #22
 800d2a0:	6003      	str	r3, [r0, #0]
 800d2a2:	2001      	movs	r0, #1
 800d2a4:	4240      	negs	r0, r0
 800d2a6:	bd70      	pop	{r4, r5, r6, pc}
 800d2a8:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d004      	beq.n	800d2b8 <_raise_r+0x24>
 800d2ae:	008a      	lsls	r2, r1, #2
 800d2b0:	189b      	adds	r3, r3, r2
 800d2b2:	681a      	ldr	r2, [r3, #0]
 800d2b4:	2a00      	cmp	r2, #0
 800d2b6:	d108      	bne.n	800d2ca <_raise_r+0x36>
 800d2b8:	0020      	movs	r0, r4
 800d2ba:	f000 f831 	bl	800d320 <_getpid_r>
 800d2be:	002a      	movs	r2, r5
 800d2c0:	0001      	movs	r1, r0
 800d2c2:	0020      	movs	r0, r4
 800d2c4:	f000 f81a 	bl	800d2fc <_kill_r>
 800d2c8:	e7ed      	b.n	800d2a6 <_raise_r+0x12>
 800d2ca:	2a01      	cmp	r2, #1
 800d2cc:	d009      	beq.n	800d2e2 <_raise_r+0x4e>
 800d2ce:	1c51      	adds	r1, r2, #1
 800d2d0:	d103      	bne.n	800d2da <_raise_r+0x46>
 800d2d2:	2316      	movs	r3, #22
 800d2d4:	6003      	str	r3, [r0, #0]
 800d2d6:	2001      	movs	r0, #1
 800d2d8:	e7e5      	b.n	800d2a6 <_raise_r+0x12>
 800d2da:	2100      	movs	r1, #0
 800d2dc:	0028      	movs	r0, r5
 800d2de:	6019      	str	r1, [r3, #0]
 800d2e0:	4790      	blx	r2
 800d2e2:	2000      	movs	r0, #0
 800d2e4:	e7df      	b.n	800d2a6 <_raise_r+0x12>
	...

0800d2e8 <raise>:
 800d2e8:	b510      	push	{r4, lr}
 800d2ea:	4b03      	ldr	r3, [pc, #12]	@ (800d2f8 <raise+0x10>)
 800d2ec:	0001      	movs	r1, r0
 800d2ee:	6818      	ldr	r0, [r3, #0]
 800d2f0:	f7ff ffd0 	bl	800d294 <_raise_r>
 800d2f4:	bd10      	pop	{r4, pc}
 800d2f6:	46c0      	nop			@ (mov r8, r8)
 800d2f8:	20000018 	.word	0x20000018

0800d2fc <_kill_r>:
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	b570      	push	{r4, r5, r6, lr}
 800d300:	4d06      	ldr	r5, [pc, #24]	@ (800d31c <_kill_r+0x20>)
 800d302:	0004      	movs	r4, r0
 800d304:	0008      	movs	r0, r1
 800d306:	0011      	movs	r1, r2
 800d308:	602b      	str	r3, [r5, #0]
 800d30a:	f7f6 fd07 	bl	8003d1c <_kill>
 800d30e:	1c43      	adds	r3, r0, #1
 800d310:	d103      	bne.n	800d31a <_kill_r+0x1e>
 800d312:	682b      	ldr	r3, [r5, #0]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d000      	beq.n	800d31a <_kill_r+0x1e>
 800d318:	6023      	str	r3, [r4, #0]
 800d31a:	bd70      	pop	{r4, r5, r6, pc}
 800d31c:	2000076c 	.word	0x2000076c

0800d320 <_getpid_r>:
 800d320:	b510      	push	{r4, lr}
 800d322:	f7f6 fcf9 	bl	8003d18 <_getpid>
 800d326:	bd10      	pop	{r4, pc}

0800d328 <__swhatbuf_r>:
 800d328:	b570      	push	{r4, r5, r6, lr}
 800d32a:	000e      	movs	r6, r1
 800d32c:	001d      	movs	r5, r3
 800d32e:	230e      	movs	r3, #14
 800d330:	5ec9      	ldrsh	r1, [r1, r3]
 800d332:	0014      	movs	r4, r2
 800d334:	b096      	sub	sp, #88	@ 0x58
 800d336:	2900      	cmp	r1, #0
 800d338:	da0c      	bge.n	800d354 <__swhatbuf_r+0x2c>
 800d33a:	89b2      	ldrh	r2, [r6, #12]
 800d33c:	2380      	movs	r3, #128	@ 0x80
 800d33e:	0011      	movs	r1, r2
 800d340:	4019      	ands	r1, r3
 800d342:	421a      	tst	r2, r3
 800d344:	d114      	bne.n	800d370 <__swhatbuf_r+0x48>
 800d346:	2380      	movs	r3, #128	@ 0x80
 800d348:	00db      	lsls	r3, r3, #3
 800d34a:	2000      	movs	r0, #0
 800d34c:	6029      	str	r1, [r5, #0]
 800d34e:	6023      	str	r3, [r4, #0]
 800d350:	b016      	add	sp, #88	@ 0x58
 800d352:	bd70      	pop	{r4, r5, r6, pc}
 800d354:	466a      	mov	r2, sp
 800d356:	f000 f853 	bl	800d400 <_fstat_r>
 800d35a:	2800      	cmp	r0, #0
 800d35c:	dbed      	blt.n	800d33a <__swhatbuf_r+0x12>
 800d35e:	23f0      	movs	r3, #240	@ 0xf0
 800d360:	9901      	ldr	r1, [sp, #4]
 800d362:	021b      	lsls	r3, r3, #8
 800d364:	4019      	ands	r1, r3
 800d366:	4b04      	ldr	r3, [pc, #16]	@ (800d378 <__swhatbuf_r+0x50>)
 800d368:	18c9      	adds	r1, r1, r3
 800d36a:	424b      	negs	r3, r1
 800d36c:	4159      	adcs	r1, r3
 800d36e:	e7ea      	b.n	800d346 <__swhatbuf_r+0x1e>
 800d370:	2100      	movs	r1, #0
 800d372:	2340      	movs	r3, #64	@ 0x40
 800d374:	e7e9      	b.n	800d34a <__swhatbuf_r+0x22>
 800d376:	46c0      	nop			@ (mov r8, r8)
 800d378:	ffffe000 	.word	0xffffe000

0800d37c <__smakebuf_r>:
 800d37c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d37e:	2602      	movs	r6, #2
 800d380:	898b      	ldrh	r3, [r1, #12]
 800d382:	0005      	movs	r5, r0
 800d384:	000c      	movs	r4, r1
 800d386:	b085      	sub	sp, #20
 800d388:	4233      	tst	r3, r6
 800d38a:	d007      	beq.n	800d39c <__smakebuf_r+0x20>
 800d38c:	0023      	movs	r3, r4
 800d38e:	3347      	adds	r3, #71	@ 0x47
 800d390:	6023      	str	r3, [r4, #0]
 800d392:	6123      	str	r3, [r4, #16]
 800d394:	2301      	movs	r3, #1
 800d396:	6163      	str	r3, [r4, #20]
 800d398:	b005      	add	sp, #20
 800d39a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d39c:	ab03      	add	r3, sp, #12
 800d39e:	aa02      	add	r2, sp, #8
 800d3a0:	f7ff ffc2 	bl	800d328 <__swhatbuf_r>
 800d3a4:	9f02      	ldr	r7, [sp, #8]
 800d3a6:	9001      	str	r0, [sp, #4]
 800d3a8:	0039      	movs	r1, r7
 800d3aa:	0028      	movs	r0, r5
 800d3ac:	f7fd fb3e 	bl	800aa2c <_malloc_r>
 800d3b0:	2800      	cmp	r0, #0
 800d3b2:	d108      	bne.n	800d3c6 <__smakebuf_r+0x4a>
 800d3b4:	220c      	movs	r2, #12
 800d3b6:	5ea3      	ldrsh	r3, [r4, r2]
 800d3b8:	059a      	lsls	r2, r3, #22
 800d3ba:	d4ed      	bmi.n	800d398 <__smakebuf_r+0x1c>
 800d3bc:	2203      	movs	r2, #3
 800d3be:	4393      	bics	r3, r2
 800d3c0:	431e      	orrs	r6, r3
 800d3c2:	81a6      	strh	r6, [r4, #12]
 800d3c4:	e7e2      	b.n	800d38c <__smakebuf_r+0x10>
 800d3c6:	2380      	movs	r3, #128	@ 0x80
 800d3c8:	89a2      	ldrh	r2, [r4, #12]
 800d3ca:	6020      	str	r0, [r4, #0]
 800d3cc:	4313      	orrs	r3, r2
 800d3ce:	81a3      	strh	r3, [r4, #12]
 800d3d0:	9b03      	ldr	r3, [sp, #12]
 800d3d2:	6120      	str	r0, [r4, #16]
 800d3d4:	6167      	str	r7, [r4, #20]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d00c      	beq.n	800d3f4 <__smakebuf_r+0x78>
 800d3da:	0028      	movs	r0, r5
 800d3dc:	230e      	movs	r3, #14
 800d3de:	5ee1      	ldrsh	r1, [r4, r3]
 800d3e0:	f000 f820 	bl	800d424 <_isatty_r>
 800d3e4:	2800      	cmp	r0, #0
 800d3e6:	d005      	beq.n	800d3f4 <__smakebuf_r+0x78>
 800d3e8:	2303      	movs	r3, #3
 800d3ea:	89a2      	ldrh	r2, [r4, #12]
 800d3ec:	439a      	bics	r2, r3
 800d3ee:	3b02      	subs	r3, #2
 800d3f0:	4313      	orrs	r3, r2
 800d3f2:	81a3      	strh	r3, [r4, #12]
 800d3f4:	89a3      	ldrh	r3, [r4, #12]
 800d3f6:	9a01      	ldr	r2, [sp, #4]
 800d3f8:	4313      	orrs	r3, r2
 800d3fa:	81a3      	strh	r3, [r4, #12]
 800d3fc:	e7cc      	b.n	800d398 <__smakebuf_r+0x1c>
	...

0800d400 <_fstat_r>:
 800d400:	2300      	movs	r3, #0
 800d402:	b570      	push	{r4, r5, r6, lr}
 800d404:	4d06      	ldr	r5, [pc, #24]	@ (800d420 <_fstat_r+0x20>)
 800d406:	0004      	movs	r4, r0
 800d408:	0008      	movs	r0, r1
 800d40a:	0011      	movs	r1, r2
 800d40c:	602b      	str	r3, [r5, #0]
 800d40e:	f7f6 fcb0 	bl	8003d72 <_fstat>
 800d412:	1c43      	adds	r3, r0, #1
 800d414:	d103      	bne.n	800d41e <_fstat_r+0x1e>
 800d416:	682b      	ldr	r3, [r5, #0]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d000      	beq.n	800d41e <_fstat_r+0x1e>
 800d41c:	6023      	str	r3, [r4, #0]
 800d41e:	bd70      	pop	{r4, r5, r6, pc}
 800d420:	2000076c 	.word	0x2000076c

0800d424 <_isatty_r>:
 800d424:	2300      	movs	r3, #0
 800d426:	b570      	push	{r4, r5, r6, lr}
 800d428:	4d06      	ldr	r5, [pc, #24]	@ (800d444 <_isatty_r+0x20>)
 800d42a:	0004      	movs	r4, r0
 800d42c:	0008      	movs	r0, r1
 800d42e:	602b      	str	r3, [r5, #0]
 800d430:	f7f6 fca4 	bl	8003d7c <_isatty>
 800d434:	1c43      	adds	r3, r0, #1
 800d436:	d103      	bne.n	800d440 <_isatty_r+0x1c>
 800d438:	682b      	ldr	r3, [r5, #0]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d000      	beq.n	800d440 <_isatty_r+0x1c>
 800d43e:	6023      	str	r3, [r4, #0]
 800d440:	bd70      	pop	{r4, r5, r6, pc}
 800d442:	46c0      	nop			@ (mov r8, r8)
 800d444:	2000076c 	.word	0x2000076c

0800d448 <sqrtf>:
 800d448:	b570      	push	{r4, r5, r6, lr}
 800d44a:	1c05      	adds	r5, r0, #0
 800d44c:	f000 f818 	bl	800d480 <__ieee754_sqrtf>
 800d450:	1c29      	adds	r1, r5, #0
 800d452:	1c04      	adds	r4, r0, #0
 800d454:	1c28      	adds	r0, r5, #0
 800d456:	f7f3 fee1 	bl	800121c <__aeabi_fcmpun>
 800d45a:	2800      	cmp	r0, #0
 800d45c:	d10e      	bne.n	800d47c <sqrtf+0x34>
 800d45e:	2100      	movs	r1, #0
 800d460:	1c28      	adds	r0, r5, #0
 800d462:	f7f3 f849 	bl	80004f8 <__aeabi_fcmplt>
 800d466:	2800      	cmp	r0, #0
 800d468:	d008      	beq.n	800d47c <sqrtf+0x34>
 800d46a:	f7fe f96f 	bl	800b74c <__errno>
 800d46e:	2321      	movs	r3, #33	@ 0x21
 800d470:	2100      	movs	r1, #0
 800d472:	6003      	str	r3, [r0, #0]
 800d474:	1c08      	adds	r0, r1, #0
 800d476:	f7f3 fa09 	bl	800088c <__aeabi_fdiv>
 800d47a:	1c04      	adds	r4, r0, #0
 800d47c:	1c20      	adds	r0, r4, #0
 800d47e:	bd70      	pop	{r4, r5, r6, pc}

0800d480 <__ieee754_sqrtf>:
 800d480:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d482:	0003      	movs	r3, r0
 800d484:	0042      	lsls	r2, r0, #1
 800d486:	1c04      	adds	r4, r0, #0
 800d488:	20ff      	movs	r0, #255	@ 0xff
 800d48a:	0852      	lsrs	r2, r2, #1
 800d48c:	05c0      	lsls	r0, r0, #23
 800d48e:	4282      	cmp	r2, r0
 800d490:	d30a      	bcc.n	800d4a8 <__ieee754_sqrtf+0x28>
 800d492:	1c21      	adds	r1, r4, #0
 800d494:	1c20      	adds	r0, r4, #0
 800d496:	f7f3 fbdf 	bl	8000c58 <__aeabi_fmul>
 800d49a:	1c01      	adds	r1, r0, #0
 800d49c:	1c20      	adds	r0, r4, #0
 800d49e:	f7f3 f86b 	bl	8000578 <__aeabi_fadd>
 800d4a2:	1c04      	adds	r4, r0, #0
 800d4a4:	1c20      	adds	r0, r4, #0
 800d4a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d4a8:	2a00      	cmp	r2, #0
 800d4aa:	d0fb      	beq.n	800d4a4 <__ieee754_sqrtf+0x24>
 800d4ac:	2c00      	cmp	r4, #0
 800d4ae:	da07      	bge.n	800d4c0 <__ieee754_sqrtf+0x40>
 800d4b0:	1c21      	adds	r1, r4, #0
 800d4b2:	1c20      	adds	r0, r4, #0
 800d4b4:	f7f3 fd0e 	bl	8000ed4 <__aeabi_fsub>
 800d4b8:	1c01      	adds	r1, r0, #0
 800d4ba:	f7f3 f9e7 	bl	800088c <__aeabi_fdiv>
 800d4be:	e7f0      	b.n	800d4a2 <__ieee754_sqrtf+0x22>
 800d4c0:	0022      	movs	r2, r4
 800d4c2:	15e1      	asrs	r1, r4, #23
 800d4c4:	4002      	ands	r2, r0
 800d4c6:	4204      	tst	r4, r0
 800d4c8:	d046      	beq.n	800d558 <__ieee754_sqrtf+0xd8>
 800d4ca:	2280      	movs	r2, #128	@ 0x80
 800d4cc:	000f      	movs	r7, r1
 800d4ce:	025b      	lsls	r3, r3, #9
 800d4d0:	0a5b      	lsrs	r3, r3, #9
 800d4d2:	0412      	lsls	r2, r2, #16
 800d4d4:	3f7f      	subs	r7, #127	@ 0x7f
 800d4d6:	4313      	orrs	r3, r2
 800d4d8:	07c9      	lsls	r1, r1, #31
 800d4da:	d400      	bmi.n	800d4de <__ieee754_sqrtf+0x5e>
 800d4dc:	005b      	lsls	r3, r3, #1
 800d4de:	2400      	movs	r4, #0
 800d4e0:	2180      	movs	r1, #128	@ 0x80
 800d4e2:	2019      	movs	r0, #25
 800d4e4:	0026      	movs	r6, r4
 800d4e6:	107f      	asrs	r7, r7, #1
 800d4e8:	005b      	lsls	r3, r3, #1
 800d4ea:	0449      	lsls	r1, r1, #17
 800d4ec:	1875      	adds	r5, r6, r1
 800d4ee:	001a      	movs	r2, r3
 800d4f0:	429d      	cmp	r5, r3
 800d4f2:	dc02      	bgt.n	800d4fa <__ieee754_sqrtf+0x7a>
 800d4f4:	186e      	adds	r6, r5, r1
 800d4f6:	1b5a      	subs	r2, r3, r5
 800d4f8:	1864      	adds	r4, r4, r1
 800d4fa:	3801      	subs	r0, #1
 800d4fc:	0053      	lsls	r3, r2, #1
 800d4fe:	0849      	lsrs	r1, r1, #1
 800d500:	2800      	cmp	r0, #0
 800d502:	d1f3      	bne.n	800d4ec <__ieee754_sqrtf+0x6c>
 800d504:	2a00      	cmp	r2, #0
 800d506:	d019      	beq.n	800d53c <__ieee754_sqrtf+0xbc>
 800d508:	4d17      	ldr	r5, [pc, #92]	@ (800d568 <__ieee754_sqrtf+0xe8>)
 800d50a:	4e18      	ldr	r6, [pc, #96]	@ (800d56c <__ieee754_sqrtf+0xec>)
 800d50c:	6828      	ldr	r0, [r5, #0]
 800d50e:	6831      	ldr	r1, [r6, #0]
 800d510:	682b      	ldr	r3, [r5, #0]
 800d512:	9301      	str	r3, [sp, #4]
 800d514:	f7f3 fcde 	bl	8000ed4 <__aeabi_fsub>
 800d518:	1c01      	adds	r1, r0, #0
 800d51a:	9801      	ldr	r0, [sp, #4]
 800d51c:	f7f2 fff6 	bl	800050c <__aeabi_fcmple>
 800d520:	2800      	cmp	r0, #0
 800d522:	d00b      	beq.n	800d53c <__ieee754_sqrtf+0xbc>
 800d524:	6828      	ldr	r0, [r5, #0]
 800d526:	6831      	ldr	r1, [r6, #0]
 800d528:	f7f3 f826 	bl	8000578 <__aeabi_fadd>
 800d52c:	682d      	ldr	r5, [r5, #0]
 800d52e:	1c01      	adds	r1, r0, #0
 800d530:	1c28      	adds	r0, r5, #0
 800d532:	f7f2 ffe1 	bl	80004f8 <__aeabi_fcmplt>
 800d536:	2800      	cmp	r0, #0
 800d538:	d011      	beq.n	800d55e <__ieee754_sqrtf+0xde>
 800d53a:	3402      	adds	r4, #2
 800d53c:	23fc      	movs	r3, #252	@ 0xfc
 800d53e:	1064      	asrs	r4, r4, #1
 800d540:	059b      	lsls	r3, r3, #22
 800d542:	18e3      	adds	r3, r4, r3
 800d544:	05fc      	lsls	r4, r7, #23
 800d546:	18e4      	adds	r4, r4, r3
 800d548:	e7ac      	b.n	800d4a4 <__ieee754_sqrtf+0x24>
 800d54a:	005b      	lsls	r3, r3, #1
 800d54c:	3201      	adds	r2, #1
 800d54e:	4203      	tst	r3, r0
 800d550:	d0fb      	beq.n	800d54a <__ieee754_sqrtf+0xca>
 800d552:	3a01      	subs	r2, #1
 800d554:	1a89      	subs	r1, r1, r2
 800d556:	e7b8      	b.n	800d4ca <__ieee754_sqrtf+0x4a>
 800d558:	2080      	movs	r0, #128	@ 0x80
 800d55a:	0400      	lsls	r0, r0, #16
 800d55c:	e7f7      	b.n	800d54e <__ieee754_sqrtf+0xce>
 800d55e:	2301      	movs	r3, #1
 800d560:	3401      	adds	r4, #1
 800d562:	439c      	bics	r4, r3
 800d564:	e7ea      	b.n	800d53c <__ieee754_sqrtf+0xbc>
 800d566:	46c0      	nop			@ (mov r8, r8)
 800d568:	200001d8 	.word	0x200001d8
 800d56c:	200001d4 	.word	0x200001d4

0800d570 <_init>:
 800d570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d572:	46c0      	nop			@ (mov r8, r8)
 800d574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d576:	bc08      	pop	{r3}
 800d578:	469e      	mov	lr, r3
 800d57a:	4770      	bx	lr

0800d57c <_fini>:
 800d57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d57e:	46c0      	nop			@ (mov r8, r8)
 800d580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d582:	bc08      	pop	{r3}
 800d584:	469e      	mov	lr, r3
 800d586:	4770      	bx	lr
