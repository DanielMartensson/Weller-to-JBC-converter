/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "tools/tools.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
typedef enum{
	FREE_RUN,
	FEEDBACK_CONTROL,
	COMPUTE_MODEL,
	SAVE_REGISTER_TO_MEMORY
}OPERATION;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define row_a 1
#define column_b 1
#define row_c 1
#define row_ai (row_a + column_b)
#define column_bi column_b
#define row_ci row_c
#define N 5
#define HAS_INTEGRATION_ACTION true
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

COMP_HandleTypeDef hcomp2;

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

UART_HandleTypeDef huart1;
DMA_HandleTypeDef hdma_usart1_rx;

/* USER CODE BEGIN PV */
uint8_t UART_RX_DATA[500];
const uint16_t UART_RX_DATA_SIZE = sizeof(UART_RX_DATA)/sizeof(UART_RX_DATA[0]);
const uint16_t UART_RX_DATA_SIZE_HALF = UART_RX_DATA_SIZE / 2;
uint16_t current_index = 0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_ADC_Init(void);
static void MX_COMP2_Init(void);
static void MX_TIM2_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int32_t UART_read(const char port[], uint8_t* buf, uint16_t count, int32_t byte_timeout_ms) {
	/* Get the end index */
	uint16_t end_index = (UART_RX_DATA_SIZE - hdma_usart1_rx.Instance->CNDTR);

	/* If current index is the same as end index, then no data has been received */
	if(current_index == end_index){
		return 0;
	}

	/* Important delay */
	HAL_Delay(10);

	/* If current index and the count data is less or equal as the total data size buffer */
	if(current_index + count <= UART_RX_DATA_SIZE){
		memcpy(buf, UART_RX_DATA + current_index, count);
		current_index += count;
		return count;
	}

	/* If current index and the count data is more than the total data size buffer */
	if(current_index + count > UART_RX_DATA_SIZE){
		uint16_t count_right = UART_RX_DATA_SIZE - current_index;
		memcpy(buf, UART_RX_DATA + current_index, count_right);
		uint16_t count_left = count - count_right;
		memcpy(buf, UART_RX_DATA, count_left);
		current_index = count_left;
		return count;
	}

	/* This should not occur */
	return 0;
}

int32_t UART_write(const char port[], const uint8_t* buf, uint16_t count, int32_t byte_timeout_ms) {
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, buf, count, byte_timeout_ms);

	const bool wrote = status == HAL_OK;
    if(wrote){
    	return count; /* Assuming that we wrote count bytes */
    }else{
    	return 0;
    }
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_ADC_Init();
  MX_COMP2_Init();
  MX_TIM2_Init();
  MX_USART1_UART_Init();
  MX_TIM1_Init();
  /* USER CODE BEGIN 2 */

  /* Variables and arrays */
  bool first_start = true;
  uint16_t PARAMETERS[37];
  const uint16_t PARAMETERS_SIZE = sizeof(PARAMETERS) / sizeof(PARAMETERS[0]);
  volatile uint32_t ADC_DATA[3];
  const uint16_t ADC_DATA_SIZE = sizeof(ADC_DATA) / sizeof(ADC_DATA[0]);
  uint32_t FLASH_DATA[19];
  const uint16_t FLASH_DATA_SIZE = sizeof(FLASH_DATA) / sizeof(FLASH_DATA[0]);
  uint16_t ANALOG_INPUTS[13];
  const uint16_t ANALOG_INPUTS_SIZE = sizeof(ANALOG_INPUTS) / sizeof(ANALOG_INPUTS[0]);

  /* Start nanoMODBUS with address 1 */
  modbus_set_serial_read(UART_read);
  modbus_set_serial_write(UART_write);
  modbus_set_serial_port(NULL);
  modbus_server_create_RTU(1);

  /* Start UART with DMA */
  HAL_UART_Receive_DMA(&huart1, UART_RX_DATA, UART_RX_DATA_SIZE);

  /* Start PWM */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);

  /* Start timer for ADC */
  HAL_TIM_Base_Start(&htim1);

  /* Start ADC */
  HAL_ADC_Start_DMA(&hadc, (uint32_t*)ADC_DATA, ADC_DATA_SIZE);

  /* Create A matrix */
  float A[row_a * row_a] = { 0 };

  /* Create B matrix */
  float B[row_a * column_b] = { 0 };

  /* Create C matrix */
  float C[row_c * row_a] = { 1 };

  /* Create Ai matrix */
  float Ai[row_ai * row_ai];

  /* Create Bi matrix */
  float Bi[row_ai * column_bi];

  /* Create Ci matrix */
  float Ci[row_ci * row_ai];

  /* Create PHI matrix */
  float PHI[(N * row_ci) * row_ai];

  /* Create GAMMA matrix */
  float GAMMA[(N * row_ci) * (N * column_bi)];

  /* Create vectors */
  float x_qmpc[row_ai];
  float u_qmpc[column_bi];
  float r_qmpc[row_ci];
  float xhat_kf[row_a];

  /* Constants */
  float Umax_qmpc[column_bi] = {20000.0f};
  float S_qmpc[row_ci] = {2.0f};
  float I_qmpc = 0.0f;
  float lambda_qmpc = 0.0f;
  float R_kf[row_c * row_c] = {1.0f};
  float Q_kf[row_a * row_a] = {0.05f};
  float P_kf[row_a * row_a] = {0};

  /* Read parameters from memory */
  Flash_Read_Data(FLASH_DATA, FLASH_DATA_SIZE);
  for(uint8_t i = 0; i < FLASH_DATA_SIZE - 1; i++){
	  PARAMETERS[i + i] = FLASH_DATA[i];
	  PARAMETERS[i + i + 1] = FLASH_DATA[i] >> 16;
  }
  PARAMETERS[PARAMETERS_SIZE - 1] = FLASH_DATA[FLASH_DATA_SIZE - 1];
  modbus_server_set_parameters(PARAMETERS, 0, PARAMETERS_SIZE);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /* Polling */
	  modbus_server_polling();

	  /* Read digital outputs */
	  const bool led_green = HAL_GPIO_ReadPin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
	  const bool leakage_active = HAL_GPIO_ReadPin(LEAKAGE_ACTIVE_GPIO_Port, LEAKAGE_ACTIVE_Pin);

	  /* Set digital outputs */
	  const uint8_t digital_outputs = (led_green << 1) | leakage_active;
	  modbus_server_set_digital_outputs(&digital_outputs, 0, 2);

	  /* Read digital inputs */
	  const bool n_sleep = HAL_GPIO_ReadPin(N_SLEEP_GPIO_Port, N_SLEEP_Pin);

	  /* Set digital inputs */
	  const uint8_t digital_inputs = n_sleep;
	  modbus_server_set_digital_inputs(&digital_inputs, 0, 1);

	  /* Read registers */
	  modbus_server_get_parameters(PARAMETERS, 0, PARAMETERS_SIZE);
	  const uint16_t minSetpointRaw = PARAMETERS[0];
	  const uint16_t maxSetpointRaw = PARAMETERS[1];
	  const uint16_t minSetpointReal_LSB = PARAMETERS[2];
	  const uint16_t minSetpointReal_MSB = PARAMETERS[3];
	  const uint16_t maxSetpointReal_LSB = PARAMETERS[4];
	  const uint16_t maxSetpointReal_MSB = PARAMETERS[5];
	  const uint16_t minTemperatureRaw = PARAMETERS[6];
	  const uint16_t maxTemperatureRaw = PARAMETERS[7];
	  const uint16_t minTemperatureReal_LSB = PARAMETERS[8];
	  const uint16_t minTemperatureReal_MSB = PARAMETERS[9];
	  const uint16_t maxTemperatureReal_LSB = PARAMETERS[10];
	  const uint16_t maxTemperatureReal_MSB = PARAMETERS[11];
	  const uint16_t minCurrentRaw = PARAMETERS[12];
	  const uint16_t maxCurrentRaw = PARAMETERS[13];
	  const uint16_t minCurrentReal_LSB = PARAMETERS[14];
	  const uint16_t minCurrentReal_MSB = PARAMETERS[15];
	  const uint16_t maxCurrentReal_LSB = PARAMETERS[16];
	  const uint16_t maxCurrentReal_MSB = PARAMETERS[17];
	  const uint16_t parameterA_LSB = PARAMETERS[18];
	  const uint16_t parameterA_MSB = PARAMETERS[19];
	  const uint16_t parameterB_LSB = PARAMETERS[20];
	  const uint16_t parameterB_MSB = PARAMETERS[21];
	  const uint16_t Umax_qmpc_LSB = PARAMETERS[22];
	  const uint16_t Umax_qmpc_MSB = PARAMETERS[23];
	  const uint16_t S_qmpc_LSB = PARAMETERS[24];
	  const uint16_t S_qmpc_MSB = PARAMETERS[25];
	  const uint16_t I_qmpc_LSB = PARAMETERS[26];
	  const uint16_t I_qmpc_MSB = PARAMETERS[27];
	  const uint16_t lambda_qmpc_LSB = PARAMETERS[28];
	  const uint16_t lambda_qmpc_MSB = PARAMETERS[29];
	  const uint16_t R_kf_LSB = PARAMETERS[30];
	  const uint16_t R_kf_MSB = PARAMETERS[31];
	  const uint16_t Q_kf_LSB = PARAMETERS[32];
	  const uint16_t Q_kf_MSB = PARAMETERS[33];
	  const uint16_t P_kf_LSB = PARAMETERS[34];
	  const uint16_t P_kf_MSB = PARAMETERS[35];
	  uint16_t operation = PARAMETERS[36];

	  /* Init */
	  if(first_start){
		  /* Fill new values for MPC */
		  A[0] = uint16_to_float(parameterA_MSB, parameterA_LSB);
		  B[0] = uint16_to_float(parameterB_MSB, parameterB_LSB);
		  Umax_qmpc[0] = uint16_to_float(Umax_qmpc_MSB, Umax_qmpc_LSB);
		  S_qmpc[0] = uint16_to_float(S_qmpc_MSB, S_qmpc_LSB);
		  I_qmpc = uint16_to_float(I_qmpc_MSB, I_qmpc_LSB);
		  lambda_qmpc = uint16_to_float(lambda_qmpc_MSB, lambda_qmpc_LSB);

		  /* Recreate the MPC model */
		  ssint(A, B, C, Ai, Bi, Ci, row_a, column_b, row_c);
		  obsv(PHI, Ai, Ci, row_ai, row_ci, N);
		  cab(GAMMA, PHI, Bi, Ci, row_ai, row_ci, column_bi, N);

		  /* Fill new values for KF */
		  R_kf[0] = uint16_to_float(R_kf_MSB, R_kf_LSB);
		  Q_kf[0] = uint16_to_float(Q_kf_MSB, Q_kf_LSB);
		  P_kf[0] = uint16_to_float(P_kf_MSB, P_kf_LSB);

		  /* Close */
		  first_start = false;
	  }

	  /* Read ADC inputs */
	  const uint16_t temperature_raw = ADC_DATA[0];
	  const uint16_t setpoint_raw = ADC_DATA[1];
	  const uint16_t current_raw = ADC_DATA[2];

	  /* Convert to real value */
	  const float temperature = calibrate_value(temperature_raw, minTemperatureRaw, maxTemperatureRaw,
			  	  	  	  	  	  	  	  	  	minTemperatureReal_LSB, minTemperatureReal_MSB,
												maxTemperatureReal_LSB, maxTemperatureReal_MSB);
	  const float current = calibrate_value(current_raw, minCurrentRaw, maxCurrentRaw,
			  	  	  	  	  	  	  	  	  	minCurrentReal_LSB, minCurrentReal_MSB,
												maxCurrentReal_LSB, maxCurrentReal_MSB);
	  const float setpoint = calibrate_value(setpoint_raw, minSetpointRaw, maxSetpointRaw,
			  	  	  	  	  	  	  	  	  	minSetpointReal_LSB, minSetpointReal_MSB,
												maxSetpointReal_LSB, maxSetpointReal_MSB);

	  /* Do operation */
	  switch(operation){
	  case FREE_RUN:
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, setpoint);
		  break;
	  case FEEDBACK_CONTROL:
		  /* Kalman filter state estimation */
		  kf(A, B, C, u_qmpc, &temperature, Q_kf, R_kf, xhat_kf, P_kf, row_a, row_c, column_b);

		  /* Quadratic Model Predictive Control */
		  r_qmpc[0] = setpoint;
		  qmpc(GAMMA, PHI, x_qmpc, u_qmpc, Umax_qmpc, S_qmpc, r_qmpc, row_ai, row_ci, column_bi, N, lambda_qmpc, HAS_INTEGRATION_ACTION, I_qmpc);

		  /* If the output value was nan due to bad settings */
		  if(isnanf(u_qmpc[0])){
			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
			  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
		  }else{
			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, (uint16_t)u_qmpc[0]);
		  }

		  /* If the temperature is within +-10 accuracy. This is the acceptability of the IPC J-STD-001 standard */
		  if(fabsf(setpoint - temperature) <= 10){
			  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
		  }else{
			  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
		  }
		  break;
	  case COMPUTE_MODEL:
		  first_start = true;
		  break;
	  case SAVE_REGISTER_TO_MEMORY:
		  operation = FEEDBACK_CONTROL;
		  PARAMETERS[PARAMETERS_SIZE-1] = operation;
		  modbus_server_set_parameters(PARAMETERS, 0, PARAMETERS_SIZE);
		  for(uint8_t i = 0; i < FLASH_DATA_SIZE - 1; i++){
			  FLASH_DATA[i] = (PARAMETERS[i + i + 1] << 16)| PARAMETERS[i + i];
		  }
		  FLASH_DATA[FLASH_DATA_SIZE - 1] = operation;
		  if(Flash_Write_Data(FLASH_DATA, FLASH_DATA_SIZE) == HAL_ERROR){
			  while(true){
				  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
				  HAL_Delay(500);
			  }
		  }
		  break;
	  default:
		  break;
	  }

	  /* Set analog inputs */
	  ANALOG_INPUTS[0] = temperature_raw;
	  ANALOG_INPUTS[1] = setpoint_raw;
	  ANALOG_INPUTS[2] = current_raw;
	  float_to_uint16(temperature, &ANALOG_INPUTS[4], &ANALOG_INPUTS[3]);
	  float_to_uint16(setpoint, &ANALOG_INPUTS[6], &ANALOG_INPUTS[5]);
	  float_to_uint16(current, &ANALOG_INPUTS[8], &ANALOG_INPUTS[7]);
	  float_to_uint16(xhat_kf[0], &ANALOG_INPUTS[10], &ANALOG_INPUTS[9]);
	  modbus_server_set_analog_inputs(ANALOG_INPUTS, 0, ANALOG_INPUTS_SIZE);


  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc.Init.LowPowerAutoWait = DISABLE;
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
  hadc.Init.ContinuousConvMode = DISABLE;
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc.Init.DMAContinuousRequests = ENABLE;
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}

/**
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{

  /* USER CODE BEGIN COMP2_Init 0 */

  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
  hcomp2.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1;
  hcomp2.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
  hcomp2.Init.Output = COMP_OUTPUT_NONE;
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
  hcomp2.Init.Mode = COMP_MODE_HIGHSPEED;
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 15;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 49999;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 10;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 20000;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : N_SLEEP_Pin */
  GPIO_InitStruct.Pin = N_SLEEP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(N_SLEEP_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
